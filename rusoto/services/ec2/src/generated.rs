// =================================================================
//
//                           * WARNING *
//
//                    This file is generated!
//
//  Changes made to this file will be overwritten. If changes are
//  required to the generated code, the service_crategen project
//  must be updated to generate the changes.
//
// =================================================================

use std::error::Error;
use std::fmt;

use rusoto_core::credential::ProvideAwsCredentials;
use rusoto_core::region;
#[allow(warnings)]
use rusoto_core::request::{BufferedHttpResponse, DispatchSignedRequest};
use rusoto_core::{Client, RusotoError, RusotoFuture};

use futures::FutureExt;
use rusoto_core::param::{Params, ServiceParams};
use rusoto_core::proto::xml::error::*;
use rusoto_core::proto::xml::util::{
    characters, deserialize_elements, end_element, find_start_element, peek_at_name, skip_tree,
    start_element,
};
use rusoto_core::proto::xml::util::{Next, Peek, XmlParseError, XmlResponse};
use rusoto_core::signature::SignedRequest;
use serde_urlencoded;
use std::str::FromStr;
use xml::reader::ParserConfig;
use xml::EventReader;

/// <p>Contains the parameters for accepting the quote.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AcceptReservedInstancesExchangeQuoteRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The IDs of the Convertible Reserved Instances to exchange for another Convertible Reserved Instance of the same or higher value.</p>
    pub reserved_instance_ids: Vec<String>,
    /// <p>The configuration of the target Convertible Reserved Instance to exchange for your current Convertible Reserved Instances.</p>
    pub target_configurations: Option<Vec<TargetConfigurationRequest>>,
}

/// Serialize `AcceptReservedInstancesExchangeQuoteRequest` contents to a `SignedRequest`.
struct AcceptReservedInstancesExchangeQuoteRequestSerializer;
impl AcceptReservedInstancesExchangeQuoteRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &AcceptReservedInstancesExchangeQuoteRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        ReservedInstanceIdSetSerializer::serialize(
            params,
            &format!("{}{}", prefix, "ReservedInstanceId"),
            &obj.reserved_instance_ids,
        );
        if let Some(ref field_value) = obj.target_configurations {
            TargetConfigurationRequestSetSerializer::serialize(
                params,
                &format!("{}{}", prefix, "TargetConfiguration"),
                field_value,
            );
        }
    }
}

/// <p>The result of the exchange and whether it was <code>successful</code>.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AcceptReservedInstancesExchangeQuoteResult {
    /// <p>The ID of the successful exchange.</p>
    pub exchange_id: Option<String>,
}

struct AcceptReservedInstancesExchangeQuoteResultDeserializer;
impl AcceptReservedInstancesExchangeQuoteResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AcceptReservedInstancesExchangeQuoteResult, XmlParseError> {
        deserialize_elements::<_, AcceptReservedInstancesExchangeQuoteResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "exchangeId" => {
                        obj.exchange_id =
                            Some(StringDeserializer::deserialize("exchangeId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AcceptTransitGatewayVpcAttachmentRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the attachment.</p>
    pub transit_gateway_attachment_id: String,
}

/// Serialize `AcceptTransitGatewayVpcAttachmentRequest` contents to a `SignedRequest`.
struct AcceptTransitGatewayVpcAttachmentRequestSerializer;
impl AcceptTransitGatewayVpcAttachmentRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AcceptTransitGatewayVpcAttachmentRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TransitGatewayAttachmentId"),
            &obj.transit_gateway_attachment_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct AcceptTransitGatewayVpcAttachmentResult {
    /// <p>The VPC attachment.</p>
    pub transit_gateway_vpc_attachment: Option<TransitGatewayVpcAttachment>,
}

struct AcceptTransitGatewayVpcAttachmentResultDeserializer;
impl AcceptTransitGatewayVpcAttachmentResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AcceptTransitGatewayVpcAttachmentResult, XmlParseError> {
        deserialize_elements::<_, AcceptTransitGatewayVpcAttachmentResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "transitGatewayVpcAttachment" => {
                        obj.transit_gateway_vpc_attachment =
                            Some(TransitGatewayVpcAttachmentDeserializer::deserialize(
                                "transitGatewayVpcAttachment",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AcceptVpcEndpointConnectionsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the endpoint service.</p>
    pub service_id: String,
    /// <p>The IDs of one or more interface VPC endpoints.</p>
    pub vpc_endpoint_ids: Vec<String>,
}

/// Serialize `AcceptVpcEndpointConnectionsRequest` contents to a `SignedRequest`.
struct AcceptVpcEndpointConnectionsRequestSerializer;
impl AcceptVpcEndpointConnectionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AcceptVpcEndpointConnectionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "ServiceId"), &obj.service_id);
        ValueStringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "VpcEndpointId"),
            &obj.vpc_endpoint_ids,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct AcceptVpcEndpointConnectionsResult {
    /// <p>Information about the interface endpoints that were not accepted, if applicable.</p>
    pub unsuccessful: Option<Vec<UnsuccessfulItem>>,
}

struct AcceptVpcEndpointConnectionsResultDeserializer;
impl AcceptVpcEndpointConnectionsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AcceptVpcEndpointConnectionsResult, XmlParseError> {
        deserialize_elements::<_, AcceptVpcEndpointConnectionsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "unsuccessful" => {
                        obj.unsuccessful.get_or_insert(vec![]).extend(
                            UnsuccessfulItemSetDeserializer::deserialize("unsuccessful", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AcceptVpcPeeringConnectionRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the VPC peering connection. You must specify this parameter in the request.</p>
    pub vpc_peering_connection_id: Option<String>,
}

/// Serialize `AcceptVpcPeeringConnectionRequest` contents to a `SignedRequest`.
struct AcceptVpcPeeringConnectionRequestSerializer;
impl AcceptVpcPeeringConnectionRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AcceptVpcPeeringConnectionRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.vpc_peering_connection_id {
            params.put(
                &format!("{}{}", prefix, "VpcPeeringConnectionId"),
                &field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct AcceptVpcPeeringConnectionResult {
    /// <p>Information about the VPC peering connection.</p>
    pub vpc_peering_connection: Option<VpcPeeringConnection>,
}

struct AcceptVpcPeeringConnectionResultDeserializer;
impl AcceptVpcPeeringConnectionResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AcceptVpcPeeringConnectionResult, XmlParseError> {
        deserialize_elements::<_, AcceptVpcPeeringConnectionResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "vpcPeeringConnection" => {
                        obj.vpc_peering_connection =
                            Some(VpcPeeringConnectionDeserializer::deserialize(
                                "vpcPeeringConnection",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes an account attribute.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AccountAttribute {
    /// <p>The name of the account attribute.</p>
    pub attribute_name: Option<String>,
    /// <p>The values for the account attribute.</p>
    pub attribute_values: Option<Vec<AccountAttributeValue>>,
}

struct AccountAttributeDeserializer;
impl AccountAttributeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AccountAttribute, XmlParseError> {
        deserialize_elements::<_, AccountAttribute, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "attributeName" => {
                    obj.attribute_name =
                        Some(StringDeserializer::deserialize("attributeName", stack)?);
                }
                "attributeValueSet" => {
                    obj.attribute_values.get_or_insert(vec![]).extend(
                        AccountAttributeValueListDeserializer::deserialize(
                            "attributeValueSet",
                            stack,
                        )?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct AccountAttributeListDeserializer;
impl AccountAttributeListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<AccountAttribute>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(AccountAttributeDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `AccountAttributeNameStringList` contents to a `SignedRequest`.
struct AccountAttributeNameStringListSerializer;
impl AccountAttributeNameStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Describes a value of an account attribute.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AccountAttributeValue {
    /// <p>The value of the attribute.</p>
    pub attribute_value: Option<String>,
}

struct AccountAttributeValueDeserializer;
impl AccountAttributeValueDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AccountAttributeValue, XmlParseError> {
        deserialize_elements::<_, AccountAttributeValue, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "attributeValue" => {
                    obj.attribute_value =
                        Some(StringDeserializer::deserialize("attributeValue", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct AccountAttributeValueListDeserializer;
impl AccountAttributeValueListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<AccountAttributeValue>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(AccountAttributeValueDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a running instance in a Spot Fleet.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ActiveInstance {
    /// <p>The health status of the instance. If the status of either the instance status check or the system status check is <code>impaired</code>, the health status of the instance is <code>unhealthy</code>. Otherwise, the health status is <code>healthy</code>.</p>
    pub instance_health: Option<String>,
    /// <p>The ID of the instance.</p>
    pub instance_id: Option<String>,
    /// <p>The instance type.</p>
    pub instance_type: Option<String>,
    /// <p>The ID of the Spot Instance request.</p>
    pub spot_instance_request_id: Option<String>,
}

struct ActiveInstanceDeserializer;
impl ActiveInstanceDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ActiveInstance, XmlParseError> {
        deserialize_elements::<_, ActiveInstance, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "instanceHealth" => {
                    obj.instance_health = Some(InstanceHealthStatusDeserializer::deserialize(
                        "instanceHealth",
                        stack,
                    )?);
                }
                "instanceId" => {
                    obj.instance_id = Some(StringDeserializer::deserialize("instanceId", stack)?);
                }
                "instanceType" => {
                    obj.instance_type =
                        Some(StringDeserializer::deserialize("instanceType", stack)?);
                }
                "spotInstanceRequestId" => {
                    obj.spot_instance_request_id = Some(StringDeserializer::deserialize(
                        "spotInstanceRequestId",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct ActiveInstanceSetDeserializer;
impl ActiveInstanceSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ActiveInstance>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ActiveInstanceDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct ActivityStatusDeserializer;
impl ActivityStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes an Elastic IP address.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct Address {
    /// <p>The ID representing the allocation of the address for use with EC2-VPC.</p>
    pub allocation_id: Option<String>,
    /// <p>The ID representing the association of the address with an instance in a VPC.</p>
    pub association_id: Option<String>,
    /// <p>Indicates whether this Elastic IP address is for use with instances in EC2-Classic (<code>standard</code>) or instances in a VPC (<code>vpc</code>).</p>
    pub domain: Option<String>,
    /// <p>The ID of the instance that the address is associated with (if any).</p>
    pub instance_id: Option<String>,
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: Option<String>,
    /// <p>The ID of the AWS account that owns the network interface.</p>
    pub network_interface_owner_id: Option<String>,
    /// <p>The private IP address associated with the Elastic IP address.</p>
    pub private_ip_address: Option<String>,
    /// <p>The Elastic IP address.</p>
    pub public_ip: Option<String>,
    /// <p>The ID of an address pool.</p>
    pub public_ipv_4_pool: Option<String>,
    /// <p>Any tags assigned to the Elastic IP address.</p>
    pub tags: Option<Vec<Tag>>,
}

struct AddressDeserializer;
impl AddressDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Address, XmlParseError> {
        deserialize_elements::<_, Address, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "allocationId" => {
                    obj.allocation_id =
                        Some(StringDeserializer::deserialize("allocationId", stack)?);
                }
                "associationId" => {
                    obj.association_id =
                        Some(StringDeserializer::deserialize("associationId", stack)?);
                }
                "domain" => {
                    obj.domain = Some(DomainTypeDeserializer::deserialize("domain", stack)?);
                }
                "instanceId" => {
                    obj.instance_id = Some(StringDeserializer::deserialize("instanceId", stack)?);
                }
                "networkInterfaceId" => {
                    obj.network_interface_id = Some(StringDeserializer::deserialize(
                        "networkInterfaceId",
                        stack,
                    )?);
                }
                "networkInterfaceOwnerId" => {
                    obj.network_interface_owner_id = Some(StringDeserializer::deserialize(
                        "networkInterfaceOwnerId",
                        stack,
                    )?);
                }
                "privateIpAddress" => {
                    obj.private_ip_address =
                        Some(StringDeserializer::deserialize("privateIpAddress", stack)?);
                }
                "publicIp" => {
                    obj.public_ip = Some(StringDeserializer::deserialize("publicIp", stack)?);
                }
                "publicIpv4Pool" => {
                    obj.public_ipv_4_pool =
                        Some(StringDeserializer::deserialize("publicIpv4Pool", stack)?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct AddressListDeserializer;
impl AddressListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<Address>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(AddressDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AdvertiseByoipCidrRequest {
    /// <p>The IPv4 address range, in CIDR notation. This must be the exact range that you provisioned. You can't advertise only a portion of the provisioned range.</p>
    pub cidr: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `AdvertiseByoipCidrRequest` contents to a `SignedRequest`.
struct AdvertiseByoipCidrRequestSerializer;
impl AdvertiseByoipCidrRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AdvertiseByoipCidrRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Cidr"), &obj.cidr);
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct AdvertiseByoipCidrResult {
    /// <p>Information about the address range.</p>
    pub byoip_cidr: Option<ByoipCidr>,
}

struct AdvertiseByoipCidrResultDeserializer;
impl AdvertiseByoipCidrResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AdvertiseByoipCidrResult, XmlParseError> {
        deserialize_elements::<_, AdvertiseByoipCidrResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "byoipCidr" => {
                        obj.byoip_cidr =
                            Some(ByoipCidrDeserializer::deserialize("byoipCidr", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AllocateAddressRequest {
    /// <p>[EC2-VPC] The Elastic IP address to recover or an IPv4 address from an address pool.</p>
    pub address: Option<String>,
    /// <p>Set to <code>vpc</code> to allocate the address for use with instances in a VPC.</p> <p>Default: The address is for use with instances in EC2-Classic.</p>
    pub domain: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool. To specify a specific address from the address pool, use the <code>Address</code> parameter instead.</p>
    pub public_ipv_4_pool: Option<String>,
}

/// Serialize `AllocateAddressRequest` contents to a `SignedRequest`.
struct AllocateAddressRequestSerializer;
impl AllocateAddressRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AllocateAddressRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.address {
            params.put(&format!("{}{}", prefix, "Address"), &field_value);
        }
        if let Some(ref field_value) = obj.domain {
            params.put(&format!("{}{}", prefix, "Domain"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.public_ipv_4_pool {
            params.put(&format!("{}{}", prefix, "PublicIpv4Pool"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct AllocateAddressResult {
    /// <p>[EC2-VPC] The ID that AWS assigns to represent the allocation of the Elastic IP address for use with instances in a VPC.</p>
    pub allocation_id: Option<String>,
    /// <p>Indicates whether this Elastic IP address is for use with instances in EC2-Classic (<code>standard</code>) or instances in a VPC (<code>vpc</code>).</p>
    pub domain: Option<String>,
    /// <p>The Elastic IP address.</p>
    pub public_ip: Option<String>,
    /// <p>The ID of an address pool.</p>
    pub public_ipv_4_pool: Option<String>,
}

struct AllocateAddressResultDeserializer;
impl AllocateAddressResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AllocateAddressResult, XmlParseError> {
        deserialize_elements::<_, AllocateAddressResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "allocationId" => {
                    obj.allocation_id =
                        Some(StringDeserializer::deserialize("allocationId", stack)?);
                }
                "domain" => {
                    obj.domain = Some(DomainTypeDeserializer::deserialize("domain", stack)?);
                }
                "publicIp" => {
                    obj.public_ip = Some(StringDeserializer::deserialize("publicIp", stack)?);
                }
                "publicIpv4Pool" => {
                    obj.public_ipv_4_pool =
                        Some(StringDeserializer::deserialize("publicIpv4Pool", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AllocateHostsRequest {
    /// <p>Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it only accepts Host tenancy instance launches that specify its unique host ID. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/how-dedicated-hosts-work.html#dedicated-hosts-understanding"> Understanding Instance Placement and Host Affinity</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>Default: <code>on</code> </p>
    pub auto_placement: Option<String>,
    /// <p>The Availability Zone in which to allocate the Dedicated Host.</p>
    pub availability_zone: String,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p>Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-recovery.html"> Host Recovery</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Default: <code>off</code> </p>
    pub host_recovery: Option<String>,
    /// <p>Specifies the instance type for which to configure your Dedicated Hosts. When you specify the instance type, that is the only instance type that you can launch onto that host.</p>
    pub instance_type: String,
    /// <p>The number of Dedicated Hosts to allocate to your account with these parameters.</p>
    pub quantity: i64,
    /// <p>The tags to apply to the Dedicated Host during creation.</p>
    pub tag_specifications: Option<Vec<TagSpecification>>,
}

/// Serialize `AllocateHostsRequest` contents to a `SignedRequest`.
struct AllocateHostsRequestSerializer;
impl AllocateHostsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AllocateHostsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.auto_placement {
            params.put(&format!("{}{}", prefix, "AutoPlacement"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "AvailabilityZone"),
            &obj.availability_zone,
        );
        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        if let Some(ref field_value) = obj.host_recovery {
            params.put(&format!("{}{}", prefix, "HostRecovery"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "InstanceType"), &obj.instance_type);
        params.put(&format!("{}{}", prefix, "Quantity"), &obj.quantity);
        if let Some(ref field_value) = obj.tag_specifications {
            TagSpecificationListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "TagSpecification"),
                field_value,
            );
        }
    }
}

/// <p>Contains the output of AllocateHosts.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AllocateHostsResult {
    /// <p>The ID of the allocated Dedicated Host. This is used to launch an instance onto a specific host.</p>
    pub host_ids: Option<Vec<String>>,
}

struct AllocateHostsResultDeserializer;
impl AllocateHostsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AllocateHostsResult, XmlParseError> {
        deserialize_elements::<_, AllocateHostsResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "hostIdSet" => {
                    obj.host_ids.get_or_insert(vec![]).extend(
                        ResponseHostIdListDeserializer::deserialize("hostIdSet", stack)?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `AllocationIdList` contents to a `SignedRequest`.
struct AllocationIdListSerializer;
impl AllocationIdListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct AllocationStateDeserializer;
impl AllocationStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct AllocationStrategyDeserializer;
impl AllocationStrategyDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a principal.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AllowedPrincipal {
    /// <p>The Amazon Resource Name (ARN) of the principal.</p>
    pub principal: Option<String>,
    /// <p>The type of principal.</p>
    pub principal_type: Option<String>,
}

struct AllowedPrincipalDeserializer;
impl AllowedPrincipalDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AllowedPrincipal, XmlParseError> {
        deserialize_elements::<_, AllowedPrincipal, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "principal" => {
                    obj.principal = Some(StringDeserializer::deserialize("principal", stack)?);
                }
                "principalType" => {
                    obj.principal_type = Some(PrincipalTypeDeserializer::deserialize(
                        "principalType",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct AllowedPrincipalSetDeserializer;
impl AllowedPrincipalSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<AllowedPrincipal>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(AllowedPrincipalDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ApplySecurityGroupsToClientVpnTargetNetworkRequest {
    /// <p>The ID of the Client VPN endpoint.</p>
    pub client_vpn_endpoint_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The IDs of the security groups to apply to the associated target network. Up to 5 security groups can be applied to an associated target network.</p>
    pub security_group_ids: Vec<String>,
    /// <p>The ID of the VPC in which the associated target network is located.</p>
    pub vpc_id: String,
}

/// Serialize `ApplySecurityGroupsToClientVpnTargetNetworkRequest` contents to a `SignedRequest`.
struct ApplySecurityGroupsToClientVpnTargetNetworkRequestSerializer;
impl ApplySecurityGroupsToClientVpnTargetNetworkRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &ApplySecurityGroupsToClientVpnTargetNetworkRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "ClientVpnEndpointId"),
            &obj.client_vpn_endpoint_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        ClientVpnSecurityGroupIdSetSerializer::serialize(
            params,
            &format!("{}{}", prefix, "SecurityGroupId"),
            &obj.security_group_ids,
        );
        params.put(&format!("{}{}", prefix, "VpcId"), &obj.vpc_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ApplySecurityGroupsToClientVpnTargetNetworkResult {
    /// <p>The IDs of the applied security groups.</p>
    pub security_group_ids: Option<Vec<String>>,
}

struct ApplySecurityGroupsToClientVpnTargetNetworkResultDeserializer;
impl ApplySecurityGroupsToClientVpnTargetNetworkResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ApplySecurityGroupsToClientVpnTargetNetworkResult, XmlParseError> {
        deserialize_elements::<_, ApplySecurityGroupsToClientVpnTargetNetworkResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "securityGroupIds" => {
                        obj.security_group_ids.get_or_insert(vec![]).extend(
                            ClientVpnSecurityGroupIdSetDeserializer::deserialize(
                                "securityGroupIds",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct ArchitectureValuesDeserializer;
impl ArchitectureValuesDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AssignIpv6AddressesRequest {
    /// <p>The number of IPv6 addresses to assign to the network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses.</p>
    pub ipv_6_address_count: Option<i64>,
    /// <p>One or more specific IPv6 addresses to be assigned to the network interface. You can't use this option if you're specifying a number of IPv6 addresses.</p>
    pub ipv_6_addresses: Option<Vec<String>>,
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: String,
}

/// Serialize `AssignIpv6AddressesRequest` contents to a `SignedRequest`.
struct AssignIpv6AddressesRequestSerializer;
impl AssignIpv6AddressesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AssignIpv6AddressesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.ipv_6_address_count {
            params.put(&format!("{}{}", prefix, "Ipv6AddressCount"), &field_value);
        }
        if let Some(ref field_value) = obj.ipv_6_addresses {
            Ipv6AddressListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Ipv6Addresses"),
                field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "NetworkInterfaceId"),
            &obj.network_interface_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct AssignIpv6AddressesResult {
    /// <p>The IPv6 addresses assigned to the network interface.</p>
    pub assigned_ipv_6_addresses: Option<Vec<String>>,
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: Option<String>,
}

struct AssignIpv6AddressesResultDeserializer;
impl AssignIpv6AddressesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AssignIpv6AddressesResult, XmlParseError> {
        deserialize_elements::<_, AssignIpv6AddressesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "assignedIpv6Addresses" => {
                        obj.assigned_ipv_6_addresses.get_or_insert(vec![]).extend(
                            Ipv6AddressListDeserializer::deserialize(
                                "assignedIpv6Addresses",
                                stack,
                            )?,
                        );
                    }
                    "networkInterfaceId" => {
                        obj.network_interface_id = Some(StringDeserializer::deserialize(
                            "networkInterfaceId",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for AssignPrivateIpAddresses.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AssignPrivateIpAddressesRequest {
    /// <p>Indicates whether to allow an IP address that is already assigned to another network interface or instance to be reassigned to the specified network interface.</p>
    pub allow_reassignment: Option<bool>,
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: String,
    /// <p>One or more IP addresses to be assigned as a secondary private IP address to the network interface. You can't specify this parameter when also specifying a number of secondary IP addresses.</p> <p>If you don't specify an IP address, Amazon EC2 automatically selects an IP address within the subnet range.</p>
    pub private_ip_addresses: Option<Vec<String>>,
    /// <p>The number of secondary IP addresses to assign to the network interface. You can't specify this parameter when also specifying private IP addresses.</p>
    pub secondary_private_ip_address_count: Option<i64>,
}

/// Serialize `AssignPrivateIpAddressesRequest` contents to a `SignedRequest`.
struct AssignPrivateIpAddressesRequestSerializer;
impl AssignPrivateIpAddressesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AssignPrivateIpAddressesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.allow_reassignment {
            params.put(&format!("{}{}", prefix, "AllowReassignment"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "NetworkInterfaceId"),
            &obj.network_interface_id,
        );
        if let Some(ref field_value) = obj.private_ip_addresses {
            PrivateIpAddressStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "PrivateIpAddress"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.secondary_private_ip_address_count {
            params.put(
                &format!("{}{}", prefix, "SecondaryPrivateIpAddressCount"),
                &field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct AssociateAddressRequest {
    /// <p>[EC2-VPC] The allocation ID. This is required for EC2-VPC.</p>
    pub allocation_id: Option<String>,
    /// <p>[EC2-VPC] For a VPC in an EC2-Classic account, specify true to allow an Elastic IP address that is already associated with an instance or network interface to be reassociated with the specified instance or network interface. Otherwise, the operation fails. In a VPC in an EC2-VPC-only account, reassociation is automatic, therefore you can specify false to ensure the operation fails if the Elastic IP address is already associated with another resource.</p>
    pub allow_reassociation: Option<bool>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the instance. This is required for EC2-Classic. For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both. The operation fails if you specify an instance ID unless exactly one network interface is attached.</p>
    pub instance_id: Option<String>,
    /// <p>[EC2-VPC] The ID of the network interface. If the instance has more than one network interface, you must specify a network interface ID.</p> <p>For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both. </p>
    pub network_interface_id: Option<String>,
    /// <p>[EC2-VPC] The primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.</p>
    pub private_ip_address: Option<String>,
    /// <p>The Elastic IP address to associate with the instance. This is required for EC2-Classic.</p>
    pub public_ip: Option<String>,
}

/// Serialize `AssociateAddressRequest` contents to a `SignedRequest`.
struct AssociateAddressRequestSerializer;
impl AssociateAddressRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AssociateAddressRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.allocation_id {
            params.put(&format!("{}{}", prefix, "AllocationId"), &field_value);
        }
        if let Some(ref field_value) = obj.allow_reassociation {
            params.put(&format!("{}{}", prefix, "AllowReassociation"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.instance_id {
            params.put(&format!("{}{}", prefix, "InstanceId"), &field_value);
        }
        if let Some(ref field_value) = obj.network_interface_id {
            params.put(&format!("{}{}", prefix, "NetworkInterfaceId"), &field_value);
        }
        if let Some(ref field_value) = obj.private_ip_address {
            params.put(&format!("{}{}", prefix, "PrivateIpAddress"), &field_value);
        }
        if let Some(ref field_value) = obj.public_ip {
            params.put(&format!("{}{}", prefix, "PublicIp"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct AssociateAddressResult {
    /// <p>[EC2-VPC] The ID that represents the association of the Elastic IP address with an instance.</p>
    pub association_id: Option<String>,
}

struct AssociateAddressResultDeserializer;
impl AssociateAddressResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AssociateAddressResult, XmlParseError> {
        deserialize_elements::<_, AssociateAddressResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "associationId" => {
                    obj.association_id =
                        Some(StringDeserializer::deserialize("associationId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AssociateClientVpnTargetNetworkRequest {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p>The ID of the Client VPN endpoint.</p>
    pub client_vpn_endpoint_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the subnet to associate with the Client VPN endpoint.</p>
    pub subnet_id: String,
}

/// Serialize `AssociateClientVpnTargetNetworkRequest` contents to a `SignedRequest`.
struct AssociateClientVpnTargetNetworkRequestSerializer;
impl AssociateClientVpnTargetNetworkRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AssociateClientVpnTargetNetworkRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "ClientVpnEndpointId"),
            &obj.client_vpn_endpoint_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "SubnetId"), &obj.subnet_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct AssociateClientVpnTargetNetworkResult {
    /// <p>The unique ID of the target network association.</p>
    pub association_id: Option<String>,
    /// <p>The current state of the target network association.</p>
    pub status: Option<AssociationStatus>,
}

struct AssociateClientVpnTargetNetworkResultDeserializer;
impl AssociateClientVpnTargetNetworkResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AssociateClientVpnTargetNetworkResult, XmlParseError> {
        deserialize_elements::<_, AssociateClientVpnTargetNetworkResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "associationId" => {
                        obj.association_id =
                            Some(StringDeserializer::deserialize("associationId", stack)?);
                    }
                    "status" => {
                        obj.status =
                            Some(AssociationStatusDeserializer::deserialize("status", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AssociateDhcpOptionsRequest {
    /// <p>The ID of the DHCP options set, or <code>default</code> to associate no DHCP options with the VPC.</p>
    pub dhcp_options_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: String,
}

/// Serialize `AssociateDhcpOptionsRequest` contents to a `SignedRequest`.
struct AssociateDhcpOptionsRequestSerializer;
impl AssociateDhcpOptionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AssociateDhcpOptionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DhcpOptionsId"),
            &obj.dhcp_options_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "VpcId"), &obj.vpc_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct AssociateIamInstanceProfileRequest {
    /// <p>The IAM instance profile.</p>
    pub iam_instance_profile: IamInstanceProfileSpecification,
    /// <p>The ID of the instance.</p>
    pub instance_id: String,
}

/// Serialize `AssociateIamInstanceProfileRequest` contents to a `SignedRequest`.
struct AssociateIamInstanceProfileRequestSerializer;
impl AssociateIamInstanceProfileRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AssociateIamInstanceProfileRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        IamInstanceProfileSpecificationSerializer::serialize(
            params,
            &format!("{}{}", prefix, "IamInstanceProfile"),
            &obj.iam_instance_profile,
        );
        params.put(&format!("{}{}", prefix, "InstanceId"), &obj.instance_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct AssociateIamInstanceProfileResult {
    /// <p>Information about the IAM instance profile association.</p>
    pub iam_instance_profile_association: Option<IamInstanceProfileAssociation>,
}

struct AssociateIamInstanceProfileResultDeserializer;
impl AssociateIamInstanceProfileResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AssociateIamInstanceProfileResult, XmlParseError> {
        deserialize_elements::<_, AssociateIamInstanceProfileResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "iamInstanceProfileAssociation" => {
                        obj.iam_instance_profile_association =
                            Some(IamInstanceProfileAssociationDeserializer::deserialize(
                                "iamInstanceProfileAssociation",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AssociateRouteTableRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the route table.</p>
    pub route_table_id: String,
    /// <p>The ID of the subnet.</p>
    pub subnet_id: String,
}

/// Serialize `AssociateRouteTableRequest` contents to a `SignedRequest`.
struct AssociateRouteTableRequestSerializer;
impl AssociateRouteTableRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AssociateRouteTableRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "RouteTableId"),
            &obj.route_table_id,
        );
        params.put(&format!("{}{}", prefix, "SubnetId"), &obj.subnet_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct AssociateRouteTableResult {
    /// <p>The route table association ID. This ID is required for disassociating the route table.</p>
    pub association_id: Option<String>,
}

struct AssociateRouteTableResultDeserializer;
impl AssociateRouteTableResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AssociateRouteTableResult, XmlParseError> {
        deserialize_elements::<_, AssociateRouteTableResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "associationId" => {
                        obj.association_id =
                            Some(StringDeserializer::deserialize("associationId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AssociateSubnetCidrBlockRequest {
    /// <p>The IPv6 CIDR block for your subnet. The subnet must have a /64 prefix length.</p>
    pub ipv_6_cidr_block: String,
    /// <p>The ID of your subnet.</p>
    pub subnet_id: String,
}

/// Serialize `AssociateSubnetCidrBlockRequest` contents to a `SignedRequest`.
struct AssociateSubnetCidrBlockRequestSerializer;
impl AssociateSubnetCidrBlockRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AssociateSubnetCidrBlockRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "Ipv6CidrBlock"),
            &obj.ipv_6_cidr_block,
        );
        params.put(&format!("{}{}", prefix, "SubnetId"), &obj.subnet_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct AssociateSubnetCidrBlockResult {
    /// <p>Information about the IPv6 CIDR block association.</p>
    pub ipv_6_cidr_block_association: Option<SubnetIpv6CidrBlockAssociation>,
    /// <p>The ID of the subnet.</p>
    pub subnet_id: Option<String>,
}

struct AssociateSubnetCidrBlockResultDeserializer;
impl AssociateSubnetCidrBlockResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AssociateSubnetCidrBlockResult, XmlParseError> {
        deserialize_elements::<_, AssociateSubnetCidrBlockResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "ipv6CidrBlockAssociation" => {
                        obj.ipv_6_cidr_block_association =
                            Some(SubnetIpv6CidrBlockAssociationDeserializer::deserialize(
                                "ipv6CidrBlockAssociation",
                                stack,
                            )?);
                    }
                    "subnetId" => {
                        obj.subnet_id = Some(StringDeserializer::deserialize("subnetId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AssociateTransitGatewayRouteTableRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the attachment.</p>
    pub transit_gateway_attachment_id: String,
    /// <p>The ID of the transit gateway route table.</p>
    pub transit_gateway_route_table_id: String,
}

/// Serialize `AssociateTransitGatewayRouteTableRequest` contents to a `SignedRequest`.
struct AssociateTransitGatewayRouteTableRequestSerializer;
impl AssociateTransitGatewayRouteTableRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AssociateTransitGatewayRouteTableRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TransitGatewayAttachmentId"),
            &obj.transit_gateway_attachment_id,
        );
        params.put(
            &format!("{}{}", prefix, "TransitGatewayRouteTableId"),
            &obj.transit_gateway_route_table_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct AssociateTransitGatewayRouteTableResult {
    /// <p>The ID of the association.</p>
    pub association: Option<TransitGatewayAssociation>,
}

struct AssociateTransitGatewayRouteTableResultDeserializer;
impl AssociateTransitGatewayRouteTableResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AssociateTransitGatewayRouteTableResult, XmlParseError> {
        deserialize_elements::<_, AssociateTransitGatewayRouteTableResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "association" => {
                        obj.association = Some(TransitGatewayAssociationDeserializer::deserialize(
                            "association",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AssociateVpcCidrBlockRequest {
    /// <p>Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses, or the size of the CIDR block.</p>
    pub amazon_provided_ipv_6_cidr_block: Option<bool>,
    /// <p>An IPv4 CIDR block to associate with the VPC.</p>
    pub cidr_block: Option<String>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: String,
}

/// Serialize `AssociateVpcCidrBlockRequest` contents to a `SignedRequest`.
struct AssociateVpcCidrBlockRequestSerializer;
impl AssociateVpcCidrBlockRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AssociateVpcCidrBlockRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.amazon_provided_ipv_6_cidr_block {
            params.put(
                &format!("{}{}", prefix, "AmazonProvidedIpv6CidrBlock"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.cidr_block {
            params.put(&format!("{}{}", prefix, "CidrBlock"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "VpcId"), &obj.vpc_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct AssociateVpcCidrBlockResult {
    /// <p>Information about the IPv4 CIDR block association.</p>
    pub cidr_block_association: Option<VpcCidrBlockAssociation>,
    /// <p>Information about the IPv6 CIDR block association.</p>
    pub ipv_6_cidr_block_association: Option<VpcIpv6CidrBlockAssociation>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: Option<String>,
}

struct AssociateVpcCidrBlockResultDeserializer;
impl AssociateVpcCidrBlockResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AssociateVpcCidrBlockResult, XmlParseError> {
        deserialize_elements::<_, AssociateVpcCidrBlockResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "cidrBlockAssociation" => {
                        obj.cidr_block_association =
                            Some(VpcCidrBlockAssociationDeserializer::deserialize(
                                "cidrBlockAssociation",
                                stack,
                            )?);
                    }
                    "ipv6CidrBlockAssociation" => {
                        obj.ipv_6_cidr_block_association =
                            Some(VpcIpv6CidrBlockAssociationDeserializer::deserialize(
                                "ipv6CidrBlockAssociation",
                                stack,
                            )?);
                    }
                    "vpcId" => {
                        obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes a target network that is associated with a Client VPN endpoint. A target network is a subnet in a VPC.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AssociatedTargetNetwork {
    /// <p>The ID of the subnet.</p>
    pub network_id: Option<String>,
    /// <p>The target network type.</p>
    pub network_type: Option<String>,
}

/// Serialize `AssociationIdList` contents to a `SignedRequest`.
struct AssociationIdListSerializer;
impl AssociationIdListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Describes the state of a target network association.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AssociationStatus {
    /// <p>The state of the target network association.</p>
    pub code: Option<String>,
    /// <p>A message about the status of the target network association, if applicable.</p>
    pub message: Option<String>,
}

struct AssociationStatusDeserializer;
impl AssociationStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AssociationStatus, XmlParseError> {
        deserialize_elements::<_, AssociationStatus, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "code" => {
                    obj.code = Some(AssociationStatusCodeDeserializer::deserialize(
                        "code", stack,
                    )?);
                }
                "message" => {
                    obj.message = Some(StringDeserializer::deserialize("message", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct AssociationStatusCodeDeserializer;
impl AssociationStatusCodeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AttachClassicLinkVpcRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of one or more of the VPC's security groups. You cannot specify security groups from a different VPC.</p>
    pub groups: Vec<String>,
    /// <p>The ID of an EC2-Classic instance to link to the ClassicLink-enabled VPC.</p>
    pub instance_id: String,
    /// <p>The ID of a ClassicLink-enabled VPC.</p>
    pub vpc_id: String,
}

/// Serialize `AttachClassicLinkVpcRequest` contents to a `SignedRequest`.
struct AttachClassicLinkVpcRequestSerializer;
impl AttachClassicLinkVpcRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AttachClassicLinkVpcRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        GroupIdStringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "SecurityGroupId"),
            &obj.groups,
        );
        params.put(&format!("{}{}", prefix, "InstanceId"), &obj.instance_id);
        params.put(&format!("{}{}", prefix, "VpcId"), &obj.vpc_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct AttachClassicLinkVpcResult {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub return_: Option<bool>,
}

struct AttachClassicLinkVpcResultDeserializer;
impl AttachClassicLinkVpcResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AttachClassicLinkVpcResult, XmlParseError> {
        deserialize_elements::<_, AttachClassicLinkVpcResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AttachInternetGatewayRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the internet gateway.</p>
    pub internet_gateway_id: String,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: String,
}

/// Serialize `AttachInternetGatewayRequest` contents to a `SignedRequest`.
struct AttachInternetGatewayRequestSerializer;
impl AttachInternetGatewayRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AttachInternetGatewayRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "InternetGatewayId"),
            &obj.internet_gateway_id,
        );
        params.put(&format!("{}{}", prefix, "VpcId"), &obj.vpc_id);
    }
}

/// <p>Contains the parameters for AttachNetworkInterface.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AttachNetworkInterfaceRequest {
    /// <p>The index of the device for the network interface attachment.</p>
    pub device_index: i64,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the instance.</p>
    pub instance_id: String,
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: String,
}

/// Serialize `AttachNetworkInterfaceRequest` contents to a `SignedRequest`.
struct AttachNetworkInterfaceRequestSerializer;
impl AttachNetworkInterfaceRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AttachNetworkInterfaceRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "DeviceIndex"), &obj.device_index);
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "InstanceId"), &obj.instance_id);
        params.put(
            &format!("{}{}", prefix, "NetworkInterfaceId"),
            &obj.network_interface_id,
        );
    }
}

/// <p>Contains the output of AttachNetworkInterface.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AttachNetworkInterfaceResult {
    /// <p>The ID of the network interface attachment.</p>
    pub attachment_id: Option<String>,
}

struct AttachNetworkInterfaceResultDeserializer;
impl AttachNetworkInterfaceResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AttachNetworkInterfaceResult, XmlParseError> {
        deserialize_elements::<_, AttachNetworkInterfaceResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "attachmentId" => {
                        obj.attachment_id =
                            Some(StringDeserializer::deserialize("attachmentId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for AttachVolume.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AttachVolumeRequest {
    /// <p>The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
    pub device: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the instance.</p>
    pub instance_id: String,
    /// <p>The ID of the EBS volume. The volume and instance must be within the same Availability Zone.</p>
    pub volume_id: String,
}

/// Serialize `AttachVolumeRequest` contents to a `SignedRequest`.
struct AttachVolumeRequestSerializer;
impl AttachVolumeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AttachVolumeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Device"), &obj.device);
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "InstanceId"), &obj.instance_id);
        params.put(&format!("{}{}", prefix, "VolumeId"), &obj.volume_id);
    }
}

/// <p>Contains the parameters for AttachVpnGateway.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AttachVpnGatewayRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: String,
    /// <p>The ID of the virtual private gateway.</p>
    pub vpn_gateway_id: String,
}

/// Serialize `AttachVpnGatewayRequest` contents to a `SignedRequest`.
struct AttachVpnGatewayRequestSerializer;
impl AttachVpnGatewayRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AttachVpnGatewayRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "VpcId"), &obj.vpc_id);
        params.put(
            &format!("{}{}", prefix, "VpnGatewayId"),
            &obj.vpn_gateway_id,
        );
    }
}

/// <p>Contains the output of AttachVpnGateway.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AttachVpnGatewayResult {
    /// <p>Information about the attachment.</p>
    pub vpc_attachment: Option<VpcAttachment>,
}

struct AttachVpnGatewayResultDeserializer;
impl AttachVpnGatewayResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AttachVpnGatewayResult, XmlParseError> {
        deserialize_elements::<_, AttachVpnGatewayResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "attachment" => {
                    obj.vpc_attachment =
                        Some(VpcAttachmentDeserializer::deserialize("attachment", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct AttachmentStatusDeserializer;
impl AttachmentStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a value for a resource attribute that is a Boolean value.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AttributeBooleanValue {
    /// <p>The attribute value. The valid values are <code>true</code> or <code>false</code>.</p>
    pub value: Option<bool>,
}

struct AttributeBooleanValueDeserializer;
impl AttributeBooleanValueDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AttributeBooleanValue, XmlParseError> {
        deserialize_elements::<_, AttributeBooleanValue, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "value" => {
                    obj.value = Some(BooleanDeserializer::deserialize("value", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `AttributeBooleanValue` contents to a `SignedRequest`.
struct AttributeBooleanValueSerializer;
impl AttributeBooleanValueSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AttributeBooleanValue) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.value {
            params.put(&format!("{}{}", prefix, "Value"), &field_value);
        }
    }
}

/// <p>Describes a value for a resource attribute that is a String.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AttributeValue {
    /// <p>The attribute value. The value is case-sensitive.</p>
    pub value: Option<String>,
}

struct AttributeValueDeserializer;
impl AttributeValueDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AttributeValue, XmlParseError> {
        deserialize_elements::<_, AttributeValue, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "value" => {
                    obj.value = Some(StringDeserializer::deserialize("value", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `AttributeValue` contents to a `SignedRequest`.
struct AttributeValueSerializer;
impl AttributeValueSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AttributeValue) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.value {
            params.put(&format!("{}{}", prefix, "Value"), &field_value);
        }
    }
}

/// <p>Information about an authorization rule.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AuthorizationRule {
    /// <p>Indicates whether the authorization rule grants access to all clients.</p>
    pub access_all: Option<bool>,
    /// <p>The ID of the Client VPN endpoint with which the authorization rule is associated.</p>
    pub client_vpn_endpoint_id: Option<String>,
    /// <p>A brief description of the authorization rule.</p>
    pub description: Option<String>,
    /// <p>The IPv4 address range, in CIDR notation, of the network to which the authorization rule applies.</p>
    pub destination_cidr: Option<String>,
    /// <p>The ID of the Active Directory group to which the authorization rule grants access.</p>
    pub group_id: Option<String>,
    /// <p>The current state of the authorization rule.</p>
    pub status: Option<ClientVpnAuthorizationRuleStatus>,
}

struct AuthorizationRuleDeserializer;
impl AuthorizationRuleDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AuthorizationRule, XmlParseError> {
        deserialize_elements::<_, AuthorizationRule, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "accessAll" => {
                    obj.access_all = Some(BooleanDeserializer::deserialize("accessAll", stack)?);
                }
                "clientVpnEndpointId" => {
                    obj.client_vpn_endpoint_id = Some(StringDeserializer::deserialize(
                        "clientVpnEndpointId",
                        stack,
                    )?);
                }
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "destinationCidr" => {
                    obj.destination_cidr =
                        Some(StringDeserializer::deserialize("destinationCidr", stack)?);
                }
                "groupId" => {
                    obj.group_id = Some(StringDeserializer::deserialize("groupId", stack)?);
                }
                "status" => {
                    obj.status = Some(ClientVpnAuthorizationRuleStatusDeserializer::deserialize(
                        "status", stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct AuthorizationRuleSetDeserializer;
impl AuthorizationRuleSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<AuthorizationRule>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(AuthorizationRuleDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AuthorizeClientVpnIngressRequest {
    /// <p>The ID of the Active Directory group to grant access.</p>
    pub access_group_id: Option<String>,
    /// <p>Indicates whether to grant access to all clients. Use <code>true</code> to grant all clients who successfully establish a VPN connection access to the network.</p>
    pub authorize_all_groups: Option<bool>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p>The ID of the Client VPN endpoint.</p>
    pub client_vpn_endpoint_id: String,
    /// <p>A brief description of the authorization rule.</p>
    pub description: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The IPv4 address range, in CIDR notation, of the network for which access is being authorized.</p>
    pub target_network_cidr: String,
}

/// Serialize `AuthorizeClientVpnIngressRequest` contents to a `SignedRequest`.
struct AuthorizeClientVpnIngressRequestSerializer;
impl AuthorizeClientVpnIngressRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AuthorizeClientVpnIngressRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.access_group_id {
            params.put(&format!("{}{}", prefix, "AccessGroupId"), &field_value);
        }
        if let Some(ref field_value) = obj.authorize_all_groups {
            params.put(&format!("{}{}", prefix, "AuthorizeAllGroups"), &field_value);
        }
        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "ClientVpnEndpointId"),
            &obj.client_vpn_endpoint_id,
        );
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TargetNetworkCidr"),
            &obj.target_network_cidr,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct AuthorizeClientVpnIngressResult {
    /// <p>The current state of the authorization rule.</p>
    pub status: Option<ClientVpnAuthorizationRuleStatus>,
}

struct AuthorizeClientVpnIngressResultDeserializer;
impl AuthorizeClientVpnIngressResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AuthorizeClientVpnIngressResult, XmlParseError> {
        deserialize_elements::<_, AuthorizeClientVpnIngressResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "status" => {
                        obj.status =
                            Some(ClientVpnAuthorizationRuleStatusDeserializer::deserialize(
                                "status", stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AuthorizeSecurityGroupEgressRequest {
    /// <p>Not supported. Use a set of IP permissions to specify the CIDR.</p>
    pub cidr_ip: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Not supported. Use a set of IP permissions to specify the port.</p>
    pub from_port: Option<i64>,
    /// <p>The ID of the security group.</p>
    pub group_id: String,
    /// <p>The sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.</p>
    pub ip_permissions: Option<Vec<IpPermission>>,
    /// <p>Not supported. Use a set of IP permissions to specify the protocol name or number.</p>
    pub ip_protocol: Option<String>,
    /// <p>Not supported. Use a set of IP permissions to specify a destination security group.</p>
    pub source_security_group_name: Option<String>,
    /// <p>Not supported. Use a set of IP permissions to specify a destination security group.</p>
    pub source_security_group_owner_id: Option<String>,
    /// <p>Not supported. Use a set of IP permissions to specify the port.</p>
    pub to_port: Option<i64>,
}

/// Serialize `AuthorizeSecurityGroupEgressRequest` contents to a `SignedRequest`.
struct AuthorizeSecurityGroupEgressRequestSerializer;
impl AuthorizeSecurityGroupEgressRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AuthorizeSecurityGroupEgressRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.cidr_ip {
            params.put(&format!("{}{}", prefix, "CidrIp"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.from_port {
            params.put(&format!("{}{}", prefix, "FromPort"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "GroupId"), &obj.group_id);
        if let Some(ref field_value) = obj.ip_permissions {
            IpPermissionListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "IpPermissions"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.ip_protocol {
            params.put(&format!("{}{}", prefix, "IpProtocol"), &field_value);
        }
        if let Some(ref field_value) = obj.source_security_group_name {
            params.put(
                &format!("{}{}", prefix, "SourceSecurityGroupName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.source_security_group_owner_id {
            params.put(
                &format!("{}{}", prefix, "SourceSecurityGroupOwnerId"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.to_port {
            params.put(&format!("{}{}", prefix, "ToPort"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct AuthorizeSecurityGroupIngressRequest {
    /// <p>The IPv4 address range, in CIDR format. You can't specify this parameter when specifying a source security group. To specify an IPv6 address range, use a set of IP permissions.</p> <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
    pub cidr_ip: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number, use <code>-1</code> to specify all types. If you specify all ICMP types, you must specify all codes.</p> <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
    pub from_port: Option<i64>,
    /// <p>The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.</p>
    pub group_id: Option<String>,
    /// <p>[EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.</p>
    pub group_name: Option<String>,
    /// <p>The sets of IP permissions.</p>
    pub ip_permissions: Option<Vec<IpPermission>>,
    /// <p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>) or number (see <a href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers</a>). To specify <code>icmpv6</code>, use a set of IP permissions.</p> <p>[VPC only] Use <code>-1</code> to specify all protocols. If you specify <code>-1</code> or a protocol other than <code>tcp</code>, <code>udp</code>, or <code>icmp</code>, traffic on all ports is allowed, regardless of any ports you specify.</p> <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
    pub ip_protocol: Option<String>,
    /// <p>[EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead. For EC2-VPC, the source security group must be in the same VPC.</p>
    pub source_security_group_name: Option<String>,
    /// <p>[nondefault VPC] The AWS account ID for the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead.</p>
    pub source_security_group_owner_id: Option<String>,
    /// <p>The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number, use <code>-1</code> to specify all codes. If you specify all ICMP types, you must specify all codes.</p> <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
    pub to_port: Option<i64>,
}

/// Serialize `AuthorizeSecurityGroupIngressRequest` contents to a `SignedRequest`.
struct AuthorizeSecurityGroupIngressRequestSerializer;
impl AuthorizeSecurityGroupIngressRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &AuthorizeSecurityGroupIngressRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.cidr_ip {
            params.put(&format!("{}{}", prefix, "CidrIp"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.from_port {
            params.put(&format!("{}{}", prefix, "FromPort"), &field_value);
        }
        if let Some(ref field_value) = obj.group_id {
            params.put(&format!("{}{}", prefix, "GroupId"), &field_value);
        }
        if let Some(ref field_value) = obj.group_name {
            params.put(&format!("{}{}", prefix, "GroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.ip_permissions {
            IpPermissionListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "IpPermissions"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.ip_protocol {
            params.put(&format!("{}{}", prefix, "IpProtocol"), &field_value);
        }
        if let Some(ref field_value) = obj.source_security_group_name {
            params.put(
                &format!("{}{}", prefix, "SourceSecurityGroupName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.source_security_group_owner_id {
            params.put(
                &format!("{}{}", prefix, "SourceSecurityGroupOwnerId"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.to_port {
            params.put(&format!("{}{}", prefix, "ToPort"), &field_value);
        }
    }
}

struct AutoAcceptSharedAttachmentsValueDeserializer;
impl AutoAcceptSharedAttachmentsValueDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct AutoPlacementDeserializer;
impl AutoPlacementDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes an Availability Zone.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AvailabilityZone {
    /// <p>Any messages about the Availability Zone.</p>
    pub messages: Option<Vec<AvailabilityZoneMessage>>,
    /// <p>The name of the Region.</p>
    pub region_name: Option<String>,
    /// <p>The state of the Availability Zone.</p>
    pub state: Option<String>,
    /// <p>The ID of the Availability Zone.</p>
    pub zone_id: Option<String>,
    /// <p>The name of the Availability Zone.</p>
    pub zone_name: Option<String>,
}

struct AvailabilityZoneDeserializer;
impl AvailabilityZoneDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AvailabilityZone, XmlParseError> {
        deserialize_elements::<_, AvailabilityZone, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "messageSet" => {
                    obj.messages.get_or_insert(vec![]).extend(
                        AvailabilityZoneMessageListDeserializer::deserialize("messageSet", stack)?,
                    );
                }
                "regionName" => {
                    obj.region_name = Some(StringDeserializer::deserialize("regionName", stack)?);
                }
                "zoneState" => {
                    obj.state = Some(AvailabilityZoneStateDeserializer::deserialize(
                        "zoneState",
                        stack,
                    )?);
                }
                "zoneId" => {
                    obj.zone_id = Some(StringDeserializer::deserialize("zoneId", stack)?);
                }
                "zoneName" => {
                    obj.zone_name = Some(StringDeserializer::deserialize("zoneName", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct AvailabilityZoneListDeserializer;
impl AvailabilityZoneListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<AvailabilityZone>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(AvailabilityZoneDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a message about an Availability Zone.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AvailabilityZoneMessage {
    /// <p>The message about the Availability Zone.</p>
    pub message: Option<String>,
}

struct AvailabilityZoneMessageDeserializer;
impl AvailabilityZoneMessageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AvailabilityZoneMessage, XmlParseError> {
        deserialize_elements::<_, AvailabilityZoneMessage, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "message" => {
                        obj.message = Some(StringDeserializer::deserialize("message", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct AvailabilityZoneMessageListDeserializer;
impl AvailabilityZoneMessageListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<AvailabilityZoneMessage>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(AvailabilityZoneMessageDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct AvailabilityZoneStateDeserializer;
impl AvailabilityZoneStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>The capacity information for instances launched onto the Dedicated Host.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct AvailableCapacity {
    /// <p>The total number of instances supported by the Dedicated Host.</p>
    pub available_instance_capacity: Option<Vec<InstanceCapacity>>,
    /// <p>The number of vCPUs available on the Dedicated Host.</p>
    pub available_v_cpus: Option<i64>,
}

struct AvailableCapacityDeserializer;
impl AvailableCapacityDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<AvailableCapacity, XmlParseError> {
        deserialize_elements::<_, AvailableCapacity, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "availableInstanceCapacity" => {
                    obj.available_instance_capacity
                        .get_or_insert(vec![])
                        .extend(AvailableInstanceCapacityListDeserializer::deserialize(
                            "availableInstanceCapacity",
                            stack,
                        )?);
                }
                "availableVCpus" => {
                    obj.available_v_cpus =
                        Some(IntegerDeserializer::deserialize("availableVCpus", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct AvailableInstanceCapacityListDeserializer;
impl AvailableInstanceCapacityListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<InstanceCapacity>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(InstanceCapacityDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct BatchStateDeserializer;
impl BatchStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}

/// Serialize `BillingProductList` contents to a `SignedRequest`.
struct BillingProductListSerializer;
impl BillingProductListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct BlobDeserializer;
impl BlobDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<bytes::Bytes, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?.into();
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct BlobAttributeValue {
    pub value: Option<bytes::Bytes>,
}

/// Serialize `BlobAttributeValue` contents to a `SignedRequest`.
struct BlobAttributeValueSerializer;
impl BlobAttributeValueSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &BlobAttributeValue) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.value {
            params.put(
                &format!("{}{}", prefix, "Value"),
                ::std::str::from_utf8(&field_value).unwrap(),
            );
        }
    }
}

/// <p>Describes a block device mapping.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct BlockDeviceMapping {
    /// <p>The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
    pub device_name: Option<String>,
    /// <p>Parameters used to automatically set up EBS volumes when the instance is launched.</p>
    pub ebs: Option<EbsBlockDevice>,
    /// <p>Suppresses the specified device included in the block device mapping of the AMI.</p>
    pub no_device: Option<String>,
    /// <p>The virtual device name (<code>ephemeral</code>N). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for <code>ephemeral0</code> and <code>ephemeral1</code>. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume.</p> <p>NVMe instance store volumes are automatically enumerated and assigned a device name. Including them in your block device mapping has no effect.</p> <p>Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.</p>
    pub virtual_name: Option<String>,
}

struct BlockDeviceMappingDeserializer;
impl BlockDeviceMappingDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<BlockDeviceMapping, XmlParseError> {
        deserialize_elements::<_, BlockDeviceMapping, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "deviceName" => {
                    obj.device_name = Some(StringDeserializer::deserialize("deviceName", stack)?);
                }
                "ebs" => {
                    obj.ebs = Some(EbsBlockDeviceDeserializer::deserialize("ebs", stack)?);
                }
                "noDevice" => {
                    obj.no_device = Some(StringDeserializer::deserialize("noDevice", stack)?);
                }
                "virtualName" => {
                    obj.virtual_name = Some(StringDeserializer::deserialize("virtualName", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `BlockDeviceMapping` contents to a `SignedRequest`.
struct BlockDeviceMappingSerializer;
impl BlockDeviceMappingSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &BlockDeviceMapping) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.device_name {
            params.put(&format!("{}{}", prefix, "DeviceName"), &field_value);
        }
        if let Some(ref field_value) = obj.ebs {
            EbsBlockDeviceSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Ebs"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.no_device {
            params.put(&format!("{}{}", prefix, "NoDevice"), &field_value);
        }
        if let Some(ref field_value) = obj.virtual_name {
            params.put(&format!("{}{}", prefix, "VirtualName"), &field_value);
        }
    }
}

struct BlockDeviceMappingListDeserializer;
impl BlockDeviceMappingListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<BlockDeviceMapping>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(BlockDeviceMappingDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `BlockDeviceMappingList` contents to a `SignedRequest`.
struct BlockDeviceMappingListSerializer;
impl BlockDeviceMappingListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<BlockDeviceMapping>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            BlockDeviceMappingSerializer::serialize(params, &key, obj);
        }
    }
}

/// Serialize `BlockDeviceMappingRequestList` contents to a `SignedRequest`.
struct BlockDeviceMappingRequestListSerializer;
impl BlockDeviceMappingRequestListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<BlockDeviceMapping>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            BlockDeviceMappingSerializer::serialize(params, &key, obj);
        }
    }
}

struct BooleanDeserializer;
impl BooleanDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<bool, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = bool::from_str(characters(stack)?.as_ref()).unwrap();
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}

/// Serialize `BundleIdStringList` contents to a `SignedRequest`.
struct BundleIdStringListSerializer;
impl BundleIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Contains the parameters for BundleInstance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct BundleInstanceRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the instance to bundle.</p> <p>Type: String</p> <p>Default: None</p> <p>Required: Yes</p>
    pub instance_id: String,
    /// <p>The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.</p>
    pub storage: Storage,
}

/// Serialize `BundleInstanceRequest` contents to a `SignedRequest`.
struct BundleInstanceRequestSerializer;
impl BundleInstanceRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &BundleInstanceRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "InstanceId"), &obj.instance_id);
        StorageSerializer::serialize(params, &format!("{}{}", prefix, "Storage"), &obj.storage);
    }
}

/// <p>Contains the output of BundleInstance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct BundleInstanceResult {
    /// <p>Information about the bundle task.</p>
    pub bundle_task: Option<BundleTask>,
}

struct BundleInstanceResultDeserializer;
impl BundleInstanceResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<BundleInstanceResult, XmlParseError> {
        deserialize_elements::<_, BundleInstanceResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "bundleInstanceTask" => {
                    obj.bundle_task = Some(BundleTaskDeserializer::deserialize(
                        "bundleInstanceTask",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes a bundle task.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct BundleTask {
    /// <p>The ID of the bundle task.</p>
    pub bundle_id: Option<String>,
    /// <p>If the task fails, a description of the error.</p>
    pub bundle_task_error: Option<BundleTaskError>,
    /// <p>The ID of the instance associated with this bundle task.</p>
    pub instance_id: Option<String>,
    /// <p>The level of task completion, as a percent (for example, 20%).</p>
    pub progress: Option<String>,
    /// <p>The time this task started.</p>
    pub start_time: Option<String>,
    /// <p>The state of the task.</p>
    pub state: Option<String>,
    /// <p>The Amazon S3 storage locations.</p>
    pub storage: Option<Storage>,
    /// <p>The time of the most recent update for the task.</p>
    pub update_time: Option<String>,
}

struct BundleTaskDeserializer;
impl BundleTaskDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<BundleTask, XmlParseError> {
        deserialize_elements::<_, BundleTask, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "bundleId" => {
                    obj.bundle_id = Some(StringDeserializer::deserialize("bundleId", stack)?);
                }
                "error" => {
                    obj.bundle_task_error =
                        Some(BundleTaskErrorDeserializer::deserialize("error", stack)?);
                }
                "instanceId" => {
                    obj.instance_id = Some(StringDeserializer::deserialize("instanceId", stack)?);
                }
                "progress" => {
                    obj.progress = Some(StringDeserializer::deserialize("progress", stack)?);
                }
                "startTime" => {
                    obj.start_time = Some(DateTimeDeserializer::deserialize("startTime", stack)?);
                }
                "state" => {
                    obj.state = Some(BundleTaskStateDeserializer::deserialize("state", stack)?);
                }
                "storage" => {
                    obj.storage = Some(StorageDeserializer::deserialize("storage", stack)?);
                }
                "updateTime" => {
                    obj.update_time = Some(DateTimeDeserializer::deserialize("updateTime", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes an error for <a>BundleInstance</a>.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct BundleTaskError {
    /// <p>The error code.</p>
    pub code: Option<String>,
    /// <p>The error message.</p>
    pub message: Option<String>,
}

struct BundleTaskErrorDeserializer;
impl BundleTaskErrorDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<BundleTaskError, XmlParseError> {
        deserialize_elements::<_, BundleTaskError, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "code" => {
                    obj.code = Some(StringDeserializer::deserialize("code", stack)?);
                }
                "message" => {
                    obj.message = Some(StringDeserializer::deserialize("message", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct BundleTaskListDeserializer;
impl BundleTaskListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<BundleTask>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(BundleTaskDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct BundleTaskStateDeserializer;
impl BundleTaskStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Information about an address range that is provisioned for use with your AWS resources through bring your own IP addresses (BYOIP).</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ByoipCidr {
    /// <p>The public IPv4 address range, in CIDR notation.</p>
    pub cidr: Option<String>,
    /// <p>The description of the address range.</p>
    pub description: Option<String>,
    /// <p>The state of the address pool.</p>
    pub state: Option<String>,
    /// <p>Upon success, contains the ID of the address pool. Otherwise, contains an error message.</p>
    pub status_message: Option<String>,
}

struct ByoipCidrDeserializer;
impl ByoipCidrDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ByoipCidr, XmlParseError> {
        deserialize_elements::<_, ByoipCidr, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "cidr" => {
                    obj.cidr = Some(StringDeserializer::deserialize("cidr", stack)?);
                }
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "state" => {
                    obj.state = Some(ByoipCidrStateDeserializer::deserialize("state", stack)?);
                }
                "statusMessage" => {
                    obj.status_message =
                        Some(StringDeserializer::deserialize("statusMessage", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct ByoipCidrSetDeserializer;
impl ByoipCidrSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ByoipCidr>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ByoipCidrDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct ByoipCidrStateDeserializer;
impl ByoipCidrStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct CancelBatchErrorCodeDeserializer;
impl CancelBatchErrorCodeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Contains the parameters for CancelBundleTask.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CancelBundleTaskRequest {
    /// <p>The ID of the bundle task.</p>
    pub bundle_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `CancelBundleTaskRequest` contents to a `SignedRequest`.
struct CancelBundleTaskRequestSerializer;
impl CancelBundleTaskRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CancelBundleTaskRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "BundleId"), &obj.bundle_id);
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

/// <p>Contains the output of CancelBundleTask.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CancelBundleTaskResult {
    /// <p>Information about the bundle task.</p>
    pub bundle_task: Option<BundleTask>,
}

struct CancelBundleTaskResultDeserializer;
impl CancelBundleTaskResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CancelBundleTaskResult, XmlParseError> {
        deserialize_elements::<_, CancelBundleTaskResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "bundleInstanceTask" => {
                    obj.bundle_task = Some(BundleTaskDeserializer::deserialize(
                        "bundleInstanceTask",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CancelCapacityReservationRequest {
    /// <p>The ID of the Capacity Reservation to be cancelled.</p>
    pub capacity_reservation_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `CancelCapacityReservationRequest` contents to a `SignedRequest`.
struct CancelCapacityReservationRequestSerializer;
impl CancelCapacityReservationRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CancelCapacityReservationRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "CapacityReservationId"),
            &obj.capacity_reservation_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CancelCapacityReservationResult {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub return_: Option<bool>,
}

struct CancelCapacityReservationResultDeserializer;
impl CancelCapacityReservationResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CancelCapacityReservationResult, XmlParseError> {
        deserialize_elements::<_, CancelCapacityReservationResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for CancelConversionTask.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CancelConversionRequest {
    /// <p>The ID of the conversion task.</p>
    pub conversion_task_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The reason for canceling the conversion task.</p>
    pub reason_message: Option<String>,
}

/// Serialize `CancelConversionRequest` contents to a `SignedRequest`.
struct CancelConversionRequestSerializer;
impl CancelConversionRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CancelConversionRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "ConversionTaskId"),
            &obj.conversion_task_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.reason_message {
            params.put(&format!("{}{}", prefix, "ReasonMessage"), &field_value);
        }
    }
}

/// <p>Contains the parameters for CancelExportTask.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CancelExportTaskRequest {
    /// <p>The ID of the export task. This is the ID returned by <code>CreateInstanceExportTask</code>.</p>
    pub export_task_id: String,
}

/// Serialize `CancelExportTaskRequest` contents to a `SignedRequest`.
struct CancelExportTaskRequestSerializer;
impl CancelExportTaskRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CancelExportTaskRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "ExportTaskId"),
            &obj.export_task_id,
        );
    }
}

/// <p>Contains the parameters for CancelImportTask.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CancelImportTaskRequest {
    /// <p>The reason for canceling the task.</p>
    pub cancel_reason: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the import image or import snapshot task to be canceled.</p>
    pub import_task_id: Option<String>,
}

/// Serialize `CancelImportTaskRequest` contents to a `SignedRequest`.
struct CancelImportTaskRequestSerializer;
impl CancelImportTaskRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CancelImportTaskRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.cancel_reason {
            params.put(&format!("{}{}", prefix, "CancelReason"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.import_task_id {
            params.put(&format!("{}{}", prefix, "ImportTaskId"), &field_value);
        }
    }
}

/// <p>Contains the output for CancelImportTask.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CancelImportTaskResult {
    /// <p>The ID of the task being canceled.</p>
    pub import_task_id: Option<String>,
    /// <p>The current state of the task being canceled.</p>
    pub previous_state: Option<String>,
    /// <p>The current state of the task being canceled.</p>
    pub state: Option<String>,
}

struct CancelImportTaskResultDeserializer;
impl CancelImportTaskResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CancelImportTaskResult, XmlParseError> {
        deserialize_elements::<_, CancelImportTaskResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "importTaskId" => {
                    obj.import_task_id =
                        Some(StringDeserializer::deserialize("importTaskId", stack)?);
                }
                "previousState" => {
                    obj.previous_state =
                        Some(StringDeserializer::deserialize("previousState", stack)?);
                }
                "state" => {
                    obj.state = Some(StringDeserializer::deserialize("state", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Contains the parameters for CancelReservedInstancesListing.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CancelReservedInstancesListingRequest {
    /// <p>The ID of the Reserved Instance listing.</p>
    pub reserved_instances_listing_id: String,
}

/// Serialize `CancelReservedInstancesListingRequest` contents to a `SignedRequest`.
struct CancelReservedInstancesListingRequestSerializer;
impl CancelReservedInstancesListingRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CancelReservedInstancesListingRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "ReservedInstancesListingId"),
            &obj.reserved_instances_listing_id,
        );
    }
}

/// <p>Contains the output of CancelReservedInstancesListing.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CancelReservedInstancesListingResult {
    /// <p>The Reserved Instance listing.</p>
    pub reserved_instances_listings: Option<Vec<ReservedInstancesListing>>,
}

struct CancelReservedInstancesListingResultDeserializer;
impl CancelReservedInstancesListingResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CancelReservedInstancesListingResult, XmlParseError> {
        deserialize_elements::<_, CancelReservedInstancesListingResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "reservedInstancesListingsSet" => {
                        obj.reserved_instances_listings
                            .get_or_insert(vec![])
                            .extend(ReservedInstancesListingListDeserializer::deserialize(
                                "reservedInstancesListingsSet",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes a Spot Fleet error.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CancelSpotFleetRequestsError {
    /// <p>The error code.</p>
    pub code: Option<String>,
    /// <p>The description for the error code.</p>
    pub message: Option<String>,
}

struct CancelSpotFleetRequestsErrorDeserializer;
impl CancelSpotFleetRequestsErrorDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CancelSpotFleetRequestsError, XmlParseError> {
        deserialize_elements::<_, CancelSpotFleetRequestsError, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "code" => {
                        obj.code = Some(CancelBatchErrorCodeDeserializer::deserialize(
                            "code", stack,
                        )?);
                    }
                    "message" => {
                        obj.message = Some(StringDeserializer::deserialize("message", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes a Spot Fleet request that was not successfully canceled.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CancelSpotFleetRequestsErrorItem {
    /// <p>The error.</p>
    pub error: Option<CancelSpotFleetRequestsError>,
    /// <p>The ID of the Spot Fleet request.</p>
    pub spot_fleet_request_id: Option<String>,
}

struct CancelSpotFleetRequestsErrorItemDeserializer;
impl CancelSpotFleetRequestsErrorItemDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CancelSpotFleetRequestsErrorItem, XmlParseError> {
        deserialize_elements::<_, CancelSpotFleetRequestsErrorItem, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "error" => {
                        obj.error = Some(CancelSpotFleetRequestsErrorDeserializer::deserialize(
                            "error", stack,
                        )?);
                    }
                    "spotFleetRequestId" => {
                        obj.spot_fleet_request_id = Some(StringDeserializer::deserialize(
                            "spotFleetRequestId",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct CancelSpotFleetRequestsErrorSetDeserializer;
impl CancelSpotFleetRequestsErrorSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<CancelSpotFleetRequestsErrorItem>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(CancelSpotFleetRequestsErrorItemDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Contains the parameters for CancelSpotFleetRequests.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CancelSpotFleetRequestsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The IDs of the Spot Fleet requests.</p>
    pub spot_fleet_request_ids: Vec<String>,
    /// <p>Indicates whether to terminate instances for a Spot Fleet request if it is canceled successfully.</p>
    pub terminate_instances: bool,
}

/// Serialize `CancelSpotFleetRequestsRequest` contents to a `SignedRequest`.
struct CancelSpotFleetRequestsRequestSerializer;
impl CancelSpotFleetRequestsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CancelSpotFleetRequestsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        ValueStringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "SpotFleetRequestId"),
            &obj.spot_fleet_request_ids,
        );
        params.put(
            &format!("{}{}", prefix, "TerminateInstances"),
            &obj.terminate_instances,
        );
    }
}

/// <p>Contains the output of CancelSpotFleetRequests.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CancelSpotFleetRequestsResponse {
    /// <p>Information about the Spot Fleet requests that are successfully canceled.</p>
    pub successful_fleet_requests: Option<Vec<CancelSpotFleetRequestsSuccessItem>>,
    /// <p>Information about the Spot Fleet requests that are not successfully canceled.</p>
    pub unsuccessful_fleet_requests: Option<Vec<CancelSpotFleetRequestsErrorItem>>,
}

struct CancelSpotFleetRequestsResponseDeserializer;
impl CancelSpotFleetRequestsResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CancelSpotFleetRequestsResponse, XmlParseError> {
        deserialize_elements::<_, CancelSpotFleetRequestsResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "successfulFleetRequestSet" => {
                        obj.successful_fleet_requests.get_or_insert(vec![]).extend(
                            CancelSpotFleetRequestsSuccessSetDeserializer::deserialize(
                                "successfulFleetRequestSet",
                                stack,
                            )?,
                        );
                    }
                    "unsuccessfulFleetRequestSet" => {
                        obj.unsuccessful_fleet_requests
                            .get_or_insert(vec![])
                            .extend(CancelSpotFleetRequestsErrorSetDeserializer::deserialize(
                                "unsuccessfulFleetRequestSet",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes a Spot Fleet request that was successfully canceled.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CancelSpotFleetRequestsSuccessItem {
    /// <p>The current state of the Spot Fleet request.</p>
    pub current_spot_fleet_request_state: Option<String>,
    /// <p>The previous state of the Spot Fleet request.</p>
    pub previous_spot_fleet_request_state: Option<String>,
    /// <p>The ID of the Spot Fleet request.</p>
    pub spot_fleet_request_id: Option<String>,
}

struct CancelSpotFleetRequestsSuccessItemDeserializer;
impl CancelSpotFleetRequestsSuccessItemDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CancelSpotFleetRequestsSuccessItem, XmlParseError> {
        deserialize_elements::<_, CancelSpotFleetRequestsSuccessItem, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "currentSpotFleetRequestState" => {
                        obj.current_spot_fleet_request_state =
                            Some(BatchStateDeserializer::deserialize(
                                "currentSpotFleetRequestState",
                                stack,
                            )?);
                    }
                    "previousSpotFleetRequestState" => {
                        obj.previous_spot_fleet_request_state =
                            Some(BatchStateDeserializer::deserialize(
                                "previousSpotFleetRequestState",
                                stack,
                            )?);
                    }
                    "spotFleetRequestId" => {
                        obj.spot_fleet_request_id = Some(StringDeserializer::deserialize(
                            "spotFleetRequestId",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct CancelSpotFleetRequestsSuccessSetDeserializer;
impl CancelSpotFleetRequestsSuccessSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<CancelSpotFleetRequestsSuccessItem>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(CancelSpotFleetRequestsSuccessItemDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct CancelSpotInstanceRequestStateDeserializer;
impl CancelSpotInstanceRequestStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Contains the parameters for CancelSpotInstanceRequests.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CancelSpotInstanceRequestsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>One or more Spot Instance request IDs.</p>
    pub spot_instance_request_ids: Vec<String>,
}

/// Serialize `CancelSpotInstanceRequestsRequest` contents to a `SignedRequest`.
struct CancelSpotInstanceRequestsRequestSerializer;
impl CancelSpotInstanceRequestsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CancelSpotInstanceRequestsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        SpotInstanceRequestIdListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "SpotInstanceRequestId"),
            &obj.spot_instance_request_ids,
        );
    }
}

/// <p>Contains the output of CancelSpotInstanceRequests.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CancelSpotInstanceRequestsResult {
    /// <p>One or more Spot Instance requests.</p>
    pub cancelled_spot_instance_requests: Option<Vec<CancelledSpotInstanceRequest>>,
}

struct CancelSpotInstanceRequestsResultDeserializer;
impl CancelSpotInstanceRequestsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CancelSpotInstanceRequestsResult, XmlParseError> {
        deserialize_elements::<_, CancelSpotInstanceRequestsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "spotInstanceRequestSet" => {
                        obj.cancelled_spot_instance_requests
                            .get_or_insert(vec![])
                            .extend(CancelledSpotInstanceRequestListDeserializer::deserialize(
                                "spotInstanceRequestSet",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes a request to cancel a Spot Instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CancelledSpotInstanceRequest {
    /// <p>The ID of the Spot Instance request.</p>
    pub spot_instance_request_id: Option<String>,
    /// <p>The state of the Spot Instance request.</p>
    pub state: Option<String>,
}

struct CancelledSpotInstanceRequestDeserializer;
impl CancelledSpotInstanceRequestDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CancelledSpotInstanceRequest, XmlParseError> {
        deserialize_elements::<_, CancelledSpotInstanceRequest, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "spotInstanceRequestId" => {
                        obj.spot_instance_request_id = Some(StringDeserializer::deserialize(
                            "spotInstanceRequestId",
                            stack,
                        )?);
                    }
                    "state" => {
                        obj.state = Some(CancelSpotInstanceRequestStateDeserializer::deserialize(
                            "state", stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct CancelledSpotInstanceRequestListDeserializer;
impl CancelledSpotInstanceRequestListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<CancelledSpotInstanceRequest>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(CancelledSpotInstanceRequestDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a Capacity Reservation.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CapacityReservation {
    /// <p>The Availability Zone in which the capacity is reserved.</p>
    pub availability_zone: Option<String>,
    /// <p>The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.</p>
    pub available_instance_count: Option<i64>,
    /// <p>The ID of the Capacity Reservation.</p>
    pub capacity_reservation_id: Option<String>,
    /// <p>The date and time at which the Capacity Reservation was created.</p>
    pub create_date: Option<String>,
    /// <p>Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.</p>
    pub ebs_optimized: Option<bool>,
    /// <p>The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to <code>expired</code> when it reaches its end date and time.</p>
    pub end_date: Option<String>,
    /// <p><p>Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:</p> <ul> <li> <p> <code>unlimited</code> - The Capacity Reservation remains active until you explicitly cancel it.</p> </li> <li> <p> <code>limited</code> - The Capacity Reservation expires automatically at a specified date and time.</p> </li> </ul></p>
    pub end_date_type: Option<String>,
    /// <p>Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.</p>
    pub ephemeral_storage: Option<bool>,
    /// <p><p>Indicates the type of instance launches that the Capacity Reservation accepts. The options include:</p> <ul> <li> <p> <code>open</code> - The Capacity Reservation accepts all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes launch into the Capacity Reservation automatically without specifying any additional parameters.</p> </li> <li> <p> <code>targeted</code> - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity. </p> </li> </ul></p>
    pub instance_match_criteria: Option<String>,
    /// <p>The type of operating system for which the Capacity Reservation reserves capacity.</p>
    pub instance_platform: Option<String>,
    /// <p>The type of instance for which the Capacity Reservation reserves capacity.</p>
    pub instance_type: Option<String>,
    /// <p><p>The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:</p> <ul> <li> <p> <code>active</code> - The Capacity Reservation is active and the capacity is available for your use.</p> </li> <li> <p> <code>cancelled</code> - The Capacity Reservation expired automatically at the date and time specified in your request. The reserved capacity is no longer available for your use.</p> </li> <li> <p> <code>expired</code> - The Capacity Reservation was manually cancelled. The reserved capacity is no longer available for your use.</p> </li> <li> <p> <code>pending</code> - The Capacity Reservation request was successful but the capacity provisioning is still pending.</p> </li> <li> <p> <code>failed</code> - The Capacity Reservation request has failed. A request might fail due to invalid request parameters, capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.</p> </li> </ul></p>
    pub state: Option<String>,
    /// <p>Any tags assigned to the Capacity Reservation.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p><p>Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:</p> <ul> <li> <p> <code>default</code> - The Capacity Reservation is created on hardware that is shared with other AWS accounts.</p> </li> <li> <p> <code>dedicated</code> - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account.</p> </li> </ul></p>
    pub tenancy: Option<String>,
    /// <p>The number of instances for which the Capacity Reservation reserves capacity.</p>
    pub total_instance_count: Option<i64>,
}

struct CapacityReservationDeserializer;
impl CapacityReservationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CapacityReservation, XmlParseError> {
        deserialize_elements::<_, CapacityReservation, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "availabilityZone" => {
                    obj.availability_zone =
                        Some(StringDeserializer::deserialize("availabilityZone", stack)?);
                }
                "availableInstanceCount" => {
                    obj.available_instance_count = Some(IntegerDeserializer::deserialize(
                        "availableInstanceCount",
                        stack,
                    )?);
                }
                "capacityReservationId" => {
                    obj.capacity_reservation_id = Some(StringDeserializer::deserialize(
                        "capacityReservationId",
                        stack,
                    )?);
                }
                "createDate" => {
                    obj.create_date = Some(DateTimeDeserializer::deserialize("createDate", stack)?);
                }
                "ebsOptimized" => {
                    obj.ebs_optimized =
                        Some(BooleanDeserializer::deserialize("ebsOptimized", stack)?);
                }
                "endDate" => {
                    obj.end_date = Some(DateTimeDeserializer::deserialize("endDate", stack)?);
                }
                "endDateType" => {
                    obj.end_date_type =
                        Some(EndDateTypeDeserializer::deserialize("endDateType", stack)?);
                }
                "ephemeralStorage" => {
                    obj.ephemeral_storage =
                        Some(BooleanDeserializer::deserialize("ephemeralStorage", stack)?);
                }
                "instanceMatchCriteria" => {
                    obj.instance_match_criteria =
                        Some(InstanceMatchCriteriaDeserializer::deserialize(
                            "instanceMatchCriteria",
                            stack,
                        )?);
                }
                "instancePlatform" => {
                    obj.instance_platform = Some(
                        CapacityReservationInstancePlatformDeserializer::deserialize(
                            "instancePlatform",
                            stack,
                        )?,
                    );
                }
                "instanceType" => {
                    obj.instance_type =
                        Some(StringDeserializer::deserialize("instanceType", stack)?);
                }
                "state" => {
                    obj.state = Some(CapacityReservationStateDeserializer::deserialize(
                        "state", stack,
                    )?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "tenancy" => {
                    obj.tenancy = Some(CapacityReservationTenancyDeserializer::deserialize(
                        "tenancy", stack,
                    )?);
                }
                "totalInstanceCount" => {
                    obj.total_instance_count = Some(IntegerDeserializer::deserialize(
                        "totalInstanceCount",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `CapacityReservationIdSet` contents to a `SignedRequest`.
struct CapacityReservationIdSetSerializer;
impl CapacityReservationIdSetSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct CapacityReservationInstancePlatformDeserializer;
impl CapacityReservationInstancePlatformDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct CapacityReservationPreferenceDeserializer;
impl CapacityReservationPreferenceDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct CapacityReservationSetDeserializer;
impl CapacityReservationSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<CapacityReservation>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(CapacityReservationDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes an instance's Capacity Reservation targeting option. You can specify only one parameter at a time. If you specify <code>CapacityReservationPreference</code> and <code>CapacityReservationTarget</code>, the request fails.</p> <p>Use the <code>CapacityReservationPreference</code> parameter to configure the instance to run as an On-Demand Instance or to run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone). Use the <code>CapacityReservationTarget</code> parameter to explicitly target a specific Capacity Reservation.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CapacityReservationSpecification {
    /// <p><p>Indicates the instance&#39;s Capacity Reservation preferences. Possible preferences include:</p> <ul> <li> <p> <code>open</code> - The instance can run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p> </li> <li> <p> <code>none</code> - The instance avoids running in a Capacity Reservation even if one is available. The instance runs as an On-Demand Instance.</p> </li> </ul></p>
    pub capacity_reservation_preference: Option<String>,
    /// <p>Information about the target Capacity Reservation.</p>
    pub capacity_reservation_target: Option<CapacityReservationTarget>,
}

/// Serialize `CapacityReservationSpecification` contents to a `SignedRequest`.
struct CapacityReservationSpecificationSerializer;
impl CapacityReservationSpecificationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CapacityReservationSpecification) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.capacity_reservation_preference {
            params.put(
                &format!("{}{}", prefix, "CapacityReservationPreference"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.capacity_reservation_target {
            CapacityReservationTargetSerializer::serialize(
                params,
                &format!("{}{}", prefix, "CapacityReservationTarget"),
                field_value,
            );
        }
    }
}

/// <p>Describes the instance's Capacity Reservation targeting preferences. The action returns the <code>capacityReservationPreference</code> response element if the instance is configured to run in On-Demand capacity, or if it is configured in run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone). The action returns the <code>capacityReservationTarget</code> response element if the instance explicily targets a specific Capacity Reservation.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CapacityReservationSpecificationResponse {
    /// <p><p>Describes the instance&#39;s Capacity Reservation preferences. Possible preferences include:</p> <ul> <li> <p> <code>open</code> - The instance can run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p> </li> <li> <p> <code>none</code> - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.</p> </li> </ul></p>
    pub capacity_reservation_preference: Option<String>,
    /// <p>Information about the targeted Capacity Reservation.</p>
    pub capacity_reservation_target: Option<CapacityReservationTargetResponse>,
}

struct CapacityReservationSpecificationResponseDeserializer;
impl CapacityReservationSpecificationResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CapacityReservationSpecificationResponse, XmlParseError> {
        deserialize_elements::<_, CapacityReservationSpecificationResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "capacityReservationPreference" => {
                        obj.capacity_reservation_preference =
                            Some(CapacityReservationPreferenceDeserializer::deserialize(
                                "capacityReservationPreference",
                                stack,
                            )?);
                    }
                    "capacityReservationTarget" => {
                        obj.capacity_reservation_target =
                            Some(CapacityReservationTargetResponseDeserializer::deserialize(
                                "capacityReservationTarget",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct CapacityReservationStateDeserializer;
impl CapacityReservationStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a target Capacity Reservation.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CapacityReservationTarget {
    /// <p>The ID of the Capacity Reservation.</p>
    pub capacity_reservation_id: Option<String>,
}

/// Serialize `CapacityReservationTarget` contents to a `SignedRequest`.
struct CapacityReservationTargetSerializer;
impl CapacityReservationTargetSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CapacityReservationTarget) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.capacity_reservation_id {
            params.put(
                &format!("{}{}", prefix, "CapacityReservationId"),
                &field_value,
            );
        }
    }
}

/// <p>Describes a target Capacity Reservation.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CapacityReservationTargetResponse {
    /// <p>The ID of the Capacity Reservation.</p>
    pub capacity_reservation_id: Option<String>,
}

struct CapacityReservationTargetResponseDeserializer;
impl CapacityReservationTargetResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CapacityReservationTargetResponse, XmlParseError> {
        deserialize_elements::<_, CapacityReservationTargetResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "capacityReservationId" => {
                        obj.capacity_reservation_id = Some(StringDeserializer::deserialize(
                            "capacityReservationId",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct CapacityReservationTenancyDeserializer;
impl CapacityReservationTenancyDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Information about the client certificate used for authentication.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CertificateAuthentication {
    /// <p>The ARN of the client certificate. </p>
    pub client_root_certificate_chain: Option<String>,
}

struct CertificateAuthenticationDeserializer;
impl CertificateAuthenticationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CertificateAuthentication, XmlParseError> {
        deserialize_elements::<_, CertificateAuthentication, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "clientRootCertificateChain" => {
                        obj.client_root_certificate_chain = Some(StringDeserializer::deserialize(
                            "clientRootCertificateChain",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Information about the client certificate to be used for authentication.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CertificateAuthenticationRequest {
    /// <p>The ARN of the client certificate. The certificate must be signed by a certificate authority (CA) and it must be provisioned in AWS Certificate Manager (ACM).</p>
    pub client_root_certificate_chain_arn: Option<String>,
}

/// Serialize `CertificateAuthenticationRequest` contents to a `SignedRequest`.
struct CertificateAuthenticationRequestSerializer;
impl CertificateAuthenticationRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CertificateAuthenticationRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.client_root_certificate_chain_arn {
            params.put(
                &format!("{}{}", prefix, "ClientRootCertificateChainArn"),
                &field_value,
            );
        }
    }
}

/// <p>Provides authorization for Amazon to bring a specific IP address range to a specific AWS account using bring your own IP addresses (BYOIP). For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html#prepare-for-byoip">Prepare to Bring Your Address Range to Your AWS Account</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CidrAuthorizationContext {
    /// <p>The plain-text authorization message for the prefix and account.</p>
    pub message: String,
    /// <p>The signed authorization message for the prefix and account.</p>
    pub signature: String,
}

/// Serialize `CidrAuthorizationContext` contents to a `SignedRequest`.
struct CidrAuthorizationContextSerializer;
impl CidrAuthorizationContextSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CidrAuthorizationContext) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Message"), &obj.message);
        params.put(&format!("{}{}", prefix, "Signature"), &obj.signature);
    }
}

/// <p>Describes an IPv4 CIDR block.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CidrBlock {
    /// <p>The IPv4 CIDR block.</p>
    pub cidr_block: Option<String>,
}

struct CidrBlockDeserializer;
impl CidrBlockDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CidrBlock, XmlParseError> {
        deserialize_elements::<_, CidrBlock, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "cidrBlock" => {
                    obj.cidr_block = Some(StringDeserializer::deserialize("cidrBlock", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct CidrBlockSetDeserializer;
impl CidrBlockSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<CidrBlock>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(CidrBlockDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the ClassicLink DNS support status of a VPC.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ClassicLinkDnsSupport {
    /// <p>Indicates whether ClassicLink DNS support is enabled for the VPC.</p>
    pub classic_link_dns_supported: Option<bool>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: Option<String>,
}

struct ClassicLinkDnsSupportDeserializer;
impl ClassicLinkDnsSupportDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ClassicLinkDnsSupport, XmlParseError> {
        deserialize_elements::<_, ClassicLinkDnsSupport, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "classicLinkDnsSupported" => {
                    obj.classic_link_dns_supported = Some(BooleanDeserializer::deserialize(
                        "classicLinkDnsSupported",
                        stack,
                    )?);
                }
                "vpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct ClassicLinkDnsSupportListDeserializer;
impl ClassicLinkDnsSupportListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ClassicLinkDnsSupport>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ClassicLinkDnsSupportDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a linked EC2-Classic instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ClassicLinkInstance {
    /// <p>A list of security groups.</p>
    pub groups: Option<Vec<GroupIdentifier>>,
    /// <p>The ID of the instance.</p>
    pub instance_id: Option<String>,
    /// <p>Any tags assigned to the instance.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: Option<String>,
}

struct ClassicLinkInstanceDeserializer;
impl ClassicLinkInstanceDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ClassicLinkInstance, XmlParseError> {
        deserialize_elements::<_, ClassicLinkInstance, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "groupSet" => {
                    obj.groups.get_or_insert(vec![]).extend(
                        GroupIdentifierListDeserializer::deserialize("groupSet", stack)?,
                    );
                }
                "instanceId" => {
                    obj.instance_id = Some(StringDeserializer::deserialize("instanceId", stack)?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "vpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct ClassicLinkInstanceListDeserializer;
impl ClassicLinkInstanceListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ClassicLinkInstance>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ClassicLinkInstanceDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a Classic Load Balancer.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ClassicLoadBalancer {
    /// <p>The name of the load balancer.</p>
    pub name: Option<String>,
}

struct ClassicLoadBalancerDeserializer;
impl ClassicLoadBalancerDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ClassicLoadBalancer, XmlParseError> {
        deserialize_elements::<_, ClassicLoadBalancer, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "name" => {
                    obj.name = Some(StringDeserializer::deserialize("name", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `ClassicLoadBalancer` contents to a `SignedRequest`.
struct ClassicLoadBalancerSerializer;
impl ClassicLoadBalancerSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ClassicLoadBalancer) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.name {
            params.put(&format!("{}{}", prefix, "Name"), &field_value);
        }
    }
}

struct ClassicLoadBalancersDeserializer;
impl ClassicLoadBalancersDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ClassicLoadBalancer>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ClassicLoadBalancerDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `ClassicLoadBalancers` contents to a `SignedRequest`.
struct ClassicLoadBalancersSerializer;
impl ClassicLoadBalancersSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<ClassicLoadBalancer>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            ClassicLoadBalancerSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes the Classic Load Balancers to attach to a Spot Fleet. Spot Fleet registers the running Spot Instances with these Classic Load Balancers.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ClassicLoadBalancersConfig {
    /// <p>One or more Classic Load Balancers.</p>
    pub classic_load_balancers: Option<Vec<ClassicLoadBalancer>>,
}

struct ClassicLoadBalancersConfigDeserializer;
impl ClassicLoadBalancersConfigDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ClassicLoadBalancersConfig, XmlParseError> {
        deserialize_elements::<_, ClassicLoadBalancersConfig, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "classicLoadBalancers" => {
                        obj.classic_load_balancers.get_or_insert(vec![]).extend(
                            ClassicLoadBalancersDeserializer::deserialize(
                                "classicLoadBalancers",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}

/// Serialize `ClassicLoadBalancersConfig` contents to a `SignedRequest`.
struct ClassicLoadBalancersConfigSerializer;
impl ClassicLoadBalancersConfigSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ClassicLoadBalancersConfig) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.classic_load_balancers {
            ClassicLoadBalancersSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ClassicLoadBalancers"),
                field_value,
            );
        }
    }
}

/// <p>Describes the state of a client certificate revocation list.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ClientCertificateRevocationListStatus {
    /// <p>The state of the client certificate revocation list.</p>
    pub code: Option<String>,
    /// <p>A message about the status of the client certificate revocation list, if applicable.</p>
    pub message: Option<String>,
}

struct ClientCertificateRevocationListStatusDeserializer;
impl ClientCertificateRevocationListStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ClientCertificateRevocationListStatus, XmlParseError> {
        deserialize_elements::<_, ClientCertificateRevocationListStatus, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "code" => {
                        obj.code = Some(
                            ClientCertificateRevocationListStatusCodeDeserializer::deserialize(
                                "code", stack,
                            )?,
                        );
                    }
                    "message" => {
                        obj.message = Some(StringDeserializer::deserialize("message", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct ClientCertificateRevocationListStatusCodeDeserializer;
impl ClientCertificateRevocationListStatusCodeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes the client-specific data.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ClientData {
    /// <p>A user-defined comment about the disk upload.</p>
    pub comment: Option<String>,
    /// <p>The time that the disk upload ends.</p>
    pub upload_end: Option<String>,
    /// <p>The size of the uploaded disk image, in GiB.</p>
    pub upload_size: Option<f64>,
    /// <p>The time that the disk upload starts.</p>
    pub upload_start: Option<String>,
}

/// Serialize `ClientData` contents to a `SignedRequest`.
struct ClientDataSerializer;
impl ClientDataSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ClientData) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.comment {
            params.put(&format!("{}{}", prefix, "Comment"), &field_value);
        }
        if let Some(ref field_value) = obj.upload_end {
            params.put(&format!("{}{}", prefix, "UploadEnd"), &field_value);
        }
        if let Some(ref field_value) = obj.upload_size {
            params.put(&format!("{}{}", prefix, "UploadSize"), &field_value);
        }
        if let Some(ref field_value) = obj.upload_start {
            params.put(&format!("{}{}", prefix, "UploadStart"), &field_value);
        }
    }
}

/// <p>Describes the authentication methods used by a Client VPN endpoint. Client VPN supports Active Directory and mutual authentication. For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/authentication-authrization.html#client-authentication">Authentication</a> in the <i>AWS Client VPN Administrator Guide</i>.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ClientVpnAuthentication {
    /// <p>Information about the Active Directory, if applicable.</p>
    pub active_directory: Option<DirectoryServiceAuthentication>,
    /// <p>Information about the authentication certificates, if applicable.</p>
    pub mutual_authentication: Option<CertificateAuthentication>,
    /// <p>The authentication type used.</p>
    pub type_: Option<String>,
}

struct ClientVpnAuthenticationDeserializer;
impl ClientVpnAuthenticationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ClientVpnAuthentication, XmlParseError> {
        deserialize_elements::<_, ClientVpnAuthentication, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "activeDirectory" => {
                        obj.active_directory =
                            Some(DirectoryServiceAuthenticationDeserializer::deserialize(
                                "activeDirectory",
                                stack,
                            )?);
                    }
                    "mutualAuthentication" => {
                        obj.mutual_authentication =
                            Some(CertificateAuthenticationDeserializer::deserialize(
                                "mutualAuthentication",
                                stack,
                            )?);
                    }
                    "type" => {
                        obj.type_ = Some(ClientVpnAuthenticationTypeDeserializer::deserialize(
                            "type", stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct ClientVpnAuthenticationListDeserializer;
impl ClientVpnAuthenticationListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ClientVpnAuthentication>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ClientVpnAuthenticationDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the authentication method to be used by a Client VPN endpoint. Client VPN supports Active Directory and mutual authentication. For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/authentication-authrization.html#client-authentication">Authentication</a> in the <i>AWS Client VPN Administrator Guide</i>.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ClientVpnAuthenticationRequest {
    /// <p>Information about the Active Directory to be used, if applicable. You must provide this information if <b>Type</b> is <code>directory-service-authentication</code>.</p>
    pub active_directory: Option<DirectoryServiceAuthenticationRequest>,
    /// <p>Information about the authentication certificates to be used, if applicable. You must provide this information if <b>Type</b> is <code>certificate-authentication</code>.</p>
    pub mutual_authentication: Option<CertificateAuthenticationRequest>,
    /// <p>The type of client authentication to be used. Specify <code>certificate-authentication</code> to use certificate-based authentication, or <code>directory-service-authentication</code> to use Active Directory authentication.</p>
    pub type_: Option<String>,
}

/// Serialize `ClientVpnAuthenticationRequest` contents to a `SignedRequest`.
struct ClientVpnAuthenticationRequestSerializer;
impl ClientVpnAuthenticationRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ClientVpnAuthenticationRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.active_directory {
            DirectoryServiceAuthenticationRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ActiveDirectory"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.mutual_authentication {
            CertificateAuthenticationRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "MutualAuthentication"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.type_ {
            params.put(&format!("{}{}", prefix, "Type"), &field_value);
        }
    }
}

/// Serialize `ClientVpnAuthenticationRequestList` contents to a `SignedRequest`.
struct ClientVpnAuthenticationRequestListSerializer;
impl ClientVpnAuthenticationRequestListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<ClientVpnAuthenticationRequest>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            ClientVpnAuthenticationRequestSerializer::serialize(params, &key, obj);
        }
    }
}

struct ClientVpnAuthenticationTypeDeserializer;
impl ClientVpnAuthenticationTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes the state of an authorization rule.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ClientVpnAuthorizationRuleStatus {
    /// <p>The state of the authorization rule.</p>
    pub code: Option<String>,
    /// <p>A message about the status of the authorization rule, if applicable.</p>
    pub message: Option<String>,
}

struct ClientVpnAuthorizationRuleStatusDeserializer;
impl ClientVpnAuthorizationRuleStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ClientVpnAuthorizationRuleStatus, XmlParseError> {
        deserialize_elements::<_, ClientVpnAuthorizationRuleStatus, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "code" => {
                        obj.code = Some(
                            ClientVpnAuthorizationRuleStatusCodeDeserializer::deserialize(
                                "code", stack,
                            )?,
                        );
                    }
                    "message" => {
                        obj.message = Some(StringDeserializer::deserialize("message", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct ClientVpnAuthorizationRuleStatusCodeDeserializer;
impl ClientVpnAuthorizationRuleStatusCodeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a client connection.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ClientVpnConnection {
    /// <p>The IP address of the client.</p>
    pub client_ip: Option<String>,
    /// <p>The ID of the Client VPN endpoint to which the client is connected.</p>
    pub client_vpn_endpoint_id: Option<String>,
    /// <p>The common name associated with the client. This is either the name of the client certificate, or the Active Directory user name.</p>
    pub common_name: Option<String>,
    /// <p>The date and time the client connection was terminated.</p>
    pub connection_end_time: Option<String>,
    /// <p>The date and time the client connection was established.</p>
    pub connection_established_time: Option<String>,
    /// <p>The ID of the client connection.</p>
    pub connection_id: Option<String>,
    /// <p>The number of bytes received by the client.</p>
    pub egress_bytes: Option<String>,
    /// <p>The number of packets received by the client.</p>
    pub egress_packets: Option<String>,
    /// <p>The number of bytes sent by the client.</p>
    pub ingress_bytes: Option<String>,
    /// <p>The number of packets sent by the client.</p>
    pub ingress_packets: Option<String>,
    /// <p>The current state of the client connection.</p>
    pub status: Option<ClientVpnConnectionStatus>,
    /// <p>The current date and time.</p>
    pub timestamp: Option<String>,
    /// <p>The username of the client who established the client connection. This information is only provided if Active Directory client authentication is used.</p>
    pub username: Option<String>,
}

struct ClientVpnConnectionDeserializer;
impl ClientVpnConnectionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ClientVpnConnection, XmlParseError> {
        deserialize_elements::<_, ClientVpnConnection, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "clientIp" => {
                    obj.client_ip = Some(StringDeserializer::deserialize("clientIp", stack)?);
                }
                "clientVpnEndpointId" => {
                    obj.client_vpn_endpoint_id = Some(StringDeserializer::deserialize(
                        "clientVpnEndpointId",
                        stack,
                    )?);
                }
                "commonName" => {
                    obj.common_name = Some(StringDeserializer::deserialize("commonName", stack)?);
                }
                "connectionEndTime" => {
                    obj.connection_end_time =
                        Some(StringDeserializer::deserialize("connectionEndTime", stack)?);
                }
                "connectionEstablishedTime" => {
                    obj.connection_established_time = Some(StringDeserializer::deserialize(
                        "connectionEstablishedTime",
                        stack,
                    )?);
                }
                "connectionId" => {
                    obj.connection_id =
                        Some(StringDeserializer::deserialize("connectionId", stack)?);
                }
                "egressBytes" => {
                    obj.egress_bytes = Some(StringDeserializer::deserialize("egressBytes", stack)?);
                }
                "egressPackets" => {
                    obj.egress_packets =
                        Some(StringDeserializer::deserialize("egressPackets", stack)?);
                }
                "ingressBytes" => {
                    obj.ingress_bytes =
                        Some(StringDeserializer::deserialize("ingressBytes", stack)?);
                }
                "ingressPackets" => {
                    obj.ingress_packets =
                        Some(StringDeserializer::deserialize("ingressPackets", stack)?);
                }
                "status" => {
                    obj.status = Some(ClientVpnConnectionStatusDeserializer::deserialize(
                        "status", stack,
                    )?);
                }
                "timestamp" => {
                    obj.timestamp = Some(StringDeserializer::deserialize("timestamp", stack)?);
                }
                "username" => {
                    obj.username = Some(StringDeserializer::deserialize("username", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct ClientVpnConnectionSetDeserializer;
impl ClientVpnConnectionSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ClientVpnConnection>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ClientVpnConnectionDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the status of a client connection.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ClientVpnConnectionStatus {
    /// <p>The state of the client connection.</p>
    pub code: Option<String>,
    /// <p>A message about the status of the client connection, if applicable.</p>
    pub message: Option<String>,
}

struct ClientVpnConnectionStatusDeserializer;
impl ClientVpnConnectionStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ClientVpnConnectionStatus, XmlParseError> {
        deserialize_elements::<_, ClientVpnConnectionStatus, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "code" => {
                        obj.code = Some(ClientVpnConnectionStatusCodeDeserializer::deserialize(
                            "code", stack,
                        )?);
                    }
                    "message" => {
                        obj.message = Some(StringDeserializer::deserialize("message", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct ClientVpnConnectionStatusCodeDeserializer;
impl ClientVpnConnectionStatusCodeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a Client VPN endpoint.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ClientVpnEndpoint {
    /// <p>Information about the authentication method used by the Client VPN endpoint.</p>
    pub authentication_options: Option<Vec<ClientVpnAuthentication>>,
    /// <p>The IPv4 address range, in CIDR notation, from which client IP addresses are assigned.</p>
    pub client_cidr_block: Option<String>,
    /// <p>The ID of the Client VPN endpoint.</p>
    pub client_vpn_endpoint_id: Option<String>,
    /// <p>Information about the client connection logging options for the Client VPN endpoint.</p>
    pub connection_log_options: Option<ConnectionLogResponseOptions>,
    /// <p>The date and time the Client VPN endpoint was created.</p>
    pub creation_time: Option<String>,
    /// <p>The date and time the Client VPN endpoint was deleted, if applicable.</p>
    pub deletion_time: Option<String>,
    /// <p>A brief description of the endpoint.</p>
    pub description: Option<String>,
    /// <p>The DNS name to be used by clients when connecting to the Client VPN endpoint.</p>
    pub dns_name: Option<String>,
    /// <p>Information about the DNS servers to be used for DNS resolution. </p>
    pub dns_servers: Option<Vec<String>>,
    /// <p>The ARN of the server certificate.</p>
    pub server_certificate_arn: Option<String>,
    /// <p>Indicates whether VPN split tunneling is supported.</p>
    pub split_tunnel: Option<bool>,
    /// <p>The current state of the Client VPN endpoint.</p>
    pub status: Option<ClientVpnEndpointStatus>,
    /// <p>Any tags assigned to the Client VPN endpoint.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The transport protocol used by the Client VPN endpoint.</p>
    pub transport_protocol: Option<String>,
    /// <p>The protocol used by the VPN session.</p>
    pub vpn_protocol: Option<String>,
}

struct ClientVpnEndpointDeserializer;
impl ClientVpnEndpointDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ClientVpnEndpoint, XmlParseError> {
        deserialize_elements::<_, ClientVpnEndpoint, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "authenticationOptions" => {
                    obj.authentication_options.get_or_insert(vec![]).extend(
                        ClientVpnAuthenticationListDeserializer::deserialize(
                            "authenticationOptions",
                            stack,
                        )?,
                    );
                }
                "clientCidrBlock" => {
                    obj.client_cidr_block =
                        Some(StringDeserializer::deserialize("clientCidrBlock", stack)?);
                }
                "clientVpnEndpointId" => {
                    obj.client_vpn_endpoint_id = Some(StringDeserializer::deserialize(
                        "clientVpnEndpointId",
                        stack,
                    )?);
                }
                "connectionLogOptions" => {
                    obj.connection_log_options =
                        Some(ConnectionLogResponseOptionsDeserializer::deserialize(
                            "connectionLogOptions",
                            stack,
                        )?);
                }
                "creationTime" => {
                    obj.creation_time =
                        Some(StringDeserializer::deserialize("creationTime", stack)?);
                }
                "deletionTime" => {
                    obj.deletion_time =
                        Some(StringDeserializer::deserialize("deletionTime", stack)?);
                }
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "dnsName" => {
                    obj.dns_name = Some(StringDeserializer::deserialize("dnsName", stack)?);
                }
                "dnsServer" => {
                    obj.dns_servers.get_or_insert(vec![]).extend(
                        ValueStringListDeserializer::deserialize("dnsServer", stack)?,
                    );
                }
                "serverCertificateArn" => {
                    obj.server_certificate_arn = Some(StringDeserializer::deserialize(
                        "serverCertificateArn",
                        stack,
                    )?);
                }
                "splitTunnel" => {
                    obj.split_tunnel =
                        Some(BooleanDeserializer::deserialize("splitTunnel", stack)?);
                }
                "status" => {
                    obj.status = Some(ClientVpnEndpointStatusDeserializer::deserialize(
                        "status", stack,
                    )?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "transportProtocol" => {
                    obj.transport_protocol = Some(TransportProtocolDeserializer::deserialize(
                        "transportProtocol",
                        stack,
                    )?);
                }
                "vpnProtocol" => {
                    obj.vpn_protocol =
                        Some(VpnProtocolDeserializer::deserialize("vpnProtocol", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes the state of a Client VPN endpoint.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ClientVpnEndpointStatus {
    /// <p><p>The state of the Client VPN endpoint. Possible states include:</p> <ul> <li> <p> <code>pending-associate</code> - The Client VPN endpoint has been created but no target networks have been associated. The Client VPN endpoint cannot accept connections.</p> </li> <li> <p> <code>available</code> - The Client VPN endpoint has been created and a target network has been associated. The Client VPN endpoint can accept connections.</p> </li> <li> <p> <code>deleting</code> - The Client VPN endpoint is being deleted. The Client VPN endpoint cannot accept connections.</p> </li> <li> <p> <code>deleted</code> - The Client VPN endpoint has been deleted. The Client VPN endpoint cannot accept connections.</p> </li> </ul></p>
    pub code: Option<String>,
    /// <p>A message about the status of the Client VPN endpoint.</p>
    pub message: Option<String>,
}

struct ClientVpnEndpointStatusDeserializer;
impl ClientVpnEndpointStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ClientVpnEndpointStatus, XmlParseError> {
        deserialize_elements::<_, ClientVpnEndpointStatus, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "code" => {
                        obj.code = Some(ClientVpnEndpointStatusCodeDeserializer::deserialize(
                            "code", stack,
                        )?);
                    }
                    "message" => {
                        obj.message = Some(StringDeserializer::deserialize("message", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct ClientVpnEndpointStatusCodeDeserializer;
impl ClientVpnEndpointStatusCodeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Information about a Client VPN endpoint route.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ClientVpnRoute {
    /// <p>The ID of the Client VPN endpoint with which the route is associated.</p>
    pub client_vpn_endpoint_id: Option<String>,
    /// <p>A brief description of the route.</p>
    pub description: Option<String>,
    /// <p>The IPv4 address range, in CIDR notation, of the route destination.</p>
    pub destination_cidr: Option<String>,
    /// <p>Indicates how the route was associated with the Client VPN endpoint. <code>associate</code> indicates that the route was automatically added when the target network was associated with the Client VPN endpoint. <code>add-route</code> indicates that the route was manually added using the <b>CreateClientVpnRoute</b> action.</p>
    pub origin: Option<String>,
    /// <p>The current state of the route.</p>
    pub status: Option<ClientVpnRouteStatus>,
    /// <p>The ID of the subnet through which traffic is routed.</p>
    pub target_subnet: Option<String>,
    /// <p>The route type.</p>
    pub type_: Option<String>,
}

struct ClientVpnRouteDeserializer;
impl ClientVpnRouteDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ClientVpnRoute, XmlParseError> {
        deserialize_elements::<_, ClientVpnRoute, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "clientVpnEndpointId" => {
                    obj.client_vpn_endpoint_id = Some(StringDeserializer::deserialize(
                        "clientVpnEndpointId",
                        stack,
                    )?);
                }
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "destinationCidr" => {
                    obj.destination_cidr =
                        Some(StringDeserializer::deserialize("destinationCidr", stack)?);
                }
                "origin" => {
                    obj.origin = Some(StringDeserializer::deserialize("origin", stack)?);
                }
                "status" => {
                    obj.status = Some(ClientVpnRouteStatusDeserializer::deserialize(
                        "status", stack,
                    )?);
                }
                "targetSubnet" => {
                    obj.target_subnet =
                        Some(StringDeserializer::deserialize("targetSubnet", stack)?);
                }
                "type" => {
                    obj.type_ = Some(StringDeserializer::deserialize("type", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct ClientVpnRouteSetDeserializer;
impl ClientVpnRouteSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ClientVpnRoute>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ClientVpnRouteDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the state of a Client VPN endpoint route.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ClientVpnRouteStatus {
    /// <p>The state of the Client VPN endpoint route.</p>
    pub code: Option<String>,
    /// <p>A message about the status of the Client VPN endpoint route, if applicable.</p>
    pub message: Option<String>,
}

struct ClientVpnRouteStatusDeserializer;
impl ClientVpnRouteStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ClientVpnRouteStatus, XmlParseError> {
        deserialize_elements::<_, ClientVpnRouteStatus, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "code" => {
                    obj.code = Some(ClientVpnRouteStatusCodeDeserializer::deserialize(
                        "code", stack,
                    )?);
                }
                "message" => {
                    obj.message = Some(StringDeserializer::deserialize("message", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct ClientVpnRouteStatusCodeDeserializer;
impl ClientVpnRouteStatusCodeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct ClientVpnSecurityGroupIdSetDeserializer;
impl ClientVpnSecurityGroupIdSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(StringDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `ClientVpnSecurityGroupIdSet` contents to a `SignedRequest`.
struct ClientVpnSecurityGroupIdSetSerializer;
impl ClientVpnSecurityGroupIdSetSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ConfirmProductInstanceRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the instance.</p>
    pub instance_id: String,
    /// <p>The product code. This must be a product code that you own.</p>
    pub product_code: String,
}

/// Serialize `ConfirmProductInstanceRequest` contents to a `SignedRequest`.
struct ConfirmProductInstanceRequestSerializer;
impl ConfirmProductInstanceRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ConfirmProductInstanceRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "InstanceId"), &obj.instance_id);
        params.put(&format!("{}{}", prefix, "ProductCode"), &obj.product_code);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ConfirmProductInstanceResult {
    /// <p>The AWS account ID of the instance owner. This is only present if the product code is attached to the instance.</p>
    pub owner_id: Option<String>,
    /// <p>The return value of the request. Returns <code>true</code> if the specified product code is owned by the requester and associated with the specified instance.</p>
    pub return_: Option<bool>,
}

struct ConfirmProductInstanceResultDeserializer;
impl ConfirmProductInstanceResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ConfirmProductInstanceResult, XmlParseError> {
        deserialize_elements::<_, ConfirmProductInstanceResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "ownerId" => {
                        obj.owner_id = Some(StringDeserializer::deserialize("ownerId", stack)?);
                    }
                    "return" => {
                        obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes the client connection logging options for the Client VPN endpoint.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ConnectionLogOptions {
    /// <p>The name of the CloudWatch Logs log group.</p>
    pub cloudwatch_log_group: Option<String>,
    /// <p>The name of the CloudWatch Logs log stream to which the connection data is published.</p>
    pub cloudwatch_log_stream: Option<String>,
    /// <p>Indicates whether connection logging is enabled.</p>
    pub enabled: Option<bool>,
}

/// Serialize `ConnectionLogOptions` contents to a `SignedRequest`.
struct ConnectionLogOptionsSerializer;
impl ConnectionLogOptionsSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ConnectionLogOptions) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.cloudwatch_log_group {
            params.put(&format!("{}{}", prefix, "CloudwatchLogGroup"), &field_value);
        }
        if let Some(ref field_value) = obj.cloudwatch_log_stream {
            params.put(
                &format!("{}{}", prefix, "CloudwatchLogStream"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.enabled {
            params.put(&format!("{}{}", prefix, "Enabled"), &field_value);
        }
    }
}

/// <p>Information about the client connection logging options for a Client VPN endpoint.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ConnectionLogResponseOptions {
    /// <p>The name of the Amazon CloudWatch Logs log group to which connection logging data is published.</p>
    pub cloudwatch_log_group: Option<String>,
    /// <p>The name of the Amazon CloudWatch Logs log stream to which connection logging data is published.</p>
    pub cloudwatch_log_stream: Option<String>,
    /// <p>Indicates whether client connection logging is enabled for the Client VPN endpoint.</p>
    pub enabled: Option<bool>,
}

struct ConnectionLogResponseOptionsDeserializer;
impl ConnectionLogResponseOptionsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ConnectionLogResponseOptions, XmlParseError> {
        deserialize_elements::<_, ConnectionLogResponseOptions, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "CloudwatchLogGroup" => {
                        obj.cloudwatch_log_group = Some(StringDeserializer::deserialize(
                            "CloudwatchLogGroup",
                            stack,
                        )?);
                    }
                    "CloudwatchLogStream" => {
                        obj.cloudwatch_log_stream = Some(StringDeserializer::deserialize(
                            "CloudwatchLogStream",
                            stack,
                        )?);
                    }
                    "Enabled" => {
                        obj.enabled = Some(BooleanDeserializer::deserialize("Enabled", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes a connection notification for a VPC endpoint or VPC endpoint service.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ConnectionNotification {
    /// <p>The events for the notification. Valid values are <code>Accept</code>, <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.</p>
    pub connection_events: Option<Vec<String>>,
    /// <p>The ARN of the SNS topic for the notification.</p>
    pub connection_notification_arn: Option<String>,
    /// <p>The ID of the notification.</p>
    pub connection_notification_id: Option<String>,
    /// <p>The state of the notification.</p>
    pub connection_notification_state: Option<String>,
    /// <p>The type of notification.</p>
    pub connection_notification_type: Option<String>,
    /// <p>The ID of the endpoint service.</p>
    pub service_id: Option<String>,
    /// <p>The ID of the VPC endpoint.</p>
    pub vpc_endpoint_id: Option<String>,
}

struct ConnectionNotificationDeserializer;
impl ConnectionNotificationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ConnectionNotification, XmlParseError> {
        deserialize_elements::<_, ConnectionNotification, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "connectionEvents" => {
                    obj.connection_events.get_or_insert(vec![]).extend(
                        ValueStringListDeserializer::deserialize("connectionEvents", stack)?,
                    );
                }
                "connectionNotificationArn" => {
                    obj.connection_notification_arn = Some(StringDeserializer::deserialize(
                        "connectionNotificationArn",
                        stack,
                    )?);
                }
                "connectionNotificationId" => {
                    obj.connection_notification_id = Some(StringDeserializer::deserialize(
                        "connectionNotificationId",
                        stack,
                    )?);
                }
                "connectionNotificationState" => {
                    obj.connection_notification_state =
                        Some(ConnectionNotificationStateDeserializer::deserialize(
                            "connectionNotificationState",
                            stack,
                        )?);
                }
                "connectionNotificationType" => {
                    obj.connection_notification_type =
                        Some(ConnectionNotificationTypeDeserializer::deserialize(
                            "connectionNotificationType",
                            stack,
                        )?);
                }
                "serviceId" => {
                    obj.service_id = Some(StringDeserializer::deserialize("serviceId", stack)?);
                }
                "vpcEndpointId" => {
                    obj.vpc_endpoint_id =
                        Some(StringDeserializer::deserialize("vpcEndpointId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct ConnectionNotificationSetDeserializer;
impl ConnectionNotificationSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ConnectionNotification>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ConnectionNotificationDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct ConnectionNotificationStateDeserializer;
impl ConnectionNotificationStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct ConnectionNotificationTypeDeserializer;
impl ConnectionNotificationTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct ContainerFormatDeserializer;
impl ContainerFormatDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}

/// Serialize `ConversionIdStringList` contents to a `SignedRequest`.
struct ConversionIdStringListSerializer;
impl ConversionIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Describes a conversion task.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ConversionTask {
    /// <p>The ID of the conversion task.</p>
    pub conversion_task_id: Option<String>,
    /// <p>The time when the task expires. If the upload isn't complete before the expiration time, we automatically cancel the task.</p>
    pub expiration_time: Option<String>,
    /// <p>If the task is for importing an instance, this contains information about the import instance task.</p>
    pub import_instance: Option<ImportInstanceTaskDetails>,
    /// <p>If the task is for importing a volume, this contains information about the import volume task.</p>
    pub import_volume: Option<ImportVolumeTaskDetails>,
    /// <p>The state of the conversion task.</p>
    pub state: Option<String>,
    /// <p>The status message related to the conversion task.</p>
    pub status_message: Option<String>,
    /// <p>Any tags assigned to the task.</p>
    pub tags: Option<Vec<Tag>>,
}

struct ConversionTaskDeserializer;
impl ConversionTaskDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ConversionTask, XmlParseError> {
        deserialize_elements::<_, ConversionTask, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "conversionTaskId" => {
                    obj.conversion_task_id =
                        Some(StringDeserializer::deserialize("conversionTaskId", stack)?);
                }
                "expirationTime" => {
                    obj.expiration_time =
                        Some(StringDeserializer::deserialize("expirationTime", stack)?);
                }
                "importInstance" => {
                    obj.import_instance = Some(ImportInstanceTaskDetailsDeserializer::deserialize(
                        "importInstance",
                        stack,
                    )?);
                }
                "importVolume" => {
                    obj.import_volume = Some(ImportVolumeTaskDetailsDeserializer::deserialize(
                        "importVolume",
                        stack,
                    )?);
                }
                "state" => {
                    obj.state = Some(ConversionTaskStateDeserializer::deserialize(
                        "state", stack,
                    )?);
                }
                "statusMessage" => {
                    obj.status_message =
                        Some(StringDeserializer::deserialize("statusMessage", stack)?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct ConversionTaskStateDeserializer;
impl ConversionTaskStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CopyFpgaImageRequest {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p>The description for the new AFI.</p>
    pub description: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The name for the new AFI. The default is the name of the source AFI.</p>
    pub name: Option<String>,
    /// <p>The ID of the source AFI.</p>
    pub source_fpga_image_id: String,
    /// <p>The Region that contains the source AFI.</p>
    pub source_region: String,
}

/// Serialize `CopyFpgaImageRequest` contents to a `SignedRequest`.
struct CopyFpgaImageRequestSerializer;
impl CopyFpgaImageRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CopyFpgaImageRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.name {
            params.put(&format!("{}{}", prefix, "Name"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "SourceFpgaImageId"),
            &obj.source_fpga_image_id,
        );
        params.put(&format!("{}{}", prefix, "SourceRegion"), &obj.source_region);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CopyFpgaImageResult {
    /// <p>The ID of the new AFI.</p>
    pub fpga_image_id: Option<String>,
}

struct CopyFpgaImageResultDeserializer;
impl CopyFpgaImageResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CopyFpgaImageResult, XmlParseError> {
        deserialize_elements::<_, CopyFpgaImageResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "fpgaImageId" => {
                    obj.fpga_image_id =
                        Some(StringDeserializer::deserialize("fpgaImageId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Contains the parameters for CopyImage.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CopyImageRequest {
    /// <p>Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub client_token: Option<String>,
    /// <p>A description for the new AMI in the destination Region.</p>
    pub description: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Specifies whether the destination snapshots of the copied image should be encrypted. You can encrypt a copy of an unencrypted snapshot, but you cannot create an unencrypted copy of an encrypted snapshot. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using <code>KmsKeyId</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub encrypted: Option<bool>,
    /// <p>An identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted volume. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set. </p> <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with "alias/". For example:</p> <ul> <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li> <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li> <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li> <li> <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code> </p> </li> </ul> <p>AWS parses <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure. </p> <p>The specified CMK must exist in the Region that the snapshot is being copied to. </p>
    pub kms_key_id: Option<String>,
    /// <p>The name of the new AMI in the destination Region.</p>
    pub name: String,
    /// <p>The ID of the AMI to copy.</p>
    pub source_image_id: String,
    /// <p>The name of the Region that contains the AMI to copy.</p>
    pub source_region: String,
}

/// Serialize `CopyImageRequest` contents to a `SignedRequest`.
struct CopyImageRequestSerializer;
impl CopyImageRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CopyImageRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.encrypted {
            params.put(&format!("{}{}", prefix, "Encrypted"), &field_value);
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "Name"), &obj.name);
        params.put(
            &format!("{}{}", prefix, "SourceImageId"),
            &obj.source_image_id,
        );
        params.put(&format!("{}{}", prefix, "SourceRegion"), &obj.source_region);
    }
}

/// <p>Contains the output of CopyImage.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CopyImageResult {
    /// <p>The ID of the new AMI.</p>
    pub image_id: Option<String>,
}

struct CopyImageResultDeserializer;
impl CopyImageResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CopyImageResult, XmlParseError> {
        deserialize_elements::<_, CopyImageResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "imageId" => {
                    obj.image_id = Some(StringDeserializer::deserialize("imageId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Contains the parameters for CopySnapshot.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CopySnapshotRequest {
    /// <p>A description for the EBS snapshot.</p>
    pub description: Option<String>,
    /// <p>The destination Region to use in the <code>PresignedUrl</code> parameter of a snapshot copy operation. This parameter is only valid for specifying the destination Region in a <code>PresignedUrl</code> parameter, where it is required.</p> <p>The snapshot copy is sent to the regional endpoint that you sent the HTTP request to (for example, <code>ec2.us-east-1.amazonaws.com</code>). With the AWS CLI, this is specified using the <code>--region</code> parameter or the default Region in your AWS configuration file.</p>
    pub destination_region: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Specifies whether the destination snapshot should be encrypted. You can encrypt a copy of an unencrypted snapshot, but you cannot use it to create an unencrypted copy of an encrypted snapshot. Your default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using <code>KmsKeyId</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub encrypted: Option<bool>,
    /// <p>An identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) to use to encrypt the volume. This parameter is only required if you want to use a customer-managed CMK; if this parameter is not specified, your AWS-managed CMK for the account is used. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set. </p> <p>The CMK identifier may be provided in any of the following formats: </p> <ul> <li> <p>Key ID: For example, key/1234abcd-12ab-34cd-56ef-1234567890ab.</p> </li> <li> <p>Key alias: For example, alias/ExampleAlias. </p> </li> <li> <p>Key ARN: The key ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>key</code> namespace, and then the CMK ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>. </p> </li> <li> <p>Alias ARN: The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>. </p> </li> </ul> <p>AWS authenticates <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. The action will eventually fail. </p>
    pub kms_key_id: Option<String>,
    /// <p>When you copy an encrypted source snapshot using the Amazon EC2 Query API, you must supply a pre-signed URL. This parameter is optional for unencrypted snapshots. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html">Query Requests</a>.</p> <p>The <code>PresignedUrl</code> should use the snapshot source endpoint, the <code>CopySnapshot</code> action, and include the <code>SourceRegion</code>, <code>SourceSnapshotId</code>, and <code>DestinationRegion</code> parameters. The <code>PresignedUrl</code> must be signed using AWS Signature Version 4. Because EBS snapshots are stored in Amazon S3, the signing algorithm for this parameter uses the same logic that is described in <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests by Using Query Parameters (AWS Signature Version 4)</a> in the <i>Amazon Simple Storage Service API Reference</i>. An invalid or improperly signed <code>PresignedUrl</code> will cause the copy operation to fail asynchronously, and the snapshot will move to an <code>error</code> state.</p>
    pub presigned_url: Option<String>,
    /// <p>The ID of the Region that contains the snapshot to be copied.</p>
    pub source_region: String,
    /// <p>The ID of the EBS snapshot to copy.</p>
    pub source_snapshot_id: String,
}

/// Serialize `CopySnapshotRequest` contents to a `SignedRequest`.
struct CopySnapshotRequestSerializer;
impl CopySnapshotRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CopySnapshotRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.destination_region {
            params.put(&format!("{}{}", prefix, "DestinationRegion"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.encrypted {
            params.put(&format!("{}{}", prefix, "Encrypted"), &field_value);
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"), &field_value);
        }
        if let Some(ref field_value) = obj.presigned_url {
            params.put(&format!("{}{}", prefix, "PresignedUrl"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "SourceRegion"), &obj.source_region);
        params.put(
            &format!("{}{}", prefix, "SourceSnapshotId"),
            &obj.source_snapshot_id,
        );
    }
}

/// <p>Contains the output of CopySnapshot.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CopySnapshotResult {
    /// <p>The ID of the new snapshot.</p>
    pub snapshot_id: Option<String>,
}

struct CopySnapshotResultDeserializer;
impl CopySnapshotResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CopySnapshotResult, XmlParseError> {
        deserialize_elements::<_, CopySnapshotResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "snapshotId" => {
                    obj.snapshot_id = Some(StringDeserializer::deserialize("snapshotId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>The CPU options for the instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CpuOptions {
    /// <p>The number of CPU cores for the instance.</p>
    pub core_count: Option<i64>,
    /// <p>The number of threads per CPU core.</p>
    pub threads_per_core: Option<i64>,
}

struct CpuOptionsDeserializer;
impl CpuOptionsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CpuOptions, XmlParseError> {
        deserialize_elements::<_, CpuOptions, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "coreCount" => {
                    obj.core_count = Some(IntegerDeserializer::deserialize("coreCount", stack)?);
                }
                "threadsPerCore" => {
                    obj.threads_per_core =
                        Some(IntegerDeserializer::deserialize("threadsPerCore", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>The CPU options for the instance. Both the core count and threads per core must be specified in the request.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CpuOptionsRequest {
    /// <p>The number of CPU cores for the instance.</p>
    pub core_count: Option<i64>,
    /// <p>The number of threads per CPU core. To disable Intel Hyper-Threading Technology for the instance, specify a value of <code>1</code>. Otherwise, specify the default value of <code>2</code>.</p>
    pub threads_per_core: Option<i64>,
}

/// Serialize `CpuOptionsRequest` contents to a `SignedRequest`.
struct CpuOptionsRequestSerializer;
impl CpuOptionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CpuOptionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.core_count {
            params.put(&format!("{}{}", prefix, "CoreCount"), &field_value);
        }
        if let Some(ref field_value) = obj.threads_per_core {
            params.put(&format!("{}{}", prefix, "ThreadsPerCore"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateCapacityReservationRequest {
    /// <p>The Availability Zone in which to create the Capacity Reservation.</p>
    pub availability_zone: String,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p> <p>Constraint: Maximum 64 ASCII characters.</p>
    pub client_token: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.</p>
    pub ebs_optimized: Option<bool>,
    /// <p>The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to <code>expired</code> when it reaches its end date and time.</p> <p>You must provide an <code>EndDate</code> value if <code>EndDateType</code> is <code>limited</code>. Omit <code>EndDate</code> if <code>EndDateType</code> is <code>unlimited</code>.</p> <p>If the <code>EndDateType</code> is <code>limited</code>, the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.</p>
    pub end_date: Option<String>,
    /// <p><p>Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:</p> <ul> <li> <p> <code>unlimited</code> - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an <code>EndDate</code> if the <code>EndDateType</code> is <code>unlimited</code>.</p> </li> <li> <p> <code>limited</code> - The Capacity Reservation expires automatically at a specified date and time. You must provide an <code>EndDate</code> value if the <code>EndDateType</code> value is <code>limited</code>.</p> </li> </ul></p>
    pub end_date_type: Option<String>,
    /// <p>Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.</p>
    pub ephemeral_storage: Option<bool>,
    /// <p>The number of instances for which to reserve capacity.</p>
    pub instance_count: i64,
    /// <p>Indicates the type of instance launches that the Capacity Reservation accepts. The options include:</p> <ul> <li> <p> <code>open</code> - The Capacity Reservation automatically matches all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes run in the Capacity Reservation automatically without specifying any additional parameters.</p> </li> <li> <p> <code>targeted</code> - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity. </p> </li> </ul> <p>Default: <code>open</code> </p>
    pub instance_match_criteria: Option<String>,
    /// <p>The type of operating system for which to reserve capacity.</p>
    pub instance_platform: String,
    /// <p>The instance type for which to reserve capacity. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub instance_type: String,
    /// <p>The tags to apply to the Capacity Reservation during launch.</p>
    pub tag_specifications: Option<Vec<TagSpecification>>,
    /// <p><p>Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:</p> <ul> <li> <p> <code>default</code> - The Capacity Reservation is created on hardware that is shared with other AWS accounts.</p> </li> <li> <p> <code>dedicated</code> - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account.</p> </li> </ul></p>
    pub tenancy: Option<String>,
}

/// Serialize `CreateCapacityReservationRequest` contents to a `SignedRequest`.
struct CreateCapacityReservationRequestSerializer;
impl CreateCapacityReservationRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateCapacityReservationRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "AvailabilityZone"),
            &obj.availability_zone,
        );
        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.ebs_optimized {
            params.put(&format!("{}{}", prefix, "EbsOptimized"), &field_value);
        }
        if let Some(ref field_value) = obj.end_date {
            params.put(&format!("{}{}", prefix, "EndDate"), &field_value);
        }
        if let Some(ref field_value) = obj.end_date_type {
            params.put(&format!("{}{}", prefix, "EndDateType"), &field_value);
        }
        if let Some(ref field_value) = obj.ephemeral_storage {
            params.put(&format!("{}{}", prefix, "EphemeralStorage"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "InstanceCount"),
            &obj.instance_count,
        );
        if let Some(ref field_value) = obj.instance_match_criteria {
            params.put(
                &format!("{}{}", prefix, "InstanceMatchCriteria"),
                &field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "InstancePlatform"),
            &obj.instance_platform,
        );
        params.put(&format!("{}{}", prefix, "InstanceType"), &obj.instance_type);
        if let Some(ref field_value) = obj.tag_specifications {
            TagSpecificationListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "TagSpecifications"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.tenancy {
            params.put(&format!("{}{}", prefix, "Tenancy"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateCapacityReservationResult {
    /// <p>Information about the Capacity Reservation.</p>
    pub capacity_reservation: Option<CapacityReservation>,
}

struct CreateCapacityReservationResultDeserializer;
impl CreateCapacityReservationResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateCapacityReservationResult, XmlParseError> {
        deserialize_elements::<_, CreateCapacityReservationResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "capacityReservation" => {
                        obj.capacity_reservation =
                            Some(CapacityReservationDeserializer::deserialize(
                                "capacityReservation",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateClientVpnEndpointRequest {
    /// <p>Information about the authentication method to be used to authenticate clients.</p>
    pub authentication_options: Vec<ClientVpnAuthenticationRequest>,
    /// <p>The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.</p>
    pub client_cidr_block: String,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p><p>Information about the client connection logging options.</p> <p>If you enable client connection logging, data about client connections is sent to a Cloudwatch Logs log stream. The following information is logged:</p> <ul> <li> <p>Client connection requests</p> </li> <li> <p>Client connection results (successful and unsuccessful)</p> </li> <li> <p>Reasons for unsuccessful client connection requests</p> </li> <li> <p>Client connection termination time</p> </li> </ul></p>
    pub connection_log_options: ConnectionLogOptions,
    /// <p>A brief description of the Client VPN endpoint.</p>
    pub description: Option<String>,
    /// <p>Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the VPC that is to be associated with Client VPN endpoint is used as the DNS server.</p>
    pub dns_servers: Option<Vec<String>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ARN of the server certificate. For more information, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p>
    pub server_certificate_arn: String,
    /// <p>The tags to apply to the Client VPN endpoint during creation.</p>
    pub tag_specifications: Option<Vec<TagSpecification>>,
    /// <p>The transport protocol to be used by the VPN session.</p> <p>Default value: <code>udp</code> </p>
    pub transport_protocol: Option<String>,
}

/// Serialize `CreateClientVpnEndpointRequest` contents to a `SignedRequest`.
struct CreateClientVpnEndpointRequestSerializer;
impl CreateClientVpnEndpointRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateClientVpnEndpointRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        ClientVpnAuthenticationRequestListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "Authentication"),
            &obj.authentication_options,
        );
        params.put(
            &format!("{}{}", prefix, "ClientCidrBlock"),
            &obj.client_cidr_block,
        );
        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        ConnectionLogOptionsSerializer::serialize(
            params,
            &format!("{}{}", prefix, "ConnectionLogOptions"),
            &obj.connection_log_options,
        );
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.dns_servers {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "DnsServers"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "ServerCertificateArn"),
            &obj.server_certificate_arn,
        );
        if let Some(ref field_value) = obj.tag_specifications {
            TagSpecificationListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "TagSpecification"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.transport_protocol {
            params.put(&format!("{}{}", prefix, "TransportProtocol"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateClientVpnEndpointResult {
    /// <p>The ID of the Client VPN endpoint.</p>
    pub client_vpn_endpoint_id: Option<String>,
    /// <p>The DNS name to be used by clients when establishing their VPN session.</p>
    pub dns_name: Option<String>,
    /// <p>The current state of the Client VPN endpoint.</p>
    pub status: Option<ClientVpnEndpointStatus>,
}

struct CreateClientVpnEndpointResultDeserializer;
impl CreateClientVpnEndpointResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateClientVpnEndpointResult, XmlParseError> {
        deserialize_elements::<_, CreateClientVpnEndpointResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "clientVpnEndpointId" => {
                        obj.client_vpn_endpoint_id = Some(StringDeserializer::deserialize(
                            "clientVpnEndpointId",
                            stack,
                        )?);
                    }
                    "dnsName" => {
                        obj.dns_name = Some(StringDeserializer::deserialize("dnsName", stack)?);
                    }
                    "status" => {
                        obj.status = Some(ClientVpnEndpointStatusDeserializer::deserialize(
                            "status", stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateClientVpnRouteRequest {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p>The ID of the Client VPN endpoint to which to add the route.</p>
    pub client_vpn_endpoint_id: String,
    /// <p>A brief description of the route.</p>
    pub description: Option<String>,
    /// <p>The IPv4 address range, in CIDR notation, of the route destination. For example:</p> <ul> <li> <p>To add a route for Internet access, enter <code>0.0.0.0/0</code> </p> </li> <li> <p>To add a route for a peered VPC, enter the peered VPC's IPv4 CIDR range</p> </li> <li> <p>To add a route for an on-premises network, enter the AWS Site-to-Site VPN connection's IPv4 CIDR range</p> </li> </ul> <p>Route address ranges cannot overlap with the CIDR range specified for client allocation.</p>
    pub destination_cidr_block: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the subnet through which you want to route traffic. The specified subnet must be an existing target network of the Client VPN endpoint.</p>
    pub target_vpc_subnet_id: String,
}

/// Serialize `CreateClientVpnRouteRequest` contents to a `SignedRequest`.
struct CreateClientVpnRouteRequestSerializer;
impl CreateClientVpnRouteRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateClientVpnRouteRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "ClientVpnEndpointId"),
            &obj.client_vpn_endpoint_id,
        );
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "DestinationCidrBlock"),
            &obj.destination_cidr_block,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TargetVpcSubnetId"),
            &obj.target_vpc_subnet_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateClientVpnRouteResult {
    /// <p>The current state of the route.</p>
    pub status: Option<ClientVpnRouteStatus>,
}

struct CreateClientVpnRouteResultDeserializer;
impl CreateClientVpnRouteResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateClientVpnRouteResult, XmlParseError> {
        deserialize_elements::<_, CreateClientVpnRouteResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "status" => {
                        obj.status = Some(ClientVpnRouteStatusDeserializer::deserialize(
                            "status", stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for CreateCustomerGateway.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateCustomerGatewayRequest {
    /// <p>For devices that support BGP, the customer gateway's BGP ASN.</p> <p>Default: 65000</p>
    pub bgp_asn: i64,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The Internet-routable IP address for the customer gateway's outside interface. The address must be static.</p>
    pub public_ip: String,
    /// <p>The type of VPN connection that this customer gateway supports (<code>ipsec.1</code>).</p>
    pub type_: String,
}

/// Serialize `CreateCustomerGatewayRequest` contents to a `SignedRequest`.
struct CreateCustomerGatewayRequestSerializer;
impl CreateCustomerGatewayRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateCustomerGatewayRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "BgpAsn"), &obj.bgp_asn);
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "IpAddress"), &obj.public_ip);
        params.put(&format!("{}{}", prefix, "Type"), &obj.type_);
    }
}

/// <p>Contains the output of CreateCustomerGateway.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateCustomerGatewayResult {
    /// <p>Information about the customer gateway.</p>
    pub customer_gateway: Option<CustomerGateway>,
}

struct CreateCustomerGatewayResultDeserializer;
impl CreateCustomerGatewayResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateCustomerGatewayResult, XmlParseError> {
        deserialize_elements::<_, CreateCustomerGatewayResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "customerGateway" => {
                        obj.customer_gateway = Some(CustomerGatewayDeserializer::deserialize(
                            "customerGateway",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateDefaultSubnetRequest {
    /// <p>The Availability Zone in which to create the default subnet.</p>
    pub availability_zone: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `CreateDefaultSubnetRequest` contents to a `SignedRequest`.
struct CreateDefaultSubnetRequestSerializer;
impl CreateDefaultSubnetRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDefaultSubnetRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "AvailabilityZone"),
            &obj.availability_zone,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateDefaultSubnetResult {
    /// <p>Information about the subnet.</p>
    pub subnet: Option<Subnet>,
}

struct CreateDefaultSubnetResultDeserializer;
impl CreateDefaultSubnetResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateDefaultSubnetResult, XmlParseError> {
        deserialize_elements::<_, CreateDefaultSubnetResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "subnet" => {
                        obj.subnet = Some(SubnetDeserializer::deserialize("subnet", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateDefaultVpcRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `CreateDefaultVpcRequest` contents to a `SignedRequest`.
struct CreateDefaultVpcRequestSerializer;
impl CreateDefaultVpcRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDefaultVpcRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateDefaultVpcResult {
    /// <p>Information about the VPC.</p>
    pub vpc: Option<Vpc>,
}

struct CreateDefaultVpcResultDeserializer;
impl CreateDefaultVpcResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateDefaultVpcResult, XmlParseError> {
        deserialize_elements::<_, CreateDefaultVpcResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "vpc" => {
                    obj.vpc = Some(VpcDeserializer::deserialize("vpc", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateDhcpOptionsRequest {
    /// <p>A DHCP configuration option.</p>
    pub dhcp_configurations: Vec<NewDhcpConfiguration>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `CreateDhcpOptionsRequest` contents to a `SignedRequest`.
struct CreateDhcpOptionsRequestSerializer;
impl CreateDhcpOptionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateDhcpOptionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        NewDhcpConfigurationListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "DhcpConfiguration"),
            &obj.dhcp_configurations,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateDhcpOptionsResult {
    /// <p>A set of DHCP options.</p>
    pub dhcp_options: Option<DhcpOptions>,
}

struct CreateDhcpOptionsResultDeserializer;
impl CreateDhcpOptionsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateDhcpOptionsResult, XmlParseError> {
        deserialize_elements::<_, CreateDhcpOptionsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "dhcpOptions" => {
                        obj.dhcp_options =
                            Some(DhcpOptionsDeserializer::deserialize("dhcpOptions", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateEgressOnlyInternetGatewayRequest {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the VPC for which to create the egress-only internet gateway.</p>
    pub vpc_id: String,
}

/// Serialize `CreateEgressOnlyInternetGatewayRequest` contents to a `SignedRequest`.
struct CreateEgressOnlyInternetGatewayRequestSerializer;
impl CreateEgressOnlyInternetGatewayRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateEgressOnlyInternetGatewayRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "VpcId"), &obj.vpc_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateEgressOnlyInternetGatewayResult {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub client_token: Option<String>,
    /// <p>Information about the egress-only internet gateway.</p>
    pub egress_only_internet_gateway: Option<EgressOnlyInternetGateway>,
}

struct CreateEgressOnlyInternetGatewayResultDeserializer;
impl CreateEgressOnlyInternetGatewayResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateEgressOnlyInternetGatewayResult, XmlParseError> {
        deserialize_elements::<_, CreateEgressOnlyInternetGatewayResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "clientToken" => {
                        obj.client_token =
                            Some(StringDeserializer::deserialize("clientToken", stack)?);
                    }
                    "egressOnlyInternetGateway" => {
                        obj.egress_only_internet_gateway =
                            Some(EgressOnlyInternetGatewayDeserializer::deserialize(
                                "egressOnlyInternetGateway",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes the instances that could not be launched by the fleet.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct EC2CreateFleetError {
    /// <p>The error code that indicates why the instance could not be launched. For more information about error codes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html">Error Codes</a>.</p>
    pub error_code: Option<String>,
    /// <p>The error message that describes why the instance could not be launched. For more information about error messages, see ee <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html">Error Codes</a>.</p>
    pub error_message: Option<String>,
    /// <p>The launch templates and overrides that were used for launching the instances. Any parameters that you specify in the Overrides override the same parameters in the launch template.</p>
    pub launch_template_and_overrides: Option<LaunchTemplateAndOverridesResponse>,
    /// <p>Indicates if the instance that could not be launched was a Spot Instance or On-Demand Instance.</p>
    pub lifecycle: Option<String>,
}

struct EC2CreateFleetErrorDeserializer;
impl EC2CreateFleetErrorDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<EC2CreateFleetError, XmlParseError> {
        deserialize_elements::<_, EC2CreateFleetError, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "errorCode" => {
                    obj.error_code = Some(StringDeserializer::deserialize("errorCode", stack)?);
                }
                "errorMessage" => {
                    obj.error_message =
                        Some(StringDeserializer::deserialize("errorMessage", stack)?);
                }
                "launchTemplateAndOverrides" => {
                    obj.launch_template_and_overrides =
                        Some(LaunchTemplateAndOverridesResponseDeserializer::deserialize(
                            "launchTemplateAndOverrides",
                            stack,
                        )?);
                }
                "lifecycle" => {
                    obj.lifecycle = Some(InstanceLifecycleDeserializer::deserialize(
                        "lifecycle",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct CreateFleetErrorsSetDeserializer;
impl CreateFleetErrorsSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<EC2CreateFleetError>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(EC2CreateFleetErrorDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the instances that were launched by the fleet.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateFleetInstance {
    /// <p>The IDs of the instances.</p>
    pub instance_ids: Option<Vec<String>>,
    /// <p>The instance type.</p>
    pub instance_type: Option<String>,
    /// <p>The launch templates and overrides that were used for launching the instances. Any parameters that you specify in the Overrides override the same parameters in the launch template.</p>
    pub launch_template_and_overrides: Option<LaunchTemplateAndOverridesResponse>,
    /// <p>Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.</p>
    pub lifecycle: Option<String>,
    /// <p>The value is <code>Windows</code> for Windows instances; otherwise blank.</p>
    pub platform: Option<String>,
}

struct CreateFleetInstanceDeserializer;
impl CreateFleetInstanceDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateFleetInstance, XmlParseError> {
        deserialize_elements::<_, CreateFleetInstance, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "instanceIds" => {
                    obj.instance_ids.get_or_insert(vec![]).extend(
                        InstanceIdsSetDeserializer::deserialize("instanceIds", stack)?,
                    );
                }
                "instanceType" => {
                    obj.instance_type = Some(InstanceTypeDeserializer::deserialize(
                        "instanceType",
                        stack,
                    )?);
                }
                "launchTemplateAndOverrides" => {
                    obj.launch_template_and_overrides =
                        Some(LaunchTemplateAndOverridesResponseDeserializer::deserialize(
                            "launchTemplateAndOverrides",
                            stack,
                        )?);
                }
                "lifecycle" => {
                    obj.lifecycle = Some(InstanceLifecycleDeserializer::deserialize(
                        "lifecycle",
                        stack,
                    )?);
                }
                "platform" => {
                    obj.platform =
                        Some(PlatformValuesDeserializer::deserialize("platform", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct CreateFleetInstancesSetDeserializer;
impl CreateFleetInstancesSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<CreateFleetInstance>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(CreateFleetInstanceDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateFleetRequest {
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.</p>
    pub excess_capacity_termination_policy: Option<String>,
    /// <p>The configuration for the EC2 Fleet.</p>
    pub launch_template_configs: Vec<FleetLaunchTemplateConfigRequest>,
    /// <p>The allocation strategy of On-Demand Instances in an EC2 Fleet.</p>
    pub on_demand_options: Option<OnDemandOptionsRequest>,
    /// <p>Indicates whether EC2 Fleet should replace unhealthy instances.</p>
    pub replace_unhealthy_instances: Option<bool>,
    /// <p>Describes the configuration of Spot Instances in an EC2 Fleet.</p>
    pub spot_options: Option<SpotOptionsRequest>,
    /// <p>The key-value pair for tagging the EC2 Fleet request on creation. The value for <code>ResourceType</code> must be <code>fleet</code>, otherwise the fleet request fails. To tag instances at launch, specify the tags in the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template">launch template</a>. For information about tagging after launch, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources">Tagging Your Resources</a>. </p>
    pub tag_specifications: Option<Vec<TagSpecification>>,
    /// <p>The <code>TotalTargetCapacity</code>, <code>OnDemandTargetCapacity</code>, <code>SpotTargetCapacity</code>, and <code>DefaultCapacityType</code> structure.</p>
    pub target_capacity_specification: TargetCapacitySpecificationRequest,
    /// <p>Indicates whether running instances should be terminated when the EC2 Fleet expires.</p>
    pub terminate_instances_with_expiration: Option<bool>,
    /// <p>The type of the request. By default, the EC2 Fleet places an asynchronous request for your desired capacity, and maintains it by replenishing interrupted Spot Instances (<code>maintain</code>). A value of <code>instant</code> places a synchronous one-time request, and returns errors for any instances that could not be launched. A value of <code>request</code> places an asynchronous one-time request without maintaining capacity or submitting requests in alternative capacity pools if capacity is unavailable. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-configuration-strategies.html#ec2-fleet-request-type">EC2 Fleet Request Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub type_: Option<String>,
    /// <p>The start date and time of the request, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). The default is to start fulfilling the request immediately.</p>
    pub valid_from: Option<String>,
    /// <p>The end date and time of the request, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.</p>
    pub valid_until: Option<String>,
}

/// Serialize `CreateFleetRequest` contents to a `SignedRequest`.
struct CreateFleetRequestSerializer;
impl CreateFleetRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateFleetRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.excess_capacity_termination_policy {
            params.put(
                &format!("{}{}", prefix, "ExcessCapacityTerminationPolicy"),
                &field_value,
            );
        }
        FleetLaunchTemplateConfigListRequestSerializer::serialize(
            params,
            &format!("{}{}", prefix, "LaunchTemplateConfigs"),
            &obj.launch_template_configs,
        );
        if let Some(ref field_value) = obj.on_demand_options {
            OnDemandOptionsRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "OnDemandOptions"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.replace_unhealthy_instances {
            params.put(
                &format!("{}{}", prefix, "ReplaceUnhealthyInstances"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.spot_options {
            SpotOptionsRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SpotOptions"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.tag_specifications {
            TagSpecificationListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "TagSpecification"),
                field_value,
            );
        }
        TargetCapacitySpecificationRequestSerializer::serialize(
            params,
            &format!("{}{}", prefix, "TargetCapacitySpecification"),
            &obj.target_capacity_specification,
        );
        if let Some(ref field_value) = obj.terminate_instances_with_expiration {
            params.put(
                &format!("{}{}", prefix, "TerminateInstancesWithExpiration"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.type_ {
            params.put(&format!("{}{}", prefix, "Type"), &field_value);
        }
        if let Some(ref field_value) = obj.valid_from {
            params.put(&format!("{}{}", prefix, "ValidFrom"), &field_value);
        }
        if let Some(ref field_value) = obj.valid_until {
            params.put(&format!("{}{}", prefix, "ValidUntil"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateFleetResult {
    /// <p>Information about the instances that could not be launched by the fleet. Valid only when <b>Type</b> is set to <code>instant</code>.</p>
    pub errors: Option<Vec<EC2CreateFleetError>>,
    /// <p>The ID of the EC2 Fleet.</p>
    pub fleet_id: Option<String>,
    /// <p>Information about the instances that were launched by the fleet. Valid only when <b>Type</b> is set to <code>instant</code>.</p>
    pub instances: Option<Vec<CreateFleetInstance>>,
}

struct CreateFleetResultDeserializer;
impl CreateFleetResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateFleetResult, XmlParseError> {
        deserialize_elements::<_, CreateFleetResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "errorSet" => {
                    obj.errors.get_or_insert(vec![]).extend(
                        CreateFleetErrorsSetDeserializer::deserialize("errorSet", stack)?,
                    );
                }
                "fleetId" => {
                    obj.fleet_id =
                        Some(FleetIdentifierDeserializer::deserialize("fleetId", stack)?);
                }
                "fleetInstanceSet" => {
                    obj.instances.get_or_insert(vec![]).extend(
                        CreateFleetInstancesSetDeserializer::deserialize(
                            "fleetInstanceSet",
                            stack,
                        )?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateFlowLogsRequest {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p>The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account.</p> <p>If you specify <code>LogDestinationType</code> as <code>s3</code>, do not specify <code>DeliverLogsPermissionArn</code> or <code>LogGroupName</code>.</p>
    pub deliver_logs_permission_arn: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Specifies the destination to which the flow log data is to be published. Flow log data can be published to a CloudWatch Logs log group or an Amazon S3 bucket. The value specified for this parameter depends on the value specified for <code>LogDestinationType</code>.</p> <p>If LogDestinationType is not specified or <code>cloud-watch-logs</code>, specify the Amazon Resource Name (ARN) of the CloudWatch Logs log group.</p> <p>If LogDestinationType is <code>s3</code>, specify the ARN of the Amazon S3 bucket. You can also specify a subfolder in the bucket. To specify a subfolder in the bucket, use the following ARN format: <code>bucket_ARN/subfolder_name/</code>. For example, to specify a subfolder named <code>my-logs</code> in a bucket named <code>my-bucket</code>, use the following ARN: <code>arn:aws:s3:::my-bucket/my-logs/</code>. You cannot use <code>AWSLogs</code> as a subfolder name. This is a reserved term.</p>
    pub log_destination: Option<String>,
    /// <p>Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to CloudWatch Logs or Amazon S3. To publish flow log data to CloudWatch Logs, specify <code>cloud-watch-logs</code>. To publish flow log data to Amazon S3, specify <code>s3</code>.</p> <p>If you specify <code>LogDestinationType</code> as <code>s3</code>, do not specify <code>DeliverLogsPermissionArn</code> or <code>LogGroupName</code>.</p> <p>Default: <code>cloud-watch-logs</code> </p>
    pub log_destination_type: Option<String>,
    /// <p>The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs.</p> <p>If you specify <code>LogDestinationType</code> as <code>s3</code>, do not specify <code>DeliverLogsPermissionArn</code> or <code>LogGroupName</code>.</p>
    pub log_group_name: Option<String>,
    /// <p>The ID of the subnet, network interface, or VPC for which you want to create a flow log.</p> <p>Constraints: Maximum of 1000 resources</p>
    pub resource_ids: Vec<String>,
    /// <p>The type of resource for which to create the flow log. For example, if you specified a VPC ID for the <code>ResourceId</code> property, specify <code>VPC</code> for this property.</p>
    pub resource_type: String,
    /// <p>The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.</p>
    pub traffic_type: String,
}

/// Serialize `CreateFlowLogsRequest` contents to a `SignedRequest`.
struct CreateFlowLogsRequestSerializer;
impl CreateFlowLogsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateFlowLogsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        if let Some(ref field_value) = obj.deliver_logs_permission_arn {
            params.put(
                &format!("{}{}", prefix, "DeliverLogsPermissionArn"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.log_destination {
            params.put(&format!("{}{}", prefix, "LogDestination"), &field_value);
        }
        if let Some(ref field_value) = obj.log_destination_type {
            params.put(&format!("{}{}", prefix, "LogDestinationType"), &field_value);
        }
        if let Some(ref field_value) = obj.log_group_name {
            params.put(&format!("{}{}", prefix, "LogGroupName"), &field_value);
        }
        ValueStringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "ResourceId"),
            &obj.resource_ids,
        );
        params.put(&format!("{}{}", prefix, "ResourceType"), &obj.resource_type);
        params.put(&format!("{}{}", prefix, "TrafficType"), &obj.traffic_type);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateFlowLogsResult {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub client_token: Option<String>,
    /// <p>The IDs of the flow logs.</p>
    pub flow_log_ids: Option<Vec<String>>,
    /// <p>Information about the flow logs that could not be created successfully.</p>
    pub unsuccessful: Option<Vec<UnsuccessfulItem>>,
}

struct CreateFlowLogsResultDeserializer;
impl CreateFlowLogsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateFlowLogsResult, XmlParseError> {
        deserialize_elements::<_, CreateFlowLogsResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "clientToken" => {
                    obj.client_token = Some(StringDeserializer::deserialize("clientToken", stack)?);
                }
                "flowLogIdSet" => {
                    obj.flow_log_ids.get_or_insert(vec![]).extend(
                        ValueStringListDeserializer::deserialize("flowLogIdSet", stack)?,
                    );
                }
                "unsuccessful" => {
                    obj.unsuccessful.get_or_insert(vec![]).extend(
                        UnsuccessfulItemSetDeserializer::deserialize("unsuccessful", stack)?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateFpgaImageRequest {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p>A description for the AFI.</p>
    pub description: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The location of the encrypted design checkpoint in Amazon S3. The input must be a tarball.</p>
    pub input_storage_location: StorageLocation,
    /// <p>The location in Amazon S3 for the output logs.</p>
    pub logs_storage_location: Option<StorageLocation>,
    /// <p>A name for the AFI.</p>
    pub name: Option<String>,
}

/// Serialize `CreateFpgaImageRequest` contents to a `SignedRequest`.
struct CreateFpgaImageRequestSerializer;
impl CreateFpgaImageRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateFpgaImageRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        StorageLocationSerializer::serialize(
            params,
            &format!("{}{}", prefix, "InputStorageLocation"),
            &obj.input_storage_location,
        );
        if let Some(ref field_value) = obj.logs_storage_location {
            StorageLocationSerializer::serialize(
                params,
                &format!("{}{}", prefix, "LogsStorageLocation"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.name {
            params.put(&format!("{}{}", prefix, "Name"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateFpgaImageResult {
    /// <p>The global FPGA image identifier (AGFI ID).</p>
    pub fpga_image_global_id: Option<String>,
    /// <p>The FPGA image identifier (AFI ID).</p>
    pub fpga_image_id: Option<String>,
}

struct CreateFpgaImageResultDeserializer;
impl CreateFpgaImageResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateFpgaImageResult, XmlParseError> {
        deserialize_elements::<_, CreateFpgaImageResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "fpgaImageGlobalId" => {
                    obj.fpga_image_global_id =
                        Some(StringDeserializer::deserialize("fpgaImageGlobalId", stack)?);
                }
                "fpgaImageId" => {
                    obj.fpga_image_id =
                        Some(StringDeserializer::deserialize("fpgaImageId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateImageRequest {
    /// <p>The block device mappings. This parameter cannot be used to modify the encryption status of existing volumes or snapshots. To create an AMI with encrypted snapshots, use the <a>CopyImage</a> action.</p>
    pub block_device_mappings: Option<Vec<BlockDeviceMapping>>,
    /// <p>A description for the new image.</p>
    pub description: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the instance.</p>
    pub instance_id: String,
    /// <p>A name for the new image.</p> <p>Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)</p>
    pub name: String,
    /// <p>By default, Amazon EC2 attempts to shut down and reboot the instance before creating the image. If the 'No Reboot' option is set, Amazon EC2 doesn't shut down the instance before creating the image. When this option is used, file system integrity on the created image can't be guaranteed.</p>
    pub no_reboot: Option<bool>,
}

/// Serialize `CreateImageRequest` contents to a `SignedRequest`.
struct CreateImageRequestSerializer;
impl CreateImageRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateImageRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.block_device_mappings {
            BlockDeviceMappingRequestListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "BlockDeviceMapping"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "InstanceId"), &obj.instance_id);
        params.put(&format!("{}{}", prefix, "Name"), &obj.name);
        if let Some(ref field_value) = obj.no_reboot {
            params.put(&format!("{}{}", prefix, "NoReboot"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateImageResult {
    /// <p>The ID of the new AMI.</p>
    pub image_id: Option<String>,
}

struct CreateImageResultDeserializer;
impl CreateImageResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateImageResult, XmlParseError> {
        deserialize_elements::<_, CreateImageResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "imageId" => {
                    obj.image_id = Some(StringDeserializer::deserialize("imageId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Contains the parameters for CreateInstanceExportTask.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateInstanceExportTaskRequest {
    /// <p>A description for the conversion task or the resource being exported. The maximum length is 255 bytes.</p>
    pub description: Option<String>,
    /// <p>The format and location for an instance export task.</p>
    pub export_to_s3_task: Option<ExportToS3TaskSpecification>,
    /// <p>The ID of the instance.</p>
    pub instance_id: String,
    /// <p>The target virtualization environment.</p>
    pub target_environment: Option<String>,
}

/// Serialize `CreateInstanceExportTaskRequest` contents to a `SignedRequest`.
struct CreateInstanceExportTaskRequestSerializer;
impl CreateInstanceExportTaskRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateInstanceExportTaskRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.export_to_s3_task {
            ExportToS3TaskSpecificationSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ExportToS3"),
                field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "InstanceId"), &obj.instance_id);
        if let Some(ref field_value) = obj.target_environment {
            params.put(&format!("{}{}", prefix, "TargetEnvironment"), &field_value);
        }
    }
}

/// <p>Contains the output for CreateInstanceExportTask.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateInstanceExportTaskResult {
    /// <p>Information about the instance export task.</p>
    pub export_task: Option<ExportTask>,
}

struct CreateInstanceExportTaskResultDeserializer;
impl CreateInstanceExportTaskResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateInstanceExportTaskResult, XmlParseError> {
        deserialize_elements::<_, CreateInstanceExportTaskResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "exportTask" => {
                        obj.export_task =
                            Some(ExportTaskDeserializer::deserialize("exportTask", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateInternetGatewayRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `CreateInternetGatewayRequest` contents to a `SignedRequest`.
struct CreateInternetGatewayRequestSerializer;
impl CreateInternetGatewayRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateInternetGatewayRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateInternetGatewayResult {
    /// <p>Information about the internet gateway.</p>
    pub internet_gateway: Option<InternetGateway>,
}

struct CreateInternetGatewayResultDeserializer;
impl CreateInternetGatewayResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateInternetGatewayResult, XmlParseError> {
        deserialize_elements::<_, CreateInternetGatewayResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "internetGateway" => {
                        obj.internet_gateway = Some(InternetGatewayDeserializer::deserialize(
                            "internetGateway",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateKeyPairRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>A unique name for the key pair.</p> <p>Constraints: Up to 255 ASCII characters</p>
    pub key_name: String,
}

/// Serialize `CreateKeyPairRequest` contents to a `SignedRequest`.
struct CreateKeyPairRequestSerializer;
impl CreateKeyPairRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateKeyPairRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "KeyName"), &obj.key_name);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateLaunchTemplateRequest {
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p> <p>Constraint: Maximum 128 ASCII characters.</p>
    pub client_token: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The information for the launch template.</p>
    pub launch_template_data: RequestLaunchTemplateData,
    /// <p>A name for the launch template.</p>
    pub launch_template_name: String,
    /// <p>A description for the first version of the launch template.</p>
    pub version_description: Option<String>,
}

/// Serialize `CreateLaunchTemplateRequest` contents to a `SignedRequest`.
struct CreateLaunchTemplateRequestSerializer;
impl CreateLaunchTemplateRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateLaunchTemplateRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        RequestLaunchTemplateDataSerializer::serialize(
            params,
            &format!("{}{}", prefix, "LaunchTemplateData"),
            &obj.launch_template_data,
        );
        params.put(
            &format!("{}{}", prefix, "LaunchTemplateName"),
            &obj.launch_template_name,
        );
        if let Some(ref field_value) = obj.version_description {
            params.put(&format!("{}{}", prefix, "VersionDescription"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateLaunchTemplateResult {
    /// <p>Information about the launch template.</p>
    pub launch_template: Option<LaunchTemplate>,
}

struct CreateLaunchTemplateResultDeserializer;
impl CreateLaunchTemplateResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateLaunchTemplateResult, XmlParseError> {
        deserialize_elements::<_, CreateLaunchTemplateResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "launchTemplate" => {
                        obj.launch_template = Some(LaunchTemplateDeserializer::deserialize(
                            "launchTemplate",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateLaunchTemplateVersionRequest {
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p> <p>Constraint: Maximum 128 ASCII characters.</p>
    pub client_token: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The information for the launch template.</p>
    pub launch_template_data: RequestLaunchTemplateData,
    /// <p>The ID of the launch template. You must specify either the launch template ID or launch template name in the request.</p>
    pub launch_template_id: Option<String>,
    /// <p>The name of the launch template. You must specify either the launch template ID or launch template name in the request.</p>
    pub launch_template_name: Option<String>,
    /// <p>The version number of the launch template version on which to base the new version. The new version inherits the same launch parameters as the source version, except for parameters that you specify in LaunchTemplateData.</p>
    pub source_version: Option<String>,
    /// <p>A description for the version of the launch template.</p>
    pub version_description: Option<String>,
}

/// Serialize `CreateLaunchTemplateVersionRequest` contents to a `SignedRequest`.
struct CreateLaunchTemplateVersionRequestSerializer;
impl CreateLaunchTemplateVersionRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateLaunchTemplateVersionRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        RequestLaunchTemplateDataSerializer::serialize(
            params,
            &format!("{}{}", prefix, "LaunchTemplateData"),
            &obj.launch_template_data,
        );
        if let Some(ref field_value) = obj.launch_template_id {
            params.put(&format!("{}{}", prefix, "LaunchTemplateId"), &field_value);
        }
        if let Some(ref field_value) = obj.launch_template_name {
            params.put(&format!("{}{}", prefix, "LaunchTemplateName"), &field_value);
        }
        if let Some(ref field_value) = obj.source_version {
            params.put(&format!("{}{}", prefix, "SourceVersion"), &field_value);
        }
        if let Some(ref field_value) = obj.version_description {
            params.put(&format!("{}{}", prefix, "VersionDescription"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateLaunchTemplateVersionResult {
    /// <p>Information about the launch template version.</p>
    pub launch_template_version: Option<LaunchTemplateVersion>,
}

struct CreateLaunchTemplateVersionResultDeserializer;
impl CreateLaunchTemplateVersionResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateLaunchTemplateVersionResult, XmlParseError> {
        deserialize_elements::<_, CreateLaunchTemplateVersionResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "launchTemplateVersion" => {
                        obj.launch_template_version =
                            Some(LaunchTemplateVersionDeserializer::deserialize(
                                "launchTemplateVersion",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateNatGatewayRequest {
    /// <p>The allocation ID of an Elastic IP address to associate with the NAT gateway. If the Elastic IP address is associated with another resource, you must first disassociate it.</p>
    pub allocation_id: String,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p> <p>Constraint: Maximum 64 ASCII characters.</p>
    pub client_token: Option<String>,
    /// <p>The subnet in which to create the NAT gateway.</p>
    pub subnet_id: String,
}

/// Serialize `CreateNatGatewayRequest` contents to a `SignedRequest`.
struct CreateNatGatewayRequestSerializer;
impl CreateNatGatewayRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateNatGatewayRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "AllocationId"), &obj.allocation_id);
        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "SubnetId"), &obj.subnet_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateNatGatewayResult {
    /// <p>Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.</p>
    pub client_token: Option<String>,
    /// <p>Information about the NAT gateway.</p>
    pub nat_gateway: Option<NatGateway>,
}

struct CreateNatGatewayResultDeserializer;
impl CreateNatGatewayResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateNatGatewayResult, XmlParseError> {
        deserialize_elements::<_, CreateNatGatewayResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "clientToken" => {
                    obj.client_token = Some(StringDeserializer::deserialize("clientToken", stack)?);
                }
                "natGateway" => {
                    obj.nat_gateway =
                        Some(NatGatewayDeserializer::deserialize("natGateway", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateNetworkAclEntryRequest {
    /// <p>The IPv4 network range to allow or deny, in CIDR notation (for example <code>172.16.0.0/24</code>).</p>
    pub cidr_block: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet).</p>
    pub egress: bool,
    /// <p>ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.</p>
    pub icmp_type_code: Option<IcmpTypeCode>,
    /// <p>The IPv6 network range to allow or deny, in CIDR notation (for example <code>2001:db8:1234:1a00::/64</code>).</p>
    pub ipv_6_cidr_block: Option<String>,
    /// <p>The ID of the network ACL.</p>
    pub network_acl_id: String,
    /// <p>TCP or UDP protocols: The range of ports the rule applies to. Required if specifying protocol 6 (TCP) or 17 (UDP).</p>
    pub port_range: Option<PortRange>,
    /// <p>The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code.</p>
    pub protocol: String,
    /// <p>Indicates whether to allow or deny the traffic that matches the rule.</p>
    pub rule_action: String,
    /// <p>The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.</p> <p>Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is reserved for internal use.</p>
    pub rule_number: i64,
}

/// Serialize `CreateNetworkAclEntryRequest` contents to a `SignedRequest`.
struct CreateNetworkAclEntryRequestSerializer;
impl CreateNetworkAclEntryRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateNetworkAclEntryRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.cidr_block {
            params.put(&format!("{}{}", prefix, "CidrBlock"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "Egress"), &obj.egress);
        if let Some(ref field_value) = obj.icmp_type_code {
            IcmpTypeCodeSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Icmp"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.ipv_6_cidr_block {
            params.put(&format!("{}{}", prefix, "Ipv6CidrBlock"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "NetworkAclId"),
            &obj.network_acl_id,
        );
        if let Some(ref field_value) = obj.port_range {
            PortRangeSerializer::serialize(
                params,
                &format!("{}{}", prefix, "PortRange"),
                field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "Protocol"), &obj.protocol);
        params.put(&format!("{}{}", prefix, "RuleAction"), &obj.rule_action);
        params.put(&format!("{}{}", prefix, "RuleNumber"), &obj.rule_number);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateNetworkAclRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: String,
}

/// Serialize `CreateNetworkAclRequest` contents to a `SignedRequest`.
struct CreateNetworkAclRequestSerializer;
impl CreateNetworkAclRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateNetworkAclRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "VpcId"), &obj.vpc_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateNetworkAclResult {
    /// <p>Information about the network ACL.</p>
    pub network_acl: Option<NetworkAcl>,
}

struct CreateNetworkAclResultDeserializer;
impl CreateNetworkAclResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateNetworkAclResult, XmlParseError> {
        deserialize_elements::<_, CreateNetworkAclResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "networkAcl" => {
                    obj.network_acl =
                        Some(NetworkAclDeserializer::deserialize("networkAcl", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Contains the parameters for CreateNetworkInterfacePermission.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateNetworkInterfacePermissionRequest {
    /// <p>The AWS account ID.</p>
    pub aws_account_id: Option<String>,
    /// <p>The AWS service. Currently not supported.</p>
    pub aws_service: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: String,
    /// <p>The type of permission to grant.</p>
    pub permission: String,
}

/// Serialize `CreateNetworkInterfacePermissionRequest` contents to a `SignedRequest`.
struct CreateNetworkInterfacePermissionRequestSerializer;
impl CreateNetworkInterfacePermissionRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateNetworkInterfacePermissionRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.aws_account_id {
            params.put(&format!("{}{}", prefix, "AwsAccountId"), &field_value);
        }
        if let Some(ref field_value) = obj.aws_service {
            params.put(&format!("{}{}", prefix, "AwsService"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "NetworkInterfaceId"),
            &obj.network_interface_id,
        );
        params.put(&format!("{}{}", prefix, "Permission"), &obj.permission);
    }
}

/// <p>Contains the output of CreateNetworkInterfacePermission.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateNetworkInterfacePermissionResult {
    /// <p>Information about the permission for the network interface.</p>
    pub interface_permission: Option<NetworkInterfacePermission>,
}

struct CreateNetworkInterfacePermissionResultDeserializer;
impl CreateNetworkInterfacePermissionResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateNetworkInterfacePermissionResult, XmlParseError> {
        deserialize_elements::<_, CreateNetworkInterfacePermissionResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "interfacePermission" => {
                        obj.interface_permission =
                            Some(NetworkInterfacePermissionDeserializer::deserialize(
                                "interfacePermission",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for CreateNetworkInterface.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateNetworkInterfaceRequest {
    /// <p>A description for the network interface.</p>
    pub description: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The IDs of one or more security groups.</p>
    pub groups: Option<Vec<String>>,
    /// <p>Indicates the type of network interface. To create an Elastic Fabric Adapter (EFA), specify <code>efa</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa.html"> Elastic Fabric Adapter</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>If you are not creating an EFA, specify <code>interface</code> or omit this parameter.</p>
    pub interface_type: Option<String>,
    /// <p>The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses. If your subnet has the <code>AssignIpv6AddressOnCreation</code> attribute set to <code>true</code>, you can specify <code>0</code> to override this setting.</p>
    pub ipv_6_address_count: Option<i64>,
    /// <p>One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't use this option if you're specifying a number of IPv6 addresses.</p>
    pub ipv_6_addresses: Option<Vec<InstanceIpv6Address>>,
    /// <p>The primary private IPv4 address of the network interface. If you don't specify an IPv4 address, Amazon EC2 selects one for you from the subnet's IPv4 CIDR range. If you specify an IP address, you cannot indicate any IP addresses specified in <code>privateIpAddresses</code> as primary (only one IP address can be designated as primary).</p>
    pub private_ip_address: Option<String>,
    /// <p>One or more private IPv4 addresses.</p>
    pub private_ip_addresses: Option<Vec<PrivateIpAddressSpecification>>,
    /// <p>The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option and specify more than one private IP address using <code>privateIpAddresses</code>.</p> <p>The number of IP addresses you can assign to a network interface varies by instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI">IP Addresses Per ENI Per Instance Type</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    pub secondary_private_ip_address_count: Option<i64>,
    /// <p>The ID of the subnet to associate with the network interface.</p>
    pub subnet_id: String,
}

/// Serialize `CreateNetworkInterfaceRequest` contents to a `SignedRequest`.
struct CreateNetworkInterfaceRequestSerializer;
impl CreateNetworkInterfaceRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateNetworkInterfaceRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.groups {
            SecurityGroupIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SecurityGroupId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.interface_type {
            params.put(&format!("{}{}", prefix, "InterfaceType"), &field_value);
        }
        if let Some(ref field_value) = obj.ipv_6_address_count {
            params.put(&format!("{}{}", prefix, "Ipv6AddressCount"), &field_value);
        }
        if let Some(ref field_value) = obj.ipv_6_addresses {
            InstanceIpv6AddressListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Ipv6Addresses"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.private_ip_address {
            params.put(&format!("{}{}", prefix, "PrivateIpAddress"), &field_value);
        }
        if let Some(ref field_value) = obj.private_ip_addresses {
            PrivateIpAddressSpecificationListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "PrivateIpAddresses"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.secondary_private_ip_address_count {
            params.put(
                &format!("{}{}", prefix, "SecondaryPrivateIpAddressCount"),
                &field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "SubnetId"), &obj.subnet_id);
    }
}

/// <p>Contains the output of CreateNetworkInterface.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateNetworkInterfaceResult {
    /// <p>Information about the network interface.</p>
    pub network_interface: Option<NetworkInterface>,
}

struct CreateNetworkInterfaceResultDeserializer;
impl CreateNetworkInterfaceResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateNetworkInterfaceResult, XmlParseError> {
        deserialize_elements::<_, CreateNetworkInterfaceResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "networkInterface" => {
                        obj.network_interface = Some(NetworkInterfaceDeserializer::deserialize(
                            "networkInterface",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreatePlacementGroupRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>A name for the placement group. Must be unique within the scope of your account for the Region.</p> <p>Constraints: Up to 255 ASCII characters</p>
    pub group_name: Option<String>,
    /// <p>The number of partitions. Valid only when <b>Strategy</b> is set to <code>partition</code>.</p>
    pub partition_count: Option<i64>,
    /// <p>The placement strategy.</p>
    pub strategy: Option<String>,
}

/// Serialize `CreatePlacementGroupRequest` contents to a `SignedRequest`.
struct CreatePlacementGroupRequestSerializer;
impl CreatePlacementGroupRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreatePlacementGroupRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.group_name {
            params.put(&format!("{}{}", prefix, "GroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.partition_count {
            params.put(&format!("{}{}", prefix, "PartitionCount"), &field_value);
        }
        if let Some(ref field_value) = obj.strategy {
            params.put(&format!("{}{}", prefix, "Strategy"), &field_value);
        }
    }
}

/// <p>Contains the parameters for CreateReservedInstancesListing.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateReservedInstancesListingRequest {
    /// <p>Unique, case-sensitive identifier you provide to ensure idempotency of your listings. This helps avoid duplicate listings. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub client_token: String,
    /// <p>The number of instances that are a part of a Reserved Instance account to be listed in the Reserved Instance Marketplace. This number should be less than or equal to the instance count associated with the Reserved Instance ID specified in this call.</p>
    pub instance_count: i64,
    /// <p>A list specifying the price of the Standard Reserved Instance for each month remaining in the Reserved Instance term.</p>
    pub price_schedules: Vec<PriceScheduleSpecification>,
    /// <p>The ID of the active Standard Reserved Instance.</p>
    pub reserved_instances_id: String,
}

/// Serialize `CreateReservedInstancesListingRequest` contents to a `SignedRequest`.
struct CreateReservedInstancesListingRequestSerializer;
impl CreateReservedInstancesListingRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateReservedInstancesListingRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "ClientToken"), &obj.client_token);
        params.put(
            &format!("{}{}", prefix, "InstanceCount"),
            &obj.instance_count,
        );
        PriceScheduleSpecificationListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "PriceSchedules"),
            &obj.price_schedules,
        );
        params.put(
            &format!("{}{}", prefix, "ReservedInstancesId"),
            &obj.reserved_instances_id,
        );
    }
}

/// <p>Contains the output of CreateReservedInstancesListing.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateReservedInstancesListingResult {
    /// <p>Information about the Standard Reserved Instance listing.</p>
    pub reserved_instances_listings: Option<Vec<ReservedInstancesListing>>,
}

struct CreateReservedInstancesListingResultDeserializer;
impl CreateReservedInstancesListingResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateReservedInstancesListingResult, XmlParseError> {
        deserialize_elements::<_, CreateReservedInstancesListingResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "reservedInstancesListingsSet" => {
                        obj.reserved_instances_listings
                            .get_or_insert(vec![])
                            .extend(ReservedInstancesListingListDeserializer::deserialize(
                                "reservedInstancesListingsSet",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateRouteRequest {
    /// <p>The IPv4 CIDR address block used for the destination match. Routing decisions are based on the most specific match.</p>
    pub destination_cidr_block: Option<String>,
    /// <p>The IPv6 CIDR block used for the destination match. Routing decisions are based on the most specific match.</p>
    pub destination_ipv_6_cidr_block: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>[IPv6 traffic only] The ID of an egress-only internet gateway.</p>
    pub egress_only_internet_gateway_id: Option<String>,
    /// <p>The ID of an internet gateway or virtual private gateway attached to your VPC.</p>
    pub gateway_id: Option<String>,
    /// <p>The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached.</p>
    pub instance_id: Option<String>,
    /// <p>[IPv4 traffic only] The ID of a NAT gateway.</p>
    pub nat_gateway_id: Option<String>,
    /// <p>The ID of a network interface.</p>
    pub network_interface_id: Option<String>,
    /// <p>The ID of the route table for the route.</p>
    pub route_table_id: String,
    /// <p>The ID of a transit gateway.</p>
    pub transit_gateway_id: Option<String>,
    /// <p>The ID of a VPC peering connection.</p>
    pub vpc_peering_connection_id: Option<String>,
}

/// Serialize `CreateRouteRequest` contents to a `SignedRequest`.
struct CreateRouteRequestSerializer;
impl CreateRouteRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateRouteRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.destination_cidr_block {
            params.put(
                &format!("{}{}", prefix, "DestinationCidrBlock"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.destination_ipv_6_cidr_block {
            params.put(
                &format!("{}{}", prefix, "DestinationIpv6CidrBlock"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.egress_only_internet_gateway_id {
            params.put(
                &format!("{}{}", prefix, "EgressOnlyInternetGatewayId"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.gateway_id {
            params.put(&format!("{}{}", prefix, "GatewayId"), &field_value);
        }
        if let Some(ref field_value) = obj.instance_id {
            params.put(&format!("{}{}", prefix, "InstanceId"), &field_value);
        }
        if let Some(ref field_value) = obj.nat_gateway_id {
            params.put(&format!("{}{}", prefix, "NatGatewayId"), &field_value);
        }
        if let Some(ref field_value) = obj.network_interface_id {
            params.put(&format!("{}{}", prefix, "NetworkInterfaceId"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "RouteTableId"),
            &obj.route_table_id,
        );
        if let Some(ref field_value) = obj.transit_gateway_id {
            params.put(&format!("{}{}", prefix, "TransitGatewayId"), &field_value);
        }
        if let Some(ref field_value) = obj.vpc_peering_connection_id {
            params.put(
                &format!("{}{}", prefix, "VpcPeeringConnectionId"),
                &field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateRouteResult {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub return_: Option<bool>,
}

struct CreateRouteResultDeserializer;
impl CreateRouteResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateRouteResult, XmlParseError> {
        deserialize_elements::<_, CreateRouteResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "return" => {
                    obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateRouteTableRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: String,
}

/// Serialize `CreateRouteTableRequest` contents to a `SignedRequest`.
struct CreateRouteTableRequestSerializer;
impl CreateRouteTableRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateRouteTableRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "VpcId"), &obj.vpc_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateRouteTableResult {
    /// <p>Information about the route table.</p>
    pub route_table: Option<RouteTable>,
}

struct CreateRouteTableResultDeserializer;
impl CreateRouteTableResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateRouteTableResult, XmlParseError> {
        deserialize_elements::<_, CreateRouteTableResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "routeTable" => {
                    obj.route_table =
                        Some(RouteTableDeserializer::deserialize("routeTable", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateSecurityGroupRequest {
    /// <p>A description for the security group. This is informational only.</p> <p>Constraints: Up to 255 characters in length</p> <p>Constraints for EC2-Classic: ASCII characters</p> <p>Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*</p>
    pub description: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The name of the security group.</p> <p>Constraints: Up to 255 characters in length. Cannot start with <code>sg-</code>.</p> <p>Constraints for EC2-Classic: ASCII characters</p> <p>Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*</p>
    pub group_name: String,
    /// <p>[EC2-VPC] The ID of the VPC. Required for EC2-VPC.</p>
    pub vpc_id: Option<String>,
}

/// Serialize `CreateSecurityGroupRequest` contents to a `SignedRequest`.
struct CreateSecurityGroupRequestSerializer;
impl CreateSecurityGroupRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateSecurityGroupRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "GroupDescription"),
            &obj.description,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "GroupName"), &obj.group_name);
        if let Some(ref field_value) = obj.vpc_id {
            params.put(&format!("{}{}", prefix, "VpcId"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateSecurityGroupResult {
    /// <p>The ID of the security group.</p>
    pub group_id: Option<String>,
}

struct CreateSecurityGroupResultDeserializer;
impl CreateSecurityGroupResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateSecurityGroupResult, XmlParseError> {
        deserialize_elements::<_, CreateSecurityGroupResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "groupId" => {
                        obj.group_id = Some(StringDeserializer::deserialize("groupId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for CreateSnapshot.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateSnapshotRequest {
    /// <p>A description for the snapshot.</p>
    pub description: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The tags to apply to the snapshot during creation.</p>
    pub tag_specifications: Option<Vec<TagSpecification>>,
    /// <p>The ID of the EBS volume.</p>
    pub volume_id: String,
}

/// Serialize `CreateSnapshotRequest` contents to a `SignedRequest`.
struct CreateSnapshotRequestSerializer;
impl CreateSnapshotRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateSnapshotRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.tag_specifications {
            TagSpecificationListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "TagSpecification"),
                field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "VolumeId"), &obj.volume_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateSnapshotsRequest {
    /// <p>Copies the tags from the specified instance to all snapshots.</p>
    pub copy_tags_from_source: Option<String>,
    /// <p> A description propagated to every snapshot specified by the instance.</p>
    pub description: Option<String>,
    /// <p>Checks whether you have the required permissions for the action without actually making the request. Provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.</p>
    pub dry_run: Option<bool>,
    /// <p>The instance to specify which volumes should be included in the snapshots.</p>
    pub instance_specification: InstanceSpecification,
    /// <p>Tags to apply to every snapshot specified by the instance.</p>
    pub tag_specifications: Option<Vec<TagSpecification>>,
}

/// Serialize `CreateSnapshotsRequest` contents to a `SignedRequest`.
struct CreateSnapshotsRequestSerializer;
impl CreateSnapshotsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateSnapshotsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.copy_tags_from_source {
            params.put(&format!("{}{}", prefix, "CopyTagsFromSource"), &field_value);
        }
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        InstanceSpecificationSerializer::serialize(
            params,
            &format!("{}{}", prefix, "InstanceSpecification"),
            &obj.instance_specification,
        );
        if let Some(ref field_value) = obj.tag_specifications {
            TagSpecificationListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "TagSpecification"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateSnapshotsResult {
    /// <p>List of snapshots.</p>
    pub snapshots: Option<Vec<SnapshotInfo>>,
}

struct CreateSnapshotsResultDeserializer;
impl CreateSnapshotsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateSnapshotsResult, XmlParseError> {
        deserialize_elements::<_, CreateSnapshotsResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "snapshotSet" => {
                    obj.snapshots
                        .get_or_insert(vec![])
                        .extend(SnapshotSetDeserializer::deserialize("snapshotSet", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Contains the parameters for CreateSpotDatafeedSubscription.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateSpotDatafeedSubscriptionRequest {
    /// <p>The Amazon S3 bucket in which to store the Spot Instance data feed.</p>
    pub bucket: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>A prefix for the data feed file names.</p>
    pub prefix: Option<String>,
}

/// Serialize `CreateSpotDatafeedSubscriptionRequest` contents to a `SignedRequest`.
struct CreateSpotDatafeedSubscriptionRequestSerializer;
impl CreateSpotDatafeedSubscriptionRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateSpotDatafeedSubscriptionRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Bucket"), &obj.bucket);
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.prefix {
            params.put(&format!("{}{}", prefix, "Prefix"), &field_value);
        }
    }
}

/// <p>Contains the output of CreateSpotDatafeedSubscription.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateSpotDatafeedSubscriptionResult {
    /// <p>The Spot Instance data feed subscription.</p>
    pub spot_datafeed_subscription: Option<SpotDatafeedSubscription>,
}

struct CreateSpotDatafeedSubscriptionResultDeserializer;
impl CreateSpotDatafeedSubscriptionResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateSpotDatafeedSubscriptionResult, XmlParseError> {
        deserialize_elements::<_, CreateSpotDatafeedSubscriptionResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "spotDatafeedSubscription" => {
                        obj.spot_datafeed_subscription =
                            Some(SpotDatafeedSubscriptionDeserializer::deserialize(
                                "spotDatafeedSubscription",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateSubnetRequest {
    /// <p>The Availability Zone for the subnet.</p> <p>Default: AWS selects one for you. If you create more than one subnet in your VPC, we may not necessarily select a different zone for each subnet.</p>
    pub availability_zone: Option<String>,
    /// <p>The AZ ID of the subnet.</p>
    pub availability_zone_id: Option<String>,
    /// <p>The IPv4 network range for the subnet, in CIDR notation. For example, <code>10.0.0.0/24</code>.</p>
    pub cidr_block: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length.</p>
    pub ipv_6_cidr_block: Option<String>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: String,
}

/// Serialize `CreateSubnetRequest` contents to a `SignedRequest`.
struct CreateSubnetRequestSerializer;
impl CreateSubnetRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateSubnetRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.availability_zone {
            params.put(&format!("{}{}", prefix, "AvailabilityZone"), &field_value);
        }
        if let Some(ref field_value) = obj.availability_zone_id {
            params.put(&format!("{}{}", prefix, "AvailabilityZoneId"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "CidrBlock"), &obj.cidr_block);
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.ipv_6_cidr_block {
            params.put(&format!("{}{}", prefix, "Ipv6CidrBlock"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "VpcId"), &obj.vpc_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateSubnetResult {
    /// <p>Information about the subnet.</p>
    pub subnet: Option<Subnet>,
}

struct CreateSubnetResultDeserializer;
impl CreateSubnetResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateSubnetResult, XmlParseError> {
        deserialize_elements::<_, CreateSubnetResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "subnet" => {
                    obj.subnet = Some(SubnetDeserializer::deserialize("subnet", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateTagsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The IDs of the resources, separated by spaces.</p> <p>Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.</p>
    pub resources: Vec<String>,
    /// <p>The tags. The <code>value</code> parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.</p>
    pub tags: Vec<Tag>,
}

/// Serialize `CreateTagsRequest` contents to a `SignedRequest`.
struct CreateTagsRequestSerializer;
impl CreateTagsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateTagsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        ResourceIdListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "ResourceId"),
            &obj.resources,
        );
        TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), &obj.tags);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateTransitGatewayRequest {
    /// <p>A description of the transit gateway.</p>
    pub description: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The transit gateway options.</p>
    pub options: Option<TransitGatewayRequestOptions>,
    /// <p>The tags to apply to the transit gateway.</p>
    pub tag_specifications: Option<Vec<TagSpecification>>,
}

/// Serialize `CreateTransitGatewayRequest` contents to a `SignedRequest`.
struct CreateTransitGatewayRequestSerializer;
impl CreateTransitGatewayRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateTransitGatewayRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.options {
            TransitGatewayRequestOptionsSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Options"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.tag_specifications {
            TagSpecificationListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "TagSpecification"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateTransitGatewayResult {
    /// <p>Information about the transit gateway.</p>
    pub transit_gateway: Option<TransitGateway>,
}

struct CreateTransitGatewayResultDeserializer;
impl CreateTransitGatewayResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateTransitGatewayResult, XmlParseError> {
        deserialize_elements::<_, CreateTransitGatewayResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "transitGateway" => {
                        obj.transit_gateway = Some(TransitGatewayDeserializer::deserialize(
                            "transitGateway",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateTransitGatewayRouteRequest {
    /// <p>Indicates whether to drop traffic that matches this route.</p>
    pub blackhole: Option<bool>,
    /// <p>The CIDR range used for destination matches. Routing decisions are based on the most specific match.</p>
    pub destination_cidr_block: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the attachment.</p>
    pub transit_gateway_attachment_id: Option<String>,
    /// <p>The ID of the transit gateway route table.</p>
    pub transit_gateway_route_table_id: String,
}

/// Serialize `CreateTransitGatewayRouteRequest` contents to a `SignedRequest`.
struct CreateTransitGatewayRouteRequestSerializer;
impl CreateTransitGatewayRouteRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateTransitGatewayRouteRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.blackhole {
            params.put(&format!("{}{}", prefix, "Blackhole"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "DestinationCidrBlock"),
            &obj.destination_cidr_block,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.transit_gateway_attachment_id {
            params.put(
                &format!("{}{}", prefix, "TransitGatewayAttachmentId"),
                &field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "TransitGatewayRouteTableId"),
            &obj.transit_gateway_route_table_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateTransitGatewayRouteResult {
    /// <p>Information about the route.</p>
    pub route: Option<TransitGatewayRoute>,
}

struct CreateTransitGatewayRouteResultDeserializer;
impl CreateTransitGatewayRouteResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateTransitGatewayRouteResult, XmlParseError> {
        deserialize_elements::<_, CreateTransitGatewayRouteResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "route" => {
                        obj.route = Some(TransitGatewayRouteDeserializer::deserialize(
                            "route", stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateTransitGatewayRouteTableRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The tags to apply to the transit gateway route table.</p>
    pub tag_specifications: Option<Vec<TagSpecification>>,
    /// <p>The ID of the transit gateway.</p>
    pub transit_gateway_id: String,
}

/// Serialize `CreateTransitGatewayRouteTableRequest` contents to a `SignedRequest`.
struct CreateTransitGatewayRouteTableRequestSerializer;
impl CreateTransitGatewayRouteTableRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateTransitGatewayRouteTableRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.tag_specifications {
            TagSpecificationListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "TagSpecifications"),
                field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "TransitGatewayId"),
            &obj.transit_gateway_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateTransitGatewayRouteTableResult {
    /// <p>Information about the transit gateway route table.</p>
    pub transit_gateway_route_table: Option<TransitGatewayRouteTable>,
}

struct CreateTransitGatewayRouteTableResultDeserializer;
impl CreateTransitGatewayRouteTableResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateTransitGatewayRouteTableResult, XmlParseError> {
        deserialize_elements::<_, CreateTransitGatewayRouteTableResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "transitGatewayRouteTable" => {
                        obj.transit_gateway_route_table =
                            Some(TransitGatewayRouteTableDeserializer::deserialize(
                                "transitGatewayRouteTable",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateTransitGatewayVpcAttachmentRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The VPC attachment options.</p>
    pub options: Option<CreateTransitGatewayVpcAttachmentRequestOptions>,
    /// <p>The IDs of one or more subnets. You can specify only one subnet per Availability Zone. You must specify at least one subnet, but we recommend that you specify two subnets for better availability. The transit gateway uses one IP address from each specified subnet.</p>
    pub subnet_ids: Vec<String>,
    /// <p>The tags to apply to the VPC attachment.</p>
    pub tag_specifications: Option<Vec<TagSpecification>>,
    /// <p>The ID of the transit gateway.</p>
    pub transit_gateway_id: String,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: String,
}

/// Serialize `CreateTransitGatewayVpcAttachmentRequest` contents to a `SignedRequest`.
struct CreateTransitGatewayVpcAttachmentRequestSerializer;
impl CreateTransitGatewayVpcAttachmentRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateTransitGatewayVpcAttachmentRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.options {
            CreateTransitGatewayVpcAttachmentRequestOptionsSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Options"),
                field_value,
            );
        }
        ValueStringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "SubnetIds"),
            &obj.subnet_ids,
        );
        if let Some(ref field_value) = obj.tag_specifications {
            TagSpecificationListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "TagSpecifications"),
                field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "TransitGatewayId"),
            &obj.transit_gateway_id,
        );
        params.put(&format!("{}{}", prefix, "VpcId"), &obj.vpc_id);
    }
}

/// <p>Describes the options for a VPC attachment.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateTransitGatewayVpcAttachmentRequestOptions {
    /// <p>Enable or disable DNS support. The default is <code>enable</code>.</p>
    pub dns_support: Option<String>,
    /// <p>Enable or disable IPv6 support. The default is <code>enable</code>.</p>
    pub ipv_6_support: Option<String>,
}

/// Serialize `CreateTransitGatewayVpcAttachmentRequestOptions` contents to a `SignedRequest`.
struct CreateTransitGatewayVpcAttachmentRequestOptionsSerializer;
impl CreateTransitGatewayVpcAttachmentRequestOptionsSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &CreateTransitGatewayVpcAttachmentRequestOptions,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dns_support {
            params.put(&format!("{}{}", prefix, "DnsSupport"), &field_value);
        }
        if let Some(ref field_value) = obj.ipv_6_support {
            params.put(&format!("{}{}", prefix, "Ipv6Support"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateTransitGatewayVpcAttachmentResult {
    /// <p>Information about the VPC attachment.</p>
    pub transit_gateway_vpc_attachment: Option<TransitGatewayVpcAttachment>,
}

struct CreateTransitGatewayVpcAttachmentResultDeserializer;
impl CreateTransitGatewayVpcAttachmentResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateTransitGatewayVpcAttachmentResult, XmlParseError> {
        deserialize_elements::<_, CreateTransitGatewayVpcAttachmentResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "transitGatewayVpcAttachment" => {
                        obj.transit_gateway_vpc_attachment =
                            Some(TransitGatewayVpcAttachmentDeserializer::deserialize(
                                "transitGatewayVpcAttachment",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes the user or group to be added or removed from the list of create volume permissions for a volume.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateVolumePermission {
    /// <p>The group to be added or removed. The possible value is <code>all</code>.</p>
    pub group: Option<String>,
    /// <p>The AWS account ID to be added or removed.</p>
    pub user_id: Option<String>,
}

struct CreateVolumePermissionDeserializer;
impl CreateVolumePermissionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateVolumePermission, XmlParseError> {
        deserialize_elements::<_, CreateVolumePermission, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "group" => {
                    obj.group = Some(PermissionGroupDeserializer::deserialize("group", stack)?);
                }
                "userId" => {
                    obj.user_id = Some(StringDeserializer::deserialize("userId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `CreateVolumePermission` contents to a `SignedRequest`.
struct CreateVolumePermissionSerializer;
impl CreateVolumePermissionSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateVolumePermission) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.group {
            params.put(&format!("{}{}", prefix, "Group"), &field_value);
        }
        if let Some(ref field_value) = obj.user_id {
            params.put(&format!("{}{}", prefix, "UserId"), &field_value);
        }
    }
}

struct CreateVolumePermissionListDeserializer;
impl CreateVolumePermissionListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<CreateVolumePermission>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(CreateVolumePermissionDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `CreateVolumePermissionList` contents to a `SignedRequest`.
struct CreateVolumePermissionListSerializer;
impl CreateVolumePermissionListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<CreateVolumePermission>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            CreateVolumePermissionSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes modifications to the list of create volume permissions for a volume.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateVolumePermissionModifications {
    /// <p>Adds the specified AWS account ID or group to the list.</p>
    pub add: Option<Vec<CreateVolumePermission>>,
    /// <p>Removes the specified AWS account ID or group from the list.</p>
    pub remove: Option<Vec<CreateVolumePermission>>,
}

/// Serialize `CreateVolumePermissionModifications` contents to a `SignedRequest`.
struct CreateVolumePermissionModificationsSerializer;
impl CreateVolumePermissionModificationsSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateVolumePermissionModifications) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.add {
            CreateVolumePermissionListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Add"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.remove {
            CreateVolumePermissionListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Remove"),
                field_value,
            );
        }
    }
}

/// <p>Contains the parameters for CreateVolume.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateVolumeRequest {
    /// <p>The Availability Zone in which to create the volume.</p>
    pub availability_zone: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Specifies the encryption state of the volume. The default effect of setting the <code>Encrypted</code> parameter to <code>true</code> depends on the volume origin (new or from a snapshot), starting encryption state, ownership, and whether <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/account-level-encryption.html">account-level encryption</a> is enabled. Each default case can be overridden by specifying a customer master key (CMK) using the <code>KmsKeyId</code> parameter, in addition to setting <code>Encrypted</code> to <code>true</code>. For a complete list of possible encryption cases, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default">Amazon EBS Encryption</a>.</p> <p>Encrypted Amazon EBS volumes may only be attached to instances that support Amazon EBS encryption. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances">Supported Instance Types</a>.</p>
    pub encrypted: Option<bool>,
    /// <p>The number of I/O operations per second (IOPS) to provision for the volume, with a maximum ratio of 50 IOPS/GiB. Range is 100 to 64,000 IOPS for volumes in most Regions. Maximum IOPS of 64,000 is guaranteed only on <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Nitro-based instances</a>. Other instance families guarantee performance up to 32,000 IOPS. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS Volume Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>This parameter is valid only for Provisioned IOPS SSD (io1) volumes.</p>
    pub iops: Option<i64>,
    /// <p>An identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) to use to encrypt the volume. This parameter is only required if you want to use a customer-managed CMK; if this parameter is not specified, your AWS-managed CMK for the account is used. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set. </p> <p>The CMK identifier may be provided in any of the following formats: </p> <ul> <li> <p>Key ID: For example, key/1234abcd-12ab-34cd-56ef-1234567890ab.</p> </li> <li> <p>Key alias: For example, alias/ExampleAlias. </p> </li> <li> <p>Key ARN: The key ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>key</code> namespace, and then the CMK ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>. </p> </li> <li> <p>Alias ARN: The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>. </p> </li> </ul> <p>AWS authenticates <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. The action will eventually fail. </p>
    pub kms_key_id: Option<String>,
    /// <p><p>The size of the volume, in GiBs.</p> <p>Constraints: 1-16,384 for <code>gp2</code>, 4-16,384 for <code>io1</code>, 500-16,384 for <code>st1</code>, 500-16,384 for <code>sc1</code>, and 1-1,024 for <code>standard</code>. If you specify a snapshot, the volume size must be equal to or larger than the snapshot size.</p> <p>Default: If you&#39;re creating the volume from a snapshot and don&#39;t specify a volume size, the default is the snapshot size.</p> <note> <p>At least one of Size or SnapshotId is required.</p> </note></p>
    pub size: Option<i64>,
    /// <p><p>The snapshot from which to create the volume.</p> <note> <p>At least one of Size or SnapshotId are required.</p> </note></p>
    pub snapshot_id: Option<String>,
    /// <p>The tags to apply to the volume during creation.</p>
    pub tag_specifications: Option<Vec<TagSpecification>>,
    /// <p>The volume type. This can be <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic volumes.</p> <p>Defaults: If no volume type is specified, the default is <code>standard</code> in us-east-1, eu-west-1, eu-central-1, us-west-2, us-west-1, sa-east-1, ap-northeast-1, ap-northeast-2, ap-southeast-1, ap-southeast-2, ap-south-1, us-gov-west-1, and cn-north-1. In all other Regions, EBS defaults to <code>gp2</code>.</p>
    pub volume_type: Option<String>,
}

/// Serialize `CreateVolumeRequest` contents to a `SignedRequest`.
struct CreateVolumeRequestSerializer;
impl CreateVolumeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateVolumeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "AvailabilityZone"),
            &obj.availability_zone,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.encrypted {
            params.put(&format!("{}{}", prefix, "Encrypted"), &field_value);
        }
        if let Some(ref field_value) = obj.iops {
            params.put(&format!("{}{}", prefix, "Iops"), &field_value);
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"), &field_value);
        }
        if let Some(ref field_value) = obj.size {
            params.put(&format!("{}{}", prefix, "Size"), &field_value);
        }
        if let Some(ref field_value) = obj.snapshot_id {
            params.put(&format!("{}{}", prefix, "SnapshotId"), &field_value);
        }
        if let Some(ref field_value) = obj.tag_specifications {
            TagSpecificationListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "TagSpecification"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.volume_type {
            params.put(&format!("{}{}", prefix, "VolumeType"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateVpcEndpointConnectionNotificationRequest {
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p>One or more endpoint events for which to receive notifications. Valid values are <code>Accept</code>, <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.</p>
    pub connection_events: Vec<String>,
    /// <p>The ARN of the SNS topic for the notifications.</p>
    pub connection_notification_arn: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the endpoint service.</p>
    pub service_id: Option<String>,
    /// <p>The ID of the endpoint. </p>
    pub vpc_endpoint_id: Option<String>,
}

/// Serialize `CreateVpcEndpointConnectionNotificationRequest` contents to a `SignedRequest`.
struct CreateVpcEndpointConnectionNotificationRequestSerializer;
impl CreateVpcEndpointConnectionNotificationRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &CreateVpcEndpointConnectionNotificationRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        ValueStringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "ConnectionEvents"),
            &obj.connection_events,
        );
        params.put(
            &format!("{}{}", prefix, "ConnectionNotificationArn"),
            &obj.connection_notification_arn,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.service_id {
            params.put(&format!("{}{}", prefix, "ServiceId"), &field_value);
        }
        if let Some(ref field_value) = obj.vpc_endpoint_id {
            params.put(&format!("{}{}", prefix, "VpcEndpointId"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateVpcEndpointConnectionNotificationResult {
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request.</p>
    pub client_token: Option<String>,
    /// <p>Information about the notification.</p>
    pub connection_notification: Option<ConnectionNotification>,
}

struct CreateVpcEndpointConnectionNotificationResultDeserializer;
impl CreateVpcEndpointConnectionNotificationResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateVpcEndpointConnectionNotificationResult, XmlParseError> {
        deserialize_elements::<_, CreateVpcEndpointConnectionNotificationResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "clientToken" => {
                        obj.client_token =
                            Some(StringDeserializer::deserialize("clientToken", stack)?);
                    }
                    "connectionNotification" => {
                        obj.connection_notification =
                            Some(ConnectionNotificationDeserializer::deserialize(
                                "connectionNotification",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for CreateVpcEndpoint.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateVpcEndpointRequest {
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format. If this parameter is not specified, we attach a default policy that allows full access to the service.</p>
    pub policy_document: Option<String>,
    /// <p>(Interface endpoint) Indicate whether to associate a private hosted zone with the specified VPC. The private hosted zone contains a record set for the default public DNS name for the service for the Region (for example, <code>kinesis.us-east-1.amazonaws.com</code>) which resolves to the private IP addresses of the endpoint network interfaces in the VPC. This enables you to make requests to the default public DNS name for the service instead of the public DNS names that are automatically generated by the VPC endpoint service.</p> <p>To use a private hosted zone, you must set the following VPC attributes to <code>true</code>: <code>enableDnsHostnames</code> and <code>enableDnsSupport</code>. Use <a>ModifyVpcAttribute</a> to set the VPC attributes.</p> <p>Default: <code>true</code> </p>
    pub private_dns_enabled: Option<bool>,
    /// <p>(Gateway endpoint) One or more route table IDs.</p>
    pub route_table_ids: Option<Vec<String>>,
    /// <p>(Interface endpoint) The ID of one or more security groups to associate with the endpoint network interface.</p>
    pub security_group_ids: Option<Vec<String>>,
    /// <p>The service name. To get a list of available services, use the <a>DescribeVpcEndpointServices</a> request, or get the name from the service provider.</p>
    pub service_name: String,
    /// <p>(Interface endpoint) The ID of one or more subnets in which to create an endpoint network interface.</p>
    pub subnet_ids: Option<Vec<String>>,
    /// <p>The type of endpoint.</p> <p>Default: Gateway</p>
    pub vpc_endpoint_type: Option<String>,
    /// <p>The ID of the VPC in which the endpoint will be used.</p>
    pub vpc_id: String,
}

/// Serialize `CreateVpcEndpointRequest` contents to a `SignedRequest`.
struct CreateVpcEndpointRequestSerializer;
impl CreateVpcEndpointRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateVpcEndpointRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.policy_document {
            params.put(&format!("{}{}", prefix, "PolicyDocument"), &field_value);
        }
        if let Some(ref field_value) = obj.private_dns_enabled {
            params.put(&format!("{}{}", prefix, "PrivateDnsEnabled"), &field_value);
        }
        if let Some(ref field_value) = obj.route_table_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "RouteTableId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.security_group_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SecurityGroupId"),
                field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "ServiceName"), &obj.service_name);
        if let Some(ref field_value) = obj.subnet_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SubnetId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.vpc_endpoint_type {
            params.put(&format!("{}{}", prefix, "VpcEndpointType"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "VpcId"), &obj.vpc_id);
    }
}

/// <p>Contains the output of CreateVpcEndpoint.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateVpcEndpointResult {
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request.</p>
    pub client_token: Option<String>,
    /// <p>Information about the endpoint.</p>
    pub vpc_endpoint: Option<VpcEndpoint>,
}

struct CreateVpcEndpointResultDeserializer;
impl CreateVpcEndpointResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateVpcEndpointResult, XmlParseError> {
        deserialize_elements::<_, CreateVpcEndpointResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "clientToken" => {
                        obj.client_token =
                            Some(StringDeserializer::deserialize("clientToken", stack)?);
                    }
                    "vpcEndpoint" => {
                        obj.vpc_endpoint =
                            Some(VpcEndpointDeserializer::deserialize("vpcEndpoint", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateVpcEndpointServiceConfigurationRequest {
    /// <p>Indicate whether requests from service consumers to create an endpoint to your service must be accepted. To accept a request, use <a>AcceptVpcEndpointConnections</a>.</p>
    pub acceptance_required: Option<bool>,
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The Amazon Resource Names (ARNs) of one or more Network Load Balancers for your service.</p>
    pub network_load_balancer_arns: Vec<String>,
}

/// Serialize `CreateVpcEndpointServiceConfigurationRequest` contents to a `SignedRequest`.
struct CreateVpcEndpointServiceConfigurationRequestSerializer;
impl CreateVpcEndpointServiceConfigurationRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &CreateVpcEndpointServiceConfigurationRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.acceptance_required {
            params.put(&format!("{}{}", prefix, "AcceptanceRequired"), &field_value);
        }
        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        ValueStringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "NetworkLoadBalancerArn"),
            &obj.network_load_balancer_arns,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateVpcEndpointServiceConfigurationResult {
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request.</p>
    pub client_token: Option<String>,
    /// <p>Information about the service configuration.</p>
    pub service_configuration: Option<ServiceConfiguration>,
}

struct CreateVpcEndpointServiceConfigurationResultDeserializer;
impl CreateVpcEndpointServiceConfigurationResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateVpcEndpointServiceConfigurationResult, XmlParseError> {
        deserialize_elements::<_, CreateVpcEndpointServiceConfigurationResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "clientToken" => {
                        obj.client_token =
                            Some(StringDeserializer::deserialize("clientToken", stack)?);
                    }
                    "serviceConfiguration" => {
                        obj.service_configuration =
                            Some(ServiceConfigurationDeserializer::deserialize(
                                "serviceConfiguration",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateVpcPeeringConnectionRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The AWS account ID of the owner of the accepter VPC.</p> <p>Default: Your AWS account ID</p>
    pub peer_owner_id: Option<String>,
    /// <p>The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request.</p> <p>Default: The Region in which you make the request.</p>
    pub peer_region: Option<String>,
    /// <p>The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.</p>
    pub peer_vpc_id: Option<String>,
    /// <p>The ID of the requester VPC. You must specify this parameter in the request.</p>
    pub vpc_id: Option<String>,
}

/// Serialize `CreateVpcPeeringConnectionRequest` contents to a `SignedRequest`.
struct CreateVpcPeeringConnectionRequestSerializer;
impl CreateVpcPeeringConnectionRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateVpcPeeringConnectionRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.peer_owner_id {
            params.put(&format!("{}{}", prefix, "PeerOwnerId"), &field_value);
        }
        if let Some(ref field_value) = obj.peer_region {
            params.put(&format!("{}{}", prefix, "PeerRegion"), &field_value);
        }
        if let Some(ref field_value) = obj.peer_vpc_id {
            params.put(&format!("{}{}", prefix, "PeerVpcId"), &field_value);
        }
        if let Some(ref field_value) = obj.vpc_id {
            params.put(&format!("{}{}", prefix, "VpcId"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateVpcPeeringConnectionResult {
    /// <p>Information about the VPC peering connection.</p>
    pub vpc_peering_connection: Option<VpcPeeringConnection>,
}

struct CreateVpcPeeringConnectionResultDeserializer;
impl CreateVpcPeeringConnectionResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateVpcPeeringConnectionResult, XmlParseError> {
        deserialize_elements::<_, CreateVpcPeeringConnectionResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "vpcPeeringConnection" => {
                        obj.vpc_peering_connection =
                            Some(VpcPeeringConnectionDeserializer::deserialize(
                                "vpcPeeringConnection",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateVpcRequest {
    /// <p>Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block.</p>
    pub amazon_provided_ipv_6_cidr_block: Option<bool>,
    /// <p>The IPv4 network range for the VPC, in CIDR notation. For example, <code>10.0.0.0/16</code>.</p>
    pub cidr_block: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The tenancy options for instances launched into the VPC. For <code>default</code>, instances are launched with shared tenancy by default. You can launch instances with any tenancy into a shared tenancy VPC. For <code>dedicated</code>, instances are launched as dedicated tenancy instances by default. You can only launch instances with a tenancy of <code>dedicated</code> or <code>host</code> into a dedicated tenancy VPC. </p> <p> <b>Important:</b> The <code>host</code> value cannot be used with this parameter. Use the <code>default</code> or <code>dedicated</code> values only.</p> <p>Default: <code>default</code> </p>
    pub instance_tenancy: Option<String>,
}

/// Serialize `CreateVpcRequest` contents to a `SignedRequest`.
struct CreateVpcRequestSerializer;
impl CreateVpcRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateVpcRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.amazon_provided_ipv_6_cidr_block {
            params.put(
                &format!("{}{}", prefix, "AmazonProvidedIpv6CidrBlock"),
                &field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "CidrBlock"), &obj.cidr_block);
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.instance_tenancy {
            params.put(&format!("{}{}", prefix, "InstanceTenancy"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateVpcResult {
    /// <p>Information about the VPC.</p>
    pub vpc: Option<Vpc>,
}

struct CreateVpcResultDeserializer;
impl CreateVpcResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateVpcResult, XmlParseError> {
        deserialize_elements::<_, CreateVpcResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "vpc" => {
                    obj.vpc = Some(VpcDeserializer::deserialize("vpc", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Contains the parameters for CreateVpnConnection.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateVpnConnectionRequest {
    /// <p>The ID of the customer gateway.</p>
    pub customer_gateway_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The options for the VPN connection.</p>
    pub options: Option<VpnConnectionOptionsSpecification>,
    /// <p>The ID of the transit gateway. If you specify a transit gateway, you cannot specify a virtual private gateway.</p>
    pub transit_gateway_id: Option<String>,
    /// <p>The type of VPN connection (<code>ipsec.1</code> | <code>ipsec.2</code>).</p>
    pub type_: String,
    /// <p>The ID of the virtual private gateway. If you specify a virtual private gateway, you cannot specify a transit gateway.</p>
    pub vpn_gateway_id: Option<String>,
}

/// Serialize `CreateVpnConnectionRequest` contents to a `SignedRequest`.
struct CreateVpnConnectionRequestSerializer;
impl CreateVpnConnectionRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateVpnConnectionRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "CustomerGatewayId"),
            &obj.customer_gateway_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.options {
            VpnConnectionOptionsSpecificationSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Options"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.transit_gateway_id {
            params.put(&format!("{}{}", prefix, "TransitGatewayId"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "Type"), &obj.type_);
        if let Some(ref field_value) = obj.vpn_gateway_id {
            params.put(&format!("{}{}", prefix, "VpnGatewayId"), &field_value);
        }
    }
}

/// <p>Contains the output of CreateVpnConnection.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateVpnConnectionResult {
    /// <p>Information about the VPN connection.</p>
    pub vpn_connection: Option<VpnConnection>,
}

struct CreateVpnConnectionResultDeserializer;
impl CreateVpnConnectionResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateVpnConnectionResult, XmlParseError> {
        deserialize_elements::<_, CreateVpnConnectionResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "vpnConnection" => {
                        obj.vpn_connection = Some(VpnConnectionDeserializer::deserialize(
                            "vpnConnection",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for CreateVpnConnectionRoute.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateVpnConnectionRouteRequest {
    /// <p>The CIDR block associated with the local subnet of the customer network.</p>
    pub destination_cidr_block: String,
    /// <p>The ID of the VPN connection.</p>
    pub vpn_connection_id: String,
}

/// Serialize `CreateVpnConnectionRouteRequest` contents to a `SignedRequest`.
struct CreateVpnConnectionRouteRequestSerializer;
impl CreateVpnConnectionRouteRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateVpnConnectionRouteRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DestinationCidrBlock"),
            &obj.destination_cidr_block,
        );
        params.put(
            &format!("{}{}", prefix, "VpnConnectionId"),
            &obj.vpn_connection_id,
        );
    }
}

/// <p>Contains the parameters for CreateVpnGateway.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateVpnGatewayRequest {
    /// <p>A private Autonomous System Number (ASN) for the Amazon side of a BGP session. If you're using a 16-bit ASN, it must be in the 64512 to 65534 range. If you're using a 32-bit ASN, it must be in the 4200000000 to 4294967294 range.</p> <p>Default: 64512</p>
    pub amazon_side_asn: Option<i64>,
    /// <p>The Availability Zone for the virtual private gateway.</p>
    pub availability_zone: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The type of VPN connection this virtual private gateway supports.</p>
    pub type_: String,
}

/// Serialize `CreateVpnGatewayRequest` contents to a `SignedRequest`.
struct CreateVpnGatewayRequestSerializer;
impl CreateVpnGatewayRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreateVpnGatewayRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.amazon_side_asn {
            params.put(&format!("{}{}", prefix, "AmazonSideAsn"), &field_value);
        }
        if let Some(ref field_value) = obj.availability_zone {
            params.put(&format!("{}{}", prefix, "AvailabilityZone"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "Type"), &obj.type_);
    }
}

/// <p>Contains the output of CreateVpnGateway.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreateVpnGatewayResult {
    /// <p>Information about the virtual private gateway.</p>
    pub vpn_gateway: Option<VpnGateway>,
}

struct CreateVpnGatewayResultDeserializer;
impl CreateVpnGatewayResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreateVpnGatewayResult, XmlParseError> {
        deserialize_elements::<_, CreateVpnGatewayResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "vpnGateway" => {
                    obj.vpn_gateway =
                        Some(VpnGatewayDeserializer::deserialize("vpnGateway", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes the credit option for CPU usage of a T2 or T3 instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreditSpecification {
    /// <p>The credit option for CPU usage of a T2 or T3 instance. Valid values are <code>standard</code> and <code>unlimited</code>.</p>
    pub cpu_credits: Option<String>,
}

struct CreditSpecificationDeserializer;
impl CreditSpecificationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CreditSpecification, XmlParseError> {
        deserialize_elements::<_, CreditSpecification, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "cpuCredits" => {
                    obj.cpu_credits = Some(StringDeserializer::deserialize("cpuCredits", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>The credit option for CPU usage of a T2 or T3 instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CreditSpecificationRequest {
    /// <p>The credit option for CPU usage of a T2 or T3 instance. Valid values are <code>standard</code> and <code>unlimited</code>.</p>
    pub cpu_credits: String,
}

/// Serialize `CreditSpecificationRequest` contents to a `SignedRequest`.
struct CreditSpecificationRequestSerializer;
impl CreditSpecificationRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &CreditSpecificationRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "CpuCredits"), &obj.cpu_credits);
    }
}

struct CurrencyCodeValuesDeserializer;
impl CurrencyCodeValuesDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a customer gateway.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct CustomerGateway {
    /// <p>The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).</p>
    pub bgp_asn: Option<String>,
    /// <p>The ID of the customer gateway.</p>
    pub customer_gateway_id: Option<String>,
    /// <p>The Internet-routable IP address of the customer gateway's outside interface.</p>
    pub ip_address: Option<String>,
    /// <p>The current state of the customer gateway (<code>pending | available | deleting | deleted</code>).</p>
    pub state: Option<String>,
    /// <p>Any tags assigned to the customer gateway.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The type of VPN connection the customer gateway supports (<code>ipsec.1</code>).</p>
    pub type_: Option<String>,
}

struct CustomerGatewayDeserializer;
impl CustomerGatewayDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<CustomerGateway, XmlParseError> {
        deserialize_elements::<_, CustomerGateway, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "bgpAsn" => {
                    obj.bgp_asn = Some(StringDeserializer::deserialize("bgpAsn", stack)?);
                }
                "customerGatewayId" => {
                    obj.customer_gateway_id =
                        Some(StringDeserializer::deserialize("customerGatewayId", stack)?);
                }
                "ipAddress" => {
                    obj.ip_address = Some(StringDeserializer::deserialize("ipAddress", stack)?);
                }
                "state" => {
                    obj.state = Some(StringDeserializer::deserialize("state", stack)?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "type" => {
                    obj.type_ = Some(StringDeserializer::deserialize("type", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `CustomerGatewayIdStringList` contents to a `SignedRequest`.
struct CustomerGatewayIdStringListSerializer;
impl CustomerGatewayIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct CustomerGatewayListDeserializer;
impl CustomerGatewayListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<CustomerGateway>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(CustomerGatewayDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct DatafeedSubscriptionStateDeserializer;
impl DatafeedSubscriptionStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct DateTimeDeserializer;
impl DateTimeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct DefaultRouteTableAssociationValueDeserializer;
impl DefaultRouteTableAssociationValueDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct DefaultRouteTablePropagationValueDeserializer;
impl DefaultRouteTablePropagationValueDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct DefaultTargetCapacityTypeDeserializer;
impl DefaultTargetCapacityTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteClientVpnEndpointRequest {
    /// <p>The ID of the Client VPN to be deleted.</p>
    pub client_vpn_endpoint_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `DeleteClientVpnEndpointRequest` contents to a `SignedRequest`.
struct DeleteClientVpnEndpointRequestSerializer;
impl DeleteClientVpnEndpointRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteClientVpnEndpointRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "ClientVpnEndpointId"),
            &obj.client_vpn_endpoint_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteClientVpnEndpointResult {
    /// <p>The current state of the Client VPN endpoint.</p>
    pub status: Option<ClientVpnEndpointStatus>,
}

struct DeleteClientVpnEndpointResultDeserializer;
impl DeleteClientVpnEndpointResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteClientVpnEndpointResult, XmlParseError> {
        deserialize_elements::<_, DeleteClientVpnEndpointResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "status" => {
                        obj.status = Some(ClientVpnEndpointStatusDeserializer::deserialize(
                            "status", stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteClientVpnRouteRequest {
    /// <p>The ID of the Client VPN endpoint from which the route is to be deleted.</p>
    pub client_vpn_endpoint_id: String,
    /// <p>The IPv4 address range, in CIDR notation, of the route to be deleted.</p>
    pub destination_cidr_block: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the target subnet used by the route.</p>
    pub target_vpc_subnet_id: Option<String>,
}

/// Serialize `DeleteClientVpnRouteRequest` contents to a `SignedRequest`.
struct DeleteClientVpnRouteRequestSerializer;
impl DeleteClientVpnRouteRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteClientVpnRouteRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "ClientVpnEndpointId"),
            &obj.client_vpn_endpoint_id,
        );
        params.put(
            &format!("{}{}", prefix, "DestinationCidrBlock"),
            &obj.destination_cidr_block,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.target_vpc_subnet_id {
            params.put(&format!("{}{}", prefix, "TargetVpcSubnetId"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteClientVpnRouteResult {
    /// <p>The current state of the route.</p>
    pub status: Option<ClientVpnRouteStatus>,
}

struct DeleteClientVpnRouteResultDeserializer;
impl DeleteClientVpnRouteResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteClientVpnRouteResult, XmlParseError> {
        deserialize_elements::<_, DeleteClientVpnRouteResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "status" => {
                        obj.status = Some(ClientVpnRouteStatusDeserializer::deserialize(
                            "status", stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DeleteCustomerGateway.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteCustomerGatewayRequest {
    /// <p>The ID of the customer gateway.</p>
    pub customer_gateway_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `DeleteCustomerGatewayRequest` contents to a `SignedRequest`.
struct DeleteCustomerGatewayRequestSerializer;
impl DeleteCustomerGatewayRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteCustomerGatewayRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "CustomerGatewayId"),
            &obj.customer_gateway_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteDhcpOptionsRequest {
    /// <p>The ID of the DHCP options set.</p>
    pub dhcp_options_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `DeleteDhcpOptionsRequest` contents to a `SignedRequest`.
struct DeleteDhcpOptionsRequestSerializer;
impl DeleteDhcpOptionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteDhcpOptionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DhcpOptionsId"),
            &obj.dhcp_options_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteEgressOnlyInternetGatewayRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the egress-only internet gateway.</p>
    pub egress_only_internet_gateway_id: String,
}

/// Serialize `DeleteEgressOnlyInternetGatewayRequest` contents to a `SignedRequest`.
struct DeleteEgressOnlyInternetGatewayRequestSerializer;
impl DeleteEgressOnlyInternetGatewayRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteEgressOnlyInternetGatewayRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "EgressOnlyInternetGatewayId"),
            &obj.egress_only_internet_gateway_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteEgressOnlyInternetGatewayResult {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub return_code: Option<bool>,
}

struct DeleteEgressOnlyInternetGatewayResultDeserializer;
impl DeleteEgressOnlyInternetGatewayResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteEgressOnlyInternetGatewayResult, XmlParseError> {
        deserialize_elements::<_, DeleteEgressOnlyInternetGatewayResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "returnCode" => {
                        obj.return_code =
                            Some(BooleanDeserializer::deserialize("returnCode", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes an EC2 Fleet error.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteFleetError {
    /// <p>The error code.</p>
    pub code: Option<String>,
    /// <p>The description for the error code.</p>
    pub message: Option<String>,
}

struct DeleteFleetErrorDeserializer;
impl DeleteFleetErrorDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteFleetError, XmlParseError> {
        deserialize_elements::<_, DeleteFleetError, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "code" => {
                    obj.code = Some(DeleteFleetErrorCodeDeserializer::deserialize(
                        "code", stack,
                    )?);
                }
                "message" => {
                    obj.message = Some(StringDeserializer::deserialize("message", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct DeleteFleetErrorCodeDeserializer;
impl DeleteFleetErrorCodeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes an EC2 Fleet that was not successfully deleted.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteFleetErrorItem {
    /// <p>The error.</p>
    pub error: Option<DeleteFleetError>,
    /// <p>The ID of the EC2 Fleet.</p>
    pub fleet_id: Option<String>,
}

struct DeleteFleetErrorItemDeserializer;
impl DeleteFleetErrorItemDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteFleetErrorItem, XmlParseError> {
        deserialize_elements::<_, DeleteFleetErrorItem, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "error" => {
                    obj.error = Some(DeleteFleetErrorDeserializer::deserialize("error", stack)?);
                }
                "fleetId" => {
                    obj.fleet_id =
                        Some(FleetIdentifierDeserializer::deserialize("fleetId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct DeleteFleetErrorSetDeserializer;
impl DeleteFleetErrorSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DeleteFleetErrorItem>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(DeleteFleetErrorItemDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes an EC2 Fleet that was successfully deleted.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteFleetSuccessItem {
    /// <p>The current state of the EC2 Fleet.</p>
    pub current_fleet_state: Option<String>,
    /// <p>The ID of the EC2 Fleet.</p>
    pub fleet_id: Option<String>,
    /// <p>The previous state of the EC2 Fleet.</p>
    pub previous_fleet_state: Option<String>,
}

struct DeleteFleetSuccessItemDeserializer;
impl DeleteFleetSuccessItemDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteFleetSuccessItem, XmlParseError> {
        deserialize_elements::<_, DeleteFleetSuccessItem, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "currentFleetState" => {
                    obj.current_fleet_state = Some(FleetStateCodeDeserializer::deserialize(
                        "currentFleetState",
                        stack,
                    )?);
                }
                "fleetId" => {
                    obj.fleet_id =
                        Some(FleetIdentifierDeserializer::deserialize("fleetId", stack)?);
                }
                "previousFleetState" => {
                    obj.previous_fleet_state = Some(FleetStateCodeDeserializer::deserialize(
                        "previousFleetState",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct DeleteFleetSuccessSetDeserializer;
impl DeleteFleetSuccessSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DeleteFleetSuccessItem>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(DeleteFleetSuccessItemDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteFleetsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The IDs of the EC2 Fleets.</p>
    pub fleet_ids: Vec<String>,
    /// <p>Indicates whether to terminate instances for an EC2 Fleet if it is deleted successfully.</p>
    pub terminate_instances: bool,
}

/// Serialize `DeleteFleetsRequest` contents to a `SignedRequest`.
struct DeleteFleetsRequestSerializer;
impl DeleteFleetsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteFleetsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        FleetIdSetSerializer::serialize(
            params,
            &format!("{}{}", prefix, "FleetId"),
            &obj.fleet_ids,
        );
        params.put(
            &format!("{}{}", prefix, "TerminateInstances"),
            &obj.terminate_instances,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteFleetsResult {
    /// <p>Information about the EC2 Fleets that are successfully deleted.</p>
    pub successful_fleet_deletions: Option<Vec<DeleteFleetSuccessItem>>,
    /// <p>Information about the EC2 Fleets that are not successfully deleted.</p>
    pub unsuccessful_fleet_deletions: Option<Vec<DeleteFleetErrorItem>>,
}

struct DeleteFleetsResultDeserializer;
impl DeleteFleetsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteFleetsResult, XmlParseError> {
        deserialize_elements::<_, DeleteFleetsResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "successfulFleetDeletionSet" => {
                    obj.successful_fleet_deletions.get_or_insert(vec![]).extend(
                        DeleteFleetSuccessSetDeserializer::deserialize(
                            "successfulFleetDeletionSet",
                            stack,
                        )?,
                    );
                }
                "unsuccessfulFleetDeletionSet" => {
                    obj.unsuccessful_fleet_deletions
                        .get_or_insert(vec![])
                        .extend(DeleteFleetErrorSetDeserializer::deserialize(
                            "unsuccessfulFleetDeletionSet",
                            stack,
                        )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteFlowLogsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>One or more flow log IDs.</p> <p>Constraint: Maximum of 1000 flow log IDs.</p>
    pub flow_log_ids: Vec<String>,
}

/// Serialize `DeleteFlowLogsRequest` contents to a `SignedRequest`.
struct DeleteFlowLogsRequestSerializer;
impl DeleteFlowLogsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteFlowLogsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        ValueStringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "FlowLogId"),
            &obj.flow_log_ids,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteFlowLogsResult {
    /// <p>Information about the flow logs that could not be deleted successfully.</p>
    pub unsuccessful: Option<Vec<UnsuccessfulItem>>,
}

struct DeleteFlowLogsResultDeserializer;
impl DeleteFlowLogsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteFlowLogsResult, XmlParseError> {
        deserialize_elements::<_, DeleteFlowLogsResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "unsuccessful" => {
                    obj.unsuccessful.get_or_insert(vec![]).extend(
                        UnsuccessfulItemSetDeserializer::deserialize("unsuccessful", stack)?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteFpgaImageRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the AFI.</p>
    pub fpga_image_id: String,
}

/// Serialize `DeleteFpgaImageRequest` contents to a `SignedRequest`.
struct DeleteFpgaImageRequestSerializer;
impl DeleteFpgaImageRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteFpgaImageRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "FpgaImageId"), &obj.fpga_image_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteFpgaImageResult {
    /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
    pub return_: Option<bool>,
}

struct DeleteFpgaImageResultDeserializer;
impl DeleteFpgaImageResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteFpgaImageResult, XmlParseError> {
        deserialize_elements::<_, DeleteFpgaImageResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "return" => {
                    obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteInternetGatewayRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the internet gateway.</p>
    pub internet_gateway_id: String,
}

/// Serialize `DeleteInternetGatewayRequest` contents to a `SignedRequest`.
struct DeleteInternetGatewayRequestSerializer;
impl DeleteInternetGatewayRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteInternetGatewayRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "InternetGatewayId"),
            &obj.internet_gateway_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteKeyPairRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The name of the key pair.</p>
    pub key_name: String,
}

/// Serialize `DeleteKeyPairRequest` contents to a `SignedRequest`.
struct DeleteKeyPairRequestSerializer;
impl DeleteKeyPairRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteKeyPairRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "KeyName"), &obj.key_name);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteLaunchTemplateRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the launch template. You must specify either the launch template ID or launch template name in the request.</p>
    pub launch_template_id: Option<String>,
    /// <p>The name of the launch template. You must specify either the launch template ID or launch template name in the request.</p>
    pub launch_template_name: Option<String>,
}

/// Serialize `DeleteLaunchTemplateRequest` contents to a `SignedRequest`.
struct DeleteLaunchTemplateRequestSerializer;
impl DeleteLaunchTemplateRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteLaunchTemplateRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.launch_template_id {
            params.put(&format!("{}{}", prefix, "LaunchTemplateId"), &field_value);
        }
        if let Some(ref field_value) = obj.launch_template_name {
            params.put(&format!("{}{}", prefix, "LaunchTemplateName"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteLaunchTemplateResult {
    /// <p>Information about the launch template.</p>
    pub launch_template: Option<LaunchTemplate>,
}

struct DeleteLaunchTemplateResultDeserializer;
impl DeleteLaunchTemplateResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteLaunchTemplateResult, XmlParseError> {
        deserialize_elements::<_, DeleteLaunchTemplateResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "launchTemplate" => {
                        obj.launch_template = Some(LaunchTemplateDeserializer::deserialize(
                            "launchTemplate",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteLaunchTemplateVersionsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the launch template. You must specify either the launch template ID or launch template name in the request.</p>
    pub launch_template_id: Option<String>,
    /// <p>The name of the launch template. You must specify either the launch template ID or launch template name in the request.</p>
    pub launch_template_name: Option<String>,
    /// <p>The version numbers of one or more launch template versions to delete.</p>
    pub versions: Vec<String>,
}

/// Serialize `DeleteLaunchTemplateVersionsRequest` contents to a `SignedRequest`.
struct DeleteLaunchTemplateVersionsRequestSerializer;
impl DeleteLaunchTemplateVersionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteLaunchTemplateVersionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.launch_template_id {
            params.put(&format!("{}{}", prefix, "LaunchTemplateId"), &field_value);
        }
        if let Some(ref field_value) = obj.launch_template_name {
            params.put(&format!("{}{}", prefix, "LaunchTemplateName"), &field_value);
        }
        VersionStringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "LaunchTemplateVersion"),
            &obj.versions,
        );
    }
}

/// <p>Describes a launch template version that could not be deleted.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteLaunchTemplateVersionsResponseErrorItem {
    /// <p>The ID of the launch template.</p>
    pub launch_template_id: Option<String>,
    /// <p>The name of the launch template.</p>
    pub launch_template_name: Option<String>,
    /// <p>Information about the error.</p>
    pub response_error: Option<ResponseError>,
    /// <p>The version number of the launch template.</p>
    pub version_number: Option<i64>,
}

struct DeleteLaunchTemplateVersionsResponseErrorItemDeserializer;
impl DeleteLaunchTemplateVersionsResponseErrorItemDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteLaunchTemplateVersionsResponseErrorItem, XmlParseError> {
        deserialize_elements::<_, DeleteLaunchTemplateVersionsResponseErrorItem, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "launchTemplateId" => {
                        obj.launch_template_id =
                            Some(StringDeserializer::deserialize("launchTemplateId", stack)?);
                    }
                    "launchTemplateName" => {
                        obj.launch_template_name = Some(StringDeserializer::deserialize(
                            "launchTemplateName",
                            stack,
                        )?);
                    }
                    "responseError" => {
                        obj.response_error = Some(ResponseErrorDeserializer::deserialize(
                            "responseError",
                            stack,
                        )?);
                    }
                    "versionNumber" => {
                        obj.version_number =
                            Some(LongDeserializer::deserialize("versionNumber", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct DeleteLaunchTemplateVersionsResponseErrorSetDeserializer;
impl DeleteLaunchTemplateVersionsResponseErrorSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DeleteLaunchTemplateVersionsResponseErrorItem>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(
                    DeleteLaunchTemplateVersionsResponseErrorItemDeserializer::deserialize(
                        "item", stack,
                    )?,
                );
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a launch template version that was successfully deleted.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteLaunchTemplateVersionsResponseSuccessItem {
    /// <p>The ID of the launch template.</p>
    pub launch_template_id: Option<String>,
    /// <p>The name of the launch template.</p>
    pub launch_template_name: Option<String>,
    /// <p>The version number of the launch template.</p>
    pub version_number: Option<i64>,
}

struct DeleteLaunchTemplateVersionsResponseSuccessItemDeserializer;
impl DeleteLaunchTemplateVersionsResponseSuccessItemDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteLaunchTemplateVersionsResponseSuccessItem, XmlParseError> {
        deserialize_elements::<_, DeleteLaunchTemplateVersionsResponseSuccessItem, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "launchTemplateId" => {
                        obj.launch_template_id =
                            Some(StringDeserializer::deserialize("launchTemplateId", stack)?);
                    }
                    "launchTemplateName" => {
                        obj.launch_template_name = Some(StringDeserializer::deserialize(
                            "launchTemplateName",
                            stack,
                        )?);
                    }
                    "versionNumber" => {
                        obj.version_number =
                            Some(LongDeserializer::deserialize("versionNumber", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct DeleteLaunchTemplateVersionsResponseSuccessSetDeserializer;
impl DeleteLaunchTemplateVersionsResponseSuccessSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DeleteLaunchTemplateVersionsResponseSuccessItem>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(
                    DeleteLaunchTemplateVersionsResponseSuccessItemDeserializer::deserialize(
                        "item", stack,
                    )?,
                );
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteLaunchTemplateVersionsResult {
    /// <p>Information about the launch template versions that were successfully deleted.</p>
    pub successfully_deleted_launch_template_versions:
        Option<Vec<DeleteLaunchTemplateVersionsResponseSuccessItem>>,
    /// <p>Information about the launch template versions that could not be deleted.</p>
    pub unsuccessfully_deleted_launch_template_versions:
        Option<Vec<DeleteLaunchTemplateVersionsResponseErrorItem>>,
}

struct DeleteLaunchTemplateVersionsResultDeserializer;
impl DeleteLaunchTemplateVersionsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteLaunchTemplateVersionsResult, XmlParseError> {
        deserialize_elements::<_, DeleteLaunchTemplateVersionsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "successfullyDeletedLaunchTemplateVersionSet" => {
                        obj.successfully_deleted_launch_template_versions
                                .get_or_insert(vec![])
                                .extend(DeleteLaunchTemplateVersionsResponseSuccessSetDeserializer::deserialize("successfullyDeletedLaunchTemplateVersionSet", stack)?);
                    }
                    "unsuccessfullyDeletedLaunchTemplateVersionSet" => {
                        obj.unsuccessfully_deleted_launch_template_versions
                                .get_or_insert(vec![])
                                .extend(DeleteLaunchTemplateVersionsResponseErrorSetDeserializer::deserialize("unsuccessfullyDeletedLaunchTemplateVersionSet", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteNatGatewayRequest {
    /// <p>The ID of the NAT gateway.</p>
    pub nat_gateway_id: String,
}

/// Serialize `DeleteNatGatewayRequest` contents to a `SignedRequest`.
struct DeleteNatGatewayRequestSerializer;
impl DeleteNatGatewayRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteNatGatewayRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "NatGatewayId"),
            &obj.nat_gateway_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteNatGatewayResult {
    /// <p>The ID of the NAT gateway.</p>
    pub nat_gateway_id: Option<String>,
}

struct DeleteNatGatewayResultDeserializer;
impl DeleteNatGatewayResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteNatGatewayResult, XmlParseError> {
        deserialize_elements::<_, DeleteNatGatewayResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "natGatewayId" => {
                    obj.nat_gateway_id =
                        Some(StringDeserializer::deserialize("natGatewayId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteNetworkAclEntryRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Indicates whether the rule is an egress rule.</p>
    pub egress: bool,
    /// <p>The ID of the network ACL.</p>
    pub network_acl_id: String,
    /// <p>The rule number of the entry to delete.</p>
    pub rule_number: i64,
}

/// Serialize `DeleteNetworkAclEntryRequest` contents to a `SignedRequest`.
struct DeleteNetworkAclEntryRequestSerializer;
impl DeleteNetworkAclEntryRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteNetworkAclEntryRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "Egress"), &obj.egress);
        params.put(
            &format!("{}{}", prefix, "NetworkAclId"),
            &obj.network_acl_id,
        );
        params.put(&format!("{}{}", prefix, "RuleNumber"), &obj.rule_number);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteNetworkAclRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the network ACL.</p>
    pub network_acl_id: String,
}

/// Serialize `DeleteNetworkAclRequest` contents to a `SignedRequest`.
struct DeleteNetworkAclRequestSerializer;
impl DeleteNetworkAclRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteNetworkAclRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "NetworkAclId"),
            &obj.network_acl_id,
        );
    }
}

/// <p>Contains the parameters for DeleteNetworkInterfacePermission.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteNetworkInterfacePermissionRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Specify <code>true</code> to remove the permission even if the network interface is attached to an instance.</p>
    pub force: Option<bool>,
    /// <p>The ID of the network interface permission.</p>
    pub network_interface_permission_id: String,
}

/// Serialize `DeleteNetworkInterfacePermissionRequest` contents to a `SignedRequest`.
struct DeleteNetworkInterfacePermissionRequestSerializer;
impl DeleteNetworkInterfacePermissionRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteNetworkInterfacePermissionRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.force {
            params.put(&format!("{}{}", prefix, "Force"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "NetworkInterfacePermissionId"),
            &obj.network_interface_permission_id,
        );
    }
}

/// <p>Contains the output for DeleteNetworkInterfacePermission.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteNetworkInterfacePermissionResult {
    /// <p>Returns <code>true</code> if the request succeeds, otherwise returns an error.</p>
    pub return_: Option<bool>,
}

struct DeleteNetworkInterfacePermissionResultDeserializer;
impl DeleteNetworkInterfacePermissionResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteNetworkInterfacePermissionResult, XmlParseError> {
        deserialize_elements::<_, DeleteNetworkInterfacePermissionResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DeleteNetworkInterface.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteNetworkInterfaceRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: String,
}

/// Serialize `DeleteNetworkInterfaceRequest` contents to a `SignedRequest`.
struct DeleteNetworkInterfaceRequestSerializer;
impl DeleteNetworkInterfaceRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteNetworkInterfaceRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "NetworkInterfaceId"),
            &obj.network_interface_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeletePlacementGroupRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The name of the placement group.</p>
    pub group_name: String,
}

/// Serialize `DeletePlacementGroupRequest` contents to a `SignedRequest`.
struct DeletePlacementGroupRequestSerializer;
impl DeletePlacementGroupRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeletePlacementGroupRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "GroupName"), &obj.group_name);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteRouteRequest {
    /// <p>The IPv4 CIDR range for the route. The value you specify must match the CIDR for the route exactly.</p>
    pub destination_cidr_block: Option<String>,
    /// <p>The IPv6 CIDR range for the route. The value you specify must match the CIDR for the route exactly.</p>
    pub destination_ipv_6_cidr_block: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the route table.</p>
    pub route_table_id: String,
}

/// Serialize `DeleteRouteRequest` contents to a `SignedRequest`.
struct DeleteRouteRequestSerializer;
impl DeleteRouteRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteRouteRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.destination_cidr_block {
            params.put(
                &format!("{}{}", prefix, "DestinationCidrBlock"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.destination_ipv_6_cidr_block {
            params.put(
                &format!("{}{}", prefix, "DestinationIpv6CidrBlock"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "RouteTableId"),
            &obj.route_table_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteRouteTableRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the route table.</p>
    pub route_table_id: String,
}

/// Serialize `DeleteRouteTableRequest` contents to a `SignedRequest`.
struct DeleteRouteTableRequestSerializer;
impl DeleteRouteTableRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteRouteTableRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "RouteTableId"),
            &obj.route_table_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteSecurityGroupRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the security group. Required for a nondefault VPC.</p>
    pub group_id: Option<String>,
    /// <p>[EC2-Classic, default VPC] The name of the security group. You can specify either the security group name or the security group ID.</p>
    pub group_name: Option<String>,
}

/// Serialize `DeleteSecurityGroupRequest` contents to a `SignedRequest`.
struct DeleteSecurityGroupRequestSerializer;
impl DeleteSecurityGroupRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteSecurityGroupRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.group_id {
            params.put(&format!("{}{}", prefix, "GroupId"), &field_value);
        }
        if let Some(ref field_value) = obj.group_name {
            params.put(&format!("{}{}", prefix, "GroupName"), &field_value);
        }
    }
}

/// <p>Contains the parameters for DeleteSnapshot.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteSnapshotRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the EBS snapshot.</p>
    pub snapshot_id: String,
}

/// Serialize `DeleteSnapshotRequest` contents to a `SignedRequest`.
struct DeleteSnapshotRequestSerializer;
impl DeleteSnapshotRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteSnapshotRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "SnapshotId"), &obj.snapshot_id);
    }
}

/// <p>Contains the parameters for DeleteSpotDatafeedSubscription.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteSpotDatafeedSubscriptionRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `DeleteSpotDatafeedSubscriptionRequest` contents to a `SignedRequest`.
struct DeleteSpotDatafeedSubscriptionRequestSerializer;
impl DeleteSpotDatafeedSubscriptionRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteSpotDatafeedSubscriptionRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteSubnetRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the subnet.</p>
    pub subnet_id: String,
}

/// Serialize `DeleteSubnetRequest` contents to a `SignedRequest`.
struct DeleteSubnetRequestSerializer;
impl DeleteSubnetRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteSubnetRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "SubnetId"), &obj.subnet_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteTagsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The IDs of the resources, separated by spaces.</p> <p>Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.</p>
    pub resources: Vec<String>,
    /// <p>The tags to delete. Specify a tag key and an optional tag value to delete specific tags. If you specify a tag key without a tag value, we delete any tag with this key regardless of its value. If you specify a tag key with an empty string as the tag value, we delete the tag only if its value is an empty string.</p> <p>If you omit this parameter, we delete all user-defined tags for the specified resources. We do not delete AWS-generated tags (tags that have the <code>aws:</code> prefix).</p>
    pub tags: Option<Vec<Tag>>,
}

/// Serialize `DeleteTagsRequest` contents to a `SignedRequest`.
struct DeleteTagsRequestSerializer;
impl DeleteTagsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteTagsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        ResourceIdListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "ResourceId"),
            &obj.resources,
        );
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteTransitGatewayRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the transit gateway.</p>
    pub transit_gateway_id: String,
}

/// Serialize `DeleteTransitGatewayRequest` contents to a `SignedRequest`.
struct DeleteTransitGatewayRequestSerializer;
impl DeleteTransitGatewayRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteTransitGatewayRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TransitGatewayId"),
            &obj.transit_gateway_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteTransitGatewayResult {
    /// <p>Information about the deleted transit gateway.</p>
    pub transit_gateway: Option<TransitGateway>,
}

struct DeleteTransitGatewayResultDeserializer;
impl DeleteTransitGatewayResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteTransitGatewayResult, XmlParseError> {
        deserialize_elements::<_, DeleteTransitGatewayResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "transitGateway" => {
                        obj.transit_gateway = Some(TransitGatewayDeserializer::deserialize(
                            "transitGateway",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteTransitGatewayRouteRequest {
    /// <p>The CIDR range for the route. This must match the CIDR for the route exactly.</p>
    pub destination_cidr_block: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the transit gateway route table.</p>
    pub transit_gateway_route_table_id: String,
}

/// Serialize `DeleteTransitGatewayRouteRequest` contents to a `SignedRequest`.
struct DeleteTransitGatewayRouteRequestSerializer;
impl DeleteTransitGatewayRouteRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteTransitGatewayRouteRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DestinationCidrBlock"),
            &obj.destination_cidr_block,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TransitGatewayRouteTableId"),
            &obj.transit_gateway_route_table_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteTransitGatewayRouteResult {
    /// <p>Information about the route.</p>
    pub route: Option<TransitGatewayRoute>,
}

struct DeleteTransitGatewayRouteResultDeserializer;
impl DeleteTransitGatewayRouteResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteTransitGatewayRouteResult, XmlParseError> {
        deserialize_elements::<_, DeleteTransitGatewayRouteResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "route" => {
                        obj.route = Some(TransitGatewayRouteDeserializer::deserialize(
                            "route", stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteTransitGatewayRouteTableRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the transit gateway route table.</p>
    pub transit_gateway_route_table_id: String,
}

/// Serialize `DeleteTransitGatewayRouteTableRequest` contents to a `SignedRequest`.
struct DeleteTransitGatewayRouteTableRequestSerializer;
impl DeleteTransitGatewayRouteTableRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteTransitGatewayRouteTableRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TransitGatewayRouteTableId"),
            &obj.transit_gateway_route_table_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteTransitGatewayRouteTableResult {
    /// <p>Information about the deleted transit gateway route table.</p>
    pub transit_gateway_route_table: Option<TransitGatewayRouteTable>,
}

struct DeleteTransitGatewayRouteTableResultDeserializer;
impl DeleteTransitGatewayRouteTableResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteTransitGatewayRouteTableResult, XmlParseError> {
        deserialize_elements::<_, DeleteTransitGatewayRouteTableResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "transitGatewayRouteTable" => {
                        obj.transit_gateway_route_table =
                            Some(TransitGatewayRouteTableDeserializer::deserialize(
                                "transitGatewayRouteTable",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteTransitGatewayVpcAttachmentRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the attachment.</p>
    pub transit_gateway_attachment_id: String,
}

/// Serialize `DeleteTransitGatewayVpcAttachmentRequest` contents to a `SignedRequest`.
struct DeleteTransitGatewayVpcAttachmentRequestSerializer;
impl DeleteTransitGatewayVpcAttachmentRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteTransitGatewayVpcAttachmentRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TransitGatewayAttachmentId"),
            &obj.transit_gateway_attachment_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteTransitGatewayVpcAttachmentResult {
    /// <p>Information about the deleted VPC attachment.</p>
    pub transit_gateway_vpc_attachment: Option<TransitGatewayVpcAttachment>,
}

struct DeleteTransitGatewayVpcAttachmentResultDeserializer;
impl DeleteTransitGatewayVpcAttachmentResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteTransitGatewayVpcAttachmentResult, XmlParseError> {
        deserialize_elements::<_, DeleteTransitGatewayVpcAttachmentResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "transitGatewayVpcAttachment" => {
                        obj.transit_gateway_vpc_attachment =
                            Some(TransitGatewayVpcAttachmentDeserializer::deserialize(
                                "transitGatewayVpcAttachment",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DeleteVolume.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteVolumeRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the volume.</p>
    pub volume_id: String,
}

/// Serialize `DeleteVolumeRequest` contents to a `SignedRequest`.
struct DeleteVolumeRequestSerializer;
impl DeleteVolumeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteVolumeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "VolumeId"), &obj.volume_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteVpcEndpointConnectionNotificationsRequest {
    /// <p>One or more notification IDs.</p>
    pub connection_notification_ids: Vec<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `DeleteVpcEndpointConnectionNotificationsRequest` contents to a `SignedRequest`.
struct DeleteVpcEndpointConnectionNotificationsRequestSerializer;
impl DeleteVpcEndpointConnectionNotificationsRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &DeleteVpcEndpointConnectionNotificationsRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        ValueStringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "ConnectionNotificationId"),
            &obj.connection_notification_ids,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteVpcEndpointConnectionNotificationsResult {
    /// <p>Information about the notifications that could not be deleted successfully.</p>
    pub unsuccessful: Option<Vec<UnsuccessfulItem>>,
}

struct DeleteVpcEndpointConnectionNotificationsResultDeserializer;
impl DeleteVpcEndpointConnectionNotificationsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteVpcEndpointConnectionNotificationsResult, XmlParseError> {
        deserialize_elements::<_, DeleteVpcEndpointConnectionNotificationsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "unsuccessful" => {
                        obj.unsuccessful.get_or_insert(vec![]).extend(
                            UnsuccessfulItemSetDeserializer::deserialize("unsuccessful", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteVpcEndpointServiceConfigurationsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The IDs of one or more services.</p>
    pub service_ids: Vec<String>,
}

/// Serialize `DeleteVpcEndpointServiceConfigurationsRequest` contents to a `SignedRequest`.
struct DeleteVpcEndpointServiceConfigurationsRequestSerializer;
impl DeleteVpcEndpointServiceConfigurationsRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &DeleteVpcEndpointServiceConfigurationsRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        ValueStringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "ServiceId"),
            &obj.service_ids,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteVpcEndpointServiceConfigurationsResult {
    /// <p>Information about the service configurations that were not deleted, if applicable.</p>
    pub unsuccessful: Option<Vec<UnsuccessfulItem>>,
}

struct DeleteVpcEndpointServiceConfigurationsResultDeserializer;
impl DeleteVpcEndpointServiceConfigurationsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteVpcEndpointServiceConfigurationsResult, XmlParseError> {
        deserialize_elements::<_, DeleteVpcEndpointServiceConfigurationsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "unsuccessful" => {
                        obj.unsuccessful.get_or_insert(vec![]).extend(
                            UnsuccessfulItemSetDeserializer::deserialize("unsuccessful", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DeleteVpcEndpoints.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteVpcEndpointsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>One or more VPC endpoint IDs.</p>
    pub vpc_endpoint_ids: Vec<String>,
}

/// Serialize `DeleteVpcEndpointsRequest` contents to a `SignedRequest`.
struct DeleteVpcEndpointsRequestSerializer;
impl DeleteVpcEndpointsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteVpcEndpointsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        ValueStringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "VpcEndpointId"),
            &obj.vpc_endpoint_ids,
        );
    }
}

/// <p>Contains the output of DeleteVpcEndpoints.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteVpcEndpointsResult {
    /// <p>Information about the VPC endpoints that were not successfully deleted.</p>
    pub unsuccessful: Option<Vec<UnsuccessfulItem>>,
}

struct DeleteVpcEndpointsResultDeserializer;
impl DeleteVpcEndpointsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteVpcEndpointsResult, XmlParseError> {
        deserialize_elements::<_, DeleteVpcEndpointsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "unsuccessful" => {
                        obj.unsuccessful.get_or_insert(vec![]).extend(
                            UnsuccessfulItemSetDeserializer::deserialize("unsuccessful", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteVpcPeeringConnectionRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the VPC peering connection.</p>
    pub vpc_peering_connection_id: String,
}

/// Serialize `DeleteVpcPeeringConnectionRequest` contents to a `SignedRequest`.
struct DeleteVpcPeeringConnectionRequestSerializer;
impl DeleteVpcPeeringConnectionRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteVpcPeeringConnectionRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "VpcPeeringConnectionId"),
            &obj.vpc_peering_connection_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteVpcPeeringConnectionResult {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub return_: Option<bool>,
}

struct DeleteVpcPeeringConnectionResultDeserializer;
impl DeleteVpcPeeringConnectionResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeleteVpcPeeringConnectionResult, XmlParseError> {
        deserialize_elements::<_, DeleteVpcPeeringConnectionResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteVpcRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: String,
}

/// Serialize `DeleteVpcRequest` contents to a `SignedRequest`.
struct DeleteVpcRequestSerializer;
impl DeleteVpcRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteVpcRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "VpcId"), &obj.vpc_id);
    }
}

/// <p>Contains the parameters for DeleteVpnConnection.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteVpnConnectionRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the VPN connection.</p>
    pub vpn_connection_id: String,
}

/// Serialize `DeleteVpnConnectionRequest` contents to a `SignedRequest`.
struct DeleteVpnConnectionRequestSerializer;
impl DeleteVpnConnectionRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteVpnConnectionRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "VpnConnectionId"),
            &obj.vpn_connection_id,
        );
    }
}

/// <p>Contains the parameters for DeleteVpnConnectionRoute.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteVpnConnectionRouteRequest {
    /// <p>The CIDR block associated with the local subnet of the customer network.</p>
    pub destination_cidr_block: String,
    /// <p>The ID of the VPN connection.</p>
    pub vpn_connection_id: String,
}

/// Serialize `DeleteVpnConnectionRouteRequest` contents to a `SignedRequest`.
struct DeleteVpnConnectionRouteRequestSerializer;
impl DeleteVpnConnectionRouteRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteVpnConnectionRouteRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "DestinationCidrBlock"),
            &obj.destination_cidr_block,
        );
        params.put(
            &format!("{}{}", prefix, "VpnConnectionId"),
            &obj.vpn_connection_id,
        );
    }
}

/// <p>Contains the parameters for DeleteVpnGateway.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeleteVpnGatewayRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the virtual private gateway.</p>
    pub vpn_gateway_id: String,
}

/// Serialize `DeleteVpnGatewayRequest` contents to a `SignedRequest`.
struct DeleteVpnGatewayRequestSerializer;
impl DeleteVpnGatewayRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeleteVpnGatewayRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "VpnGatewayId"),
            &obj.vpn_gateway_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeprovisionByoipCidrRequest {
    /// <p>The public IPv4 address range, in CIDR notation. The prefix must be the same prefix that you specified when you provisioned the address range.</p>
    pub cidr: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `DeprovisionByoipCidrRequest` contents to a `SignedRequest`.
struct DeprovisionByoipCidrRequestSerializer;
impl DeprovisionByoipCidrRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeprovisionByoipCidrRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Cidr"), &obj.cidr);
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeprovisionByoipCidrResult {
    /// <p>Information about the address range.</p>
    pub byoip_cidr: Option<ByoipCidr>,
}

struct DeprovisionByoipCidrResultDeserializer;
impl DeprovisionByoipCidrResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DeprovisionByoipCidrResult, XmlParseError> {
        deserialize_elements::<_, DeprovisionByoipCidrResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "byoipCidr" => {
                        obj.byoip_cidr =
                            Some(ByoipCidrDeserializer::deserialize("byoipCidr", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DeregisterImage.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DeregisterImageRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the AMI.</p>
    pub image_id: String,
}

/// Serialize `DeregisterImageRequest` contents to a `SignedRequest`.
struct DeregisterImageRequestSerializer;
impl DeregisterImageRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DeregisterImageRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "ImageId"), &obj.image_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeAccountAttributesRequest {
    /// <p>The account attribute names.</p>
    pub attribute_names: Option<Vec<String>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `DescribeAccountAttributesRequest` contents to a `SignedRequest`.
struct DescribeAccountAttributesRequestSerializer;
impl DescribeAccountAttributesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeAccountAttributesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.attribute_names {
            AccountAttributeNameStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "AttributeName"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeAccountAttributesResult {
    /// <p>Information about the account attributes.</p>
    pub account_attributes: Option<Vec<AccountAttribute>>,
}

struct DescribeAccountAttributesResultDeserializer;
impl DescribeAccountAttributesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeAccountAttributesResult, XmlParseError> {
        deserialize_elements::<_, DescribeAccountAttributesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "accountAttributeSet" => {
                        obj.account_attributes.get_or_insert(vec![]).extend(
                            AccountAttributeListDeserializer::deserialize(
                                "accountAttributeSet",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeAddressesRequest {
    /// <p>[EC2-VPC] Information about the allocation IDs.</p>
    pub allocation_ids: Option<Vec<String>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters. Filter names and values are case-sensitive.</p> <ul> <li> <p> <code>allocation-id</code> - [EC2-VPC] The allocation ID for the address.</p> </li> <li> <p> <code>association-id</code> - [EC2-VPC] The association ID for the address.</p> </li> <li> <p> <code>domain</code> - Indicates whether the address is for use in EC2-Classic (<code>standard</code>) or in a VPC (<code>vpc</code>).</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance the address is associated with, if any.</p> </li> <li> <p> <code>network-interface-id</code> - [EC2-VPC] The ID of the network interface that the address is associated with, if any.</p> </li> <li> <p> <code>network-interface-owner-id</code> - The AWS account ID of the owner.</p> </li> <li> <p> <code>private-ip-address</code> - [EC2-VPC] The private IP address associated with the Elastic IP address.</p> </li> <li> <p> <code>public-ip</code> - The Elastic IP address.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>One or more Elastic IP addresses.</p> <p>Default: Describes all your Elastic IP addresses.</p>
    pub public_ips: Option<Vec<String>>,
}

/// Serialize `DescribeAddressesRequest` contents to a `SignedRequest`.
struct DescribeAddressesRequestSerializer;
impl DescribeAddressesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeAddressesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.allocation_ids {
            AllocationIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "AllocationId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.public_ips {
            PublicIpStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "PublicIp"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeAddressesResult {
    /// <p>Information about the Elastic IP addresses.</p>
    pub addresses: Option<Vec<Address>>,
}

struct DescribeAddressesResultDeserializer;
impl DescribeAddressesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeAddressesResult, XmlParseError> {
        deserialize_elements::<_, DescribeAddressesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "addressesSet" => {
                        obj.addresses
                            .get_or_insert(vec![])
                            .extend(AddressListDeserializer::deserialize("addressesSet", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeAggregateIdFormatRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `DescribeAggregateIdFormatRequest` contents to a `SignedRequest`.
struct DescribeAggregateIdFormatRequestSerializer;
impl DescribeAggregateIdFormatRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeAggregateIdFormatRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeAggregateIdFormatResult {
    /// <p>Information about each resource's ID format.</p>
    pub statuses: Option<Vec<IdFormat>>,
    /// <p>Indicates whether all resource types in the Region are configured to use longer IDs. This value is only <code>true</code> if all users are configured to use longer IDs for all resources types in the Region.</p>
    pub use_long_ids_aggregated: Option<bool>,
}

struct DescribeAggregateIdFormatResultDeserializer;
impl DescribeAggregateIdFormatResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeAggregateIdFormatResult, XmlParseError> {
        deserialize_elements::<_, DescribeAggregateIdFormatResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "statusSet" => {
                        obj.statuses
                            .get_or_insert(vec![])
                            .extend(IdFormatListDeserializer::deserialize("statusSet", stack)?);
                    }
                    "useLongIdsAggregated" => {
                        obj.use_long_ids_aggregated = Some(BooleanDeserializer::deserialize(
                            "useLongIdsAggregated",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeAvailabilityZonesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>The filters.</p> <ul> <li> <p> <code>message</code> - Information about the Availability Zone.</p> </li> <li> <p> <code>region-name</code> - The name of the Region for the Availability Zone (for example, <code>us-east-1</code>).</p> </li> <li> <p> <code>state</code> - The state of the Availability Zone (<code>available</code> | <code>information</code> | <code>impaired</code> | <code>unavailable</code>).</p> </li> <li> <p> <code>zone-id</code> - The ID of the Availability Zone (for example, <code>use1-az1</code>).</p> </li> <li> <p> <code>zone-name</code> - The name of the Availability Zone (for example, <code>us-east-1a</code>).</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The IDs of the Availability Zones.</p>
    pub zone_ids: Option<Vec<String>>,
    /// <p>The names of the Availability Zones.</p>
    pub zone_names: Option<Vec<String>>,
}

/// Serialize `DescribeAvailabilityZonesRequest` contents to a `SignedRequest`.
struct DescribeAvailabilityZonesRequestSerializer;
impl DescribeAvailabilityZonesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeAvailabilityZonesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.zone_ids {
            ZoneIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ZoneId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.zone_names {
            ZoneNameStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ZoneName"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeAvailabilityZonesResult {
    /// <p>Information about the Availability Zones.</p>
    pub availability_zones: Option<Vec<AvailabilityZone>>,
}

struct DescribeAvailabilityZonesResultDeserializer;
impl DescribeAvailabilityZonesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeAvailabilityZonesResult, XmlParseError> {
        deserialize_elements::<_, DescribeAvailabilityZonesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "availabilityZoneInfo" => {
                        obj.availability_zones.get_or_insert(vec![]).extend(
                            AvailabilityZoneListDeserializer::deserialize(
                                "availabilityZoneInfo",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeBundleTasksRequest {
    /// <p>The bundle task IDs.</p> <p>Default: Describes all your bundle tasks.</p>
    pub bundle_ids: Option<Vec<String>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>The filters.</p> <ul> <li> <p> <code>bundle-id</code> - The ID of the bundle task.</p> </li> <li> <p> <code>error-code</code> - If the task failed, the error code returned.</p> </li> <li> <p> <code>error-message</code> - If the task failed, the error message returned.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> <li> <p> <code>progress</code> - The level of task completion, as a percentage (for example, 20%).</p> </li> <li> <p> <code>s3-bucket</code> - The Amazon S3 bucket to store the AMI.</p> </li> <li> <p> <code>s3-prefix</code> - The beginning of the AMI name.</p> </li> <li> <p> <code>start-time</code> - The time the task started (for example, 2013-09-15T17:15:20.000Z).</p> </li> <li> <p> <code>state</code> - The state of the task (<code>pending</code> | <code>waiting-for-shutdown</code> | <code>bundling</code> | <code>storing</code> | <code>cancelling</code> | <code>complete</code> | <code>failed</code>).</p> </li> <li> <p> <code>update-time</code> - The time of the most recent update for the task.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
}

/// Serialize `DescribeBundleTasksRequest` contents to a `SignedRequest`.
struct DescribeBundleTasksRequestSerializer;
impl DescribeBundleTasksRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeBundleTasksRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.bundle_ids {
            BundleIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "BundleId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeBundleTasksResult {
    /// <p>Information about the bundle tasks.</p>
    pub bundle_tasks: Option<Vec<BundleTask>>,
}

struct DescribeBundleTasksResultDeserializer;
impl DescribeBundleTasksResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeBundleTasksResult, XmlParseError> {
        deserialize_elements::<_, DescribeBundleTasksResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "bundleInstanceTasksSet" => {
                        obj.bundle_tasks.get_or_insert(vec![]).extend(
                            BundleTaskListDeserializer::deserialize(
                                "bundleInstanceTasksSet",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeByoipCidrsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: i64,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeByoipCidrsRequest` contents to a `SignedRequest`.
struct DescribeByoipCidrsRequestSerializer;
impl DescribeByoipCidrsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeByoipCidrsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "MaxResults"), &obj.max_results);
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeByoipCidrsResult {
    /// <p>Information about your address ranges.</p>
    pub byoip_cidrs: Option<Vec<ByoipCidr>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeByoipCidrsResultDeserializer;
impl DescribeByoipCidrsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeByoipCidrsResult, XmlParseError> {
        deserialize_elements::<_, DescribeByoipCidrsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "byoipCidrSet" => {
                        obj.byoip_cidrs.get_or_insert(vec![]).extend(
                            ByoipCidrSetDeserializer::deserialize("byoipCidrSet", stack)?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeCapacityReservationsRequest {
    /// <p>The ID of the Capacity Reservation.</p>
    pub capacity_reservation_ids: Option<Vec<String>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>One or more filters.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value.</p>
    pub max_results: Option<i64>,
    /// <p>The token to retrieve the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeCapacityReservationsRequest` contents to a `SignedRequest`.
struct DescribeCapacityReservationsRequestSerializer;
impl DescribeCapacityReservationsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeCapacityReservationsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.capacity_reservation_ids {
            CapacityReservationIdSetSerializer::serialize(
                params,
                &format!("{}{}", prefix, "CapacityReservationId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeCapacityReservationsResult {
    /// <p>Information about the Capacity Reservations.</p>
    pub capacity_reservations: Option<Vec<CapacityReservation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeCapacityReservationsResultDeserializer;
impl DescribeCapacityReservationsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeCapacityReservationsResult, XmlParseError> {
        deserialize_elements::<_, DescribeCapacityReservationsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "capacityReservationSet" => {
                        obj.capacity_reservations.get_or_insert(vec![]).extend(
                            CapacityReservationSetDeserializer::deserialize(
                                "capacityReservationSet",
                                stack,
                            )?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeClassicLinkInstancesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>group-id</code> - The ID of a VPC security group that&#39;s associated with the instance.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC to which the instance is linked.</p> <p> <code>vpc-id</code> - The ID of the VPC that the instance is linked to.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>One or more instance IDs. Must be instances linked to a VPC through ClassicLink.</p>
    pub instance_ids: Option<Vec<String>>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p> <p>Constraint: If the value is greater than 1000, we return only 1000 items.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeClassicLinkInstancesRequest` contents to a `SignedRequest`.
struct DescribeClassicLinkInstancesRequestSerializer;
impl DescribeClassicLinkInstancesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeClassicLinkInstancesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.instance_ids {
            InstanceIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "InstanceId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeClassicLinkInstancesResult {
    /// <p>Information about one or more linked EC2-Classic instances.</p>
    pub instances: Option<Vec<ClassicLinkInstance>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeClassicLinkInstancesResultDeserializer;
impl DescribeClassicLinkInstancesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeClassicLinkInstancesResult, XmlParseError> {
        deserialize_elements::<_, DescribeClassicLinkInstancesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "instancesSet" => {
                        obj.instances.get_or_insert(vec![]).extend(
                            ClassicLinkInstanceListDeserializer::deserialize(
                                "instancesSet",
                                stack,
                            )?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeClientVpnAuthorizationRulesRequest {
    /// <p>The ID of the Client VPN endpoint.</p>
    pub client_vpn_endpoint_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>One or more filters. Filter names and values are case-sensitive.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.</p>
    pub max_results: Option<i64>,
    /// <p>The token to retrieve the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeClientVpnAuthorizationRulesRequest` contents to a `SignedRequest`.
struct DescribeClientVpnAuthorizationRulesRequestSerializer;
impl DescribeClientVpnAuthorizationRulesRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &DescribeClientVpnAuthorizationRulesRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "ClientVpnEndpointId"),
            &obj.client_vpn_endpoint_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeClientVpnAuthorizationRulesResult {
    /// <p>Information about the authorization rules.</p>
    pub authorization_rules: Option<Vec<AuthorizationRule>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeClientVpnAuthorizationRulesResultDeserializer;
impl DescribeClientVpnAuthorizationRulesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeClientVpnAuthorizationRulesResult, XmlParseError> {
        deserialize_elements::<_, DescribeClientVpnAuthorizationRulesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "authorizationRule" => {
                        obj.authorization_rules.get_or_insert(vec![]).extend(
                            AuthorizationRuleSetDeserializer::deserialize(
                                "authorizationRule",
                                stack,
                            )?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token =
                            Some(NextTokenDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeClientVpnConnectionsRequest {
    /// <p>The ID of the Client VPN endpoint.</p>
    pub client_vpn_endpoint_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>One or more filters. Filter names and values are case-sensitive.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.</p>
    pub max_results: Option<i64>,
    /// <p>The token to retrieve the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeClientVpnConnectionsRequest` contents to a `SignedRequest`.
struct DescribeClientVpnConnectionsRequestSerializer;
impl DescribeClientVpnConnectionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeClientVpnConnectionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "ClientVpnEndpointId"),
            &obj.client_vpn_endpoint_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeClientVpnConnectionsResult {
    /// <p>Information about the active and terminated client connections.</p>
    pub connections: Option<Vec<ClientVpnConnection>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeClientVpnConnectionsResultDeserializer;
impl DescribeClientVpnConnectionsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeClientVpnConnectionsResult, XmlParseError> {
        deserialize_elements::<_, DescribeClientVpnConnectionsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "connections" => {
                        obj.connections.get_or_insert(vec![]).extend(
                            ClientVpnConnectionSetDeserializer::deserialize("connections", stack)?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token =
                            Some(NextTokenDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeClientVpnEndpointsRequest {
    /// <p>The ID of the Client VPN endpoint.</p>
    pub client_vpn_endpoint_ids: Option<Vec<String>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>One or more filters. Filter names and values are case-sensitive.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.</p>
    pub max_results: Option<i64>,
    /// <p>The token to retrieve the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeClientVpnEndpointsRequest` contents to a `SignedRequest`.
struct DescribeClientVpnEndpointsRequestSerializer;
impl DescribeClientVpnEndpointsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeClientVpnEndpointsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.client_vpn_endpoint_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ClientVpnEndpointId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeClientVpnEndpointsResult {
    /// <p>Information about the Client VPN endpoints.</p>
    pub client_vpn_endpoints: Option<Vec<ClientVpnEndpoint>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeClientVpnEndpointsResultDeserializer;
impl DescribeClientVpnEndpointsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeClientVpnEndpointsResult, XmlParseError> {
        deserialize_elements::<_, DescribeClientVpnEndpointsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "clientVpnEndpoint" => {
                        obj.client_vpn_endpoints.get_or_insert(vec![]).extend(
                            EndpointSetDeserializer::deserialize("clientVpnEndpoint", stack)?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token =
                            Some(NextTokenDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeClientVpnRoutesRequest {
    /// <p>The ID of the Client VPN endpoint.</p>
    pub client_vpn_endpoint_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>One or more filters. Filter names and values are case-sensitive.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.</p>
    pub max_results: Option<i64>,
    /// <p>The token to retrieve the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeClientVpnRoutesRequest` contents to a `SignedRequest`.
struct DescribeClientVpnRoutesRequestSerializer;
impl DescribeClientVpnRoutesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeClientVpnRoutesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "ClientVpnEndpointId"),
            &obj.client_vpn_endpoint_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeClientVpnRoutesResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about the Client VPN endpoint routes.</p>
    pub routes: Option<Vec<ClientVpnRoute>>,
}

struct DescribeClientVpnRoutesResultDeserializer;
impl DescribeClientVpnRoutesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeClientVpnRoutesResult, XmlParseError> {
        deserialize_elements::<_, DescribeClientVpnRoutesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token =
                            Some(NextTokenDeserializer::deserialize("nextToken", stack)?);
                    }
                    "routes" => {
                        obj.routes
                            .get_or_insert(vec![])
                            .extend(ClientVpnRouteSetDeserializer::deserialize("routes", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeClientVpnTargetNetworksRequest {
    /// <p>The IDs of the target network associations.</p>
    pub association_ids: Option<Vec<String>>,
    /// <p>The ID of the Client VPN endpoint.</p>
    pub client_vpn_endpoint_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>One or more filters. Filter names and values are case-sensitive.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.</p>
    pub max_results: Option<i64>,
    /// <p>The token to retrieve the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeClientVpnTargetNetworksRequest` contents to a `SignedRequest`.
struct DescribeClientVpnTargetNetworksRequestSerializer;
impl DescribeClientVpnTargetNetworksRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeClientVpnTargetNetworksRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.association_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "AssociationIds"),
                field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "ClientVpnEndpointId"),
            &obj.client_vpn_endpoint_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeClientVpnTargetNetworksResult {
    /// <p>Information about the associated target networks.</p>
    pub client_vpn_target_networks: Option<Vec<TargetNetwork>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeClientVpnTargetNetworksResultDeserializer;
impl DescribeClientVpnTargetNetworksResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeClientVpnTargetNetworksResult, XmlParseError> {
        deserialize_elements::<_, DescribeClientVpnTargetNetworksResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "clientVpnTargetNetworks" => {
                        obj.client_vpn_target_networks.get_or_insert(vec![]).extend(
                            TargetNetworkSetDeserializer::deserialize(
                                "clientVpnTargetNetworks",
                                stack,
                            )?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token =
                            Some(NextTokenDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct DescribeConversionTaskListDeserializer;
impl DescribeConversionTaskListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ConversionTask>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ConversionTaskDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Contains the parameters for DescribeConversionTasks.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeConversionTasksRequest {
    /// <p>The conversion task IDs.</p>
    pub conversion_task_ids: Option<Vec<String>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `DescribeConversionTasksRequest` contents to a `SignedRequest`.
struct DescribeConversionTasksRequestSerializer;
impl DescribeConversionTasksRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeConversionTasksRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.conversion_task_ids {
            ConversionIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ConversionTaskId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

/// <p>Contains the output for DescribeConversionTasks.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeConversionTasksResult {
    /// <p>Information about the conversion tasks.</p>
    pub conversion_tasks: Option<Vec<ConversionTask>>,
}

struct DescribeConversionTasksResultDeserializer;
impl DescribeConversionTasksResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeConversionTasksResult, XmlParseError> {
        deserialize_elements::<_, DescribeConversionTasksResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "conversionTasks" => {
                        obj.conversion_tasks.get_or_insert(vec![]).extend(
                            DescribeConversionTaskListDeserializer::deserialize(
                                "conversionTasks",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeCustomerGateways.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeCustomerGatewaysRequest {
    /// <p>One or more customer gateway IDs.</p> <p>Default: Describes all your customer gateways.</p>
    pub customer_gateway_ids: Option<Vec<String>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>bgp-asn</code> - The customer gateway&#39;s Border Gateway Protocol (BGP) Autonomous System Number (ASN).</p> </li> <li> <p> <code>customer-gateway-id</code> - The ID of the customer gateway.</p> </li> <li> <p> <code>ip-address</code> - The IP address of the customer gateway&#39;s Internet-routable external interface.</p> </li> <li> <p> <code>state</code> - The state of the customer gateway (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>type</code> - The type of customer gateway. Currently, the only supported type is <code>ipsec.1</code>.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
}

/// Serialize `DescribeCustomerGatewaysRequest` contents to a `SignedRequest`.
struct DescribeCustomerGatewaysRequestSerializer;
impl DescribeCustomerGatewaysRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeCustomerGatewaysRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.customer_gateway_ids {
            CustomerGatewayIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "CustomerGatewayId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
    }
}

/// <p>Contains the output of DescribeCustomerGateways.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeCustomerGatewaysResult {
    /// <p>Information about one or more customer gateways.</p>
    pub customer_gateways: Option<Vec<CustomerGateway>>,
}

struct DescribeCustomerGatewaysResultDeserializer;
impl DescribeCustomerGatewaysResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeCustomerGatewaysResult, XmlParseError> {
        deserialize_elements::<_, DescribeCustomerGatewaysResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "customerGatewaySet" => {
                        obj.customer_gateways.get_or_insert(vec![]).extend(
                            CustomerGatewayListDeserializer::deserialize(
                                "customerGatewaySet",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeDhcpOptionsRequest {
    /// <p>The IDs of one or more DHCP options sets.</p> <p>Default: Describes all your DHCP options sets.</p>
    pub dhcp_options_ids: Option<Vec<String>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>dhcp-options-id</code> - The ID of a DHCP options set.</p> </li> <li> <p> <code>key</code> - The key for one of the options (for example, <code>domain-name</code>).</p> </li> <li> <p> <code>value</code> - The value for one of the options.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the DHCP options set.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeDhcpOptionsRequest` contents to a `SignedRequest`.
struct DescribeDhcpOptionsRequestSerializer;
impl DescribeDhcpOptionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeDhcpOptionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dhcp_options_ids {
            DhcpOptionsIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "DhcpOptionsId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeDhcpOptionsResult {
    /// <p>Information about one or more DHCP options sets.</p>
    pub dhcp_options: Option<Vec<DhcpOptions>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeDhcpOptionsResultDeserializer;
impl DescribeDhcpOptionsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeDhcpOptionsResult, XmlParseError> {
        deserialize_elements::<_, DescribeDhcpOptionsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "dhcpOptionsSet" => {
                        obj.dhcp_options.get_or_insert(vec![]).extend(
                            DhcpOptionsListDeserializer::deserialize("dhcpOptionsSet", stack)?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeEgressOnlyInternetGatewaysRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>One or more egress-only internet gateway IDs.</p>
    pub egress_only_internet_gateway_ids: Option<Vec<String>>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeEgressOnlyInternetGatewaysRequest` contents to a `SignedRequest`.
struct DescribeEgressOnlyInternetGatewaysRequestSerializer;
impl DescribeEgressOnlyInternetGatewaysRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeEgressOnlyInternetGatewaysRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.egress_only_internet_gateway_ids {
            EgressOnlyInternetGatewayIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "EgressOnlyInternetGatewayId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeEgressOnlyInternetGatewaysResult {
    /// <p>Information about the egress-only internet gateways.</p>
    pub egress_only_internet_gateways: Option<Vec<EgressOnlyInternetGateway>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeEgressOnlyInternetGatewaysResultDeserializer;
impl DescribeEgressOnlyInternetGatewaysResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeEgressOnlyInternetGatewaysResult, XmlParseError> {
        deserialize_elements::<_, DescribeEgressOnlyInternetGatewaysResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "egressOnlyInternetGatewaySet" => {
                        obj.egress_only_internet_gateways
                            .get_or_insert(vec![])
                            .extend(EgressOnlyInternetGatewayListDeserializer::deserialize(
                                "egressOnlyInternetGatewaySet",
                                stack,
                            )?);
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeElasticGpusRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The Elastic Graphics accelerator IDs.</p>
    pub elastic_gpu_ids: Option<Vec<String>>,
    /// <p><p>The filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone in which the Elastic Graphics accelerator resides.</p> </li> <li> <p> <code>elastic-gpu-health</code> - The status of the Elastic Graphics accelerator (<code>OK</code> | <code>IMPAIRED</code>).</p> </li> <li> <p> <code>elastic-gpu-state</code> - The state of the Elastic Graphics accelerator (<code>ATTACHED</code>).</p> </li> <li> <p> <code>elastic-gpu-type</code> - The type of Elastic Graphics accelerator; for example, <code>eg1.medium</code>.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance to which the Elastic Graphics accelerator is associated.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000.</p>
    pub max_results: Option<i64>,
    /// <p>The token to request the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeElasticGpusRequest` contents to a `SignedRequest`.
struct DescribeElasticGpusRequestSerializer;
impl DescribeElasticGpusRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeElasticGpusRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.elastic_gpu_ids {
            ElasticGpuIdSetSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ElasticGpuId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeElasticGpusResult {
    /// <p>Information about the Elastic Graphics accelerators.</p>
    pub elastic_gpu_set: Option<Vec<ElasticGpus>>,
    /// <p>The total number of items to return. If the total number of items available is more than the value specified in max-items then a Next-Token will be provided in the output that you can use to resume pagination.</p>
    pub max_results: Option<i64>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeElasticGpusResultDeserializer;
impl DescribeElasticGpusResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeElasticGpusResult, XmlParseError> {
        deserialize_elements::<_, DescribeElasticGpusResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "elasticGpuSet" => {
                        obj.elastic_gpu_set.get_or_insert(vec![]).extend(
                            ElasticGpuSetDeserializer::deserialize("elasticGpuSet", stack)?,
                        );
                    }
                    "maxResults" => {
                        obj.max_results =
                            Some(IntegerDeserializer::deserialize("maxResults", stack)?);
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeExportTasks.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeExportTasksRequest {
    /// <p>The export task IDs.</p>
    pub export_task_ids: Option<Vec<String>>,
}

/// Serialize `DescribeExportTasksRequest` contents to a `SignedRequest`.
struct DescribeExportTasksRequestSerializer;
impl DescribeExportTasksRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeExportTasksRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.export_task_ids {
            ExportTaskIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ExportTaskId"),
                field_value,
            );
        }
    }
}

/// <p>Contains the output for DescribeExportTasks.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeExportTasksResult {
    /// <p>Information about the export tasks.</p>
    pub export_tasks: Option<Vec<ExportTask>>,
}

struct DescribeExportTasksResultDeserializer;
impl DescribeExportTasksResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeExportTasksResult, XmlParseError> {
        deserialize_elements::<_, DescribeExportTasksResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "exportTaskSet" => {
                        obj.export_tasks.get_or_insert(vec![]).extend(
                            ExportTaskListDeserializer::deserialize("exportTaskSet", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes the instances that could not be launched by the fleet.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeFleetError {
    /// <p>The error code that indicates why the instance could not be launched. For more information about error codes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html">Error Codes</a>.</p>
    pub error_code: Option<String>,
    /// <p>The error message that describes why the instance could not be launched. For more information about error messages, see ee <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html.html">Error Codes</a>.</p>
    pub error_message: Option<String>,
    /// <p>The launch templates and overrides that were used for launching the instances. Any parameters that you specify in the Overrides override the same parameters in the launch template.</p>
    pub launch_template_and_overrides: Option<LaunchTemplateAndOverridesResponse>,
    /// <p>Indicates if the instance that could not be launched was a Spot Instance or On-Demand Instance.</p>
    pub lifecycle: Option<String>,
}

struct DescribeFleetErrorDeserializer;
impl DescribeFleetErrorDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeFleetError, XmlParseError> {
        deserialize_elements::<_, DescribeFleetError, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "errorCode" => {
                    obj.error_code = Some(StringDeserializer::deserialize("errorCode", stack)?);
                }
                "errorMessage" => {
                    obj.error_message =
                        Some(StringDeserializer::deserialize("errorMessage", stack)?);
                }
                "launchTemplateAndOverrides" => {
                    obj.launch_template_and_overrides =
                        Some(LaunchTemplateAndOverridesResponseDeserializer::deserialize(
                            "launchTemplateAndOverrides",
                            stack,
                        )?);
                }
                "lifecycle" => {
                    obj.lifecycle = Some(InstanceLifecycleDeserializer::deserialize(
                        "lifecycle",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeFleetHistoryRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The type of events to describe. By default, all events are described.</p>
    pub event_type: Option<String>,
    /// <p>The ID of the EC2 Fleet.</p>
    pub fleet_id: String,
    /// <p>The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next set of results.</p>
    pub next_token: Option<String>,
    /// <p>The start date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub start_time: String,
}

/// Serialize `DescribeFleetHistoryRequest` contents to a `SignedRequest`.
struct DescribeFleetHistoryRequestSerializer;
impl DescribeFleetHistoryRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeFleetHistoryRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.event_type {
            params.put(&format!("{}{}", prefix, "EventType"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "FleetId"), &obj.fleet_id);
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "StartTime"), &obj.start_time);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeFleetHistoryResult {
    /// <p>The ID of the EC Fleet.</p>
    pub fleet_id: Option<String>,
    /// <p>Information about the events in the history of the EC2 Fleet.</p>
    pub history_records: Option<Vec<HistoryRecordEntry>>,
    /// <p>The last date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). All records up to this time were retrieved.</p> <p>If <code>nextToken</code> indicates that there are more results, this value is not present.</p>
    pub last_evaluated_time: Option<String>,
    /// <p>The token for the next set of results.</p>
    pub next_token: Option<String>,
    /// <p>The start date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub start_time: Option<String>,
}

struct DescribeFleetHistoryResultDeserializer;
impl DescribeFleetHistoryResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeFleetHistoryResult, XmlParseError> {
        deserialize_elements::<_, DescribeFleetHistoryResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "fleetId" => {
                        obj.fleet_id =
                            Some(FleetIdentifierDeserializer::deserialize("fleetId", stack)?);
                    }
                    "historyRecordSet" => {
                        obj.history_records.get_or_insert(vec![]).extend(
                            HistoryRecordSetDeserializer::deserialize("historyRecordSet", stack)?,
                        );
                    }
                    "lastEvaluatedTime" => {
                        obj.last_evaluated_time = Some(DateTimeDeserializer::deserialize(
                            "lastEvaluatedTime",
                            stack,
                        )?);
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "startTime" => {
                        obj.start_time =
                            Some(DateTimeDeserializer::deserialize("startTime", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeFleetInstancesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>The filters.</p> <ul> <li> <p> <code>instance-type</code> - The instance type.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The ID of the EC2 Fleet.</p>
    pub fleet_id: String,
    /// <p>The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next set of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeFleetInstancesRequest` contents to a `SignedRequest`.
struct DescribeFleetInstancesRequestSerializer;
impl DescribeFleetInstancesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeFleetInstancesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "FleetId"), &obj.fleet_id);
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeFleetInstancesResult {
    /// <p>The running instances. This list is refreshed periodically and might be out of date.</p>
    pub active_instances: Option<Vec<ActiveInstance>>,
    /// <p>The ID of the EC2 Fleet.</p>
    pub fleet_id: Option<String>,
    /// <p>The token for the next set of results.</p>
    pub next_token: Option<String>,
}

struct DescribeFleetInstancesResultDeserializer;
impl DescribeFleetInstancesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeFleetInstancesResult, XmlParseError> {
        deserialize_elements::<_, DescribeFleetInstancesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "activeInstanceSet" => {
                        obj.active_instances.get_or_insert(vec![]).extend(
                            ActiveInstanceSetDeserializer::deserialize("activeInstanceSet", stack)?,
                        );
                    }
                    "fleetId" => {
                        obj.fleet_id =
                            Some(FleetIdentifierDeserializer::deserialize("fleetId", stack)?);
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct DescribeFleetsErrorSetDeserializer;
impl DescribeFleetsErrorSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DescribeFleetError>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(DescribeFleetErrorDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the instances that were launched by the fleet.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeFleetsInstances {
    /// <p>The IDs of the instances.</p>
    pub instance_ids: Option<Vec<String>>,
    /// <p>The instance type.</p>
    pub instance_type: Option<String>,
    /// <p>The launch templates and overrides that were used for launching the instances. Any parameters that you specify in the Overrides override the same parameters in the launch template.</p>
    pub launch_template_and_overrides: Option<LaunchTemplateAndOverridesResponse>,
    /// <p>Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.</p>
    pub lifecycle: Option<String>,
    /// <p>The value is <code>Windows</code> for Windows instances; otherwise blank.</p>
    pub platform: Option<String>,
}

struct DescribeFleetsInstancesDeserializer;
impl DescribeFleetsInstancesDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeFleetsInstances, XmlParseError> {
        deserialize_elements::<_, DescribeFleetsInstances, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "instanceIds" => {
                        obj.instance_ids.get_or_insert(vec![]).extend(
                            InstanceIdsSetDeserializer::deserialize("instanceIds", stack)?,
                        );
                    }
                    "instanceType" => {
                        obj.instance_type = Some(InstanceTypeDeserializer::deserialize(
                            "instanceType",
                            stack,
                        )?);
                    }
                    "launchTemplateAndOverrides" => {
                        obj.launch_template_and_overrides =
                            Some(LaunchTemplateAndOverridesResponseDeserializer::deserialize(
                                "launchTemplateAndOverrides",
                                stack,
                            )?);
                    }
                    "lifecycle" => {
                        obj.lifecycle = Some(InstanceLifecycleDeserializer::deserialize(
                            "lifecycle",
                            stack,
                        )?);
                    }
                    "platform" => {
                        obj.platform =
                            Some(PlatformValuesDeserializer::deserialize("platform", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct DescribeFleetsInstancesSetDeserializer;
impl DescribeFleetsInstancesSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DescribeFleetsInstances>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(DescribeFleetsInstancesDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeFleetsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>The filters.</p> <ul> <li> <p> <code>activity-status</code> - The progress of the EC2 Fleet ( <code>error</code> | <code>pending-fulfillment</code> | <code>pending-termination</code> | <code>fulfilled</code>).</p> </li> <li> <p> <code>excess-capacity-termination-policy</code> - Indicates whether to terminate running instances if the target capacity is decreased below the current EC2 Fleet size (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>fleet-state</code> - The state of the EC2 Fleet (<code>submitted</code> | <code>active</code> | <code>deleted</code> | <code>failed</code> | <code>deleted-running</code> | <code>deleted-terminating</code> | <code>modifying</code>).</p> </li> <li> <p> <code>replace-unhealthy-instances</code> - Indicates whether EC2 Fleet should replace unhealthy instances (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>type</code> - The type of request (<code>instant</code> | <code>request</code> | <code>maintain</code>).</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The ID of the EC2 Fleets.</p>
    pub fleet_ids: Option<Vec<String>>,
    /// <p>The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next set of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeFleetsRequest` contents to a `SignedRequest`.
struct DescribeFleetsRequestSerializer;
impl DescribeFleetsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeFleetsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.fleet_ids {
            FleetIdSetSerializer::serialize(
                params,
                &format!("{}{}", prefix, "FleetId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeFleetsResult {
    /// <p>Information about the EC2 Fleets.</p>
    pub fleets: Option<Vec<FleetData>>,
    /// <p>The token for the next set of results.</p>
    pub next_token: Option<String>,
}

struct DescribeFleetsResultDeserializer;
impl DescribeFleetsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeFleetsResult, XmlParseError> {
        deserialize_elements::<_, DescribeFleetsResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "fleetSet" => {
                    obj.fleets
                        .get_or_insert(vec![])
                        .extend(FleetSetDeserializer::deserialize("fleetSet", stack)?);
                }
                "nextToken" => {
                    obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeFlowLogsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>deliver-log-status</code> - The status of the logs delivery (<code>SUCCESS</code> | <code>FAILED</code>).</p> </li> <li> <p> <code>log-destination-type</code> - The type of destination to which the flow log publishes data. Possible destination types include <code>cloud-watch-logs</code> and <code>S3</code>.</p> </li> <li> <p> <code>flow-log-id</code> - The ID of the flow log.</p> </li> <li> <p> <code>log-group-name</code> - The name of the log group.</p> </li> <li> <p> <code>resource-id</code> - The ID of the VPC, subnet, or network interface.</p> </li> <li> <p> <code>traffic-type</code> - The type of traffic (<code>ACCEPT</code> | <code>REJECT</code> | <code>ALL</code>).</p> </li> </ul></p>
    pub filter: Option<Vec<Filter>>,
    /// <p>One or more flow log IDs.</p> <p>Constraint: Maximum of 1000 flow log IDs.</p>
    pub flow_log_ids: Option<Vec<String>>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeFlowLogsRequest` contents to a `SignedRequest`.
struct DescribeFlowLogsRequestSerializer;
impl DescribeFlowLogsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeFlowLogsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filter {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.flow_log_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "FlowLogId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeFlowLogsResult {
    /// <p>Information about the flow logs.</p>
    pub flow_logs: Option<Vec<FlowLog>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeFlowLogsResultDeserializer;
impl DescribeFlowLogsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeFlowLogsResult, XmlParseError> {
        deserialize_elements::<_, DescribeFlowLogsResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "flowLogSet" => {
                    obj.flow_logs
                        .get_or_insert(vec![])
                        .extend(FlowLogSetDeserializer::deserialize("flowLogSet", stack)?);
                }
                "nextToken" => {
                    obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeFpgaImageAttributeRequest {
    /// <p>The AFI attribute.</p>
    pub attribute: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the AFI.</p>
    pub fpga_image_id: String,
}

/// Serialize `DescribeFpgaImageAttributeRequest` contents to a `SignedRequest`.
struct DescribeFpgaImageAttributeRequestSerializer;
impl DescribeFpgaImageAttributeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeFpgaImageAttributeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Attribute"), &obj.attribute);
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "FpgaImageId"), &obj.fpga_image_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeFpgaImageAttributeResult {
    /// <p>Information about the attribute.</p>
    pub fpga_image_attribute: Option<FpgaImageAttribute>,
}

struct DescribeFpgaImageAttributeResultDeserializer;
impl DescribeFpgaImageAttributeResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeFpgaImageAttributeResult, XmlParseError> {
        deserialize_elements::<_, DescribeFpgaImageAttributeResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "fpgaImageAttribute" => {
                        obj.fpga_image_attribute =
                            Some(FpgaImageAttributeDeserializer::deserialize(
                                "fpgaImageAttribute",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeFpgaImagesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>The filters.</p> <ul> <li> <p> <code>create-time</code> - The creation time of the AFI.</p> </li> <li> <p> <code>fpga-image-id</code> - The FPGA image identifier (AFI ID).</p> </li> <li> <p> <code>fpga-image-global-id</code> - The global FPGA image identifier (AGFI ID).</p> </li> <li> <p> <code>name</code> - The name of the AFI.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the AFI owner.</p> </li> <li> <p> <code>product-code</code> - The product code.</p> </li> <li> <p> <code>shell-version</code> - The version of the AWS Shell that was used to create the bitstream.</p> </li> <li> <p> <code>state</code> - The state of the AFI (<code>pending</code> | <code>failed</code> | <code>available</code> | <code>unavailable</code>).</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>update-time</code> - The time of the most recent update.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The AFI IDs.</p>
    pub fpga_image_ids: Option<Vec<String>>,
    /// <p>The maximum number of results to return in a single call.</p>
    pub max_results: Option<i64>,
    /// <p>The token to retrieve the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>Filters the AFI by owner. Specify an AWS account ID, <code>self</code> (owner is the sender of the request), or an AWS owner alias (valid values are <code>amazon</code> | <code>aws-marketplace</code>).</p>
    pub owners: Option<Vec<String>>,
}

/// Serialize `DescribeFpgaImagesRequest` contents to a `SignedRequest`.
struct DescribeFpgaImagesRequestSerializer;
impl DescribeFpgaImagesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeFpgaImagesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.fpga_image_ids {
            FpgaImageIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "FpgaImageId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.owners {
            OwnerStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Owner"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeFpgaImagesResult {
    /// <p>Information about the FPGA images.</p>
    pub fpga_images: Option<Vec<FpgaImage>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeFpgaImagesResultDeserializer;
impl DescribeFpgaImagesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeFpgaImagesResult, XmlParseError> {
        deserialize_elements::<_, DescribeFpgaImagesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "fpgaImageSet" => {
                        obj.fpga_images.get_or_insert(vec![]).extend(
                            FpgaImageListDeserializer::deserialize("fpgaImageSet", stack)?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token =
                            Some(NextTokenDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeHostReservationOfferingsRequest {
    /// <p><p>The filters.</p> <ul> <li> <p> <code>instance-family</code> - The instance family of the offering (for example, <code>m4</code>).</p> </li> <li> <p> <code>payment-option</code> - The payment option (<code>NoUpfront</code> | <code>PartialUpfront</code> | <code>AllUpfront</code>).</p> </li> </ul></p>
    pub filter: Option<Vec<Filter>>,
    /// <p>This is the maximum duration of the reservation to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 94608000 for three years.</p>
    pub max_duration: Option<i64>,
    /// <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</p>
    pub max_results: Option<i64>,
    /// <p>This is the minimum duration of the reservation you'd like to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 31536000 for one year.</p>
    pub min_duration: Option<i64>,
    /// <p>The token to use to retrieve the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>The ID of the reservation offering.</p>
    pub offering_id: Option<String>,
}

/// Serialize `DescribeHostReservationOfferingsRequest` contents to a `SignedRequest`.
struct DescribeHostReservationOfferingsRequestSerializer;
impl DescribeHostReservationOfferingsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeHostReservationOfferingsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.filter {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_duration {
            params.put(&format!("{}{}", prefix, "MaxDuration"), &field_value);
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.min_duration {
            params.put(&format!("{}{}", prefix, "MinDuration"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.offering_id {
            params.put(&format!("{}{}", prefix, "OfferingId"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeHostReservationOfferingsResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about the offerings.</p>
    pub offering_set: Option<Vec<HostOffering>>,
}

struct DescribeHostReservationOfferingsResultDeserializer;
impl DescribeHostReservationOfferingsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeHostReservationOfferingsResult, XmlParseError> {
        deserialize_elements::<_, DescribeHostReservationOfferingsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "offeringSet" => {
                        obj.offering_set.get_or_insert(vec![]).extend(
                            HostOfferingSetDeserializer::deserialize("offeringSet", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeHostReservationsRequest {
    /// <p><p>The filters.</p> <ul> <li> <p> <code>instance-family</code> - The instance family (for example, <code>m4</code>).</p> </li> <li> <p> <code>payment-option</code> - The payment option (<code>NoUpfront</code> | <code>PartialUpfront</code> | <code>AllUpfront</code>).</p> </li> <li> <p> <code>state</code> - The state of the reservation (<code>payment-pending</code> | <code>payment-failed</code> | <code>active</code> | <code>retired</code>).</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></p>
    pub filter: Option<Vec<Filter>>,
    /// <p>The host reservation IDs.</p>
    pub host_reservation_id_set: Option<Vec<String>>,
    /// <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</p>
    pub max_results: Option<i64>,
    /// <p>The token to use to retrieve the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeHostReservationsRequest` contents to a `SignedRequest`.
struct DescribeHostReservationsRequestSerializer;
impl DescribeHostReservationsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeHostReservationsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.filter {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.host_reservation_id_set {
            HostReservationIdSetSerializer::serialize(
                params,
                &format!("{}{}", prefix, "HostReservationIdSet"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeHostReservationsResult {
    /// <p>Details about the reservation's configuration.</p>
    pub host_reservation_set: Option<Vec<HostReservation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeHostReservationsResultDeserializer;
impl DescribeHostReservationsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeHostReservationsResult, XmlParseError> {
        deserialize_elements::<_, DescribeHostReservationsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "hostReservationSet" => {
                        obj.host_reservation_set.get_or_insert(vec![]).extend(
                            HostReservationSetDeserializer::deserialize(
                                "hostReservationSet",
                                stack,
                            )?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeHostsRequest {
    /// <p><p>The filters.</p> <ul> <li> <p> <code>auto-placement</code> - Whether auto-placement is enabled or disabled (<code>on</code> | <code>off</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the host.</p> </li> <li> <p> <code>client-token</code> - The idempotency token that you provided when you allocated the host.</p> </li> <li> <p> <code>host-reservation-id</code> - The ID of the reservation assigned to this host.</p> </li> <li> <p> <code>instance-type</code> - The instance type size that the Dedicated Host is configured to support.</p> </li> <li> <p> <code>state</code> - The allocation state of the Dedicated Host (<code>available</code> | <code>under-assessment</code> | <code>permanent-failure</code> | <code>released</code> | <code>released-permanent-failure</code>).</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></p>
    pub filter: Option<Vec<Filter>>,
    /// <p>The IDs of the Dedicated Hosts. The IDs are used for targeted instance launches.</p>
    pub host_ids: Option<Vec<String>>,
    /// <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</p> <p>You cannot specify this parameter and the host IDs parameter in the same request.</p>
    pub max_results: Option<i64>,
    /// <p>The token to use to retrieve the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeHostsRequest` contents to a `SignedRequest`.
struct DescribeHostsRequestSerializer;
impl DescribeHostsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeHostsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.filter {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.host_ids {
            RequestHostIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "HostId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeHostsResult {
    /// <p>Information about the Dedicated Hosts.</p>
    pub hosts: Option<Vec<Host>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeHostsResultDeserializer;
impl DescribeHostsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeHostsResult, XmlParseError> {
        deserialize_elements::<_, DescribeHostsResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "hostSet" => {
                    obj.hosts
                        .get_or_insert(vec![])
                        .extend(HostListDeserializer::deserialize("hostSet", stack)?);
                }
                "nextToken" => {
                    obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeIamInstanceProfileAssociationsRequest {
    /// <p>The IAM instance profile associations.</p>
    pub association_ids: Option<Vec<String>>,
    /// <p><p>The filters.</p> <ul> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> <li> <p> <code>state</code> - The state of the association (<code>associating</code> | <code>associated</code> | <code>disassociating</code> | <code>disassociated</code>).</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token to request the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeIamInstanceProfileAssociationsRequest` contents to a `SignedRequest`.
struct DescribeIamInstanceProfileAssociationsRequestSerializer;
impl DescribeIamInstanceProfileAssociationsRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &DescribeIamInstanceProfileAssociationsRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.association_ids {
            AssociationIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "AssociationId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeIamInstanceProfileAssociationsResult {
    /// <p>Information about the IAM instance profile associations.</p>
    pub iam_instance_profile_associations: Option<Vec<IamInstanceProfileAssociation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeIamInstanceProfileAssociationsResultDeserializer;
impl DescribeIamInstanceProfileAssociationsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeIamInstanceProfileAssociationsResult, XmlParseError> {
        deserialize_elements::<_, DescribeIamInstanceProfileAssociationsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "iamInstanceProfileAssociationSet" => {
                        obj.iam_instance_profile_associations
                            .get_or_insert(vec![])
                            .extend(IamInstanceProfileAssociationSetDeserializer::deserialize(
                                "iamInstanceProfileAssociationSet",
                                stack,
                            )?);
                    }
                    "nextToken" => {
                        obj.next_token =
                            Some(NextTokenDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeIdFormatRequest {
    /// <p>The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code> </p>
    pub resource: Option<String>,
}

/// Serialize `DescribeIdFormatRequest` contents to a `SignedRequest`.
struct DescribeIdFormatRequestSerializer;
impl DescribeIdFormatRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeIdFormatRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.resource {
            params.put(&format!("{}{}", prefix, "Resource"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeIdFormatResult {
    /// <p>Information about the ID format for the resource.</p>
    pub statuses: Option<Vec<IdFormat>>,
}

struct DescribeIdFormatResultDeserializer;
impl DescribeIdFormatResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeIdFormatResult, XmlParseError> {
        deserialize_elements::<_, DescribeIdFormatResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "statusSet" => {
                    obj.statuses
                        .get_or_insert(vec![])
                        .extend(IdFormatListDeserializer::deserialize("statusSet", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeIdentityIdFormatRequest {
    /// <p>The ARN of the principal, which can be an IAM role, IAM user, or the root user.</p>
    pub principal_arn: String,
    /// <p>The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code> </p>
    pub resource: Option<String>,
}

/// Serialize `DescribeIdentityIdFormatRequest` contents to a `SignedRequest`.
struct DescribeIdentityIdFormatRequestSerializer;
impl DescribeIdentityIdFormatRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeIdentityIdFormatRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "PrincipalArn"), &obj.principal_arn);
        if let Some(ref field_value) = obj.resource {
            params.put(&format!("{}{}", prefix, "Resource"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeIdentityIdFormatResult {
    /// <p>Information about the ID format for the resources.</p>
    pub statuses: Option<Vec<IdFormat>>,
}

struct DescribeIdentityIdFormatResultDeserializer;
impl DescribeIdentityIdFormatResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeIdentityIdFormatResult, XmlParseError> {
        deserialize_elements::<_, DescribeIdentityIdFormatResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "statusSet" => {
                        obj.statuses
                            .get_or_insert(vec![])
                            .extend(IdFormatListDeserializer::deserialize("statusSet", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeImageAttribute.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeImageAttributeRequest {
    /// <p>The AMI attribute.</p> <p> <b>Note</b>: Depending on your account privileges, the <code>blockDeviceMapping</code> attribute may return a <code>Client.AuthFailure</code> error. If this happens, use <a>DescribeImages</a> to get information about the block device mapping for the AMI.</p>
    pub attribute: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the AMI.</p>
    pub image_id: String,
}

/// Serialize `DescribeImageAttributeRequest` contents to a `SignedRequest`.
struct DescribeImageAttributeRequestSerializer;
impl DescribeImageAttributeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeImageAttributeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Attribute"), &obj.attribute);
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "ImageId"), &obj.image_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeImagesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Scopes the images by users with explicit launch permissions. Specify an AWS account ID, <code>self</code> (the sender of the request), or <code>all</code> (public AMIs).</p>
    pub executable_users: Option<Vec<String>>,
    /// <p><p>The filters.</p> <ul> <li> <p> <code>architecture</code> - The image architecture (<code>i386</code> | <code>x86_64</code>).</p> </li> <li> <p> <code>block-device-mapping.delete-on-termination</code> - A Boolean value that indicates whether the Amazon EBS volume is deleted on instance termination.</p> </li> <li> <p> <code>block-device-mapping.device-name</code> - The device name specified in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li> <li> <p> <code>block-device-mapping.snapshot-id</code> - The ID of the snapshot used for the EBS volume.</p> </li> <li> <p> <code>block-device-mapping.volume-size</code> - The volume size of the EBS volume, in GiB.</p> </li> <li> <p> <code>block-device-mapping.volume-type</code> - The volume type of the EBS volume (<code>gp2</code> | <code>io1</code> | <code>st1 </code>| <code>sc1</code> | <code>standard</code>).</p> </li> <li> <p> <code>block-device-mapping.encrypted</code> - A Boolean that indicates whether the EBS volume is encrypted.</p> </li> <li> <p> <code>description</code> - The description of the image (provided during image creation).</p> </li> <li> <p> <code>ena-support</code> - A Boolean that indicates whether enhanced networking with ENA is enabled.</p> </li> <li> <p> <code>hypervisor</code> - The hypervisor type (<code>ovm</code> | <code>xen</code>).</p> </li> <li> <p> <code>image-id</code> - The ID of the image.</p> </li> <li> <p> <code>image-type</code> - The image type (<code>machine</code> | <code>kernel</code> | <code>ramdisk</code>).</p> </li> <li> <p> <code>is-public</code> - A Boolean that indicates whether the image is public.</p> </li> <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li> <li> <p> <code>manifest-location</code> - The location of the image manifest.</p> </li> <li> <p> <code>name</code> - The name of the AMI (provided during image creation).</p> </li> <li> <p> <code>owner-alias</code> - String value from an Amazon-maintained list (<code>amazon</code> | <code>aws-marketplace</code> | <code>microsoft</code>) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the image owner.</p> </li> <li> <p> <code>platform</code> - The platform. To only list Windows-based AMIs, use <code>windows</code>.</p> </li> <li> <p> <code>product-code</code> - The product code.</p> </li> <li> <p> <code>product-code.type</code> - The type of the product code (<code>devpay</code> | <code>marketplace</code>).</p> </li> <li> <p> <code>ramdisk-id</code> - The RAM disk ID.</p> </li> <li> <p> <code>root-device-name</code> - The device name of the root device volume (for example, <code>/dev/sda1</code>).</p> </li> <li> <p> <code>root-device-type</code> - The type of the root device volume (<code>ebs</code> | <code>instance-store</code>).</p> </li> <li> <p> <code>state</code> - The state of the image (<code>available</code> | <code>pending</code> | <code>failed</code>).</p> </li> <li> <p> <code>state-reason-code</code> - The reason code for the state change.</p> </li> <li> <p> <code>state-reason-message</code> - The message for the state change.</p> </li> <li> <p> <code>sriov-net-support</code> - A value of <code>simple</code> indicates that enhanced networking with the Intel 82599 VF interface is enabled.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>virtualization-type</code> - The virtualization type (<code>paravirtual</code> | <code>hvm</code>).</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The image IDs.</p> <p>Default: Describes all images available to you.</p>
    pub image_ids: Option<Vec<String>>,
    /// <p>Filters the images by the owner. Specify an AWS account ID, <code>self</code> (owner is the sender of the request), or an AWS owner alias (valid values are <code>amazon</code> | <code>aws-marketplace</code> | <code>microsoft</code>). Omitting this option returns all images for which you have launch permissions, regardless of ownership.</p>
    pub owners: Option<Vec<String>>,
}

/// Serialize `DescribeImagesRequest` contents to a `SignedRequest`.
struct DescribeImagesRequestSerializer;
impl DescribeImagesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeImagesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.executable_users {
            ExecutableByStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ExecutableBy"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.image_ids {
            ImageIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ImageId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.owners {
            OwnerStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Owner"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeImagesResult {
    /// <p>Information about the images.</p>
    pub images: Option<Vec<Image>>,
}

struct DescribeImagesResultDeserializer;
impl DescribeImagesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeImagesResult, XmlParseError> {
        deserialize_elements::<_, DescribeImagesResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "imagesSet" => {
                    obj.images
                        .get_or_insert(vec![])
                        .extend(ImageListDeserializer::deserialize("imagesSet", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Contains the parameters for DescribeImportImageTasks.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeImportImageTasksRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Filter tasks using the <code>task-state</code> filter and one of the following values: active, completed, deleting, deleted.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p>A list of import image task IDs.</p>
    pub import_task_ids: Option<Vec<String>>,
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>A token that indicates the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeImportImageTasksRequest` contents to a `SignedRequest`.
struct DescribeImportImageTasksRequestSerializer;
impl DescribeImportImageTasksRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeImportImageTasksRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filters"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.import_task_ids {
            ImportTaskIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ImportTaskId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

/// <p>Contains the output for DescribeImportImageTasks.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeImportImageTasksResult {
    /// <p>A list of zero or more import image tasks that are currently active or were completed or canceled in the previous 7 days.</p>
    pub import_image_tasks: Option<Vec<ImportImageTask>>,
    /// <p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeImportImageTasksResultDeserializer;
impl DescribeImportImageTasksResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeImportImageTasksResult, XmlParseError> {
        deserialize_elements::<_, DescribeImportImageTasksResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "importImageTaskSet" => {
                        obj.import_image_tasks.get_or_insert(vec![]).extend(
                            ImportImageTaskListDeserializer::deserialize(
                                "importImageTaskSet",
                                stack,
                            )?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeImportSnapshotTasks.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeImportSnapshotTasksRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The filters.</p>
    pub filters: Option<Vec<Filter>>,
    /// <p>A list of import snapshot task IDs.</p>
    pub import_task_ids: Option<Vec<String>>,
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>A token that indicates the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeImportSnapshotTasksRequest` contents to a `SignedRequest`.
struct DescribeImportSnapshotTasksRequestSerializer;
impl DescribeImportSnapshotTasksRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeImportSnapshotTasksRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filters"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.import_task_ids {
            ImportTaskIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ImportTaskId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

/// <p>Contains the output for DescribeImportSnapshotTasks.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeImportSnapshotTasksResult {
    /// <p>A list of zero or more import snapshot tasks that are currently active or were completed or canceled in the previous 7 days.</p>
    pub import_snapshot_tasks: Option<Vec<ImportSnapshotTask>>,
    /// <p>The token to use to get the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeImportSnapshotTasksResultDeserializer;
impl DescribeImportSnapshotTasksResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeImportSnapshotTasksResult, XmlParseError> {
        deserialize_elements::<_, DescribeImportSnapshotTasksResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "importSnapshotTaskSet" => {
                        obj.import_snapshot_tasks.get_or_insert(vec![]).extend(
                            ImportSnapshotTaskListDeserializer::deserialize(
                                "importSnapshotTaskSet",
                                stack,
                            )?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeInstanceAttributeRequest {
    /// <p>The instance attribute.</p> <p>Note: The <code>enaSupport</code> attribute is not supported at this time.</p>
    pub attribute: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the instance.</p>
    pub instance_id: String,
}

/// Serialize `DescribeInstanceAttributeRequest` contents to a `SignedRequest`.
struct DescribeInstanceAttributeRequestSerializer;
impl DescribeInstanceAttributeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeInstanceAttributeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Attribute"), &obj.attribute);
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "InstanceId"), &obj.instance_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeInstanceCreditSpecificationsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>The filters.</p> <ul> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The instance IDs.</p> <p>Default: Describes all your instances.</p> <p>Constraints: Maximum 1000 explicitly specified instance IDs.</p>
    pub instance_ids: Option<Vec<String>>,
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.</p>
    pub max_results: Option<i64>,
    /// <p>The token to retrieve the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeInstanceCreditSpecificationsRequest` contents to a `SignedRequest`.
struct DescribeInstanceCreditSpecificationsRequestSerializer;
impl DescribeInstanceCreditSpecificationsRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &DescribeInstanceCreditSpecificationsRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.instance_ids {
            InstanceIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "InstanceId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeInstanceCreditSpecificationsResult {
    /// <p>Information about the credit option for CPU usage of an instance.</p>
    pub instance_credit_specifications: Option<Vec<InstanceCreditSpecification>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeInstanceCreditSpecificationsResultDeserializer;
impl DescribeInstanceCreditSpecificationsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeInstanceCreditSpecificationsResult, XmlParseError> {
        deserialize_elements::<_, DescribeInstanceCreditSpecificationsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "instanceCreditSpecificationSet" => {
                        obj.instance_credit_specifications
                            .get_or_insert(vec![])
                            .extend(InstanceCreditSpecificationListDeserializer::deserialize(
                                "instanceCreditSpecificationSet",
                                stack,
                            )?);
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeInstanceStatusRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>The filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> <li> <p> <code>event.code</code> - The code for the scheduled event (<code>instance-reboot</code> | <code>system-reboot</code> | <code>system-maintenance</code> | <code>instance-retirement</code> | <code>instance-stop</code>).</p> </li> <li> <p> <code>event.description</code> - A description of the event.</p> </li> <li> <p> <code>event.instance-event-id</code> - The ID of the event whose date and time you are modifying.</p> </li> <li> <p> <code>event.not-after</code> - The latest end time for the scheduled event (for example, <code>2014-09-15T17:15:20.000Z</code>).</p> </li> <li> <p> <code>event.not-before</code> - The earliest start time for the scheduled event (for example, <code>2014-09-15T17:15:20.000Z</code>).</p> </li> <li> <p> <code>event.not-before-deadline</code> - The deadline for starting the event (for example, <code>2014-09-15T17:15:20.000Z</code>).</p> </li> <li> <p> <code>instance-state-code</code> - The code for the instance state, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).</p> </li> <li> <p> <code>instance-state-name</code> - The state of the instance (<code>pending</code> | <code>running</code> | <code>shutting-down</code> | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).</p> </li> <li> <p> <code>instance-status.reachability</code> - Filters on instance status where the name is <code>reachability</code> (<code>passed</code> | <code>failed</code> | <code>initializing</code> | <code>insufficient-data</code>).</p> </li> <li> <p> <code>instance-status.status</code> - The status of the instance (<code>ok</code> | <code>impaired</code> | <code>initializing</code> | <code>insufficient-data</code> | <code>not-applicable</code>).</p> </li> <li> <p> <code>system-status.reachability</code> - Filters on system status where the name is <code>reachability</code> (<code>passed</code> | <code>failed</code> | <code>initializing</code> | <code>insufficient-data</code>).</p> </li> <li> <p> <code>system-status.status</code> - The system status of the instance (<code>ok</code> | <code>impaired</code> | <code>initializing</code> | <code>insufficient-data</code> | <code>not-applicable</code>).</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>When <code>true</code>, includes the health status for all instances. When <code>false</code>, includes the health status for running instances only.</p> <p>Default: <code>false</code> </p>
    pub include_all_instances: Option<bool>,
    /// <p>The instance IDs.</p> <p>Default: Describes all your instances.</p> <p>Constraints: Maximum 100 explicitly specified instance IDs.</p>
    pub instance_ids: Option<Vec<String>>,
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.</p>
    pub max_results: Option<i64>,
    /// <p>The token to retrieve the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeInstanceStatusRequest` contents to a `SignedRequest`.
struct DescribeInstanceStatusRequestSerializer;
impl DescribeInstanceStatusRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeInstanceStatusRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.include_all_instances {
            params.put(
                &format!("{}{}", prefix, "IncludeAllInstances"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.instance_ids {
            InstanceIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "InstanceId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeInstanceStatusResult {
    /// <p>Information about the status of the instances.</p>
    pub instance_statuses: Option<Vec<InstanceStatus>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeInstanceStatusResultDeserializer;
impl DescribeInstanceStatusResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeInstanceStatusResult, XmlParseError> {
        deserialize_elements::<_, DescribeInstanceStatusResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "instanceStatusSet" => {
                        obj.instance_statuses.get_or_insert(vec![]).extend(
                            InstanceStatusListDeserializer::deserialize(
                                "instanceStatusSet",
                                stack,
                            )?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeInstancesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>The filters.</p> <ul> <li> <p> <code>affinity</code> - The affinity setting for an instance running on a Dedicated Host (<code>default</code> | <code>host</code>).</p> </li> <li> <p> <code>architecture</code> - The instance architecture (<code>i386</code> | <code>x86_64</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> <li> <p> <code>block-device-mapping.attach-time</code> - The attach time for an EBS volume mapped to the instance, for example, <code>2010-09-15T17:15:20.000Z</code>.</p> </li> <li> <p> <code>block-device-mapping.delete-on-termination</code> - A Boolean that indicates whether the EBS volume is deleted on instance termination.</p> </li> <li> <p> <code>block-device-mapping.device-name</code> - The device name specified in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li> <li> <p> <code>block-device-mapping.status</code> - The status for the EBS volume (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>block-device-mapping.volume-id</code> - The volume ID of the EBS volume.</p> </li> <li> <p> <code>client-token</code> - The idempotency token you provided when you launched the instance.</p> </li> <li> <p> <code>dns-name</code> - The public DNS name of the instance.</p> </li> <li> <p> <code>group-id</code> - The ID of the security group for the instance. EC2-Classic only.</p> </li> <li> <p> <code>group-name</code> - The name of the security group for the instance. EC2-Classic only.</p> </li> <li> <p> <code>hibernation-options.configured</code> - A Boolean that indicates whether the instance is enabled for hibernation. A value of <code>true</code> means that the instance is enabled for hibernation. </p> </li> <li> <p> <code>host-id</code> - The ID of the Dedicated Host on which the instance is running, if applicable.</p> </li> <li> <p> <code>hypervisor</code> - The hypervisor type of the instance (<code>ovm</code> | <code>xen</code>).</p> </li> <li> <p> <code>iam-instance-profile.arn</code> - The instance profile associated with the instance. Specified as an ARN.</p> </li> <li> <p> <code>image-id</code> - The ID of the image used to launch the instance.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> <li> <p> <code>instance-lifecycle</code> - Indicates whether this is a Spot Instance or a Scheduled Instance (<code>spot</code> | <code>scheduled</code>).</p> </li> <li> <p> <code>instance-state-code</code> - The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).</p> </li> <li> <p> <code>instance-state-name</code> - The state of the instance (<code>pending</code> | <code>running</code> | <code>shutting-down</code> | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).</p> </li> <li> <p> <code>instance-type</code> - The type of instance (for example, <code>t2.micro</code>).</p> </li> <li> <p> <code>instance.group-id</code> - The ID of the security group for the instance. </p> </li> <li> <p> <code>instance.group-name</code> - The name of the security group for the instance. </p> </li> <li> <p> <code>ip-address</code> - The public IPv4 address of the instance.</p> </li> <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li> <li> <p> <code>key-name</code> - The name of the key pair used when the instance was launched.</p> </li> <li> <p> <code>launch-index</code> - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on). </p> </li> <li> <p> <code>launch-time</code> - The time when the instance was launched.</p> </li> <li> <p> <code>monitoring-state</code> - Indicates whether detailed monitoring is enabled (<code>disabled</code> | <code>enabled</code>).</p> </li> <li> <p> <code>network-interface.addresses.private-ip-address</code> - The private IPv4 address associated with the network interface.</p> </li> <li> <p> <code>network-interface.addresses.primary</code> - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.</p> </li> <li> <p> <code>network-interface.addresses.association.public-ip</code> - The ID of the association of an Elastic IP address (IPv4) with a network interface.</p> </li> <li> <p> <code>network-interface.addresses.association.ip-owner-id</code> - The owner ID of the private IPv4 address associated with the network interface.</p> </li> <li> <p> <code>network-interface.association.public-ip</code> - The address of the Elastic IP address (IPv4) bound to the network interface.</p> </li> <li> <p> <code>network-interface.association.ip-owner-id</code> - The owner of the Elastic IP address (IPv4) associated with the network interface.</p> </li> <li> <p> <code>network-interface.association.allocation-id</code> - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.</p> </li> <li> <p> <code>network-interface.association.association-id</code> - The association ID returned when the network interface was associated with an IPv4 address.</p> </li> <li> <p> <code>network-interface.attachment.attachment-id</code> - The ID of the interface attachment.</p> </li> <li> <p> <code>network-interface.attachment.instance-id</code> - The ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>network-interface.attachment.instance-owner-id</code> - The owner ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>network-interface.attachment.device-index</code> - The device index to which the network interface is attached.</p> </li> <li> <p> <code>network-interface.attachment.status</code> - The status of the attachment (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>network-interface.attachment.attach-time</code> - The time that the network interface was attached to an instance.</p> </li> <li> <p> <code>network-interface.attachment.delete-on-termination</code> - Specifies whether the attachment is deleted when an instance is terminated.</p> </li> <li> <p> <code>network-interface.availability-zone</code> - The Availability Zone for the network interface.</p> </li> <li> <p> <code>network-interface.description</code> - The description of the network interface.</p> </li> <li> <p> <code>network-interface.group-id</code> - The ID of a security group associated with the network interface.</p> </li> <li> <p> <code>network-interface.group-name</code> - The name of a security group associated with the network interface.</p> </li> <li> <p> <code>network-interface.ipv6-addresses.ipv6-address</code> - The IPv6 address associated with the network interface.</p> </li> <li> <p> <code>network-interface.mac-address</code> - The MAC address of the network interface.</p> </li> <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li> <li> <p> <code>network-interface.owner-id</code> - The ID of the owner of the network interface.</p> </li> <li> <p> <code>network-interface.private-dns-name</code> - The private DNS name of the network interface.</p> </li> <li> <p> <code>network-interface.requester-id</code> - The requester ID for the network interface.</p> </li> <li> <p> <code>network-interface.requester-managed</code> - Indicates whether the network interface is being managed by AWS.</p> </li> <li> <p> <code>network-interface.status</code> - The status of the network interface (<code>available</code>) | <code>in-use</code>).</p> </li> <li> <p> <code>network-interface.source-dest-check</code> - Whether the network interface performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the network interface to perform network address translation (NAT) in your VPC.</p> </li> <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the network interface.</p> </li> <li> <p> <code>network-interface.vpc-id</code> - The ID of the VPC for the network interface.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the instance owner.</p> </li> <li> <p> <code>placement-group-name</code> - The name of the placement group for the instance.</p> </li> <li> <p> <code>placement-partition-number</code> - The partition in which the instance is located.</p> </li> <li> <p> <code>platform</code> - The platform. To list only Windows instances, use <code>windows</code>.</p> </li> <li> <p> <code>private-dns-name</code> - The private IPv4 DNS name of the instance.</p> </li> <li> <p> <code>private-ip-address</code> - The private IPv4 address of the instance.</p> </li> <li> <p> <code>product-code</code> - The product code associated with the AMI used to launch the instance.</p> </li> <li> <p> <code>product-code.type</code> - The type of product code (<code>devpay</code> | <code>marketplace</code>).</p> </li> <li> <p> <code>ramdisk-id</code> - The RAM disk ID.</p> </li> <li> <p> <code>reason</code> - The reason for the current state of the instance (for example, shows &quot;User Initiated [date]&quot; when you stop or terminate the instance). Similar to the state-reason-code filter.</p> </li> <li> <p> <code>requester-id</code> - The ID of the entity that launched the instance on your behalf (for example, AWS Management Console, Auto Scaling, and so on).</p> </li> <li> <p> <code>reservation-id</code> - The ID of the instance&#39;s reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.</p> </li> <li> <p> <code>root-device-name</code> - The device name of the root device volume (for example, <code>/dev/sda1</code>).</p> </li> <li> <p> <code>root-device-type</code> - The type of the root device volume (<code>ebs</code> | <code>instance-store</code>).</p> </li> <li> <p> <code>source-dest-check</code> - Indicates whether the instance performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the instance to perform network address translation (NAT) in your VPC. </p> </li> <li> <p> <code>spot-instance-request-id</code> - The ID of the Spot Instance request.</p> </li> <li> <p> <code>state-reason-code</code> - The reason code for the state change.</p> </li> <li> <p> <code>state-reason-message</code> - A message that describes the state change.</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet for the instance.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>tenancy</code> - The tenancy of an instance (<code>dedicated</code> | <code>default</code> | <code>host</code>).</p> </li> <li> <p> <code>virtualization-type</code> - The virtualization type of the instance (<code>paravirtual</code> | <code>hvm</code>).</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC that the instance is running in.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The instance IDs.</p> <p>Default: Describes all your instances.</p>
    pub instance_ids: Option<Vec<String>>,
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.</p>
    pub max_results: Option<i64>,
    /// <p>The token to request the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeInstancesRequest` contents to a `SignedRequest`.
struct DescribeInstancesRequestSerializer;
impl DescribeInstancesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeInstancesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.instance_ids {
            InstanceIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "InstanceId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeInstancesResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about the reservations.</p>
    pub reservations: Option<Vec<Reservation>>,
}

struct DescribeInstancesResultDeserializer;
impl DescribeInstancesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeInstancesResult, XmlParseError> {
        deserialize_elements::<_, DescribeInstancesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "reservationSet" => {
                        obj.reservations.get_or_insert(vec![]).extend(
                            ReservationListDeserializer::deserialize("reservationSet", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeInternetGatewaysRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>attachment.state</code> - The current state of the attachment between the gateway and the VPC (<code>available</code>). Present only if a VPC is attached.</p> </li> <li> <p> <code>attachment.vpc-id</code> - The ID of an attached VPC.</p> </li> <li> <p> <code>internet-gateway-id</code> - The ID of the Internet gateway.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the internet gateway.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>One or more internet gateway IDs.</p> <p>Default: Describes all your internet gateways.</p>
    pub internet_gateway_ids: Option<Vec<String>>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeInternetGatewaysRequest` contents to a `SignedRequest`.
struct DescribeInternetGatewaysRequestSerializer;
impl DescribeInternetGatewaysRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeInternetGatewaysRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.internet_gateway_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "InternetGatewayId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeInternetGatewaysResult {
    /// <p>Information about one or more internet gateways.</p>
    pub internet_gateways: Option<Vec<InternetGateway>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeInternetGatewaysResultDeserializer;
impl DescribeInternetGatewaysResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeInternetGatewaysResult, XmlParseError> {
        deserialize_elements::<_, DescribeInternetGatewaysResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "internetGatewaySet" => {
                        obj.internet_gateways.get_or_insert(vec![]).extend(
                            InternetGatewayListDeserializer::deserialize(
                                "internetGatewaySet",
                                stack,
                            )?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeKeyPairsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>The filters.</p> <ul> <li> <p> <code>fingerprint</code> - The fingerprint of the key pair.</p> </li> <li> <p> <code>key-name</code> - The name of the key pair.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The key pair names.</p> <p>Default: Describes all your key pairs.</p>
    pub key_names: Option<Vec<String>>,
}

/// Serialize `DescribeKeyPairsRequest` contents to a `SignedRequest`.
struct DescribeKeyPairsRequestSerializer;
impl DescribeKeyPairsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeKeyPairsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.key_names {
            KeyNameStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "KeyName"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeKeyPairsResult {
    /// <p>Information about the key pairs.</p>
    pub key_pairs: Option<Vec<KeyPairInfo>>,
}

struct DescribeKeyPairsResultDeserializer;
impl DescribeKeyPairsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeKeyPairsResult, XmlParseError> {
        deserialize_elements::<_, DescribeKeyPairsResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "keySet" => {
                    obj.key_pairs
                        .get_or_insert(vec![])
                        .extend(KeyPairListDeserializer::deserialize("keySet", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeLaunchTemplateVersionsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>create-time</code> - The time the launch template version was created.</p> </li> <li> <p> <code>ebs-optimized</code> - A boolean that indicates whether the instance is optimized for Amazon EBS I/O.</p> </li> <li> <p> <code>iam-instance-profile</code> - The ARN of the IAM instance profile.</p> </li> <li> <p> <code>image-id</code> - The ID of the AMI.</p> </li> <li> <p> <code>instance-type</code> - The instance type.</p> </li> <li> <p> <code>is-default-version</code> - A boolean that indicates whether the launch template version is the default version.</p> </li> <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li> <li> <p> <code>ram-disk-id</code> - The RAM disk ID.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The ID of the launch template. You must specify either the launch template ID or launch template name in the request.</p>
    pub launch_template_id: Option<String>,
    /// <p>The name of the launch template. You must specify either the launch template ID or launch template name in the request.</p>
    pub launch_template_name: Option<String>,
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 1 and 200.</p>
    pub max_results: Option<i64>,
    /// <p>The version number up to which to describe launch template versions.</p>
    pub max_version: Option<String>,
    /// <p>The version number after which to describe launch template versions.</p>
    pub min_version: Option<String>,
    /// <p>The token to request the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>One or more versions of the launch template.</p>
    pub versions: Option<Vec<String>>,
}

/// Serialize `DescribeLaunchTemplateVersionsRequest` contents to a `SignedRequest`.
struct DescribeLaunchTemplateVersionsRequestSerializer;
impl DescribeLaunchTemplateVersionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeLaunchTemplateVersionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.launch_template_id {
            params.put(&format!("{}{}", prefix, "LaunchTemplateId"), &field_value);
        }
        if let Some(ref field_value) = obj.launch_template_name {
            params.put(&format!("{}{}", prefix, "LaunchTemplateName"), &field_value);
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.max_version {
            params.put(&format!("{}{}", prefix, "MaxVersion"), &field_value);
        }
        if let Some(ref field_value) = obj.min_version {
            params.put(&format!("{}{}", prefix, "MinVersion"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.versions {
            VersionStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "LaunchTemplateVersion"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeLaunchTemplateVersionsResult {
    /// <p>Information about the launch template versions.</p>
    pub launch_template_versions: Option<Vec<LaunchTemplateVersion>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeLaunchTemplateVersionsResultDeserializer;
impl DescribeLaunchTemplateVersionsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeLaunchTemplateVersionsResult, XmlParseError> {
        deserialize_elements::<_, DescribeLaunchTemplateVersionsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "launchTemplateVersionSet" => {
                        obj.launch_template_versions.get_or_insert(vec![]).extend(
                            LaunchTemplateVersionSetDeserializer::deserialize(
                                "launchTemplateVersionSet",
                                stack,
                            )?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeLaunchTemplatesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>create-time</code> - The time the launch template was created.</p> </li> <li> <p> <code>launch-template-name</code> - The name of the launch template.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>One or more launch template IDs.</p>
    pub launch_template_ids: Option<Vec<String>>,
    /// <p>One or more launch template names.</p>
    pub launch_template_names: Option<Vec<String>>,
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 1 and 200.</p>
    pub max_results: Option<i64>,
    /// <p>The token to request the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeLaunchTemplatesRequest` contents to a `SignedRequest`.
struct DescribeLaunchTemplatesRequestSerializer;
impl DescribeLaunchTemplatesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeLaunchTemplatesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.launch_template_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "LaunchTemplateId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.launch_template_names {
            LaunchTemplateNameStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "LaunchTemplateName"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeLaunchTemplatesResult {
    /// <p>Information about the launch templates.</p>
    pub launch_templates: Option<Vec<LaunchTemplate>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeLaunchTemplatesResultDeserializer;
impl DescribeLaunchTemplatesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeLaunchTemplatesResult, XmlParseError> {
        deserialize_elements::<_, DescribeLaunchTemplatesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "launchTemplates" => {
                        obj.launch_templates.get_or_insert(vec![]).extend(
                            LaunchTemplateSetDeserializer::deserialize("launchTemplates", stack)?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeMovingAddressesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>moving-status</code> - The status of the Elastic IP address (<code>MovingToVpc</code> | <code>RestoringToClassic</code>).</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000; if <code>MaxResults</code> is given a value outside of this range, an error is returned.</p> <p>Default: If no value is provided, the default is 1000.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>One or more Elastic IP addresses.</p>
    pub public_ips: Option<Vec<String>>,
}

/// Serialize `DescribeMovingAddressesRequest` contents to a `SignedRequest`.
struct DescribeMovingAddressesRequestSerializer;
impl DescribeMovingAddressesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeMovingAddressesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.public_ips {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "PublicIp"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeMovingAddressesResult {
    /// <p>The status for each Elastic IP address.</p>
    pub moving_address_statuses: Option<Vec<MovingAddressStatus>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeMovingAddressesResultDeserializer;
impl DescribeMovingAddressesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeMovingAddressesResult, XmlParseError> {
        deserialize_elements::<_, DescribeMovingAddressesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "movingAddressStatusSet" => {
                        obj.moving_address_statuses.get_or_insert(vec![]).extend(
                            MovingAddressStatusSetDeserializer::deserialize(
                                "movingAddressStatusSet",
                                stack,
                            )?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeNatGatewaysRequest {
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>nat-gateway-id</code> - The ID of the NAT gateway.</p> </li> <li> <p> <code>state</code> - The state of the NAT gateway (<code>pending</code> | <code>failed</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet in which the NAT gateway resides.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC in which the NAT gateway resides.</p> </li> </ul></p>
    pub filter: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>One or more NAT gateway IDs.</p>
    pub nat_gateway_ids: Option<Vec<String>>,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeNatGatewaysRequest` contents to a `SignedRequest`.
struct DescribeNatGatewaysRequestSerializer;
impl DescribeNatGatewaysRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeNatGatewaysRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.filter {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.nat_gateway_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "NatGatewayId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeNatGatewaysResult {
    /// <p>Information about the NAT gateways.</p>
    pub nat_gateways: Option<Vec<NatGateway>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeNatGatewaysResultDeserializer;
impl DescribeNatGatewaysResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeNatGatewaysResult, XmlParseError> {
        deserialize_elements::<_, DescribeNatGatewaysResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "natGatewaySet" => {
                        obj.nat_gateways.get_or_insert(vec![]).extend(
                            NatGatewayListDeserializer::deserialize("natGatewaySet", stack)?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeNetworkAclsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>association.association-id</code> - The ID of an association ID for the ACL.</p> </li> <li> <p> <code>association.network-acl-id</code> - The ID of the network ACL involved in the association.</p> </li> <li> <p> <code>association.subnet-id</code> - The ID of the subnet involved in the association.</p> </li> <li> <p> <code>default</code> - Indicates whether the ACL is the default network ACL for the VPC.</p> </li> <li> <p> <code>entry.cidr</code> - The IPv4 CIDR range specified in the entry.</p> </li> <li> <p> <code>entry.icmp.code</code> - The ICMP code specified in the entry, if any.</p> </li> <li> <p> <code>entry.icmp.type</code> - The ICMP type specified in the entry, if any.</p> </li> <li> <p> <code>entry.ipv6-cidr</code> - The IPv6 CIDR range specified in the entry.</p> </li> <li> <p> <code>entry.port-range.from</code> - The start of the port range specified in the entry. </p> </li> <li> <p> <code>entry.port-range.to</code> - The end of the port range specified in the entry. </p> </li> <li> <p> <code>entry.protocol</code> - The protocol specified in the entry (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p> </li> <li> <p> <code>entry.rule-action</code> - Allows or denies the matching traffic (<code>allow</code> | <code>deny</code>).</p> </li> <li> <p> <code>entry.rule-number</code> - The number of an entry (in other words, rule) in the set of ACL entries.</p> </li> <li> <p> <code>network-acl-id</code> - The ID of the network ACL.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the network ACL.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the network ACL.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>One or more network ACL IDs.</p> <p>Default: Describes all your network ACLs.</p>
    pub network_acl_ids: Option<Vec<String>>,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeNetworkAclsRequest` contents to a `SignedRequest`.
struct DescribeNetworkAclsRequestSerializer;
impl DescribeNetworkAclsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeNetworkAclsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.network_acl_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "NetworkAclId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeNetworkAclsResult {
    /// <p>Information about one or more network ACLs.</p>
    pub network_acls: Option<Vec<NetworkAcl>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeNetworkAclsResultDeserializer;
impl DescribeNetworkAclsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeNetworkAclsResult, XmlParseError> {
        deserialize_elements::<_, DescribeNetworkAclsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "networkAclSet" => {
                        obj.network_acls.get_or_insert(vec![]).extend(
                            NetworkAclListDeserializer::deserialize("networkAclSet", stack)?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeNetworkInterfaceAttribute.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeNetworkInterfaceAttributeRequest {
    /// <p>The attribute of the network interface. This parameter is required.</p>
    pub attribute: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: String,
}

/// Serialize `DescribeNetworkInterfaceAttributeRequest` contents to a `SignedRequest`.
struct DescribeNetworkInterfaceAttributeRequestSerializer;
impl DescribeNetworkInterfaceAttributeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeNetworkInterfaceAttributeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.attribute {
            params.put(&format!("{}{}", prefix, "Attribute"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "NetworkInterfaceId"),
            &obj.network_interface_id,
        );
    }
}

/// <p>Contains the output of DescribeNetworkInterfaceAttribute.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeNetworkInterfaceAttributeResult {
    /// <p>The attachment (if any) of the network interface.</p>
    pub attachment: Option<NetworkInterfaceAttachment>,
    /// <p>The description of the network interface.</p>
    pub description: Option<AttributeValue>,
    /// <p>The security groups associated with the network interface.</p>
    pub groups: Option<Vec<GroupIdentifier>>,
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: Option<String>,
    /// <p>Indicates whether source/destination checking is enabled.</p>
    pub source_dest_check: Option<AttributeBooleanValue>,
}

struct DescribeNetworkInterfaceAttributeResultDeserializer;
impl DescribeNetworkInterfaceAttributeResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeNetworkInterfaceAttributeResult, XmlParseError> {
        deserialize_elements::<_, DescribeNetworkInterfaceAttributeResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "attachment" => {
                        obj.attachment = Some(NetworkInterfaceAttachmentDeserializer::deserialize(
                            "attachment",
                            stack,
                        )?);
                    }
                    "description" => {
                        obj.description = Some(AttributeValueDeserializer::deserialize(
                            "description",
                            stack,
                        )?);
                    }
                    "groupSet" => {
                        obj.groups.get_or_insert(vec![]).extend(
                            GroupIdentifierListDeserializer::deserialize("groupSet", stack)?,
                        );
                    }
                    "networkInterfaceId" => {
                        obj.network_interface_id = Some(StringDeserializer::deserialize(
                            "networkInterfaceId",
                            stack,
                        )?);
                    }
                    "sourceDestCheck" => {
                        obj.source_dest_check =
                            Some(AttributeBooleanValueDeserializer::deserialize(
                                "sourceDestCheck",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeNetworkInterfacePermissions.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeNetworkInterfacePermissionsRequest {
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>network-interface-permission.network-interface-permission-id</code> - The ID of the permission.</p> </li> <li> <p> <code>network-interface-permission.network-interface-id</code> - The ID of the network interface.</p> </li> <li> <p> <code>network-interface-permission.aws-account-id</code> - The AWS account ID.</p> </li> <li> <p> <code>network-interface-permission.aws-service</code> - The AWS service.</p> </li> <li> <p> <code>network-interface-permission.permission</code> - The type of permission (<code>INSTANCE-ATTACH</code> | <code>EIP-ASSOCIATE</code>).</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. If this parameter is not specified, up to 50 results are returned by default.</p>
    pub max_results: Option<i64>,
    /// <p>One or more network interface permission IDs.</p>
    pub network_interface_permission_ids: Option<Vec<String>>,
    /// <p>The token to request the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeNetworkInterfacePermissionsRequest` contents to a `SignedRequest`.
struct DescribeNetworkInterfacePermissionsRequestSerializer;
impl DescribeNetworkInterfacePermissionsRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &DescribeNetworkInterfacePermissionsRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.network_interface_permission_ids {
            NetworkInterfacePermissionIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "NetworkInterfacePermissionId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

/// <p>Contains the output for DescribeNetworkInterfacePermissions.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeNetworkInterfacePermissionsResult {
    /// <p>The network interface permissions.</p>
    pub network_interface_permissions: Option<Vec<NetworkInterfacePermission>>,
    /// <p>The token to use to retrieve the next page of results.</p>
    pub next_token: Option<String>,
}

struct DescribeNetworkInterfacePermissionsResultDeserializer;
impl DescribeNetworkInterfacePermissionsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeNetworkInterfacePermissionsResult, XmlParseError> {
        deserialize_elements::<_, DescribeNetworkInterfacePermissionsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "networkInterfacePermissions" => {
                        obj.network_interface_permissions
                            .get_or_insert(vec![])
                            .extend(NetworkInterfacePermissionListDeserializer::deserialize(
                                "networkInterfacePermissions",
                                stack,
                            )?);
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeNetworkInterfaces.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeNetworkInterfacesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>addresses.private-ip-address</code> - The private IPv4 addresses associated with the network interface.</p> </li> <li> <p> <code>addresses.primary</code> - Whether the private IPv4 address is the primary IP address associated with the network interface. </p> </li> <li> <p> <code>addresses.association.public-ip</code> - The association ID returned when the network interface was associated with the Elastic IP address (IPv4).</p> </li> <li> <p> <code>addresses.association.owner-id</code> - The owner ID of the addresses associated with the network interface.</p> </li> <li> <p> <code>association.association-id</code> - The association ID returned when the network interface was associated with an IPv4 address.</p> </li> <li> <p> <code>association.allocation-id</code> - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.</p> </li> <li> <p> <code>association.ip-owner-id</code> - The owner of the Elastic IP address (IPv4) associated with the network interface.</p> </li> <li> <p> <code>association.public-ip</code> - The address of the Elastic IP address (IPv4) bound to the network interface.</p> </li> <li> <p> <code>association.public-dns-name</code> - The public DNS name for the network interface (IPv4).</p> </li> <li> <p> <code>attachment.attachment-id</code> - The ID of the interface attachment.</p> </li> <li> <p> <code>attachment.attach.time</code> - The time that the network interface was attached to an instance.</p> </li> <li> <p> <code>attachment.delete-on-termination</code> - Indicates whether the attachment is deleted when an instance is terminated.</p> </li> <li> <p> <code>attachment.device-index</code> - The device index to which the network interface is attached.</p> </li> <li> <p> <code>attachment.instance-id</code> - The ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>attachment.instance-owner-id</code> - The owner ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>attachment.nat-gateway-id</code> - The ID of the NAT gateway to which the network interface is attached.</p> </li> <li> <p> <code>attachment.status</code> - The status of the attachment (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the network interface.</p> </li> <li> <p> <code>description</code> - The description of the network interface.</p> </li> <li> <p> <code>group-id</code> - The ID of a security group associated with the network interface.</p> </li> <li> <p> <code>group-name</code> - The name of a security group associated with the network interface.</p> </li> <li> <p> <code>ipv6-addresses.ipv6-address</code> - An IPv6 address associated with the network interface.</p> </li> <li> <p> <code>mac-address</code> - The MAC address of the network interface.</p> </li> <li> <p> <code>network-interface-id</code> - The ID of the network interface.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the network interface owner.</p> </li> <li> <p> <code>private-ip-address</code> - The private IPv4 address or addresses of the network interface.</p> </li> <li> <p> <code>private-dns-name</code> - The private DNS name of the network interface (IPv4).</p> </li> <li> <p> <code>requester-id</code> - The ID of the entity that launched the instance on your behalf (for example, AWS Management Console, Auto Scaling, and so on).</p> </li> <li> <p> <code>requester-managed</code> - Indicates whether the network interface is being managed by an AWS service (for example, AWS Management Console, Auto Scaling, and so on).</p> </li> <li> <p> <code>source-dest-check</code> - Indicates whether the network interface performs source/destination checking. A value of <code>true</code> means checking is enabled, and <code>false</code> means checking is disabled. The value must be <code>false</code> for the network interface to perform network address translation (NAT) in your VPC. </p> </li> <li> <p> <code>status</code> - The status of the network interface. If the network interface is not attached to an instance, the status is <code>available</code>; if a network interface is attached to an instance the status is <code>in-use</code>.</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet for the network interface.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the network interface.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub max_results: Option<i64>,
    /// <p>One or more network interface IDs.</p> <p>Default: Describes all your network interfaces.</p>
    pub network_interface_ids: Option<Vec<String>>,
    /// <p>The token to retrieve the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeNetworkInterfacesRequest` contents to a `SignedRequest`.
struct DescribeNetworkInterfacesRequestSerializer;
impl DescribeNetworkInterfacesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeNetworkInterfacesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.network_interface_ids {
            NetworkInterfaceIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "NetworkInterfaceId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

/// <p>Contains the output of DescribeNetworkInterfaces.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeNetworkInterfacesResult {
    /// <p>Information about one or more network interfaces.</p>
    pub network_interfaces: Option<Vec<NetworkInterface>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeNetworkInterfacesResultDeserializer;
impl DescribeNetworkInterfacesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeNetworkInterfacesResult, XmlParseError> {
        deserialize_elements::<_, DescribeNetworkInterfacesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "networkInterfaceSet" => {
                        obj.network_interfaces.get_or_insert(vec![]).extend(
                            NetworkInterfaceListDeserializer::deserialize(
                                "networkInterfaceSet",
                                stack,
                            )?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribePlacementGroupsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>The filters.</p> <ul> <li> <p> <code>group-name</code> - The name of the placement group.</p> </li> <li> <p> <code>state</code> - The state of the placement group (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>strategy</code> - The strategy of the placement group (<code>cluster</code> | <code>spread</code> | <code>partition</code>).</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The names of the placement groups.</p> <p>Default: Describes all your placement groups, or only those otherwise specified.</p>
    pub group_names: Option<Vec<String>>,
}

/// Serialize `DescribePlacementGroupsRequest` contents to a `SignedRequest`.
struct DescribePlacementGroupsRequestSerializer;
impl DescribePlacementGroupsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribePlacementGroupsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.group_names {
            PlacementGroupStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "GroupName"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribePlacementGroupsResult {
    /// <p>Information about the placement groups.</p>
    pub placement_groups: Option<Vec<PlacementGroup>>,
}

struct DescribePlacementGroupsResultDeserializer;
impl DescribePlacementGroupsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribePlacementGroupsResult, XmlParseError> {
        deserialize_elements::<_, DescribePlacementGroupsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "placementGroupSet" => {
                        obj.placement_groups.get_or_insert(vec![]).extend(
                            PlacementGroupListDeserializer::deserialize(
                                "placementGroupSet",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribePrefixListsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>prefix-list-id</code>: The ID of a prefix list.</p> </li> <li> <p> <code>prefix-list-name</code>: The name of a prefix list.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>One or more prefix list IDs.</p>
    pub prefix_list_ids: Option<Vec<String>>,
}

/// Serialize `DescribePrefixListsRequest` contents to a `SignedRequest`.
struct DescribePrefixListsRequestSerializer;
impl DescribePrefixListsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribePrefixListsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.prefix_list_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "PrefixListId"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribePrefixListsResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>All available prefix lists.</p>
    pub prefix_lists: Option<Vec<PrefixList>>,
}

struct DescribePrefixListsResultDeserializer;
impl DescribePrefixListsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribePrefixListsResult, XmlParseError> {
        deserialize_elements::<_, DescribePrefixListsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "prefixListSet" => {
                        obj.prefix_lists.get_or_insert(vec![]).extend(
                            PrefixListSetDeserializer::deserialize("prefixListSet", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribePrincipalIdFormatRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. </p>
    pub max_results: Option<i64>,
    /// <p>The token to request the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code> </p>
    pub resources: Option<Vec<String>>,
}

/// Serialize `DescribePrincipalIdFormatRequest` contents to a `SignedRequest`.
struct DescribePrincipalIdFormatRequestSerializer;
impl DescribePrincipalIdFormatRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribePrincipalIdFormatRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.resources {
            ResourceListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Resource"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribePrincipalIdFormatResult {
    /// <p>The token to use to retrieve the next page of results. This value is null when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about the ID format settings for the ARN.</p>
    pub principals: Option<Vec<PrincipalIdFormat>>,
}

struct DescribePrincipalIdFormatResultDeserializer;
impl DescribePrincipalIdFormatResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribePrincipalIdFormatResult, XmlParseError> {
        deserialize_elements::<_, DescribePrincipalIdFormatResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "principalSet" => {
                        obj.principals.get_or_insert(vec![]).extend(
                            PrincipalIdFormatListDeserializer::deserialize("principalSet", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribePublicIpv4PoolsRequest {
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>The IDs of the address pools.</p>
    pub pool_ids: Option<Vec<String>>,
}

/// Serialize `DescribePublicIpv4PoolsRequest` contents to a `SignedRequest`.
struct DescribePublicIpv4PoolsRequestSerializer;
impl DescribePublicIpv4PoolsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribePublicIpv4PoolsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.pool_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "PoolId"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribePublicIpv4PoolsResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about the address pools.</p>
    pub public_ipv_4_pools: Option<Vec<PublicIpv4Pool>>,
}

struct DescribePublicIpv4PoolsResultDeserializer;
impl DescribePublicIpv4PoolsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribePublicIpv4PoolsResult, XmlParseError> {
        deserialize_elements::<_, DescribePublicIpv4PoolsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "publicIpv4PoolSet" => {
                        obj.public_ipv_4_pools.get_or_insert(vec![]).extend(
                            PublicIpv4PoolSetDeserializer::deserialize("publicIpv4PoolSet", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeRegionsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>The filters.</p> <ul> <li> <p> <code>endpoint</code> - The endpoint of the Region (for example, <code>ec2.us-east-1.amazonaws.com</code>).</p> </li> <li> <p> <code>region-name</code> - The name of the Region (for example, <code>us-east-1</code>).</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The names of the Regions.</p>
    pub region_names: Option<Vec<String>>,
}

/// Serialize `DescribeRegionsRequest` contents to a `SignedRequest`.
struct DescribeRegionsRequestSerializer;
impl DescribeRegionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeRegionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.region_names {
            RegionNameStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "RegionName"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeRegionsResult {
    /// <p>Information about the Regions.</p>
    pub regions: Option<Vec<Region>>,
}

struct DescribeRegionsResultDeserializer;
impl DescribeRegionsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeRegionsResult, XmlParseError> {
        deserialize_elements::<_, DescribeRegionsResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "regionInfo" => {
                    obj.regions
                        .get_or_insert(vec![])
                        .extend(RegionListDeserializer::deserialize("regionInfo", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Contains the parameters for DescribeReservedInstancesListings.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeReservedInstancesListingsRequest {
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>reserved-instances-id</code> - The ID of the Reserved Instances.</p> </li> <li> <p> <code>reserved-instances-listing-id</code> - The ID of the Reserved Instances listing.</p> </li> <li> <p> <code>status</code> - The status of the Reserved Instance listing (<code>pending</code> | <code>active</code> | <code>cancelled</code> | <code>closed</code>).</p> </li> <li> <p> <code>status-message</code> - The reason for the status.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>One or more Reserved Instance IDs.</p>
    pub reserved_instances_id: Option<String>,
    /// <p>One or more Reserved Instance listing IDs.</p>
    pub reserved_instances_listing_id: Option<String>,
}

/// Serialize `DescribeReservedInstancesListingsRequest` contents to a `SignedRequest`.
struct DescribeReservedInstancesListingsRequestSerializer;
impl DescribeReservedInstancesListingsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeReservedInstancesListingsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.reserved_instances_id {
            params.put(
                &format!("{}{}", prefix, "ReservedInstancesId"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.reserved_instances_listing_id {
            params.put(
                &format!("{}{}", prefix, "ReservedInstancesListingId"),
                &field_value,
            );
        }
    }
}

/// <p>Contains the output of DescribeReservedInstancesListings.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeReservedInstancesListingsResult {
    /// <p>Information about the Reserved Instance listing.</p>
    pub reserved_instances_listings: Option<Vec<ReservedInstancesListing>>,
}

struct DescribeReservedInstancesListingsResultDeserializer;
impl DescribeReservedInstancesListingsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeReservedInstancesListingsResult, XmlParseError> {
        deserialize_elements::<_, DescribeReservedInstancesListingsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "reservedInstancesListingsSet" => {
                        obj.reserved_instances_listings
                            .get_or_insert(vec![])
                            .extend(ReservedInstancesListingListDeserializer::deserialize(
                                "reservedInstancesListingsSet",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeReservedInstancesModifications.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeReservedInstancesModificationsRequest {
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>client-token</code> - The idempotency token for the modification request.</p> </li> <li> <p> <code>create-date</code> - The time when the modification request was created.</p> </li> <li> <p> <code>effective-date</code> - The time when the modification becomes effective.</p> </li> <li> <p> <code>modification-result.reserved-instances-id</code> - The ID for the Reserved Instances created as part of the modification request. This ID is only available when the status of the modification is <code>fulfilled</code>.</p> </li> <li> <p> <code>modification-result.target-configuration.availability-zone</code> - The Availability Zone for the new Reserved Instances.</p> </li> <li> <p> <code>modification-result.target-configuration.instance-count </code> - The number of new Reserved Instances.</p> </li> <li> <p> <code>modification-result.target-configuration.instance-type</code> - The instance type of the new Reserved Instances.</p> </li> <li> <p> <code>modification-result.target-configuration.platform</code> - The network platform of the new Reserved Instances (<code>EC2-Classic</code> | <code>EC2-VPC</code>).</p> </li> <li> <p> <code>reserved-instances-id</code> - The ID of the Reserved Instances modified.</p> </li> <li> <p> <code>reserved-instances-modification-id</code> - The ID of the modification request.</p> </li> <li> <p> <code>status</code> - The status of the Reserved Instances modification request (<code>processing</code> | <code>fulfilled</code> | <code>failed</code>).</p> </li> <li> <p> <code>status-message</code> - The reason for the status.</p> </li> <li> <p> <code>update-date</code> - The time when the modification request was last updated.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The token to retrieve the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>IDs for the submitted modification request.</p>
    pub reserved_instances_modification_ids: Option<Vec<String>>,
}

/// Serialize `DescribeReservedInstancesModificationsRequest` contents to a `SignedRequest`.
struct DescribeReservedInstancesModificationsRequestSerializer;
impl DescribeReservedInstancesModificationsRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &DescribeReservedInstancesModificationsRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.reserved_instances_modification_ids {
            ReservedInstancesModificationIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ReservedInstancesModificationId"),
                field_value,
            );
        }
    }
}

/// <p>Contains the output of DescribeReservedInstancesModifications.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeReservedInstancesModificationsResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>The Reserved Instance modification information.</p>
    pub reserved_instances_modifications: Option<Vec<ReservedInstancesModification>>,
}

struct DescribeReservedInstancesModificationsResultDeserializer;
impl DescribeReservedInstancesModificationsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeReservedInstancesModificationsResult, XmlParseError> {
        deserialize_elements::<_, DescribeReservedInstancesModificationsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "reservedInstancesModificationsSet" => {
                        obj.reserved_instances_modifications
                            .get_or_insert(vec![])
                            .extend(ReservedInstancesModificationListDeserializer::deserialize(
                                "reservedInstancesModificationsSet",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeReservedInstancesOfferings.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeReservedInstancesOfferingsRequest {
    /// <p>The Availability Zone in which the Reserved Instance can be used.</p>
    pub availability_zone: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone where the Reserved Instance can be used.</p> </li> <li> <p> <code>duration</code> - The duration of the Reserved Instance (for example, one year or three years), in seconds (<code>31536000</code> | <code>94608000</code>).</p> </li> <li> <p> <code>fixed-price</code> - The purchase price of the Reserved Instance (for example, 9800.0).</p> </li> <li> <p> <code>instance-type</code> - The instance type that is covered by the reservation.</p> </li> <li> <p> <code>marketplace</code> - Set to <code>true</code> to show only Reserved Instance Marketplace offerings. When this filter is not used, which is the default behavior, all offerings from both AWS and the Reserved Instance Marketplace are listed.</p> </li> <li> <p> <code>product-description</code> - The Reserved Instance product platform description. Instances that include <code>(Amazon VPC)</code> in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC. (<code>Linux/UNIX</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE Linux</code> | <code>SUSE Linux (Amazon VPC)</code> | <code>Red Hat Enterprise Linux</code> | <code>Red Hat Enterprise Linux (Amazon VPC)</code> | <code>Windows</code> | <code>Windows (Amazon VPC)</code> | <code>Windows with SQL Server Standard</code> | <code>Windows with SQL Server Standard (Amazon VPC)</code> | <code>Windows with SQL Server Web</code> | <code> Windows with SQL Server Web (Amazon VPC)</code> | <code>Windows with SQL Server Enterprise</code> | <code>Windows with SQL Server Enterprise (Amazon VPC)</code>) </p> </li> <li> <p> <code>reserved-instances-offering-id</code> - The Reserved Instances offering ID.</p> </li> <li> <p> <code>scope</code> - The scope of the Reserved Instance (<code>Availability Zone</code> or <code>Region</code>).</p> </li> <li> <p> <code>usage-price</code> - The usage price of the Reserved Instance, per hour (for example, 0.84).</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>Include Reserved Instance Marketplace offerings in the response.</p>
    pub include_marketplace: Option<bool>,
    /// <p>The tenancy of the instances covered by the reservation. A Reserved Instance with a tenancy of <code>dedicated</code> is applied to instances that run in a VPC on single-tenant hardware (i.e., Dedicated Instances).</p> <p> <b>Important:</b> The <code>host</code> value cannot be used with this parameter. Use the <code>default</code> or <code>dedicated</code> values only.</p> <p>Default: <code>default</code> </p>
    pub instance_tenancy: Option<String>,
    /// <p>The instance type that the reservation will cover (for example, <code>m1.small</code>). For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub instance_type: Option<String>,
    /// <p>The maximum duration (in seconds) to filter when searching for offerings.</p> <p>Default: 94608000 (3 years)</p>
    pub max_duration: Option<i64>,
    /// <p>The maximum number of instances to filter when searching for offerings.</p> <p>Default: 20</p>
    pub max_instance_count: Option<i64>,
    /// <p>The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. The maximum is 100.</p> <p>Default: 100</p>
    pub max_results: Option<i64>,
    /// <p>The minimum duration (in seconds) to filter when searching for offerings.</p> <p>Default: 2592000 (1 month)</p>
    pub min_duration: Option<i64>,
    /// <p>The token to retrieve the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>The offering class of the Reserved Instance. Can be <code>standard</code> or <code>convertible</code>.</p>
    pub offering_class: Option<String>,
    /// <p>The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the <code>Medium Utilization</code> Reserved Instance offering type. </p>
    pub offering_type: Option<String>,
    /// <p>The Reserved Instance product platform description. Instances that include <code>(Amazon VPC)</code> in the description are for use with Amazon VPC.</p>
    pub product_description: Option<String>,
    /// <p>One or more Reserved Instances offering IDs.</p>
    pub reserved_instances_offering_ids: Option<Vec<String>>,
}

/// Serialize `DescribeReservedInstancesOfferingsRequest` contents to a `SignedRequest`.
struct DescribeReservedInstancesOfferingsRequestSerializer;
impl DescribeReservedInstancesOfferingsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeReservedInstancesOfferingsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.availability_zone {
            params.put(&format!("{}{}", prefix, "AvailabilityZone"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.include_marketplace {
            params.put(&format!("{}{}", prefix, "IncludeMarketplace"), &field_value);
        }
        if let Some(ref field_value) = obj.instance_tenancy {
            params.put(&format!("{}{}", prefix, "InstanceTenancy"), &field_value);
        }
        if let Some(ref field_value) = obj.instance_type {
            params.put(&format!("{}{}", prefix, "InstanceType"), &field_value);
        }
        if let Some(ref field_value) = obj.max_duration {
            params.put(&format!("{}{}", prefix, "MaxDuration"), &field_value);
        }
        if let Some(ref field_value) = obj.max_instance_count {
            params.put(&format!("{}{}", prefix, "MaxInstanceCount"), &field_value);
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.min_duration {
            params.put(&format!("{}{}", prefix, "MinDuration"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.offering_class {
            params.put(&format!("{}{}", prefix, "OfferingClass"), &field_value);
        }
        if let Some(ref field_value) = obj.offering_type {
            params.put(&format!("{}{}", prefix, "OfferingType"), &field_value);
        }
        if let Some(ref field_value) = obj.product_description {
            params.put(&format!("{}{}", prefix, "ProductDescription"), &field_value);
        }
        if let Some(ref field_value) = obj.reserved_instances_offering_ids {
            ReservedInstancesOfferingIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ReservedInstancesOfferingId"),
                field_value,
            );
        }
    }
}

/// <p>Contains the output of DescribeReservedInstancesOfferings.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeReservedInstancesOfferingsResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>A list of Reserved Instances offerings.</p>
    pub reserved_instances_offerings: Option<Vec<ReservedInstancesOffering>>,
}

struct DescribeReservedInstancesOfferingsResultDeserializer;
impl DescribeReservedInstancesOfferingsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeReservedInstancesOfferingsResult, XmlParseError> {
        deserialize_elements::<_, DescribeReservedInstancesOfferingsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "reservedInstancesOfferingsSet" => {
                        obj.reserved_instances_offerings
                            .get_or_insert(vec![])
                            .extend(ReservedInstancesOfferingListDeserializer::deserialize(
                                "reservedInstancesOfferingsSet",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeReservedInstances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeReservedInstancesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone where the Reserved Instance can be used.</p> </li> <li> <p> <code>duration</code> - The duration of the Reserved Instance (one year or three years), in seconds (<code>31536000</code> | <code>94608000</code>).</p> </li> <li> <p> <code>end</code> - The time when the Reserved Instance expires (for example, 2015-08-07T11:54:42.000Z).</p> </li> <li> <p> <code>fixed-price</code> - The purchase price of the Reserved Instance (for example, 9800.0).</p> </li> <li> <p> <code>instance-type</code> - The instance type that is covered by the reservation.</p> </li> <li> <p> <code>scope</code> - The scope of the Reserved Instance (<code>Region</code> or <code>Availability Zone</code>).</p> </li> <li> <p> <code>product-description</code> - The Reserved Instance product platform description. Instances that include <code>(Amazon VPC)</code> in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC (<code>Linux/UNIX</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE Linux</code> | <code>SUSE Linux (Amazon VPC)</code> | <code>Red Hat Enterprise Linux</code> | <code>Red Hat Enterprise Linux (Amazon VPC)</code> | <code>Windows</code> | <code>Windows (Amazon VPC)</code> | <code>Windows with SQL Server Standard</code> | <code>Windows with SQL Server Standard (Amazon VPC)</code> | <code>Windows with SQL Server Web</code> | <code>Windows with SQL Server Web (Amazon VPC)</code> | <code>Windows with SQL Server Enterprise</code> | <code>Windows with SQL Server Enterprise (Amazon VPC)</code>).</p> </li> <li> <p> <code>reserved-instances-id</code> - The ID of the Reserved Instance.</p> </li> <li> <p> <code>start</code> - The time at which the Reserved Instance purchase request was placed (for example, 2014-08-07T11:54:42.000Z).</p> </li> <li> <p> <code>state</code> - The state of the Reserved Instance (<code>payment-pending</code> | <code>active</code> | <code>payment-failed</code> | <code>retired</code>).</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>usage-price</code> - The usage price of the Reserved Instance, per hour (for example, 0.84).</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>Describes whether the Reserved Instance is Standard or Convertible.</p>
    pub offering_class: Option<String>,
    /// <p>The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the <code>Medium Utilization</code> Reserved Instance offering type.</p>
    pub offering_type: Option<String>,
    /// <p>One or more Reserved Instance IDs.</p> <p>Default: Describes all your Reserved Instances, or only those otherwise specified.</p>
    pub reserved_instances_ids: Option<Vec<String>>,
}

/// Serialize `DescribeReservedInstancesRequest` contents to a `SignedRequest`.
struct DescribeReservedInstancesRequestSerializer;
impl DescribeReservedInstancesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeReservedInstancesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.offering_class {
            params.put(&format!("{}{}", prefix, "OfferingClass"), &field_value);
        }
        if let Some(ref field_value) = obj.offering_type {
            params.put(&format!("{}{}", prefix, "OfferingType"), &field_value);
        }
        if let Some(ref field_value) = obj.reserved_instances_ids {
            ReservedInstancesIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ReservedInstancesId"),
                field_value,
            );
        }
    }
}

/// <p>Contains the output for DescribeReservedInstances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeReservedInstancesResult {
    /// <p>A list of Reserved Instances.</p>
    pub reserved_instances: Option<Vec<ReservedInstances>>,
}

struct DescribeReservedInstancesResultDeserializer;
impl DescribeReservedInstancesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeReservedInstancesResult, XmlParseError> {
        deserialize_elements::<_, DescribeReservedInstancesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "reservedInstancesSet" => {
                        obj.reserved_instances.get_or_insert(vec![]).extend(
                            ReservedInstancesListDeserializer::deserialize(
                                "reservedInstancesSet",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeRouteTablesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>association.route-table-association-id</code> - The ID of an association ID for the route table.</p> </li> <li> <p> <code>association.route-table-id</code> - The ID of the route table involved in the association.</p> </li> <li> <p> <code>association.subnet-id</code> - The ID of the subnet involved in the association.</p> </li> <li> <p> <code>association.main</code> - Indicates whether the route table is the main route table for the VPC (<code>true</code> | <code>false</code>). Route tables that do not have an association ID are not returned in the response.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the route table.</p> </li> <li> <p> <code>route-table-id</code> - The ID of the route table.</p> </li> <li> <p> <code>route.destination-cidr-block</code> - The IPv4 CIDR range specified in a route in the table.</p> </li> <li> <p> <code>route.destination-ipv6-cidr-block</code> - The IPv6 CIDR range specified in a route in the route table.</p> </li> <li> <p> <code>route.destination-prefix-list-id</code> - The ID (prefix) of the AWS service specified in a route in the table.</p> </li> <li> <p> <code>route.egress-only-internet-gateway-id</code> - The ID of an egress-only Internet gateway specified in a route in the route table.</p> </li> <li> <p> <code>route.gateway-id</code> - The ID of a gateway specified in a route in the table.</p> </li> <li> <p> <code>route.instance-id</code> - The ID of an instance specified in a route in the table.</p> </li> <li> <p> <code>route.nat-gateway-id</code> - The ID of a NAT gateway.</p> </li> <li> <p> <code>route.transit-gateway-id</code> - The ID of a transit gateway.</p> </li> <li> <p> <code>route.origin</code> - Describes how the route was created. <code>CreateRouteTable</code> indicates that the route was automatically created when the route table was created; <code>CreateRoute</code> indicates that the route was manually added to the route table; <code>EnableVgwRoutePropagation</code> indicates that the route was propagated by route propagation.</p> </li> <li> <p> <code>route.state</code> - The state of a route in the route table (<code>active</code> | <code>blackhole</code>). The blackhole state indicates that the route&#39;s target isn&#39;t available (for example, the specified gateway isn&#39;t attached to the VPC, the specified NAT instance has been terminated, and so on).</p> </li> <li> <p> <code>route.vpc-peering-connection-id</code> - The ID of a VPC peering connection specified in a route in the table.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of a transit gateway.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the route table.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>One or more route table IDs.</p> <p>Default: Describes all your route tables.</p>
    pub route_table_ids: Option<Vec<String>>,
}

/// Serialize `DescribeRouteTablesRequest` contents to a `SignedRequest`.
struct DescribeRouteTablesRequestSerializer;
impl DescribeRouteTablesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeRouteTablesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.route_table_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "RouteTableId"),
                field_value,
            );
        }
    }
}

/// <p>Contains the output of DescribeRouteTables.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeRouteTablesResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about one or more route tables.</p>
    pub route_tables: Option<Vec<RouteTable>>,
}

struct DescribeRouteTablesResultDeserializer;
impl DescribeRouteTablesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeRouteTablesResult, XmlParseError> {
        deserialize_elements::<_, DescribeRouteTablesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "routeTableSet" => {
                        obj.route_tables.get_or_insert(vec![]).extend(
                            RouteTableListDeserializer::deserialize("routeTableSet", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeScheduledInstanceAvailability.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeScheduledInstanceAvailabilityRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>The filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone (for example, <code>us-west-2a</code>).</p> </li> <li> <p> <code>instance-type</code> - The instance type (for example, <code>c4.large</code>).</p> </li> <li> <p> <code>network-platform</code> - The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p> </li> <li> <p> <code>platform</code> - The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The time period for the first schedule to start.</p>
    pub first_slot_start_time_range: SlotDateTimeRangeRequest,
    /// <p>The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 300. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The maximum available duration, in hours. This value must be greater than <code>MinSlotDurationInHours</code> and less than 1,720.</p>
    pub max_slot_duration_in_hours: Option<i64>,
    /// <p>The minimum available duration, in hours. The minimum required duration is 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.</p>
    pub min_slot_duration_in_hours: Option<i64>,
    /// <p>The token for the next set of results.</p>
    pub next_token: Option<String>,
    /// <p>The schedule recurrence.</p>
    pub recurrence: ScheduledInstanceRecurrenceRequest,
}

/// Serialize `DescribeScheduledInstanceAvailabilityRequest` contents to a `SignedRequest`.
struct DescribeScheduledInstanceAvailabilityRequestSerializer;
impl DescribeScheduledInstanceAvailabilityRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &DescribeScheduledInstanceAvailabilityRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        SlotDateTimeRangeRequestSerializer::serialize(
            params,
            &format!("{}{}", prefix, "FirstSlotStartTimeRange"),
            &obj.first_slot_start_time_range,
        );
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.max_slot_duration_in_hours {
            params.put(
                &format!("{}{}", prefix, "MaxSlotDurationInHours"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.min_slot_duration_in_hours {
            params.put(
                &format!("{}{}", prefix, "MinSlotDurationInHours"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        ScheduledInstanceRecurrenceRequestSerializer::serialize(
            params,
            &format!("{}{}", prefix, "Recurrence"),
            &obj.recurrence,
        );
    }
}

/// <p>Contains the output of DescribeScheduledInstanceAvailability.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeScheduledInstanceAvailabilityResult {
    /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about the available Scheduled Instances.</p>
    pub scheduled_instance_availability_set: Option<Vec<ScheduledInstanceAvailability>>,
}

struct DescribeScheduledInstanceAvailabilityResultDeserializer;
impl DescribeScheduledInstanceAvailabilityResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeScheduledInstanceAvailabilityResult, XmlParseError> {
        deserialize_elements::<_, DescribeScheduledInstanceAvailabilityResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "scheduledInstanceAvailabilitySet" => {
                        obj.scheduled_instance_availability_set
                            .get_or_insert(vec![])
                            .extend(ScheduledInstanceAvailabilitySetDeserializer::deserialize(
                                "scheduledInstanceAvailabilitySet",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeScheduledInstances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeScheduledInstancesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>The filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone (for example, <code>us-west-2a</code>).</p> </li> <li> <p> <code>instance-type</code> - The instance type (for example, <code>c4.large</code>).</p> </li> <li> <p> <code>network-platform</code> - The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p> </li> <li> <p> <code>platform</code> - The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 100. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next set of results.</p>
    pub next_token: Option<String>,
    /// <p>The Scheduled Instance IDs.</p>
    pub scheduled_instance_ids: Option<Vec<String>>,
    /// <p>The time period for the first schedule to start.</p>
    pub slot_start_time_range: Option<SlotStartTimeRangeRequest>,
}

/// Serialize `DescribeScheduledInstancesRequest` contents to a `SignedRequest`.
struct DescribeScheduledInstancesRequestSerializer;
impl DescribeScheduledInstancesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeScheduledInstancesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.scheduled_instance_ids {
            ScheduledInstanceIdRequestSetSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ScheduledInstanceId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.slot_start_time_range {
            SlotStartTimeRangeRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SlotStartTimeRange"),
                field_value,
            );
        }
    }
}

/// <p>Contains the output of DescribeScheduledInstances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeScheduledInstancesResult {
    /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about the Scheduled Instances.</p>
    pub scheduled_instance_set: Option<Vec<ScheduledInstance>>,
}

struct DescribeScheduledInstancesResultDeserializer;
impl DescribeScheduledInstancesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeScheduledInstancesResult, XmlParseError> {
        deserialize_elements::<_, DescribeScheduledInstancesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "scheduledInstanceSet" => {
                        obj.scheduled_instance_set.get_or_insert(vec![]).extend(
                            ScheduledInstanceSetDeserializer::deserialize(
                                "scheduledInstanceSet",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeSecurityGroupReferencesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The IDs of the security groups in your account.</p>
    pub group_id: Vec<String>,
}

/// Serialize `DescribeSecurityGroupReferencesRequest` contents to a `SignedRequest`.
struct DescribeSecurityGroupReferencesRequestSerializer;
impl DescribeSecurityGroupReferencesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeSecurityGroupReferencesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        GroupIdsSerializer::serialize(params, &format!("{}{}", prefix, "GroupId"), &obj.group_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeSecurityGroupReferencesResult {
    /// <p>Information about the VPCs with the referencing security groups.</p>
    pub security_group_reference_set: Option<Vec<SecurityGroupReference>>,
}

struct DescribeSecurityGroupReferencesResultDeserializer;
impl DescribeSecurityGroupReferencesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeSecurityGroupReferencesResult, XmlParseError> {
        deserialize_elements::<_, DescribeSecurityGroupReferencesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "securityGroupReferenceSet" => {
                        obj.security_group_reference_set
                            .get_or_insert(vec![])
                            .extend(SecurityGroupReferencesDeserializer::deserialize(
                                "securityGroupReferenceSet",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeSecurityGroupsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>The filters. If using multiple filters for rules, the results include security groups for which any combination of rules - not necessarily a single rule - match all filters.</p> <ul> <li> <p> <code>description</code> - The description of the security group.</p> </li> <li> <p> <code>egress.ip-permission.cidr</code> - An IPv4 CIDR block for an outbound security group rule.</p> </li> <li> <p> <code>egress.ip-permission.from-port</code> - For an outbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.</p> </li> <li> <p> <code>egress.ip-permission.group-id</code> - The ID of a security group that has been referenced in an outbound security group rule.</p> </li> <li> <p> <code>egress.ip-permission.group-name</code> - The name of a security group that has been referenced in an outbound security group rule.</p> </li> <li> <p> <code>egress.ip-permission.ipv6-cidr</code> - An IPv6 CIDR block for an outbound security group rule.</p> </li> <li> <p> <code>egress.ip-permission.prefix-list-id</code> - The ID (prefix) of the AWS service to which a security group rule allows outbound access.</p> </li> <li> <p> <code>egress.ip-permission.protocol</code> - The IP protocol for an outbound security group rule (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p> </li> <li> <p> <code>egress.ip-permission.to-port</code> - For an outbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.</p> </li> <li> <p> <code>egress.ip-permission.user-id</code> - The ID of an AWS account that has been referenced in an outbound security group rule.</p> </li> <li> <p> <code>group-id</code> - The ID of the security group. </p> </li> <li> <p> <code>group-name</code> - The name of the security group.</p> </li> <li> <p> <code>ip-permission.cidr</code> - An IPv4 CIDR block for an inbound security group rule.</p> </li> <li> <p> <code>ip-permission.from-port</code> - For an inbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.</p> </li> <li> <p> <code>ip-permission.group-id</code> - The ID of a security group that has been referenced in an inbound security group rule.</p> </li> <li> <p> <code>ip-permission.group-name</code> - The name of a security group that has been referenced in an inbound security group rule.</p> </li> <li> <p> <code>ip-permission.ipv6-cidr</code> - An IPv6 CIDR block for an inbound security group rule.</p> </li> <li> <p> <code>ip-permission.prefix-list-id</code> - The ID (prefix) of the AWS service from which a security group rule allows inbound access.</p> </li> <li> <p> <code>ip-permission.protocol</code> - The IP protocol for an inbound security group rule (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p> </li> <li> <p> <code>ip-permission.to-port</code> - For an inbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.</p> </li> <li> <p> <code>ip-permission.user-id</code> - The ID of an AWS account that has been referenced in an inbound security group rule.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the owner of the security group.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC specified when the security group was created.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The IDs of the security groups. Required for security groups in a nondefault VPC.</p> <p>Default: Describes all your security groups.</p>
    pub group_ids: Option<Vec<String>>,
    /// <p>[EC2-Classic and default VPC only] The names of the security groups. You can specify either the security group name or the security group ID. For security groups in a nondefault VPC, use the <code>group-name</code> filter to describe security groups by name.</p> <p>Default: Describes all your security groups.</p>
    pub group_names: Option<Vec<String>>,
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000. If this parameter is not specified, then all results are returned.</p>
    pub max_results: Option<i64>,
    /// <p>The token to request the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeSecurityGroupsRequest` contents to a `SignedRequest`.
struct DescribeSecurityGroupsRequestSerializer;
impl DescribeSecurityGroupsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeSecurityGroupsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.group_ids {
            GroupIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "GroupId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.group_names {
            GroupNameStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "GroupName"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeSecurityGroupsResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about the security groups.</p>
    pub security_groups: Option<Vec<SecurityGroup>>,
}

struct DescribeSecurityGroupsResultDeserializer;
impl DescribeSecurityGroupsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeSecurityGroupsResult, XmlParseError> {
        deserialize_elements::<_, DescribeSecurityGroupsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "securityGroupInfo" => {
                        obj.security_groups.get_or_insert(vec![]).extend(
                            SecurityGroupListDeserializer::deserialize("securityGroupInfo", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeSnapshotAttribute.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeSnapshotAttributeRequest {
    /// <p>The snapshot attribute you would like to view.</p>
    pub attribute: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the EBS snapshot.</p>
    pub snapshot_id: String,
}

/// Serialize `DescribeSnapshotAttributeRequest` contents to a `SignedRequest`.
struct DescribeSnapshotAttributeRequestSerializer;
impl DescribeSnapshotAttributeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeSnapshotAttributeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Attribute"), &obj.attribute);
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "SnapshotId"), &obj.snapshot_id);
    }
}

/// <p>Contains the output of DescribeSnapshotAttribute.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeSnapshotAttributeResult {
    /// <p>The users and groups that have the permissions for creating volumes from the snapshot.</p>
    pub create_volume_permissions: Option<Vec<CreateVolumePermission>>,
    /// <p>The product codes.</p>
    pub product_codes: Option<Vec<ProductCode>>,
    /// <p>The ID of the EBS snapshot.</p>
    pub snapshot_id: Option<String>,
}

struct DescribeSnapshotAttributeResultDeserializer;
impl DescribeSnapshotAttributeResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeSnapshotAttributeResult, XmlParseError> {
        deserialize_elements::<_, DescribeSnapshotAttributeResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "createVolumePermission" => {
                        obj.create_volume_permissions.get_or_insert(vec![]).extend(
                            CreateVolumePermissionListDeserializer::deserialize(
                                "createVolumePermission",
                                stack,
                            )?,
                        );
                    }
                    "productCodes" => {
                        obj.product_codes.get_or_insert(vec![]).extend(
                            ProductCodeListDeserializer::deserialize("productCodes", stack)?,
                        );
                    }
                    "snapshotId" => {
                        obj.snapshot_id =
                            Some(StringDeserializer::deserialize("snapshotId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeSnapshotsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>The filters.</p> <ul> <li> <p> <code>description</code> - A description of the snapshot.</p> </li> <li> <p> <code>encrypted</code> - Indicates whether the snapshot is encrypted (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>owner-alias</code> - Value from an Amazon-maintained list (<code>amazon</code> | <code>self</code> | <code>all</code> | <code>aws-marketplace</code> | <code>microsoft</code>) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the snapshot.</p> </li> <li> <p> <code>progress</code> - The progress of the snapshot, as a percentage (for example, 80%).</p> </li> <li> <p> <code>snapshot-id</code> - The snapshot ID.</p> </li> <li> <p> <code>start-time</code> - The time stamp when the snapshot was initiated.</p> </li> <li> <p> <code>status</code> - The status of the snapshot (<code>pending</code> | <code>completed</code> | <code>error</code>).</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>volume-id</code> - The ID of the volume the snapshot is for.</p> </li> <li> <p> <code>volume-size</code> - The size of the volume, in GiB.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of snapshot results returned by <code>DescribeSnapshots</code> in paginated output. When this parameter is used, <code>DescribeSnapshots</code> only returns <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeSnapshots</code> request with the returned <code>NextToken</code> value. This value can be between 5 and 1000; if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned. If this parameter is not used, then <code>DescribeSnapshots</code> returns all results. You cannot specify this parameter and the snapshot IDs parameter in the same request.</p>
    pub max_results: Option<i64>,
    /// <p>The <code>NextToken</code> value returned from a previous paginated <code>DescribeSnapshots</code> request where <code>MaxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>NextToken</code> value. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Describes the snapshots owned by these owners.</p>
    pub owner_ids: Option<Vec<String>>,
    /// <p>The IDs of the AWS accounts that can create volumes from the snapshot.</p>
    pub restorable_by_user_ids: Option<Vec<String>>,
    /// <p>The snapshot IDs.</p> <p>Default: Describes the snapshots for which you have create volume permissions.</p>
    pub snapshot_ids: Option<Vec<String>>,
}

/// Serialize `DescribeSnapshotsRequest` contents to a `SignedRequest`.
struct DescribeSnapshotsRequestSerializer;
impl DescribeSnapshotsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeSnapshotsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.owner_ids {
            OwnerStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Owner"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.restorable_by_user_ids {
            RestorableByStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "RestorableBy"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.snapshot_ids {
            SnapshotIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SnapshotId"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeSnapshotsResult {
    /// <p>The <code>NextToken</code> value to include in a future <code>DescribeSnapshots</code> request. When the results of a <code>DescribeSnapshots</code> request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about the snapshots.</p>
    pub snapshots: Option<Vec<Snapshot>>,
}

struct DescribeSnapshotsResultDeserializer;
impl DescribeSnapshotsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeSnapshotsResult, XmlParseError> {
        deserialize_elements::<_, DescribeSnapshotsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "snapshotSet" => {
                        obj.snapshots
                            .get_or_insert(vec![])
                            .extend(SnapshotListDeserializer::deserialize("snapshotSet", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeSpotDatafeedSubscription.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeSpotDatafeedSubscriptionRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `DescribeSpotDatafeedSubscriptionRequest` contents to a `SignedRequest`.
struct DescribeSpotDatafeedSubscriptionRequestSerializer;
impl DescribeSpotDatafeedSubscriptionRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeSpotDatafeedSubscriptionRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

/// <p>Contains the output of DescribeSpotDatafeedSubscription.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeSpotDatafeedSubscriptionResult {
    /// <p>The Spot Instance data feed subscription.</p>
    pub spot_datafeed_subscription: Option<SpotDatafeedSubscription>,
}

struct DescribeSpotDatafeedSubscriptionResultDeserializer;
impl DescribeSpotDatafeedSubscriptionResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeSpotDatafeedSubscriptionResult, XmlParseError> {
        deserialize_elements::<_, DescribeSpotDatafeedSubscriptionResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "spotDatafeedSubscription" => {
                        obj.spot_datafeed_subscription =
                            Some(SpotDatafeedSubscriptionDeserializer::deserialize(
                                "spotDatafeedSubscription",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeSpotFleetInstances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeSpotFleetInstancesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next set of results.</p>
    pub next_token: Option<String>,
    /// <p>The ID of the Spot Fleet request.</p>
    pub spot_fleet_request_id: String,
}

/// Serialize `DescribeSpotFleetInstancesRequest` contents to a `SignedRequest`.
struct DescribeSpotFleetInstancesRequestSerializer;
impl DescribeSpotFleetInstancesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeSpotFleetInstancesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "SpotFleetRequestId"),
            &obj.spot_fleet_request_id,
        );
    }
}

/// <p>Contains the output of DescribeSpotFleetInstances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeSpotFleetInstancesResponse {
    /// <p>The running instances. This list is refreshed periodically and might be out of date.</p>
    pub active_instances: Option<Vec<ActiveInstance>>,
    /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>The ID of the Spot Fleet request.</p>
    pub spot_fleet_request_id: Option<String>,
}

struct DescribeSpotFleetInstancesResponseDeserializer;
impl DescribeSpotFleetInstancesResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeSpotFleetInstancesResponse, XmlParseError> {
        deserialize_elements::<_, DescribeSpotFleetInstancesResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "activeInstanceSet" => {
                        obj.active_instances.get_or_insert(vec![]).extend(
                            ActiveInstanceSetDeserializer::deserialize("activeInstanceSet", stack)?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "spotFleetRequestId" => {
                        obj.spot_fleet_request_id = Some(StringDeserializer::deserialize(
                            "spotFleetRequestId",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeSpotFleetRequestHistory.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeSpotFleetRequestHistoryRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The type of events to describe. By default, all events are described.</p>
    pub event_type: Option<String>,
    /// <p>The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next set of results.</p>
    pub next_token: Option<String>,
    /// <p>The ID of the Spot Fleet request.</p>
    pub spot_fleet_request_id: String,
    /// <p>The starting date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub start_time: String,
}

/// Serialize `DescribeSpotFleetRequestHistoryRequest` contents to a `SignedRequest`.
struct DescribeSpotFleetRequestHistoryRequestSerializer;
impl DescribeSpotFleetRequestHistoryRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeSpotFleetRequestHistoryRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.event_type {
            params.put(&format!("{}{}", prefix, "EventType"), &field_value);
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "SpotFleetRequestId"),
            &obj.spot_fleet_request_id,
        );
        params.put(&format!("{}{}", prefix, "StartTime"), &obj.start_time);
    }
}

/// <p>Contains the output of DescribeSpotFleetRequestHistory.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeSpotFleetRequestHistoryResponse {
    /// <p>Information about the events in the history of the Spot Fleet request.</p>
    pub history_records: Option<Vec<HistoryRecord>>,
    /// <p>The last date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). All records up to this time were retrieved.</p> <p>If <code>nextToken</code> indicates that there are more results, this value is not present.</p>
    pub last_evaluated_time: Option<String>,
    /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>The ID of the Spot Fleet request.</p>
    pub spot_fleet_request_id: Option<String>,
    /// <p>The starting date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub start_time: Option<String>,
}

struct DescribeSpotFleetRequestHistoryResponseDeserializer;
impl DescribeSpotFleetRequestHistoryResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeSpotFleetRequestHistoryResponse, XmlParseError> {
        deserialize_elements::<_, DescribeSpotFleetRequestHistoryResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "historyRecordSet" => {
                        obj.history_records.get_or_insert(vec![]).extend(
                            HistoryRecordsDeserializer::deserialize("historyRecordSet", stack)?,
                        );
                    }
                    "lastEvaluatedTime" => {
                        obj.last_evaluated_time = Some(DateTimeDeserializer::deserialize(
                            "lastEvaluatedTime",
                            stack,
                        )?);
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "spotFleetRequestId" => {
                        obj.spot_fleet_request_id = Some(StringDeserializer::deserialize(
                            "spotFleetRequestId",
                            stack,
                        )?);
                    }
                    "startTime" => {
                        obj.start_time =
                            Some(DateTimeDeserializer::deserialize("startTime", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeSpotFleetRequests.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeSpotFleetRequestsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next set of results.</p>
    pub next_token: Option<String>,
    /// <p>The IDs of the Spot Fleet requests.</p>
    pub spot_fleet_request_ids: Option<Vec<String>>,
}

/// Serialize `DescribeSpotFleetRequestsRequest` contents to a `SignedRequest`.
struct DescribeSpotFleetRequestsRequestSerializer;
impl DescribeSpotFleetRequestsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeSpotFleetRequestsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.spot_fleet_request_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SpotFleetRequestId"),
                field_value,
            );
        }
    }
}

/// <p>Contains the output of DescribeSpotFleetRequests.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeSpotFleetRequestsResponse {
    /// <p>The token required to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about the configuration of your Spot Fleet.</p>
    pub spot_fleet_request_configs: Option<Vec<SpotFleetRequestConfig>>,
}

struct DescribeSpotFleetRequestsResponseDeserializer;
impl DescribeSpotFleetRequestsResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeSpotFleetRequestsResponse, XmlParseError> {
        deserialize_elements::<_, DescribeSpotFleetRequestsResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "spotFleetRequestConfigSet" => {
                        obj.spot_fleet_request_configs.get_or_insert(vec![]).extend(
                            SpotFleetRequestConfigSetDeserializer::deserialize(
                                "spotFleetRequestConfigSet",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeSpotInstanceRequests.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeSpotInstanceRequestsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>availability-zone-group</code> - The Availability Zone group.</p> </li> <li> <p> <code>create-time</code> - The time stamp when the Spot Instance request was created.</p> </li> <li> <p> <code>fault-code</code> - The fault code related to the request.</p> </li> <li> <p> <code>fault-message</code> - The fault message related to the request.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance that fulfilled the request.</p> </li> <li> <p> <code>launch-group</code> - The Spot Instance launch group.</p> </li> <li> <p> <code>launch.block-device-mapping.delete-on-termination</code> - Indicates whether the EBS volume is deleted on instance termination.</p> </li> <li> <p> <code>launch.block-device-mapping.device-name</code> - The device name for the volume in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li> <li> <p> <code>launch.block-device-mapping.snapshot-id</code> - The ID of the snapshot for the EBS volume.</p> </li> <li> <p> <code>launch.block-device-mapping.volume-size</code> - The size of the EBS volume, in GiB.</p> </li> <li> <p> <code>launch.block-device-mapping.volume-type</code> - The type of EBS volume: <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code>for Cold HDD, or <code>standard</code> for Magnetic.</p> </li> <li> <p> <code>launch.group-id</code> - The ID of the security group for the instance.</p> </li> <li> <p> <code>launch.group-name</code> - The name of the security group for the instance.</p> </li> <li> <p> <code>launch.image-id</code> - The ID of the AMI.</p> </li> <li> <p> <code>launch.instance-type</code> - The type of instance (for example, <code>m3.medium</code>).</p> </li> <li> <p> <code>launch.kernel-id</code> - The kernel ID.</p> </li> <li> <p> <code>launch.key-name</code> - The name of the key pair the instance launched with.</p> </li> <li> <p> <code>launch.monitoring-enabled</code> - Whether detailed monitoring is enabled for the Spot Instance.</p> </li> <li> <p> <code>launch.ramdisk-id</code> - The RAM disk ID.</p> </li> <li> <p> <code>launched-availability-zone</code> - The Availability Zone in which the request is launched.</p> </li> <li> <p> <code>network-interface.addresses.primary</code> - Indicates whether the IP address is the primary private IP address.</p> </li> <li> <p> <code>network-interface.delete-on-termination</code> - Indicates whether the network interface is deleted when the instance is terminated.</p> </li> <li> <p> <code>network-interface.description</code> - A description of the network interface.</p> </li> <li> <p> <code>network-interface.device-index</code> - The index of the device for the network interface attachment on the instance.</p> </li> <li> <p> <code>network-interface.group-id</code> - The ID of the security group associated with the network interface.</p> </li> <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li> <li> <p> <code>network-interface.private-ip-address</code> - The primary private IP address of the network interface.</p> </li> <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the instance.</p> </li> <li> <p> <code>product-description</code> - The product description associated with the instance (<code>Linux/UNIX</code> | <code>Windows</code>).</p> </li> <li> <p> <code>spot-instance-request-id</code> - The Spot Instance request ID.</p> </li> <li> <p> <code>spot-price</code> - The maximum hourly price for any Spot Instance launched to fulfill the request.</p> </li> <li> <p> <code>state</code> - The state of the Spot Instance request (<code>open</code> | <code>active</code> | <code>closed</code> | <code>cancelled</code> | <code>failed</code>). Spot request status information can help you track your Amazon EC2 Spot Instance requests. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html">Spot Request Status</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> </li> <li> <p> <code>status-code</code> - The short code describing the most recent evaluation of your Spot Instance request.</p> </li> <li> <p> <code>status-message</code> - The message explaining the status of the Spot Instance request.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>type</code> - The type of Spot Instance request (<code>one-time</code> | <code>persistent</code>).</p> </li> <li> <p> <code>valid-from</code> - The start date of the request.</p> </li> <li> <p> <code>valid-until</code> - The end date of the request.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return in a single call. Specify a value between 5 and 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token to request the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>One or more Spot Instance request IDs.</p>
    pub spot_instance_request_ids: Option<Vec<String>>,
}

/// Serialize `DescribeSpotInstanceRequestsRequest` contents to a `SignedRequest`.
struct DescribeSpotInstanceRequestsRequestSerializer;
impl DescribeSpotInstanceRequestsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeSpotInstanceRequestsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.spot_instance_request_ids {
            SpotInstanceRequestIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SpotInstanceRequestId"),
                field_value,
            );
        }
    }
}

/// <p>Contains the output of DescribeSpotInstanceRequests.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeSpotInstanceRequestsResult {
    /// <p>The token to use to retrieve the next set of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>One or more Spot Instance requests.</p>
    pub spot_instance_requests: Option<Vec<SpotInstanceRequest>>,
}

struct DescribeSpotInstanceRequestsResultDeserializer;
impl DescribeSpotInstanceRequestsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeSpotInstanceRequestsResult, XmlParseError> {
        deserialize_elements::<_, DescribeSpotInstanceRequestsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "spotInstanceRequestSet" => {
                        obj.spot_instance_requests.get_or_insert(vec![]).extend(
                            SpotInstanceRequestListDeserializer::deserialize(
                                "spotInstanceRequestSet",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeSpotPriceHistory.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeSpotPriceHistoryRequest {
    /// <p>Filters the results by the specified Availability Zone.</p>
    pub availability_zone: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The date and time, up to the current date, from which to stop retrieving the price history data, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub end_time: Option<String>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone for which prices should be returned.</p> </li> <li> <p> <code>instance-type</code> - The type of instance (for example, <code>m3.medium</code>).</p> </li> <li> <p> <code>product-description</code> - The product description for the Spot price (<code>Linux/UNIX</code> | <code>SUSE Linux</code> | <code>Windows</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE Linux (Amazon VPC)</code> | <code>Windows (Amazon VPC)</code>).</p> </li> <li> <p> <code>spot-price</code> - The Spot price. The value must match exactly (or use wildcards; greater than or less than comparison is not supported).</p> </li> <li> <p> <code>timestamp</code> - The time stamp of the Spot price history, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). You can use wildcards (* and ?). Greater than or less than comparison is not supported.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>Filters the results by the specified instance types.</p>
    pub instance_types: Option<Vec<String>>,
    /// <p>The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next set of results.</p>
    pub next_token: Option<String>,
    /// <p>Filters the results by the specified basic product descriptions.</p>
    pub product_descriptions: Option<Vec<String>>,
    /// <p>The date and time, up to the past 90 days, from which to start retrieving the price history data, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub start_time: Option<String>,
}

/// Serialize `DescribeSpotPriceHistoryRequest` contents to a `SignedRequest`.
struct DescribeSpotPriceHistoryRequestSerializer;
impl DescribeSpotPriceHistoryRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeSpotPriceHistoryRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.availability_zone {
            params.put(&format!("{}{}", prefix, "AvailabilityZone"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.end_time {
            params.put(&format!("{}{}", prefix, "EndTime"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.instance_types {
            InstanceTypeListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "InstanceType"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.product_descriptions {
            ProductDescriptionListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ProductDescription"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.start_time {
            params.put(&format!("{}{}", prefix, "StartTime"), &field_value);
        }
    }
}

/// <p>Contains the output of DescribeSpotPriceHistory.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeSpotPriceHistoryResult {
    /// <p>The token required to retrieve the next set of results. This value is null or an empty string when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>The historical Spot prices.</p>
    pub spot_price_history: Option<Vec<SpotPrice>>,
}

struct DescribeSpotPriceHistoryResultDeserializer;
impl DescribeSpotPriceHistoryResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeSpotPriceHistoryResult, XmlParseError> {
        deserialize_elements::<_, DescribeSpotPriceHistoryResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "spotPriceHistorySet" => {
                        obj.spot_price_history.get_or_insert(vec![]).extend(
                            SpotPriceHistoryListDeserializer::deserialize(
                                "spotPriceHistorySet",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeStaleSecurityGroupsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next set of items to return. (You received this token from a prior call.)</p>
    pub next_token: Option<String>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: String,
}

/// Serialize `DescribeStaleSecurityGroupsRequest` contents to a `SignedRequest`.
struct DescribeStaleSecurityGroupsRequestSerializer;
impl DescribeStaleSecurityGroupsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeStaleSecurityGroupsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "VpcId"), &obj.vpc_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeStaleSecurityGroupsResult {
    /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
    pub next_token: Option<String>,
    /// <p>Information about the stale security groups.</p>
    pub stale_security_group_set: Option<Vec<StaleSecurityGroup>>,
}

struct DescribeStaleSecurityGroupsResultDeserializer;
impl DescribeStaleSecurityGroupsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeStaleSecurityGroupsResult, XmlParseError> {
        deserialize_elements::<_, DescribeStaleSecurityGroupsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "staleSecurityGroupSet" => {
                        obj.stale_security_group_set.get_or_insert(vec![]).extend(
                            StaleSecurityGroupSetDeserializer::deserialize(
                                "staleSecurityGroupSet",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeSubnetsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone for the subnet. You can also use <code>availabilityZone</code> as the filter name.</p> </li> <li> <p> <code>availability-zone-id</code> - The ID of the Availability Zone for the subnet. You can also use <code>availabilityZoneId</code> as the filter name.</p> </li> <li> <p> <code>available-ip-address-count</code> - The number of IPv4 addresses in the subnet that are available.</p> </li> <li> <p> <code>cidr-block</code> - The IPv4 CIDR block of the subnet. The CIDR block you specify must exactly match the subnet&#39;s CIDR block for information to be returned for the subnet. You can also use <code>cidr</code> or <code>cidrBlock</code> as the filter names.</p> </li> <li> <p> <code>default-for-az</code> - Indicates whether this is the default subnet for the Availability Zone. You can also use <code>defaultForAz</code> as the filter name.</p> </li> <li> <p> <code>ipv6-cidr-block-association.ipv6-cidr-block</code> - An IPv6 CIDR block associated with the subnet.</p> </li> <li> <p> <code>ipv6-cidr-block-association.association-id</code> - An association ID for an IPv6 CIDR block associated with the subnet.</p> </li> <li> <p> <code>ipv6-cidr-block-association.state</code> - The state of an IPv6 CIDR block associated with the subnet.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the subnet.</p> </li> <li> <p> <code>state</code> - The state of the subnet (<code>pending</code> | <code>available</code>).</p> </li> <li> <p> <code>subnet-arn</code> - The Amazon Resource Name (ARN) of the subnet.</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the subnet.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>One or more subnet IDs.</p> <p>Default: Describes all your subnets.</p>
    pub subnet_ids: Option<Vec<String>>,
}

/// Serialize `DescribeSubnetsRequest` contents to a `SignedRequest`.
struct DescribeSubnetsRequestSerializer;
impl DescribeSubnetsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeSubnetsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.subnet_ids {
            SubnetIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SubnetId"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeSubnetsResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about one or more subnets.</p>
    pub subnets: Option<Vec<Subnet>>,
}

struct DescribeSubnetsResultDeserializer;
impl DescribeSubnetsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeSubnetsResult, XmlParseError> {
        deserialize_elements::<_, DescribeSubnetsResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "nextToken" => {
                    obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                }
                "subnetSet" => {
                    obj.subnets
                        .get_or_insert(vec![])
                        .extend(SubnetListDeserializer::deserialize("subnetSet", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeTagsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>The filters.</p> <ul> <li> <p> <code>key</code> - The tag key.</p> </li> <li> <p> <code>resource-id</code> - The ID of the resource.</p> </li> <li> <p> <code>resource-type</code> - The resource type (<code>customer-gateway</code> | <code>dedicated-host</code> | <code>dhcp-options</code> | <code>elastic-ip</code> | <code>fleet</code> | <code>fpga-image</code> | <code>image</code> | <code>instance</code> | <code>host-reservation</code> | <code>internet-gateway</code> | <code>launch-template</code> | <code>natgateway</code> | <code>network-acl</code> | <code>network-interface</code> | <code>reserved-instances</code> | <code>route-table</code> | <code>security-group</code> | <code>snapshot</code> | <code>spot-instances-request</code> | <code>subnet</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>).</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of the tag. For example, specify &quot;tag:Owner&quot; for the filter name and &quot;TeamA&quot; for the filter value to find resources with the tag &quot;Owner=TeamA&quot;.</p> </li> <li> <p> <code>value</code> - The tag value.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return in a single call. This value can be between 5 and 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token to retrieve the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeTagsRequest` contents to a `SignedRequest`.
struct DescribeTagsRequestSerializer;
impl DescribeTagsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeTagsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeTagsResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>The tags.</p>
    pub tags: Option<Vec<TagDescription>>,
}

struct DescribeTagsResultDeserializer;
impl DescribeTagsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeTagsResult, XmlParseError> {
        deserialize_elements::<_, DescribeTagsResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "nextToken" => {
                    obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                }
                "tagSet" => {
                    obj.tags.get_or_insert(vec![]).extend(
                        TagDescriptionListDeserializer::deserialize("tagSet", stack)?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeTransitGatewayAttachmentsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>association.state</code> - The state of the association (<code>associating</code> | <code>associated</code> | <code>disassociating</code>).</p> </li> <li> <p> <code>association.transit-gateway-route-table-id</code> - The ID of the route table for the transit gateway.</p> </li> <li> <p> <code>resource-id</code> - The ID of the resource.</p> </li> <li> <p> <code>resource-owner-id</code> - The ID of the AWS account that owns the resource.</p> </li> <li> <p> <code>resource-type</code> - The resource type (<code>vpc</code> | <code>vpn</code>).</p> </li> <li> <p> <code>state</code> - The state of the attachment (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p> </li> <li> <p> <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of the transit gateway.</p> </li> <li> <p> <code>transit-gateway-owner-id</code> - The ID of the AWS account that owns the transit gateway.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>The IDs of the attachments.</p>
    pub transit_gateway_attachment_ids: Option<Vec<String>>,
}

/// Serialize `DescribeTransitGatewayAttachmentsRequest` contents to a `SignedRequest`.
struct DescribeTransitGatewayAttachmentsRequestSerializer;
impl DescribeTransitGatewayAttachmentsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeTransitGatewayAttachmentsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.transit_gateway_attachment_ids {
            TransitGatewayAttachmentIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "TransitGatewayAttachmentIds"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeTransitGatewayAttachmentsResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about the attachments.</p>
    pub transit_gateway_attachments: Option<Vec<TransitGatewayAttachment>>,
}

struct DescribeTransitGatewayAttachmentsResultDeserializer;
impl DescribeTransitGatewayAttachmentsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeTransitGatewayAttachmentsResult, XmlParseError> {
        deserialize_elements::<_, DescribeTransitGatewayAttachmentsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "transitGatewayAttachments" => {
                        obj.transit_gateway_attachments
                            .get_or_insert(vec![])
                            .extend(TransitGatewayAttachmentListDeserializer::deserialize(
                                "transitGatewayAttachments",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeTransitGatewayRouteTablesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>default-association-route-table</code> - Indicates whether this is the default association route table for the transit gateway (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>default-propagation-route-table</code> - Indicates whether this is the default propagation route table for the transit gateway (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>state</code> - The state of the attachment (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of the transit gateway.</p> </li> <li> <p> <code>transit-gateway-route-table-id</code> - The ID of the transit gateway route table.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>The IDs of the transit gateway route tables.</p>
    pub transit_gateway_route_table_ids: Option<Vec<String>>,
}

/// Serialize `DescribeTransitGatewayRouteTablesRequest` contents to a `SignedRequest`.
struct DescribeTransitGatewayRouteTablesRequestSerializer;
impl DescribeTransitGatewayRouteTablesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeTransitGatewayRouteTablesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.transit_gateway_route_table_ids {
            TransitGatewayRouteTableIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "TransitGatewayRouteTableIds"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeTransitGatewayRouteTablesResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about the transit gateway route tables.</p>
    pub transit_gateway_route_tables: Option<Vec<TransitGatewayRouteTable>>,
}

struct DescribeTransitGatewayRouteTablesResultDeserializer;
impl DescribeTransitGatewayRouteTablesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeTransitGatewayRouteTablesResult, XmlParseError> {
        deserialize_elements::<_, DescribeTransitGatewayRouteTablesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "transitGatewayRouteTables" => {
                        obj.transit_gateway_route_tables
                            .get_or_insert(vec![])
                            .extend(TransitGatewayRouteTableListDeserializer::deserialize(
                                "transitGatewayRouteTables",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeTransitGatewayVpcAttachmentsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>state</code> - The state of the attachment (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p> </li> <li> <p> <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of the transit gateway.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>The IDs of the attachments.</p>
    pub transit_gateway_attachment_ids: Option<Vec<String>>,
}

/// Serialize `DescribeTransitGatewayVpcAttachmentsRequest` contents to a `SignedRequest`.
struct DescribeTransitGatewayVpcAttachmentsRequestSerializer;
impl DescribeTransitGatewayVpcAttachmentsRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &DescribeTransitGatewayVpcAttachmentsRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.transit_gateway_attachment_ids {
            TransitGatewayAttachmentIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "TransitGatewayAttachmentIds"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeTransitGatewayVpcAttachmentsResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about the VPC attachments.</p>
    pub transit_gateway_vpc_attachments: Option<Vec<TransitGatewayVpcAttachment>>,
}

struct DescribeTransitGatewayVpcAttachmentsResultDeserializer;
impl DescribeTransitGatewayVpcAttachmentsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeTransitGatewayVpcAttachmentsResult, XmlParseError> {
        deserialize_elements::<_, DescribeTransitGatewayVpcAttachmentsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "transitGatewayVpcAttachments" => {
                        obj.transit_gateway_vpc_attachments
                            .get_or_insert(vec![])
                            .extend(TransitGatewayVpcAttachmentListDeserializer::deserialize(
                                "transitGatewayVpcAttachments",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeTransitGatewaysRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>options.propagation-default-route-table-id</code> - The ID of the default propagation route table.</p> </li> <li> <p> <code>options.amazon-side-asn</code> - The private ASN for the Amazon side of a BGP session.</p> </li> <li> <p> <code>options.association-default-route-table-id</code> - The ID of the default association route table.</p> </li> <li> <p> <code>options.auto-accept-shared-attachments</code> - Indicates whether there is automatic acceptance of attachment requests (<code>enable</code> | <code>disable</code>).</p> </li> <li> <p> <code>options.default-route-table-association</code> - Indicates whether resource attachments are automatically associated with the default association route table (<code>enable</code> | <code>disable</code>).</p> </li> <li> <p> <code>options.default-route-table-propagation</code> - Indicates whether resource attachments automatically propagate routes to the default propagation route table (<code>enable</code> | <code>disable</code>).</p> </li> <li> <p> <code>options.dns-support</code> - Indicates whether DNS support is enabled (<code>enable</code> | <code>disable</code>).</p> </li> <li> <p> <code>options.vpn-ecmp-support</code> - Indicates whether Equal Cost Multipath Protocol support is enabled (<code>enable</code> | <code>disable</code>).</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the transit gateway.</p> </li> <li> <p> <code>state</code> - The state of the attachment (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of the transit gateway.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>The IDs of the transit gateways.</p>
    pub transit_gateway_ids: Option<Vec<String>>,
}

/// Serialize `DescribeTransitGatewaysRequest` contents to a `SignedRequest`.
struct DescribeTransitGatewaysRequestSerializer;
impl DescribeTransitGatewaysRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeTransitGatewaysRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.transit_gateway_ids {
            TransitGatewayIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "TransitGatewayIds"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeTransitGatewaysResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about the transit gateways.</p>
    pub transit_gateways: Option<Vec<TransitGateway>>,
}

struct DescribeTransitGatewaysResultDeserializer;
impl DescribeTransitGatewaysResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeTransitGatewaysResult, XmlParseError> {
        deserialize_elements::<_, DescribeTransitGatewaysResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "transitGatewaySet" => {
                        obj.transit_gateways.get_or_insert(vec![]).extend(
                            TransitGatewayListDeserializer::deserialize(
                                "transitGatewaySet",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeVolumeAttribute.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVolumeAttributeRequest {
    /// <p>The attribute of the volume. This parameter is required.</p>
    pub attribute: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the volume.</p>
    pub volume_id: String,
}

/// Serialize `DescribeVolumeAttributeRequest` contents to a `SignedRequest`.
struct DescribeVolumeAttributeRequestSerializer;
impl DescribeVolumeAttributeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeVolumeAttributeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Attribute"), &obj.attribute);
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "VolumeId"), &obj.volume_id);
    }
}

/// <p>Contains the output of DescribeVolumeAttribute.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVolumeAttributeResult {
    /// <p>The state of <code>autoEnableIO</code> attribute.</p>
    pub auto_enable_io: Option<AttributeBooleanValue>,
    /// <p>A list of product codes.</p>
    pub product_codes: Option<Vec<ProductCode>>,
    /// <p>The ID of the volume.</p>
    pub volume_id: Option<String>,
}

struct DescribeVolumeAttributeResultDeserializer;
impl DescribeVolumeAttributeResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeVolumeAttributeResult, XmlParseError> {
        deserialize_elements::<_, DescribeVolumeAttributeResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "autoEnableIO" => {
                        obj.auto_enable_io = Some(AttributeBooleanValueDeserializer::deserialize(
                            "autoEnableIO",
                            stack,
                        )?);
                    }
                    "productCodes" => {
                        obj.product_codes.get_or_insert(vec![]).extend(
                            ProductCodeListDeserializer::deserialize("productCodes", stack)?,
                        );
                    }
                    "volumeId" => {
                        obj.volume_id = Some(StringDeserializer::deserialize("volumeId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVolumeStatusRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>The filters.</p> <ul> <li> <p> <code>action.code</code> - The action code for the event (for example, <code>enable-volume-io</code>).</p> </li> <li> <p> <code>action.description</code> - A description of the action.</p> </li> <li> <p> <code>action.event-id</code> - The event ID associated with the action.</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> <li> <p> <code>event.description</code> - A description of the event.</p> </li> <li> <p> <code>event.event-id</code> - The event ID.</p> </li> <li> <p> <code>event.event-type</code> - The event type (for <code>io-enabled</code>: <code>passed</code> | <code>failed</code>; for <code>io-performance</code>: <code>io-performance:degraded</code> | <code>io-performance:severely-degraded</code> | <code>io-performance:stalled</code>).</p> </li> <li> <p> <code>event.not-after</code> - The latest end time for the event.</p> </li> <li> <p> <code>event.not-before</code> - The earliest start time for the event.</p> </li> <li> <p> <code>volume-status.details-name</code> - The cause for <code>volume-status.status</code> (<code>io-enabled</code> | <code>io-performance</code>).</p> </li> <li> <p> <code>volume-status.details-status</code> - The status of <code>volume-status.details-name</code> (for <code>io-enabled</code>: <code>passed</code> | <code>failed</code>; for <code>io-performance</code>: <code>normal</code> | <code>degraded</code> | <code>severely-degraded</code> | <code>stalled</code>).</p> </li> <li> <p> <code>volume-status.status</code> - The status of the volume (<code>ok</code> | <code>impaired</code> | <code>warning</code> | <code>insufficient-data</code>).</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of volume results returned by <code>DescribeVolumeStatus</code> in paginated output. When this parameter is used, the request only returns <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000; if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned. If this parameter is not used, then <code>DescribeVolumeStatus</code> returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.</p>
    pub max_results: Option<i64>,
    /// <p>The <code>NextToken</code> value to include in a future <code>DescribeVolumeStatus</code> request. When the results of the request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>The IDs of the volumes.</p> <p>Default: Describes all your volumes.</p>
    pub volume_ids: Option<Vec<String>>,
}

/// Serialize `DescribeVolumeStatusRequest` contents to a `SignedRequest`.
struct DescribeVolumeStatusRequestSerializer;
impl DescribeVolumeStatusRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeVolumeStatusRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.volume_ids {
            VolumeIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VolumeId"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVolumeStatusResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about the status of the volumes.</p>
    pub volume_statuses: Option<Vec<VolumeStatusItem>>,
}

struct DescribeVolumeStatusResultDeserializer;
impl DescribeVolumeStatusResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeVolumeStatusResult, XmlParseError> {
        deserialize_elements::<_, DescribeVolumeStatusResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "volumeStatusSet" => {
                        obj.volume_statuses.get_or_insert(vec![]).extend(
                            VolumeStatusListDeserializer::deserialize("volumeStatusSet", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVolumesModificationsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The filters. Supported filters: <code>volume-id</code>, <code>modification-state</code>, <code>target-size</code>, <code>target-iops</code>, <code>target-volume-type</code>, <code>original-size</code>, <code>original-iops</code>, <code>original-volume-type</code>, <code>start-time</code>. </p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results (up to a limit of 500) to be returned in a paginated request.</p>
    pub max_results: Option<i64>,
    /// <p>The <code>nextToken</code> value returned by a previous paginated request.</p>
    pub next_token: Option<String>,
    /// <p>The IDs of the volumes for which in-progress modifications will be described.</p>
    pub volume_ids: Option<Vec<String>>,
}

/// Serialize `DescribeVolumesModificationsRequest` contents to a `SignedRequest`.
struct DescribeVolumesModificationsRequestSerializer;
impl DescribeVolumesModificationsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeVolumesModificationsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.volume_ids {
            VolumeIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VolumeId"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVolumesModificationsResult {
    /// <p>Token for pagination, null if there are no more results </p>
    pub next_token: Option<String>,
    /// <p>Information about the volume modifications.</p>
    pub volumes_modifications: Option<Vec<VolumeModification>>,
}

struct DescribeVolumesModificationsResultDeserializer;
impl DescribeVolumesModificationsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeVolumesModificationsResult, XmlParseError> {
        deserialize_elements::<_, DescribeVolumesModificationsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "volumeModificationSet" => {
                        obj.volumes_modifications.get_or_insert(vec![]).extend(
                            VolumeModificationListDeserializer::deserialize(
                                "volumeModificationSet",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVolumesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>The filters.</p> <ul> <li> <p> <code>attachment.attach-time</code> - The time stamp when the attachment initiated.</p> </li> <li> <p> <code>attachment.delete-on-termination</code> - Whether the volume is deleted on instance termination.</p> </li> <li> <p> <code>attachment.device</code> - The device name specified in the block device mapping (for example, <code>/dev/sda1</code>).</p> </li> <li> <p> <code>attachment.instance-id</code> - The ID of the instance the volume is attached to.</p> </li> <li> <p> <code>attachment.status</code> - The attachment state (<code>attaching</code> | <code>attached</code> | <code>detaching</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone in which the volume was created.</p> </li> <li> <p> <code>create-time</code> - The time stamp when the volume was created.</p> </li> <li> <p> <code>encrypted</code> - Indicates whether the volume is encrypted (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>size</code> - The size of the volume, in GiB.</p> </li> <li> <p> <code>snapshot-id</code> - The snapshot from which the volume was created.</p> </li> <li> <p> <code>status</code> - The status of the volume (<code>creating</code> | <code>available</code> | <code>in-use</code> | <code>deleting</code> | <code>deleted</code> | <code>error</code>).</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>volume-id</code> - The volume ID.</p> </li> <li> <p> <code>volume-type</code> - The Amazon EBS volume type. This can be <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic volumes.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of volume results returned by <code>DescribeVolumes</code> in paginated output. When this parameter is used, <code>DescribeVolumes</code> only returns <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeVolumes</code> request with the returned <code>NextToken</code> value. This value can be between 5 and 500; if <code>MaxResults</code> is given a value larger than 500, only 500 results are returned. If this parameter is not used, then <code>DescribeVolumes</code> returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.</p>
    pub max_results: Option<i64>,
    /// <p>The <code>NextToken</code> value returned from a previous paginated <code>DescribeVolumes</code> request where <code>MaxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>NextToken</code> value. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>The volume IDs.</p>
    pub volume_ids: Option<Vec<String>>,
}

/// Serialize `DescribeVolumesRequest` contents to a `SignedRequest`.
struct DescribeVolumesRequestSerializer;
impl DescribeVolumesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeVolumesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.volume_ids {
            VolumeIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VolumeId"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVolumesResult {
    /// <p>The <code>NextToken</code> value to include in a future <code>DescribeVolumes</code> request. When the results of a <code>DescribeVolumes</code> request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about the volumes.</p>
    pub volumes: Option<Vec<Volume>>,
}

struct DescribeVolumesResultDeserializer;
impl DescribeVolumesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeVolumesResult, XmlParseError> {
        deserialize_elements::<_, DescribeVolumesResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "nextToken" => {
                    obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                }
                "volumeSet" => {
                    obj.volumes
                        .get_or_insert(vec![])
                        .extend(VolumeListDeserializer::deserialize("volumeSet", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpcAttributeRequest {
    /// <p>The VPC attribute.</p>
    pub attribute: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: String,
}

/// Serialize `DescribeVpcAttributeRequest` contents to a `SignedRequest`.
struct DescribeVpcAttributeRequestSerializer;
impl DescribeVpcAttributeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeVpcAttributeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Attribute"), &obj.attribute);
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "VpcId"), &obj.vpc_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpcAttributeResult {
    /// <p>Indicates whether the instances launched in the VPC get DNS hostnames. If this attribute is <code>true</code>, instances in the VPC get DNS hostnames; otherwise, they do not.</p>
    pub enable_dns_hostnames: Option<AttributeBooleanValue>,
    /// <p>Indicates whether DNS resolution is enabled for the VPC. If this attribute is <code>true</code>, the Amazon DNS server resolves DNS hostnames for your instances to their corresponding IP addresses; otherwise, it does not.</p>
    pub enable_dns_support: Option<AttributeBooleanValue>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: Option<String>,
}

struct DescribeVpcAttributeResultDeserializer;
impl DescribeVpcAttributeResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeVpcAttributeResult, XmlParseError> {
        deserialize_elements::<_, DescribeVpcAttributeResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "enableDnsHostnames" => {
                        obj.enable_dns_hostnames =
                            Some(AttributeBooleanValueDeserializer::deserialize(
                                "enableDnsHostnames",
                                stack,
                            )?);
                    }
                    "enableDnsSupport" => {
                        obj.enable_dns_support =
                            Some(AttributeBooleanValueDeserializer::deserialize(
                                "enableDnsSupport",
                                stack,
                            )?);
                    }
                    "vpcId" => {
                        obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpcClassicLinkDnsSupportRequest {
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>One or more VPC IDs.</p>
    pub vpc_ids: Option<Vec<String>>,
}

/// Serialize `DescribeVpcClassicLinkDnsSupportRequest` contents to a `SignedRequest`.
struct DescribeVpcClassicLinkDnsSupportRequestSerializer;
impl DescribeVpcClassicLinkDnsSupportRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeVpcClassicLinkDnsSupportRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.vpc_ids {
            VpcClassicLinkIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VpcIds"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpcClassicLinkDnsSupportResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about the ClassicLink DNS support status of the VPCs.</p>
    pub vpcs: Option<Vec<ClassicLinkDnsSupport>>,
}

struct DescribeVpcClassicLinkDnsSupportResultDeserializer;
impl DescribeVpcClassicLinkDnsSupportResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeVpcClassicLinkDnsSupportResult, XmlParseError> {
        deserialize_elements::<_, DescribeVpcClassicLinkDnsSupportResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token =
                            Some(NextTokenDeserializer::deserialize("nextToken", stack)?);
                    }
                    "vpcs" => {
                        obj.vpcs.get_or_insert(vec![]).extend(
                            ClassicLinkDnsSupportListDeserializer::deserialize("vpcs", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpcClassicLinkRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>is-classic-link-enabled</code> - Whether the VPC is enabled for ClassicLink (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>One or more VPCs for which you want to describe the ClassicLink status.</p>
    pub vpc_ids: Option<Vec<String>>,
}

/// Serialize `DescribeVpcClassicLinkRequest` contents to a `SignedRequest`.
struct DescribeVpcClassicLinkRequestSerializer;
impl DescribeVpcClassicLinkRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeVpcClassicLinkRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.vpc_ids {
            VpcClassicLinkIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VpcId"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpcClassicLinkResult {
    /// <p>The ClassicLink status of one or more VPCs.</p>
    pub vpcs: Option<Vec<VpcClassicLink>>,
}

struct DescribeVpcClassicLinkResultDeserializer;
impl DescribeVpcClassicLinkResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeVpcClassicLinkResult, XmlParseError> {
        deserialize_elements::<_, DescribeVpcClassicLinkResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "vpcSet" => {
                        obj.vpcs.get_or_insert(vec![]).extend(
                            VpcClassicLinkListDeserializer::deserialize("vpcSet", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpcEndpointConnectionNotificationsRequest {
    /// <p>The ID of the notification.</p>
    pub connection_notification_id: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>connection-notification-arn</code> - The ARN of SNS topic for the notification.</p> </li> <li> <p> <code>connection-notification-id</code> - The ID of the notification.</p> </li> <li> <p> <code>connection-notification-state</code> - The state of the notification (<code>Enabled</code> | <code>Disabled</code>).</p> </li> <li> <p> <code>connection-notification-type</code> - The type of notification (<code>Topic</code>).</p> </li> <li> <p> <code>service-id</code> - The ID of the endpoint service.</p> </li> <li> <p> <code>vpc-endpoint-id</code> - The ID of the VPC endpoint.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned <code>NextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token to request the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeVpcEndpointConnectionNotificationsRequest` contents to a `SignedRequest`.
struct DescribeVpcEndpointConnectionNotificationsRequestSerializer;
impl DescribeVpcEndpointConnectionNotificationsRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &DescribeVpcEndpointConnectionNotificationsRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.connection_notification_id {
            params.put(
                &format!("{}{}", prefix, "ConnectionNotificationId"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpcEndpointConnectionNotificationsResult {
    /// <p>One or more notifications.</p>
    pub connection_notification_set: Option<Vec<ConnectionNotification>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeVpcEndpointConnectionNotificationsResultDeserializer;
impl DescribeVpcEndpointConnectionNotificationsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeVpcEndpointConnectionNotificationsResult, XmlParseError> {
        deserialize_elements::<_, DescribeVpcEndpointConnectionNotificationsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "connectionNotificationSet" => {
                        obj.connection_notification_set
                            .get_or_insert(vec![])
                            .extend(ConnectionNotificationSetDeserializer::deserialize(
                                "connectionNotificationSet",
                                stack,
                            )?);
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpcEndpointConnectionsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>service-id</code> - The ID of the service.</p> </li> <li> <p> <code>vpc-endpoint-owner</code> - The AWS account number of the owner of the endpoint.</p> </li> <li> <p> <code>vpc-endpoint-state</code> - The state of the endpoint (<code>pendingAcceptance</code> | <code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code> | <code>rejected</code> | <code>failed</code>).</p> </li> <li> <p> <code>vpc-endpoint-id</code> - The ID of the endpoint.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000; if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned.</p>
    pub max_results: Option<i64>,
    /// <p>The token to retrieve the next page of results.</p>
    pub next_token: Option<String>,
}

/// Serialize `DescribeVpcEndpointConnectionsRequest` contents to a `SignedRequest`.
struct DescribeVpcEndpointConnectionsRequestSerializer;
impl DescribeVpcEndpointConnectionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeVpcEndpointConnectionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpcEndpointConnectionsResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about one or more VPC endpoint connections.</p>
    pub vpc_endpoint_connections: Option<Vec<VpcEndpointConnection>>,
}

struct DescribeVpcEndpointConnectionsResultDeserializer;
impl DescribeVpcEndpointConnectionsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeVpcEndpointConnectionsResult, XmlParseError> {
        deserialize_elements::<_, DescribeVpcEndpointConnectionsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "vpcEndpointConnectionSet" => {
                        obj.vpc_endpoint_connections.get_or_insert(vec![]).extend(
                            VpcEndpointConnectionSetDeserializer::deserialize(
                                "vpcEndpointConnectionSet",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpcEndpointServiceConfigurationsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>service-name</code> - The name of the service.</p> </li> <li> <p> <code>service-id</code> - The ID of the service.</p> </li> <li> <p> <code>service-state</code> - The state of the service (<code>Pending</code> | <code>Available</code> | <code>Deleting</code> | <code>Deleted</code> | <code>Failed</code>). </p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000; if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned.</p>
    pub max_results: Option<i64>,
    /// <p>The token to retrieve the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>The IDs of one or more services.</p>
    pub service_ids: Option<Vec<String>>,
}

/// Serialize `DescribeVpcEndpointServiceConfigurationsRequest` contents to a `SignedRequest`.
struct DescribeVpcEndpointServiceConfigurationsRequestSerializer;
impl DescribeVpcEndpointServiceConfigurationsRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &DescribeVpcEndpointServiceConfigurationsRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.service_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ServiceId"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpcEndpointServiceConfigurationsResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about one or more services.</p>
    pub service_configurations: Option<Vec<ServiceConfiguration>>,
}

struct DescribeVpcEndpointServiceConfigurationsResultDeserializer;
impl DescribeVpcEndpointServiceConfigurationsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeVpcEndpointServiceConfigurationsResult, XmlParseError> {
        deserialize_elements::<_, DescribeVpcEndpointServiceConfigurationsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "serviceConfigurationSet" => {
                        obj.service_configurations.get_or_insert(vec![]).extend(
                            ServiceConfigurationSetDeserializer::deserialize(
                                "serviceConfigurationSet",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpcEndpointServicePermissionsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>principal</code> - The ARN of the principal.</p> </li> <li> <p> <code>principal-type</code> - The principal type (<code>All</code> | <code>Service</code> | <code>OrganizationUnit</code> | <code>Account</code> | <code>User</code> | <code>Role</code>).</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000; if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned.</p>
    pub max_results: Option<i64>,
    /// <p>The token to retrieve the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>The ID of the service.</p>
    pub service_id: String,
}

/// Serialize `DescribeVpcEndpointServicePermissionsRequest` contents to a `SignedRequest`.
struct DescribeVpcEndpointServicePermissionsRequestSerializer;
impl DescribeVpcEndpointServicePermissionsRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &DescribeVpcEndpointServicePermissionsRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "ServiceId"), &obj.service_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpcEndpointServicePermissionsResult {
    /// <p>Information about one or more allowed principals.</p>
    pub allowed_principals: Option<Vec<AllowedPrincipal>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct DescribeVpcEndpointServicePermissionsResultDeserializer;
impl DescribeVpcEndpointServicePermissionsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeVpcEndpointServicePermissionsResult, XmlParseError> {
        deserialize_elements::<_, DescribeVpcEndpointServicePermissionsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "allowedPrincipals" => {
                        obj.allowed_principals.get_or_insert(vec![]).extend(
                            AllowedPrincipalSetDeserializer::deserialize(
                                "allowedPrincipals",
                                stack,
                            )?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeVpcEndpointServices.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpcEndpointServicesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>service-name</code>: The name of the service.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p> <p>Constraint: If the value is greater than 1000, we return only 1000 items.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next set of items to return. (You received this token from a prior call.)</p>
    pub next_token: Option<String>,
    /// <p>One or more service names.</p>
    pub service_names: Option<Vec<String>>,
}

/// Serialize `DescribeVpcEndpointServicesRequest` contents to a `SignedRequest`.
struct DescribeVpcEndpointServicesRequestSerializer;
impl DescribeVpcEndpointServicesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeVpcEndpointServicesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.service_names {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ServiceName"),
                field_value,
            );
        }
    }
}

/// <p>Contains the output of DescribeVpcEndpointServices.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpcEndpointServicesResult {
    /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
    pub next_token: Option<String>,
    /// <p>Information about the service.</p>
    pub service_details: Option<Vec<ServiceDetail>>,
    /// <p>A list of supported services.</p>
    pub service_names: Option<Vec<String>>,
}

struct DescribeVpcEndpointServicesResultDeserializer;
impl DescribeVpcEndpointServicesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeVpcEndpointServicesResult, XmlParseError> {
        deserialize_elements::<_, DescribeVpcEndpointServicesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "serviceDetailSet" => {
                        obj.service_details.get_or_insert(vec![]).extend(
                            ServiceDetailSetDeserializer::deserialize("serviceDetailSet", stack)?,
                        );
                    }
                    "serviceNameSet" => {
                        obj.service_names.get_or_insert(vec![]).extend(
                            ValueStringListDeserializer::deserialize("serviceNameSet", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeVpcEndpoints.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpcEndpointsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>service-name</code>: The name of the service.</p> </li> <li> <p> <code>vpc-id</code>: The ID of the VPC in which the endpoint resides.</p> </li> <li> <p> <code>vpc-endpoint-id</code>: The ID of the endpoint.</p> </li> <li> <p> <code>vpc-endpoint-state</code>: The state of the endpoint. (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>)</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p> <p>Constraint: If the value is greater than 1000, we return only 1000 items.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next set of items to return. (You received this token from a prior call.)</p>
    pub next_token: Option<String>,
    /// <p>One or more endpoint IDs.</p>
    pub vpc_endpoint_ids: Option<Vec<String>>,
}

/// Serialize `DescribeVpcEndpointsRequest` contents to a `SignedRequest`.
struct DescribeVpcEndpointsRequestSerializer;
impl DescribeVpcEndpointsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeVpcEndpointsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.vpc_endpoint_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VpcEndpointId"),
                field_value,
            );
        }
    }
}

/// <p>Contains the output of DescribeVpcEndpoints.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpcEndpointsResult {
    /// <p>The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.</p>
    pub next_token: Option<String>,
    /// <p>Information about the endpoints.</p>
    pub vpc_endpoints: Option<Vec<VpcEndpoint>>,
}

struct DescribeVpcEndpointsResultDeserializer;
impl DescribeVpcEndpointsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeVpcEndpointsResult, XmlParseError> {
        deserialize_elements::<_, DescribeVpcEndpointsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "vpcEndpointSet" => {
                        obj.vpc_endpoints.get_or_insert(vec![]).extend(
                            VpcEndpointSetDeserializer::deserialize("vpcEndpointSet", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpcPeeringConnectionsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>accepter-vpc-info.cidr-block</code> - The IPv4 CIDR block of the accepter VPC.</p> </li> <li> <p> <code>accepter-vpc-info.owner-id</code> - The AWS account ID of the owner of the accepter VPC.</p> </li> <li> <p> <code>accepter-vpc-info.vpc-id</code> - The ID of the accepter VPC.</p> </li> <li> <p> <code>expiration-time</code> - The expiration date and time for the VPC peering connection.</p> </li> <li> <p> <code>requester-vpc-info.cidr-block</code> - The IPv4 CIDR block of the requester&#39;s VPC.</p> </li> <li> <p> <code>requester-vpc-info.owner-id</code> - The AWS account ID of the owner of the requester VPC.</p> </li> <li> <p> <code>requester-vpc-info.vpc-id</code> - The ID of the requester VPC.</p> </li> <li> <p> <code>status-code</code> - The status of the VPC peering connection (<code>pending-acceptance</code> | <code>failed</code> | <code>expired</code> | <code>provisioning</code> | <code>active</code> | <code>deleting</code> | <code>deleted</code> | <code>rejected</code>).</p> </li> <li> <p> <code>status-message</code> - A message that provides more information about the status of the VPC peering connection, if applicable.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-peering-connection-id</code> - The ID of the VPC peering connection.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>One or more VPC peering connection IDs.</p> <p>Default: Describes all your VPC peering connections.</p>
    pub vpc_peering_connection_ids: Option<Vec<String>>,
}

/// Serialize `DescribeVpcPeeringConnectionsRequest` contents to a `SignedRequest`.
struct DescribeVpcPeeringConnectionsRequestSerializer;
impl DescribeVpcPeeringConnectionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeVpcPeeringConnectionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.vpc_peering_connection_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VpcPeeringConnectionId"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpcPeeringConnectionsResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about the VPC peering connections.</p>
    pub vpc_peering_connections: Option<Vec<VpcPeeringConnection>>,
}

struct DescribeVpcPeeringConnectionsResultDeserializer;
impl DescribeVpcPeeringConnectionsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeVpcPeeringConnectionsResult, XmlParseError> {
        deserialize_elements::<_, DescribeVpcPeeringConnectionsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "vpcPeeringConnectionSet" => {
                        obj.vpc_peering_connections.get_or_insert(vec![]).extend(
                            VpcPeeringConnectionListDeserializer::deserialize(
                                "vpcPeeringConnectionSet",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpcsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>cidr</code> - The primary IPv4 CIDR block of the VPC. The CIDR block you specify must exactly match the VPC&#39;s CIDR block for information to be returned for the VPC. Must contain the slash followed by one or two digits (for example, <code>/28</code>).</p> </li> <li> <p> <code>cidr-block-association.cidr-block</code> - An IPv4 CIDR block associated with the VPC.</p> </li> <li> <p> <code>cidr-block-association.association-id</code> - The association ID for an IPv4 CIDR block associated with the VPC.</p> </li> <li> <p> <code>cidr-block-association.state</code> - The state of an IPv4 CIDR block associated with the VPC.</p> </li> <li> <p> <code>dhcp-options-id</code> - The ID of a set of DHCP options.</p> </li> <li> <p> <code>ipv6-cidr-block-association.ipv6-cidr-block</code> - An IPv6 CIDR block associated with the VPC.</p> </li> <li> <p> <code>ipv6-cidr-block-association.association-id</code> - The association ID for an IPv6 CIDR block associated with the VPC.</p> </li> <li> <p> <code>ipv6-cidr-block-association.state</code> - The state of an IPv6 CIDR block associated with the VPC.</p> </li> <li> <p> <code>isDefault</code> - Indicates whether the VPC is the default VPC.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the VPC.</p> </li> <li> <p> <code>state</code> - The state of the VPC (<code>pending</code> | <code>available</code>).</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>One or more VPC IDs.</p> <p>Default: Describes all your VPCs.</p>
    pub vpc_ids: Option<Vec<String>>,
}

/// Serialize `DescribeVpcsRequest` contents to a `SignedRequest`.
struct DescribeVpcsRequestSerializer;
impl DescribeVpcsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeVpcsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        if let Some(ref field_value) = obj.vpc_ids {
            VpcIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VpcId"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpcsResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about one or more VPCs.</p>
    pub vpcs: Option<Vec<Vpc>>,
}

struct DescribeVpcsResultDeserializer;
impl DescribeVpcsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeVpcsResult, XmlParseError> {
        deserialize_elements::<_, DescribeVpcsResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "nextToken" => {
                    obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                }
                "vpcSet" => {
                    obj.vpcs
                        .get_or_insert(vec![])
                        .extend(VpcListDeserializer::deserialize("vpcSet", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Contains the parameters for DescribeVpnConnections.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpnConnectionsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>customer-gateway-configuration</code> - The configuration information for the customer gateway.</p> </li> <li> <p> <code>customer-gateway-id</code> - The ID of a customer gateway associated with the VPN connection.</p> </li> <li> <p> <code>state</code> - The state of the VPN connection (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>option.static-routes-only</code> - Indicates whether the connection has static routes only. Used for devices that do not support Border Gateway Protocol (BGP).</p> </li> <li> <p> <code>route.destination-cidr-block</code> - The destination CIDR block. This corresponds to the subnet used in a customer data center.</p> </li> <li> <p> <code>bgp-asn</code> - The BGP Autonomous System Number (ASN) associated with a BGP device.</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>type</code> - The type of VPN connection. Currently the only supported type is <code>ipsec.1</code>.</p> </li> <li> <p> <code>vpn-connection-id</code> - The ID of the VPN connection.</p> </li> <li> <p> <code>vpn-gateway-id</code> - The ID of a virtual private gateway associated with the VPN connection.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>One or more VPN connection IDs.</p> <p>Default: Describes your VPN connections.</p>
    pub vpn_connection_ids: Option<Vec<String>>,
}

/// Serialize `DescribeVpnConnectionsRequest` contents to a `SignedRequest`.
struct DescribeVpnConnectionsRequestSerializer;
impl DescribeVpnConnectionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeVpnConnectionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.vpn_connection_ids {
            VpnConnectionIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VpnConnectionId"),
                field_value,
            );
        }
    }
}

/// <p>Contains the output of DescribeVpnConnections.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpnConnectionsResult {
    /// <p>Information about one or more VPN connections.</p>
    pub vpn_connections: Option<Vec<VpnConnection>>,
}

struct DescribeVpnConnectionsResultDeserializer;
impl DescribeVpnConnectionsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeVpnConnectionsResult, XmlParseError> {
        deserialize_elements::<_, DescribeVpnConnectionsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "vpnConnectionSet" => {
                        obj.vpn_connections.get_or_insert(vec![]).extend(
                            VpnConnectionListDeserializer::deserialize("vpnConnectionSet", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DescribeVpnGateways.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpnGatewaysRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters.</p> <ul> <li> <p> <code>amazon-side-asn</code> - The Autonomous System Number (ASN) for the Amazon side of the gateway.</p> </li> <li> <p> <code>attachment.state</code> - The current state of the attachment between the gateway and the VPC (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>attachment.vpc-id</code> - The ID of an attached VPC.</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone for the virtual private gateway (if applicable).</p> </li> <li> <p> <code>state</code> - The state of the virtual private gateway (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>tag</code>:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>type</code> - The type of virtual private gateway. Currently the only supported type is <code>ipsec.1</code>.</p> </li> <li> <p> <code>vpn-gateway-id</code> - The ID of the virtual private gateway.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>One or more virtual private gateway IDs.</p> <p>Default: Describes all your virtual private gateways.</p>
    pub vpn_gateway_ids: Option<Vec<String>>,
}

/// Serialize `DescribeVpnGatewaysRequest` contents to a `SignedRequest`.
struct DescribeVpnGatewaysRequestSerializer;
impl DescribeVpnGatewaysRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DescribeVpnGatewaysRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.vpn_gateway_ids {
            VpnGatewayIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "VpnGatewayId"),
                field_value,
            );
        }
    }
}

/// <p>Contains the output of DescribeVpnGateways.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DescribeVpnGatewaysResult {
    /// <p>Information about one or more virtual private gateways.</p>
    pub vpn_gateways: Option<Vec<VpnGateway>>,
}

struct DescribeVpnGatewaysResultDeserializer;
impl DescribeVpnGatewaysResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DescribeVpnGatewaysResult, XmlParseError> {
        deserialize_elements::<_, DescribeVpnGatewaysResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "vpnGatewaySet" => {
                        obj.vpn_gateways.get_or_insert(vec![]).extend(
                            VpnGatewayListDeserializer::deserialize("vpnGatewaySet", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DetachClassicLinkVpcRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the instance to unlink from the VPC.</p>
    pub instance_id: String,
    /// <p>The ID of the VPC to which the instance is linked.</p>
    pub vpc_id: String,
}

/// Serialize `DetachClassicLinkVpcRequest` contents to a `SignedRequest`.
struct DetachClassicLinkVpcRequestSerializer;
impl DetachClassicLinkVpcRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DetachClassicLinkVpcRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "InstanceId"), &obj.instance_id);
        params.put(&format!("{}{}", prefix, "VpcId"), &obj.vpc_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DetachClassicLinkVpcResult {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub return_: Option<bool>,
}

struct DetachClassicLinkVpcResultDeserializer;
impl DetachClassicLinkVpcResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DetachClassicLinkVpcResult, XmlParseError> {
        deserialize_elements::<_, DetachClassicLinkVpcResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DetachInternetGatewayRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the internet gateway.</p>
    pub internet_gateway_id: String,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: String,
}

/// Serialize `DetachInternetGatewayRequest` contents to a `SignedRequest`.
struct DetachInternetGatewayRequestSerializer;
impl DetachInternetGatewayRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DetachInternetGatewayRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "InternetGatewayId"),
            &obj.internet_gateway_id,
        );
        params.put(&format!("{}{}", prefix, "VpcId"), &obj.vpc_id);
    }
}

/// <p>Contains the parameters for DetachNetworkInterface.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DetachNetworkInterfaceRequest {
    /// <p>The ID of the attachment.</p>
    pub attachment_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Specifies whether to force a detachment.</p>
    pub force: Option<bool>,
}

/// Serialize `DetachNetworkInterfaceRequest` contents to a `SignedRequest`.
struct DetachNetworkInterfaceRequestSerializer;
impl DetachNetworkInterfaceRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DetachNetworkInterfaceRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "AttachmentId"), &obj.attachment_id);
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.force {
            params.put(&format!("{}{}", prefix, "Force"), &field_value);
        }
    }
}

/// <p>Contains the parameters for DetachVolume.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DetachVolumeRequest {
    /// <p>The device name.</p>
    pub device: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Forces detachment if the previous detachment attempt did not occur cleanly (for example, logging into an instance, unmounting the volume, and detaching normally). This option can lead to data loss or a corrupted file system. Use this option only as a last resort to detach a volume from a failed instance. The instance won't have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures.</p>
    pub force: Option<bool>,
    /// <p>The ID of the instance.</p>
    pub instance_id: Option<String>,
    /// <p>The ID of the volume.</p>
    pub volume_id: String,
}

/// Serialize `DetachVolumeRequest` contents to a `SignedRequest`.
struct DetachVolumeRequestSerializer;
impl DetachVolumeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DetachVolumeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.device {
            params.put(&format!("{}{}", prefix, "Device"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.force {
            params.put(&format!("{}{}", prefix, "Force"), &field_value);
        }
        if let Some(ref field_value) = obj.instance_id {
            params.put(&format!("{}{}", prefix, "InstanceId"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "VolumeId"), &obj.volume_id);
    }
}

/// <p>Contains the parameters for DetachVpnGateway.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DetachVpnGatewayRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: String,
    /// <p>The ID of the virtual private gateway.</p>
    pub vpn_gateway_id: String,
}

/// Serialize `DetachVpnGatewayRequest` contents to a `SignedRequest`.
struct DetachVpnGatewayRequestSerializer;
impl DetachVpnGatewayRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DetachVpnGatewayRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "VpcId"), &obj.vpc_id);
        params.put(
            &format!("{}{}", prefix, "VpnGatewayId"),
            &obj.vpn_gateway_id,
        );
    }
}

struct DeviceTypeDeserializer;
impl DeviceTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a DHCP configuration option.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DhcpConfiguration {
    /// <p>The name of a DHCP option.</p>
    pub key: Option<String>,
    /// <p>One or more values for the DHCP option.</p>
    pub values: Option<Vec<AttributeValue>>,
}

struct DhcpConfigurationDeserializer;
impl DhcpConfigurationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DhcpConfiguration, XmlParseError> {
        deserialize_elements::<_, DhcpConfiguration, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "key" => {
                    obj.key = Some(StringDeserializer::deserialize("key", stack)?);
                }
                "valueSet" => {
                    obj.values.get_or_insert(vec![]).extend(
                        DhcpConfigurationValueListDeserializer::deserialize("valueSet", stack)?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct DhcpConfigurationListDeserializer;
impl DhcpConfigurationListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DhcpConfiguration>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(DhcpConfigurationDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct DhcpConfigurationValueListDeserializer;
impl DhcpConfigurationValueListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<AttributeValue>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(AttributeValueDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a set of DHCP options.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DhcpOptions {
    /// <p>One or more DHCP options in the set.</p>
    pub dhcp_configurations: Option<Vec<DhcpConfiguration>>,
    /// <p>The ID of the set of DHCP options.</p>
    pub dhcp_options_id: Option<String>,
    /// <p>The ID of the AWS account that owns the DHCP options set.</p>
    pub owner_id: Option<String>,
    /// <p>Any tags assigned to the DHCP options set.</p>
    pub tags: Option<Vec<Tag>>,
}

struct DhcpOptionsDeserializer;
impl DhcpOptionsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DhcpOptions, XmlParseError> {
        deserialize_elements::<_, DhcpOptions, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "dhcpConfigurationSet" => {
                    obj.dhcp_configurations.get_or_insert(vec![]).extend(
                        DhcpConfigurationListDeserializer::deserialize(
                            "dhcpConfigurationSet",
                            stack,
                        )?,
                    );
                }
                "dhcpOptionsId" => {
                    obj.dhcp_options_id =
                        Some(StringDeserializer::deserialize("dhcpOptionsId", stack)?);
                }
                "ownerId" => {
                    obj.owner_id = Some(StringDeserializer::deserialize("ownerId", stack)?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `DhcpOptionsIdStringList` contents to a `SignedRequest`.
struct DhcpOptionsIdStringListSerializer;
impl DhcpOptionsIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct DhcpOptionsListDeserializer;
impl DhcpOptionsListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DhcpOptions>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(DhcpOptionsDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes an Active Directory.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DirectoryServiceAuthentication {
    /// <p>The ID of the Active Directory used for authentication.</p>
    pub directory_id: Option<String>,
}

struct DirectoryServiceAuthenticationDeserializer;
impl DirectoryServiceAuthenticationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DirectoryServiceAuthentication, XmlParseError> {
        deserialize_elements::<_, DirectoryServiceAuthentication, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "directoryId" => {
                        obj.directory_id =
                            Some(StringDeserializer::deserialize("directoryId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes the Active Directory to be used for client authentication.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DirectoryServiceAuthenticationRequest {
    /// <p>The ID of the Active Directory to be used for authentication.</p>
    pub directory_id: Option<String>,
}

/// Serialize `DirectoryServiceAuthenticationRequest` contents to a `SignedRequest`.
struct DirectoryServiceAuthenticationRequestSerializer;
impl DirectoryServiceAuthenticationRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DirectoryServiceAuthenticationRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.directory_id {
            params.put(&format!("{}{}", prefix, "DirectoryId"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DisableEbsEncryptionByDefaultRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>. </p>
    pub dry_run: Option<bool>,
}

/// Serialize `DisableEbsEncryptionByDefaultRequest` contents to a `SignedRequest`.
struct DisableEbsEncryptionByDefaultRequestSerializer;
impl DisableEbsEncryptionByDefaultRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DisableEbsEncryptionByDefaultRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DisableEbsEncryptionByDefaultResult {
    /// <p>Account-level encryption status after performing the action.</p>
    pub ebs_encryption_by_default: Option<bool>,
}

struct DisableEbsEncryptionByDefaultResultDeserializer;
impl DisableEbsEncryptionByDefaultResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DisableEbsEncryptionByDefaultResult, XmlParseError> {
        deserialize_elements::<_, DisableEbsEncryptionByDefaultResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "ebsEncryptionByDefault" => {
                        obj.ebs_encryption_by_default = Some(BooleanDeserializer::deserialize(
                            "ebsEncryptionByDefault",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DisableTransitGatewayRouteTablePropagationRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the attachment.</p>
    pub transit_gateway_attachment_id: String,
    /// <p>The ID of the propagation route table.</p>
    pub transit_gateway_route_table_id: String,
}

/// Serialize `DisableTransitGatewayRouteTablePropagationRequest` contents to a `SignedRequest`.
struct DisableTransitGatewayRouteTablePropagationRequestSerializer;
impl DisableTransitGatewayRouteTablePropagationRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &DisableTransitGatewayRouteTablePropagationRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TransitGatewayAttachmentId"),
            &obj.transit_gateway_attachment_id,
        );
        params.put(
            &format!("{}{}", prefix, "TransitGatewayRouteTableId"),
            &obj.transit_gateway_route_table_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DisableTransitGatewayRouteTablePropagationResult {
    /// <p>Information about route propagation.</p>
    pub propagation: Option<TransitGatewayPropagation>,
}

struct DisableTransitGatewayRouteTablePropagationResultDeserializer;
impl DisableTransitGatewayRouteTablePropagationResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DisableTransitGatewayRouteTablePropagationResult, XmlParseError> {
        deserialize_elements::<_, DisableTransitGatewayRouteTablePropagationResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "propagation" => {
                        obj.propagation = Some(TransitGatewayPropagationDeserializer::deserialize(
                            "propagation",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for DisableVgwRoutePropagation.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DisableVgwRoutePropagationRequest {
    /// <p>The ID of the virtual private gateway.</p>
    pub gateway_id: String,
    /// <p>The ID of the route table.</p>
    pub route_table_id: String,
}

/// Serialize `DisableVgwRoutePropagationRequest` contents to a `SignedRequest`.
struct DisableVgwRoutePropagationRequestSerializer;
impl DisableVgwRoutePropagationRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DisableVgwRoutePropagationRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "GatewayId"), &obj.gateway_id);
        params.put(
            &format!("{}{}", prefix, "RouteTableId"),
            &obj.route_table_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DisableVpcClassicLinkDnsSupportRequest {
    /// <p>The ID of the VPC.</p>
    pub vpc_id: Option<String>,
}

/// Serialize `DisableVpcClassicLinkDnsSupportRequest` contents to a `SignedRequest`.
struct DisableVpcClassicLinkDnsSupportRequestSerializer;
impl DisableVpcClassicLinkDnsSupportRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DisableVpcClassicLinkDnsSupportRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.vpc_id {
            params.put(&format!("{}{}", prefix, "VpcId"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DisableVpcClassicLinkDnsSupportResult {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub return_: Option<bool>,
}

struct DisableVpcClassicLinkDnsSupportResultDeserializer;
impl DisableVpcClassicLinkDnsSupportResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DisableVpcClassicLinkDnsSupportResult, XmlParseError> {
        deserialize_elements::<_, DisableVpcClassicLinkDnsSupportResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DisableVpcClassicLinkRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: String,
}

/// Serialize `DisableVpcClassicLinkRequest` contents to a `SignedRequest`.
struct DisableVpcClassicLinkRequestSerializer;
impl DisableVpcClassicLinkRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DisableVpcClassicLinkRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "VpcId"), &obj.vpc_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DisableVpcClassicLinkResult {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub return_: Option<bool>,
}

struct DisableVpcClassicLinkResultDeserializer;
impl DisableVpcClassicLinkResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DisableVpcClassicLinkResult, XmlParseError> {
        deserialize_elements::<_, DisableVpcClassicLinkResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DisassociateAddressRequest {
    /// <p>[EC2-VPC] The association ID. Required for EC2-VPC.</p>
    pub association_id: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>[EC2-Classic] The Elastic IP address. Required for EC2-Classic.</p>
    pub public_ip: Option<String>,
}

/// Serialize `DisassociateAddressRequest` contents to a `SignedRequest`.
struct DisassociateAddressRequestSerializer;
impl DisassociateAddressRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DisassociateAddressRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.association_id {
            params.put(&format!("{}{}", prefix, "AssociationId"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.public_ip {
            params.put(&format!("{}{}", prefix, "PublicIp"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DisassociateClientVpnTargetNetworkRequest {
    /// <p>The ID of the target network association.</p>
    pub association_id: String,
    /// <p>The ID of the Client VPN endpoint from which to disassociate the target network.</p>
    pub client_vpn_endpoint_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `DisassociateClientVpnTargetNetworkRequest` contents to a `SignedRequest`.
struct DisassociateClientVpnTargetNetworkRequestSerializer;
impl DisassociateClientVpnTargetNetworkRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DisassociateClientVpnTargetNetworkRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "AssociationId"),
            &obj.association_id,
        );
        params.put(
            &format!("{}{}", prefix, "ClientVpnEndpointId"),
            &obj.client_vpn_endpoint_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DisassociateClientVpnTargetNetworkResult {
    /// <p>The ID of the target network association.</p>
    pub association_id: Option<String>,
    /// <p>The current state of the target network association.</p>
    pub status: Option<AssociationStatus>,
}

struct DisassociateClientVpnTargetNetworkResultDeserializer;
impl DisassociateClientVpnTargetNetworkResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DisassociateClientVpnTargetNetworkResult, XmlParseError> {
        deserialize_elements::<_, DisassociateClientVpnTargetNetworkResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "associationId" => {
                        obj.association_id =
                            Some(StringDeserializer::deserialize("associationId", stack)?);
                    }
                    "status" => {
                        obj.status =
                            Some(AssociationStatusDeserializer::deserialize("status", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DisassociateIamInstanceProfileRequest {
    /// <p>The ID of the IAM instance profile association.</p>
    pub association_id: String,
}

/// Serialize `DisassociateIamInstanceProfileRequest` contents to a `SignedRequest`.
struct DisassociateIamInstanceProfileRequestSerializer;
impl DisassociateIamInstanceProfileRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DisassociateIamInstanceProfileRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "AssociationId"),
            &obj.association_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DisassociateIamInstanceProfileResult {
    /// <p>Information about the IAM instance profile association.</p>
    pub iam_instance_profile_association: Option<IamInstanceProfileAssociation>,
}

struct DisassociateIamInstanceProfileResultDeserializer;
impl DisassociateIamInstanceProfileResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DisassociateIamInstanceProfileResult, XmlParseError> {
        deserialize_elements::<_, DisassociateIamInstanceProfileResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "iamInstanceProfileAssociation" => {
                        obj.iam_instance_profile_association =
                            Some(IamInstanceProfileAssociationDeserializer::deserialize(
                                "iamInstanceProfileAssociation",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DisassociateRouteTableRequest {
    /// <p>The association ID representing the current association between the route table and subnet.</p>
    pub association_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `DisassociateRouteTableRequest` contents to a `SignedRequest`.
struct DisassociateRouteTableRequestSerializer;
impl DisassociateRouteTableRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DisassociateRouteTableRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "AssociationId"),
            &obj.association_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DisassociateSubnetCidrBlockRequest {
    /// <p>The association ID for the CIDR block.</p>
    pub association_id: String,
}

/// Serialize `DisassociateSubnetCidrBlockRequest` contents to a `SignedRequest`.
struct DisassociateSubnetCidrBlockRequestSerializer;
impl DisassociateSubnetCidrBlockRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DisassociateSubnetCidrBlockRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "AssociationId"),
            &obj.association_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DisassociateSubnetCidrBlockResult {
    /// <p>Information about the IPv6 CIDR block association.</p>
    pub ipv_6_cidr_block_association: Option<SubnetIpv6CidrBlockAssociation>,
    /// <p>The ID of the subnet.</p>
    pub subnet_id: Option<String>,
}

struct DisassociateSubnetCidrBlockResultDeserializer;
impl DisassociateSubnetCidrBlockResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DisassociateSubnetCidrBlockResult, XmlParseError> {
        deserialize_elements::<_, DisassociateSubnetCidrBlockResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "ipv6CidrBlockAssociation" => {
                        obj.ipv_6_cidr_block_association =
                            Some(SubnetIpv6CidrBlockAssociationDeserializer::deserialize(
                                "ipv6CidrBlockAssociation",
                                stack,
                            )?);
                    }
                    "subnetId" => {
                        obj.subnet_id = Some(StringDeserializer::deserialize("subnetId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DisassociateTransitGatewayRouteTableRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the attachment.</p>
    pub transit_gateway_attachment_id: String,
    /// <p>The ID of the transit gateway route table.</p>
    pub transit_gateway_route_table_id: String,
}

/// Serialize `DisassociateTransitGatewayRouteTableRequest` contents to a `SignedRequest`.
struct DisassociateTransitGatewayRouteTableRequestSerializer;
impl DisassociateTransitGatewayRouteTableRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &DisassociateTransitGatewayRouteTableRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TransitGatewayAttachmentId"),
            &obj.transit_gateway_attachment_id,
        );
        params.put(
            &format!("{}{}", prefix, "TransitGatewayRouteTableId"),
            &obj.transit_gateway_route_table_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DisassociateTransitGatewayRouteTableResult {
    /// <p>Information about the association.</p>
    pub association: Option<TransitGatewayAssociation>,
}

struct DisassociateTransitGatewayRouteTableResultDeserializer;
impl DisassociateTransitGatewayRouteTableResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DisassociateTransitGatewayRouteTableResult, XmlParseError> {
        deserialize_elements::<_, DisassociateTransitGatewayRouteTableResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "association" => {
                        obj.association = Some(TransitGatewayAssociationDeserializer::deserialize(
                            "association",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DisassociateVpcCidrBlockRequest {
    /// <p>The association ID for the CIDR block.</p>
    pub association_id: String,
}

/// Serialize `DisassociateVpcCidrBlockRequest` contents to a `SignedRequest`.
struct DisassociateVpcCidrBlockRequestSerializer;
impl DisassociateVpcCidrBlockRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DisassociateVpcCidrBlockRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "AssociationId"),
            &obj.association_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct DisassociateVpcCidrBlockResult {
    /// <p>Information about the IPv4 CIDR block association.</p>
    pub cidr_block_association: Option<VpcCidrBlockAssociation>,
    /// <p>Information about the IPv6 CIDR block association.</p>
    pub ipv_6_cidr_block_association: Option<VpcIpv6CidrBlockAssociation>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: Option<String>,
}

struct DisassociateVpcCidrBlockResultDeserializer;
impl DisassociateVpcCidrBlockResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DisassociateVpcCidrBlockResult, XmlParseError> {
        deserialize_elements::<_, DisassociateVpcCidrBlockResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "cidrBlockAssociation" => {
                        obj.cidr_block_association =
                            Some(VpcCidrBlockAssociationDeserializer::deserialize(
                                "cidrBlockAssociation",
                                stack,
                            )?);
                    }
                    "ipv6CidrBlockAssociation" => {
                        obj.ipv_6_cidr_block_association =
                            Some(VpcIpv6CidrBlockAssociationDeserializer::deserialize(
                                "ipv6CidrBlockAssociation",
                                stack,
                            )?);
                    }
                    "vpcId" => {
                        obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes a disk image.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DiskImage {
    /// <p>A description of the disk image.</p>
    pub description: Option<String>,
    /// <p>Information about the disk image.</p>
    pub image: Option<DiskImageDetail>,
    /// <p>Information about the volume.</p>
    pub volume: Option<VolumeDetail>,
}

/// Serialize `DiskImage` contents to a `SignedRequest`.
struct DiskImageSerializer;
impl DiskImageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DiskImage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.image {
            DiskImageDetailSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Image"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.volume {
            VolumeDetailSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Volume"),
                field_value,
            );
        }
    }
}

/// <p>Describes a disk image.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DiskImageDescription {
    /// <p>The checksum computed for the disk image.</p>
    pub checksum: Option<String>,
    /// <p>The disk image format.</p>
    pub format: Option<String>,
    /// <p>A presigned URL for the import manifest stored in Amazon S3. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">Authenticating REST Requests</a> topic in the <i>Amazon Simple Storage Service Developer Guide</i>.</p> <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
    pub import_manifest_url: Option<String>,
    /// <p>The size of the disk image, in GiB.</p>
    pub size: Option<i64>,
}

struct DiskImageDescriptionDeserializer;
impl DiskImageDescriptionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DiskImageDescription, XmlParseError> {
        deserialize_elements::<_, DiskImageDescription, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "checksum" => {
                    obj.checksum = Some(StringDeserializer::deserialize("checksum", stack)?);
                }
                "format" => {
                    obj.format = Some(DiskImageFormatDeserializer::deserialize("format", stack)?);
                }
                "importManifestUrl" => {
                    obj.import_manifest_url =
                        Some(StringDeserializer::deserialize("importManifestUrl", stack)?);
                }
                "size" => {
                    obj.size = Some(LongDeserializer::deserialize("size", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes a disk image.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DiskImageDetail {
    /// <p>The size of the disk image, in GiB.</p>
    pub bytes: i64,
    /// <p>The disk image format.</p>
    pub format: String,
    /// <p>A presigned URL for the import manifest stored in Amazon S3 and presented here as an Amazon S3 presigned URL. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">Authenticating REST Requests</a> topic in the <i>Amazon Simple Storage Service Developer Guide</i>.</p> <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
    pub import_manifest_url: String,
}

/// Serialize `DiskImageDetail` contents to a `SignedRequest`.
struct DiskImageDetailSerializer;
impl DiskImageDetailSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DiskImageDetail) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Bytes"), &obj.bytes);
        params.put(&format!("{}{}", prefix, "Format"), &obj.format);
        params.put(
            &format!("{}{}", prefix, "ImportManifestUrl"),
            &obj.import_manifest_url,
        );
    }
}

struct DiskImageFormatDeserializer;
impl DiskImageFormatDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}

/// Serialize `DiskImageList` contents to a `SignedRequest`.
struct DiskImageListSerializer;
impl DiskImageListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<DiskImage>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            DiskImageSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes a disk image volume.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DiskImageVolumeDescription {
    /// <p>The volume identifier.</p>
    pub id: Option<String>,
    /// <p>The size of the volume, in GiB.</p>
    pub size: Option<i64>,
}

struct DiskImageVolumeDescriptionDeserializer;
impl DiskImageVolumeDescriptionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DiskImageVolumeDescription, XmlParseError> {
        deserialize_elements::<_, DiskImageVolumeDescription, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "id" => {
                        obj.id = Some(StringDeserializer::deserialize("id", stack)?);
                    }
                    "size" => {
                        obj.size = Some(LongDeserializer::deserialize("size", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes a DNS entry.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DnsEntry {
    /// <p>The DNS name.</p>
    pub dns_name: Option<String>,
    /// <p>The ID of the private hosted zone.</p>
    pub hosted_zone_id: Option<String>,
}

struct DnsEntryDeserializer;
impl DnsEntryDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<DnsEntry, XmlParseError> {
        deserialize_elements::<_, DnsEntry, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "dnsName" => {
                    obj.dns_name = Some(StringDeserializer::deserialize("dnsName", stack)?);
                }
                "hostedZoneId" => {
                    obj.hosted_zone_id =
                        Some(StringDeserializer::deserialize("hostedZoneId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct DnsEntrySetDeserializer;
impl DnsEntrySetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<DnsEntry>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(DnsEntryDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Information about the DNS server to be used.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct DnsServersOptionsModifyStructure {
    /// <p>The IPv4 address range, in CIDR notation, of the DNS servers to be used. You can specify up to two DNS servers. Ensure that the DNS servers can be reached by the clients. The specified values overwrite the existing values.</p>
    pub custom_dns_servers: Option<Vec<String>>,
    /// <p>Indicates whether DNS servers should be used. Specify <code>False</code> to delete the existing DNS servers.</p>
    pub enabled: Option<bool>,
}

/// Serialize `DnsServersOptionsModifyStructure` contents to a `SignedRequest`.
struct DnsServersOptionsModifyStructureSerializer;
impl DnsServersOptionsModifyStructureSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &DnsServersOptionsModifyStructure) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.custom_dns_servers {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "CustomDnsServers"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.enabled {
            params.put(&format!("{}{}", prefix, "Enabled"), &field_value);
        }
    }
}

struct DnsSupportValueDeserializer;
impl DnsSupportValueDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct DomainTypeDeserializer;
impl DomainTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct DoubleDeserializer;
impl DoubleDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<f64, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = f64::from_str(characters(stack)?.as_ref()).unwrap();
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a block device for an EBS volume.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct EbsBlockDevice {
    /// <p>Indicates whether the EBS volume is deleted on instance termination.</p>
    pub delete_on_termination: Option<bool>,
    /// <p>Indicates whether the encryption state of an EBS volume is changed while being restored from a backing snapshot. The default effect of setting the <code>Encrypted</code> parameter to <code>true</code> through the console, API, or CLI depends on the volume's origin (new or from a snapshot), starting encryption state, ownership, and whether <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/account-level-encryption.html">account-level encryption</a> is enabled. Each default case can be overridden by specifying a customer master key (CMK) with the <code>KmsKeyId</code> parameter in addition to setting <code>Encrypted</code> to <code>true</code>. For a complete list of possible encryption cases, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-parameters">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>In no case can you remove encryption from an encrypted volume.</p> <p>Encrypted volumes can only be attached to instances that support Amazon EBS encryption. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances">Supported Instance Types</a>.</p>
    pub encrypted: Option<bool>,
    /// <p>The number of I/O operations per second (IOPS) that the volume supports. For <code>io1</code> volumes, this represents the number of IOPS that are provisioned for the volume. For <code>gp2</code> volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS Volume Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Constraints: Range is 100-16,000 IOPS for <code>gp2</code> volumes and 100 to 64,000IOPS for <code>io1</code> volumes in most Regions. Maximum <code>io1</code> IOPS of 64,000 is guaranteed only on <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Nitro-based instances</a>. Other instance families guarantee performance up to 32,000 IOPS. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS Volume Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Condition: This parameter is required for requests to create <code>io1</code> volumes; it is not used in requests to create <code>gp2</code>, <code>st1</code>, <code>sc1</code>, or <code>standard</code> volumes.</p>
    pub iops: Option<i64>,
    /// <p>Identifier (key ID, key alias, ID ARN, or alias ARN) for a user-managed CMK under which the EBS volume is encrypted.</p> <p>This parameter is only supported on <code>BlockDeviceMapping</code> objects called by <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html">RunInstances</a>, <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotFleet.html">RequestSpotFleet</a>, and <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RequestSpotInstances.html">RequestSpotInstances</a>.</p>
    pub kms_key_id: Option<String>,
    /// <p>The ID of the snapshot.</p>
    pub snapshot_id: Option<String>,
    /// <p>The size of the volume, in GiB.</p> <p>Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.</p> <p>Constraints: 1-16384 for General Purpose SSD (<code>gp2</code>), 4-16384 for Provisioned IOPS SSD (<code>io1</code>), 500-16384 for Throughput Optimized HDD (<code>st1</code>), 500-16384 for Cold HDD (<code>sc1</code>), and 1-1024 for Magnetic (<code>standard</code>) volumes. If you specify a snapshot, the volume size must be equal to or larger than the snapshot size.</p>
    pub volume_size: Option<i64>,
    /// <p>The volume type. If you set the type to <code>io1</code>, you must also set the <b>Iops</b> property.</p> <p>Default: <code>standard</code> </p>
    pub volume_type: Option<String>,
}

struct EbsBlockDeviceDeserializer;
impl EbsBlockDeviceDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<EbsBlockDevice, XmlParseError> {
        deserialize_elements::<_, EbsBlockDevice, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "deleteOnTermination" => {
                    obj.delete_on_termination = Some(BooleanDeserializer::deserialize(
                        "deleteOnTermination",
                        stack,
                    )?);
                }
                "encrypted" => {
                    obj.encrypted = Some(BooleanDeserializer::deserialize("encrypted", stack)?);
                }
                "iops" => {
                    obj.iops = Some(IntegerDeserializer::deserialize("iops", stack)?);
                }
                "KmsKeyId" => {
                    obj.kms_key_id = Some(StringDeserializer::deserialize("KmsKeyId", stack)?);
                }
                "snapshotId" => {
                    obj.snapshot_id = Some(StringDeserializer::deserialize("snapshotId", stack)?);
                }
                "volumeSize" => {
                    obj.volume_size = Some(IntegerDeserializer::deserialize("volumeSize", stack)?);
                }
                "volumeType" => {
                    obj.volume_type =
                        Some(VolumeTypeDeserializer::deserialize("volumeType", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `EbsBlockDevice` contents to a `SignedRequest`.
struct EbsBlockDeviceSerializer;
impl EbsBlockDeviceSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &EbsBlockDevice) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.delete_on_termination {
            params.put(
                &format!("{}{}", prefix, "DeleteOnTermination"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.encrypted {
            params.put(&format!("{}{}", prefix, "Encrypted"), &field_value);
        }
        if let Some(ref field_value) = obj.iops {
            params.put(&format!("{}{}", prefix, "Iops"), &field_value);
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"), &field_value);
        }
        if let Some(ref field_value) = obj.snapshot_id {
            params.put(&format!("{}{}", prefix, "SnapshotId"), &field_value);
        }
        if let Some(ref field_value) = obj.volume_size {
            params.put(&format!("{}{}", prefix, "VolumeSize"), &field_value);
        }
        if let Some(ref field_value) = obj.volume_type {
            params.put(&format!("{}{}", prefix, "VolumeType"), &field_value);
        }
    }
}

/// <p>Describes a parameter used to set up an EBS volume in a block device mapping.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct EbsInstanceBlockDevice {
    /// <p>The time stamp when the attachment initiated.</p>
    pub attach_time: Option<String>,
    /// <p>Indicates whether the volume is deleted on instance termination.</p>
    pub delete_on_termination: Option<bool>,
    /// <p>The attachment state.</p>
    pub status: Option<String>,
    /// <p>The ID of the EBS volume.</p>
    pub volume_id: Option<String>,
}

struct EbsInstanceBlockDeviceDeserializer;
impl EbsInstanceBlockDeviceDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<EbsInstanceBlockDevice, XmlParseError> {
        deserialize_elements::<_, EbsInstanceBlockDevice, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "attachTime" => {
                    obj.attach_time = Some(DateTimeDeserializer::deserialize("attachTime", stack)?);
                }
                "deleteOnTermination" => {
                    obj.delete_on_termination = Some(BooleanDeserializer::deserialize(
                        "deleteOnTermination",
                        stack,
                    )?);
                }
                "status" => {
                    obj.status = Some(AttachmentStatusDeserializer::deserialize("status", stack)?);
                }
                "volumeId" => {
                    obj.volume_id = Some(StringDeserializer::deserialize("volumeId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes information used to set up an EBS volume specified in a block device mapping.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct EbsInstanceBlockDeviceSpecification {
    /// <p>Indicates whether the volume is deleted on instance termination.</p>
    pub delete_on_termination: Option<bool>,
    /// <p>The ID of the EBS volume.</p>
    pub volume_id: Option<String>,
}

/// Serialize `EbsInstanceBlockDeviceSpecification` contents to a `SignedRequest`.
struct EbsInstanceBlockDeviceSpecificationSerializer;
impl EbsInstanceBlockDeviceSpecificationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &EbsInstanceBlockDeviceSpecification) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.delete_on_termination {
            params.put(
                &format!("{}{}", prefix, "DeleteOnTermination"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.volume_id {
            params.put(&format!("{}{}", prefix, "VolumeId"), &field_value);
        }
    }
}

/// <p>Describes an egress-only internet gateway.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct EgressOnlyInternetGateway {
    /// <p>Information about the attachment of the egress-only internet gateway.</p>
    pub attachments: Option<Vec<InternetGatewayAttachment>>,
    /// <p>The ID of the egress-only internet gateway.</p>
    pub egress_only_internet_gateway_id: Option<String>,
}

struct EgressOnlyInternetGatewayDeserializer;
impl EgressOnlyInternetGatewayDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<EgressOnlyInternetGateway, XmlParseError> {
        deserialize_elements::<_, EgressOnlyInternetGateway, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "attachmentSet" => {
                        obj.attachments.get_or_insert(vec![]).extend(
                            InternetGatewayAttachmentListDeserializer::deserialize(
                                "attachmentSet",
                                stack,
                            )?,
                        );
                    }
                    "egressOnlyInternetGatewayId" => {
                        obj.egress_only_internet_gateway_id =
                            Some(EgressOnlyInternetGatewayIdDeserializer::deserialize(
                                "egressOnlyInternetGatewayId",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct EgressOnlyInternetGatewayIdDeserializer;
impl EgressOnlyInternetGatewayIdDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}

/// Serialize `EgressOnlyInternetGatewayIdList` contents to a `SignedRequest`.
struct EgressOnlyInternetGatewayIdListSerializer;
impl EgressOnlyInternetGatewayIdListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct EgressOnlyInternetGatewayListDeserializer;
impl EgressOnlyInternetGatewayListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<EgressOnlyInternetGateway>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(EgressOnlyInternetGatewayDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the association between an instance and an Elastic Graphics accelerator.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ElasticGpuAssociation {
    /// <p>The ID of the association.</p>
    pub elastic_gpu_association_id: Option<String>,
    /// <p>The state of the association between the instance and the Elastic Graphics accelerator.</p>
    pub elastic_gpu_association_state: Option<String>,
    /// <p>The time the Elastic Graphics accelerator was associated with the instance.</p>
    pub elastic_gpu_association_time: Option<String>,
    /// <p>The ID of the Elastic Graphics accelerator.</p>
    pub elastic_gpu_id: Option<String>,
}

struct ElasticGpuAssociationDeserializer;
impl ElasticGpuAssociationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ElasticGpuAssociation, XmlParseError> {
        deserialize_elements::<_, ElasticGpuAssociation, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "elasticGpuAssociationId" => {
                    obj.elastic_gpu_association_id = Some(StringDeserializer::deserialize(
                        "elasticGpuAssociationId",
                        stack,
                    )?);
                }
                "elasticGpuAssociationState" => {
                    obj.elastic_gpu_association_state = Some(StringDeserializer::deserialize(
                        "elasticGpuAssociationState",
                        stack,
                    )?);
                }
                "elasticGpuAssociationTime" => {
                    obj.elastic_gpu_association_time = Some(StringDeserializer::deserialize(
                        "elasticGpuAssociationTime",
                        stack,
                    )?);
                }
                "elasticGpuId" => {
                    obj.elastic_gpu_id =
                        Some(StringDeserializer::deserialize("elasticGpuId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct ElasticGpuAssociationListDeserializer;
impl ElasticGpuAssociationListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ElasticGpuAssociation>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ElasticGpuAssociationDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the status of an Elastic Graphics accelerator.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ElasticGpuHealth {
    /// <p>The health status.</p>
    pub status: Option<String>,
}

struct ElasticGpuHealthDeserializer;
impl ElasticGpuHealthDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ElasticGpuHealth, XmlParseError> {
        deserialize_elements::<_, ElasticGpuHealth, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "status" => {
                    obj.status = Some(ElasticGpuStatusDeserializer::deserialize("status", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `ElasticGpuIdSet` contents to a `SignedRequest`.
struct ElasticGpuIdSetSerializer;
impl ElasticGpuIdSetSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct ElasticGpuSetDeserializer;
impl ElasticGpuSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ElasticGpus>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ElasticGpusDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>A specification for an Elastic Graphics accelerator.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ElasticGpuSpecification {
    /// <p>The type of Elastic Graphics accelerator.</p>
    pub type_: String,
}

/// Serialize `ElasticGpuSpecification` contents to a `SignedRequest`.
struct ElasticGpuSpecificationSerializer;
impl ElasticGpuSpecificationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ElasticGpuSpecification) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Type"), &obj.type_);
    }
}

/// Serialize `ElasticGpuSpecificationList` contents to a `SignedRequest`.
struct ElasticGpuSpecificationListSerializer;
impl ElasticGpuSpecificationListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<ElasticGpuSpecification>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            ElasticGpuSpecificationSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes an elastic GPU.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ElasticGpuSpecificationResponse {
    /// <p>The elastic GPU type.</p>
    pub type_: Option<String>,
}

struct ElasticGpuSpecificationResponseDeserializer;
impl ElasticGpuSpecificationResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ElasticGpuSpecificationResponse, XmlParseError> {
        deserialize_elements::<_, ElasticGpuSpecificationResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "type" => {
                        obj.type_ = Some(StringDeserializer::deserialize("type", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct ElasticGpuSpecificationResponseListDeserializer;
impl ElasticGpuSpecificationResponseListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ElasticGpuSpecificationResponse>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ElasticGpuSpecificationResponseDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `ElasticGpuSpecifications` contents to a `SignedRequest`.
struct ElasticGpuSpecificationsSerializer;
impl ElasticGpuSpecificationsSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<ElasticGpuSpecification>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            ElasticGpuSpecificationSerializer::serialize(params, &key, obj);
        }
    }
}

struct ElasticGpuStateDeserializer;
impl ElasticGpuStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct ElasticGpuStatusDeserializer;
impl ElasticGpuStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes an Elastic Graphics accelerator.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ElasticGpus {
    /// <p>The Availability Zone in the which the Elastic Graphics accelerator resides.</p>
    pub availability_zone: Option<String>,
    /// <p>The status of the Elastic Graphics accelerator.</p>
    pub elastic_gpu_health: Option<ElasticGpuHealth>,
    /// <p>The ID of the Elastic Graphics accelerator.</p>
    pub elastic_gpu_id: Option<String>,
    /// <p>The state of the Elastic Graphics accelerator.</p>
    pub elastic_gpu_state: Option<String>,
    /// <p>The type of Elastic Graphics accelerator.</p>
    pub elastic_gpu_type: Option<String>,
    /// <p>The ID of the instance to which the Elastic Graphics accelerator is attached.</p>
    pub instance_id: Option<String>,
}

struct ElasticGpusDeserializer;
impl ElasticGpusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ElasticGpus, XmlParseError> {
        deserialize_elements::<_, ElasticGpus, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "availabilityZone" => {
                    obj.availability_zone =
                        Some(StringDeserializer::deserialize("availabilityZone", stack)?);
                }
                "elasticGpuHealth" => {
                    obj.elastic_gpu_health = Some(ElasticGpuHealthDeserializer::deserialize(
                        "elasticGpuHealth",
                        stack,
                    )?);
                }
                "elasticGpuId" => {
                    obj.elastic_gpu_id =
                        Some(StringDeserializer::deserialize("elasticGpuId", stack)?);
                }
                "elasticGpuState" => {
                    obj.elastic_gpu_state = Some(ElasticGpuStateDeserializer::deserialize(
                        "elasticGpuState",
                        stack,
                    )?);
                }
                "elasticGpuType" => {
                    obj.elastic_gpu_type =
                        Some(StringDeserializer::deserialize("elasticGpuType", stack)?);
                }
                "instanceId" => {
                    obj.instance_id = Some(StringDeserializer::deserialize("instanceId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p> Describes an elastic inference accelerator. </p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ElasticInferenceAccelerator {
    /// <p> The type of elastic inference accelerator. The possible values are <code>eia1.small</code>, <code>eia1.medium</code>, and <code>eia1.large</code>. </p>
    pub type_: String,
}

/// Serialize `ElasticInferenceAccelerator` contents to a `SignedRequest`.
struct ElasticInferenceAcceleratorSerializer;
impl ElasticInferenceAcceleratorSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ElasticInferenceAccelerator) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Type"), &obj.type_);
    }
}

/// <p> Describes the association between an instance and an elastic inference accelerator. </p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ElasticInferenceAcceleratorAssociation {
    /// <p> The Amazon Resource Name (ARN) of the elastic inference accelerator. </p>
    pub elastic_inference_accelerator_arn: Option<String>,
    /// <p> The ID of the association. </p>
    pub elastic_inference_accelerator_association_id: Option<String>,
    /// <p> The state of the elastic inference accelerator. </p>
    pub elastic_inference_accelerator_association_state: Option<String>,
    /// <p> The time at which the elastic inference accelerator is associated with an instance. </p>
    pub elastic_inference_accelerator_association_time: Option<String>,
}

struct ElasticInferenceAcceleratorAssociationDeserializer;
impl ElasticInferenceAcceleratorAssociationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ElasticInferenceAcceleratorAssociation, XmlParseError> {
        deserialize_elements::<_, ElasticInferenceAcceleratorAssociation, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "elasticInferenceAcceleratorArn" => {
                        obj.elastic_inference_accelerator_arn =
                            Some(StringDeserializer::deserialize(
                                "elasticInferenceAcceleratorArn",
                                stack,
                            )?);
                    }
                    "elasticInferenceAcceleratorAssociationId" => {
                        obj.elastic_inference_accelerator_association_id =
                            Some(StringDeserializer::deserialize(
                                "elasticInferenceAcceleratorAssociationId",
                                stack,
                            )?);
                    }
                    "elasticInferenceAcceleratorAssociationState" => {
                        obj.elastic_inference_accelerator_association_state =
                            Some(StringDeserializer::deserialize(
                                "elasticInferenceAcceleratorAssociationState",
                                stack,
                            )?);
                    }
                    "elasticInferenceAcceleratorAssociationTime" => {
                        obj.elastic_inference_accelerator_association_time =
                            Some(DateTimeDeserializer::deserialize(
                                "elasticInferenceAcceleratorAssociationTime",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct ElasticInferenceAcceleratorAssociationListDeserializer;
impl ElasticInferenceAcceleratorAssociationListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ElasticInferenceAcceleratorAssociation>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(
                    ElasticInferenceAcceleratorAssociationDeserializer::deserialize("item", stack)?,
                );
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `ElasticInferenceAccelerators` contents to a `SignedRequest`.
struct ElasticInferenceAcceleratorsSerializer;
impl ElasticInferenceAcceleratorsSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<ElasticInferenceAccelerator>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            ElasticInferenceAcceleratorSerializer::serialize(params, &key, obj);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct EnableEbsEncryptionByDefaultRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>. </p>
    pub dry_run: Option<bool>,
}

/// Serialize `EnableEbsEncryptionByDefaultRequest` contents to a `SignedRequest`.
struct EnableEbsEncryptionByDefaultRequestSerializer;
impl EnableEbsEncryptionByDefaultRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &EnableEbsEncryptionByDefaultRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct EnableEbsEncryptionByDefaultResult {
    /// <p>Account-level encryption status after performing the action.</p>
    pub ebs_encryption_by_default: Option<bool>,
}

struct EnableEbsEncryptionByDefaultResultDeserializer;
impl EnableEbsEncryptionByDefaultResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<EnableEbsEncryptionByDefaultResult, XmlParseError> {
        deserialize_elements::<_, EnableEbsEncryptionByDefaultResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "ebsEncryptionByDefault" => {
                        obj.ebs_encryption_by_default = Some(BooleanDeserializer::deserialize(
                            "ebsEncryptionByDefault",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct EnableTransitGatewayRouteTablePropagationRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the attachment.</p>
    pub transit_gateway_attachment_id: String,
    /// <p>The ID of the propagation route table.</p>
    pub transit_gateway_route_table_id: String,
}

/// Serialize `EnableTransitGatewayRouteTablePropagationRequest` contents to a `SignedRequest`.
struct EnableTransitGatewayRouteTablePropagationRequestSerializer;
impl EnableTransitGatewayRouteTablePropagationRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &EnableTransitGatewayRouteTablePropagationRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TransitGatewayAttachmentId"),
            &obj.transit_gateway_attachment_id,
        );
        params.put(
            &format!("{}{}", prefix, "TransitGatewayRouteTableId"),
            &obj.transit_gateway_route_table_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct EnableTransitGatewayRouteTablePropagationResult {
    /// <p>Information about route propagation.</p>
    pub propagation: Option<TransitGatewayPropagation>,
}

struct EnableTransitGatewayRouteTablePropagationResultDeserializer;
impl EnableTransitGatewayRouteTablePropagationResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<EnableTransitGatewayRouteTablePropagationResult, XmlParseError> {
        deserialize_elements::<_, EnableTransitGatewayRouteTablePropagationResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "propagation" => {
                        obj.propagation = Some(TransitGatewayPropagationDeserializer::deserialize(
                            "propagation",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for EnableVgwRoutePropagation.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct EnableVgwRoutePropagationRequest {
    /// <p>The ID of the virtual private gateway that is attached to a VPC. The virtual private gateway must be attached to the same VPC that the routing tables are associated with. </p>
    pub gateway_id: String,
    /// <p>The ID of the route table. The routing table must be associated with the same VPC that the virtual private gateway is attached to. </p>
    pub route_table_id: String,
}

/// Serialize `EnableVgwRoutePropagationRequest` contents to a `SignedRequest`.
struct EnableVgwRoutePropagationRequestSerializer;
impl EnableVgwRoutePropagationRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &EnableVgwRoutePropagationRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "GatewayId"), &obj.gateway_id);
        params.put(
            &format!("{}{}", prefix, "RouteTableId"),
            &obj.route_table_id,
        );
    }
}

/// <p>Contains the parameters for EnableVolumeIO.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct EnableVolumeIORequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the volume.</p>
    pub volume_id: String,
}

/// Serialize `EnableVolumeIORequest` contents to a `SignedRequest`.
struct EnableVolumeIORequestSerializer;
impl EnableVolumeIORequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &EnableVolumeIORequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "VolumeId"), &obj.volume_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct EnableVpcClassicLinkDnsSupportRequest {
    /// <p>The ID of the VPC.</p>
    pub vpc_id: Option<String>,
}

/// Serialize `EnableVpcClassicLinkDnsSupportRequest` contents to a `SignedRequest`.
struct EnableVpcClassicLinkDnsSupportRequestSerializer;
impl EnableVpcClassicLinkDnsSupportRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &EnableVpcClassicLinkDnsSupportRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.vpc_id {
            params.put(&format!("{}{}", prefix, "VpcId"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct EnableVpcClassicLinkDnsSupportResult {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub return_: Option<bool>,
}

struct EnableVpcClassicLinkDnsSupportResultDeserializer;
impl EnableVpcClassicLinkDnsSupportResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<EnableVpcClassicLinkDnsSupportResult, XmlParseError> {
        deserialize_elements::<_, EnableVpcClassicLinkDnsSupportResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct EnableVpcClassicLinkRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: String,
}

/// Serialize `EnableVpcClassicLinkRequest` contents to a `SignedRequest`.
struct EnableVpcClassicLinkRequestSerializer;
impl EnableVpcClassicLinkRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &EnableVpcClassicLinkRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "VpcId"), &obj.vpc_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct EnableVpcClassicLinkResult {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub return_: Option<bool>,
}

struct EnableVpcClassicLinkResultDeserializer;
impl EnableVpcClassicLinkResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<EnableVpcClassicLinkResult, XmlParseError> {
        deserialize_elements::<_, EnableVpcClassicLinkResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct EndDateTypeDeserializer;
impl EndDateTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct EndpointSetDeserializer;
impl EndpointSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ClientVpnEndpoint>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ClientVpnEndpointDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct EventCodeDeserializer;
impl EventCodeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes an EC2 Fleet or Spot Fleet event.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct EventInformation {
    /// <p>The description of the event.</p>
    pub event_description: Option<String>,
    /// <p><p>The event.</p> <p>The following are the <code>error</code> events:</p> <ul> <li> <p> <code>iamFleetRoleInvalid</code> - The EC2 Fleet or Spot Fleet did not have the required permissions either to launch or terminate an instance.</p> </li> <li> <p> <code>spotFleetRequestConfigurationInvalid</code> - The configuration is not valid. For more information, see the description of the event.</p> </li> <li> <p> <code>spotInstanceCountLimitExceeded</code> - You&#39;ve reached the limit on the number of Spot Instances that you can launch.</p> </li> </ul> <p>The following are the <code>fleetRequestChange</code> events:</p> <ul> <li> <p> <code>active</code> - The EC2 Fleet or Spot Fleet request has been validated and Amazon EC2 is attempting to maintain the target number of running Spot Instances.</p> </li> <li> <p> <code>cancelled</code> - The EC2 Fleet or Spot Fleet request is canceled and has no running Spot Instances. The EC2 Fleet or Spot Fleet will be deleted two days after its instances were terminated.</p> </li> <li> <p> <code>cancelled<em>running</code> - The EC2 Fleet or Spot Fleet request is canceled and does not launch additional Spot Instances. Existing Spot Instances continue to run until they are interrupted or terminated.</p> </li> <li> <p> <code>cancelled</em>terminating</code> - The EC2 Fleet or Spot Fleet request is canceled and its Spot Instances are terminating.</p> </li> <li> <p> <code>expired</code> - The EC2 Fleet or Spot Fleet request has expired. A subsequent event indicates that the instances were terminated, if the request was created with <code>TerminateInstancesWithExpiration</code> set.</p> </li> <li> <p> <code>modify<em>in</em>progress</code> - A request to modify the EC2 Fleet or Spot Fleet request was accepted and is in progress.</p> </li> <li> <p> <code>modify<em>successful</code> - The EC2 Fleet or Spot Fleet request was modified.</p> </li> <li> <p> <code>price</em>update</code> - The price for a launch configuration was adjusted because it was too high. This change is permanent.</p> </li> <li> <p> <code>submitted</code> - The EC2 Fleet or Spot Fleet request is being evaluated and Amazon EC2 is preparing to launch the target number of Spot Instances.</p> </li> </ul> <p>The following are the <code>instanceChange</code> events:</p> <ul> <li> <p> <code>launched</code> - A request was fulfilled and a new instance was launched.</p> </li> <li> <p> <code>terminated</code> - An instance was terminated by the user.</p> </li> </ul> <p>The following are the <code>Information</code> events:</p> <ul> <li> <p> <code>launchSpecTemporarilyBlacklisted</code> - The configuration is not valid and several attempts to launch instances have failed. For more information, see the description of the event.</p> </li> <li> <p> <code>launchSpecUnusable</code> - The price in a launch specification is not valid because it is below the Spot price or the Spot price is above the On-Demand price.</p> </li> <li> <p> <code>fleetProgressHalted</code> - The price in every launch specification is not valid. A launch specification might become valid if the Spot price changes.</p> </li> </ul></p>
    pub event_sub_type: Option<String>,
    /// <p>The ID of the instance. This information is available only for <code>instanceChange</code> events.</p>
    pub instance_id: Option<String>,
}

struct EventInformationDeserializer;
impl EventInformationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<EventInformation, XmlParseError> {
        deserialize_elements::<_, EventInformation, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "eventDescription" => {
                    obj.event_description =
                        Some(StringDeserializer::deserialize("eventDescription", stack)?);
                }
                "eventSubType" => {
                    obj.event_sub_type =
                        Some(StringDeserializer::deserialize("eventSubType", stack)?);
                }
                "instanceId" => {
                    obj.instance_id = Some(StringDeserializer::deserialize("instanceId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct EventTypeDeserializer;
impl EventTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct ExcessCapacityTerminationPolicyDeserializer;
impl ExcessCapacityTerminationPolicyDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}

/// Serialize `ExecutableByStringList` contents to a `SignedRequest`.
struct ExecutableByStringListSerializer;
impl ExecutableByStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ExportClientVpnClientCertificateRevocationListRequest {
    /// <p>The ID of the Client VPN endpoint.</p>
    pub client_vpn_endpoint_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `ExportClientVpnClientCertificateRevocationListRequest` contents to a `SignedRequest`.
struct ExportClientVpnClientCertificateRevocationListRequestSerializer;
impl ExportClientVpnClientCertificateRevocationListRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &ExportClientVpnClientCertificateRevocationListRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "ClientVpnEndpointId"),
            &obj.client_vpn_endpoint_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ExportClientVpnClientCertificateRevocationListResult {
    /// <p>Information about the client certificate revocation list.</p>
    pub certificate_revocation_list: Option<String>,
    /// <p>The current state of the client certificate revocation list.</p>
    pub status: Option<ClientCertificateRevocationListStatus>,
}

struct ExportClientVpnClientCertificateRevocationListResultDeserializer;
impl ExportClientVpnClientCertificateRevocationListResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ExportClientVpnClientCertificateRevocationListResult, XmlParseError> {
        deserialize_elements::<_, ExportClientVpnClientCertificateRevocationListResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "certificateRevocationList" => {
                        obj.certificate_revocation_list = Some(StringDeserializer::deserialize(
                            "certificateRevocationList",
                            stack,
                        )?);
                    }
                    "status" => {
                        obj.status = Some(
                            ClientCertificateRevocationListStatusDeserializer::deserialize(
                                "status", stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ExportClientVpnClientConfigurationRequest {
    /// <p>The ID of the Client VPN endpoint.</p>
    pub client_vpn_endpoint_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `ExportClientVpnClientConfigurationRequest` contents to a `SignedRequest`.
struct ExportClientVpnClientConfigurationRequestSerializer;
impl ExportClientVpnClientConfigurationRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ExportClientVpnClientConfigurationRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "ClientVpnEndpointId"),
            &obj.client_vpn_endpoint_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ExportClientVpnClientConfigurationResult {
    /// <p>The contents of the Client VPN endpoint configuration file.</p>
    pub client_configuration: Option<String>,
}

struct ExportClientVpnClientConfigurationResultDeserializer;
impl ExportClientVpnClientConfigurationResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ExportClientVpnClientConfigurationResult, XmlParseError> {
        deserialize_elements::<_, ExportClientVpnClientConfigurationResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "clientConfiguration" => {
                        obj.client_configuration = Some(StringDeserializer::deserialize(
                            "clientConfiguration",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct ExportEnvironmentDeserializer;
impl ExportEnvironmentDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes an instance export task.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ExportTask {
    /// <p>A description of the resource being exported.</p>
    pub description: Option<String>,
    /// <p>The ID of the export task.</p>
    pub export_task_id: Option<String>,
    /// <p>Information about the export task.</p>
    pub export_to_s3_task: Option<ExportToS3Task>,
    /// <p>Information about the instance to export.</p>
    pub instance_export_details: Option<InstanceExportDetails>,
    /// <p>The state of the export task.</p>
    pub state: Option<String>,
    /// <p>The status message related to the export task.</p>
    pub status_message: Option<String>,
}

struct ExportTaskDeserializer;
impl ExportTaskDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ExportTask, XmlParseError> {
        deserialize_elements::<_, ExportTask, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "exportTaskId" => {
                    obj.export_task_id =
                        Some(StringDeserializer::deserialize("exportTaskId", stack)?);
                }
                "exportToS3" => {
                    obj.export_to_s3_task = Some(ExportToS3TaskDeserializer::deserialize(
                        "exportToS3",
                        stack,
                    )?);
                }
                "instanceExport" => {
                    obj.instance_export_details = Some(
                        InstanceExportDetailsDeserializer::deserialize("instanceExport", stack)?,
                    );
                }
                "state" => {
                    obj.state = Some(ExportTaskStateDeserializer::deserialize("state", stack)?);
                }
                "statusMessage" => {
                    obj.status_message =
                        Some(StringDeserializer::deserialize("statusMessage", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `ExportTaskIdStringList` contents to a `SignedRequest`.
struct ExportTaskIdStringListSerializer;
impl ExportTaskIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct ExportTaskListDeserializer;
impl ExportTaskListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ExportTask>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ExportTaskDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct ExportTaskStateDeserializer;
impl ExportTaskStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes the format and location for an instance export task.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ExportToS3Task {
    /// <p>The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.</p>
    pub container_format: Option<String>,
    /// <p>The format for the exported image.</p>
    pub disk_image_format: Option<String>,
    /// <p>The S3 bucket for the destination image. The destination bucket must exist and grant WRITE and READ_ACP permissions to the AWS account <code>vm-import-export@amazon.com</code>.</p>
    pub s3_bucket: Option<String>,
    /// <p>The encryption key for your S3 bucket.</p>
    pub s3_key: Option<String>,
}

struct ExportToS3TaskDeserializer;
impl ExportToS3TaskDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ExportToS3Task, XmlParseError> {
        deserialize_elements::<_, ExportToS3Task, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "containerFormat" => {
                    obj.container_format = Some(ContainerFormatDeserializer::deserialize(
                        "containerFormat",
                        stack,
                    )?);
                }
                "diskImageFormat" => {
                    obj.disk_image_format = Some(DiskImageFormatDeserializer::deserialize(
                        "diskImageFormat",
                        stack,
                    )?);
                }
                "s3Bucket" => {
                    obj.s3_bucket = Some(StringDeserializer::deserialize("s3Bucket", stack)?);
                }
                "s3Key" => {
                    obj.s3_key = Some(StringDeserializer::deserialize("s3Key", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes an instance export task.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ExportToS3TaskSpecification {
    /// <p>The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.</p>
    pub container_format: Option<String>,
    /// <p>The format for the exported image.</p>
    pub disk_image_format: Option<String>,
    /// <p>The S3 bucket for the destination image. The destination bucket must exist and grant WRITE and READ_ACP permissions to the AWS account <code>vm-import-export@amazon.com</code>.</p>
    pub s3_bucket: Option<String>,
    /// <p>The image is written to a single object in the S3 bucket at the S3 key s3prefix + exportTaskId + '.' + diskImageFormat.</p>
    pub s3_prefix: Option<String>,
}

/// Serialize `ExportToS3TaskSpecification` contents to a `SignedRequest`.
struct ExportToS3TaskSpecificationSerializer;
impl ExportToS3TaskSpecificationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ExportToS3TaskSpecification) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.container_format {
            params.put(&format!("{}{}", prefix, "ContainerFormat"), &field_value);
        }
        if let Some(ref field_value) = obj.disk_image_format {
            params.put(&format!("{}{}", prefix, "DiskImageFormat"), &field_value);
        }
        if let Some(ref field_value) = obj.s3_bucket {
            params.put(&format!("{}{}", prefix, "S3Bucket"), &field_value);
        }
        if let Some(ref field_value) = obj.s3_prefix {
            params.put(&format!("{}{}", prefix, "S3Prefix"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ExportTransitGatewayRoutesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>attachment.transit-gateway-attachment-id</code>- The id of the transit gateway attachment.</p> </li> <li> <p> <code>attachment.resource-id</code> - The resource id of the transit gateway attachment.</p> </li> <li> <p> <code>route-search.exact-match</code> - The exact match of the specified filter.</p> </li> <li> <p> <code>route-search.longest-prefix-match</code> - The longest prefix that matches the route.</p> </li> <li> <p> <code>route-search.subnet-of-match</code> - The routes with a subnet that match the specified CIDR filter.</p> </li> <li> <p> <code>route-search.supernet-of-match</code> - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.</p> </li> <li> <p> <code>state</code> - The state of the attachment (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p> </li> <li> <p> <code>transit-gateway-route-destination-cidr-block</code> - The CIDR range.</p> </li> <li> <p> <code>type</code> - The type of roue (<code>active</code> | <code>blackhole</code>).</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The name of the S3 bucket.</p>
    pub s3_bucket: String,
    /// <p>The ID of the route table.</p>
    pub transit_gateway_route_table_id: String,
}

/// Serialize `ExportTransitGatewayRoutesRequest` contents to a `SignedRequest`.
struct ExportTransitGatewayRoutesRequestSerializer;
impl ExportTransitGatewayRoutesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ExportTransitGatewayRoutesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "S3Bucket"), &obj.s3_bucket);
        params.put(
            &format!("{}{}", prefix, "TransitGatewayRouteTableId"),
            &obj.transit_gateway_route_table_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ExportTransitGatewayRoutesResult {
    /// <p>The URL of the exported file in Amazon S3. For example, s3://<i>bucket_name</i>/VPCTransitGateway/TransitGatewayRouteTables/<i>file_name</i>.</p>
    pub s3_location: Option<String>,
}

struct ExportTransitGatewayRoutesResultDeserializer;
impl ExportTransitGatewayRoutesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ExportTransitGatewayRoutesResult, XmlParseError> {
        deserialize_elements::<_, ExportTransitGatewayRoutesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "s3Location" => {
                        obj.s3_location =
                            Some(StringDeserializer::deserialize("s3Location", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p><p>A filter name and value pair that is used to return a more specific list of results from a describe operation. Filters can be used to match a set of resources by specific criteria, such as tags, attributes, or IDs. The filters supported by a describe operation are documented with the describe operation. For example:</p> <ul> <li> <p> <a>DescribeAvailabilityZones</a> </p> </li> <li> <p> <a>DescribeImages</a> </p> </li> <li> <p> <a>DescribeInstances</a> </p> </li> <li> <p> <a>DescribeKeyPairs</a> </p> </li> <li> <p> <a>DescribeSecurityGroups</a> </p> </li> <li> <p> <a>DescribeSnapshots</a> </p> </li> <li> <p> <a>DescribeSubnets</a> </p> </li> <li> <p> <a>DescribeTags</a> </p> </li> <li> <p> <a>DescribeVolumes</a> </p> </li> <li> <p> <a>DescribeVpcs</a> </p> </li> </ul></p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct Filter {
    /// <p>The name of the filter. Filter names are case-sensitive.</p>
    pub name: Option<String>,
    /// <p>The filter values. Filter values are case-sensitive.</p>
    pub values: Option<Vec<String>>,
}

/// Serialize `Filter` contents to a `SignedRequest`.
struct FilterSerializer;
impl FilterSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Filter) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.name {
            params.put(&format!("{}{}", prefix, "Name"), &field_value);
        }
        if let Some(ref field_value) = obj.values {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Value"),
                field_value,
            );
        }
    }
}

/// Serialize `FilterList` contents to a `SignedRequest`.
struct FilterListSerializer;
impl FilterListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<Filter>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            FilterSerializer::serialize(params, &key, obj);
        }
    }
}

struct FleetActivityStatusDeserializer;
impl FleetActivityStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes an EC2 Fleet.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct FleetData {
    /// <p>The progress of the EC2 Fleet. If there is an error, the status is <code>error</code>. After all requests are placed, the status is <code>pending_fulfillment</code>. If the size of the EC2 Fleet is equal to or greater than its target capacity, the status is <code>fulfilled</code>. If the size of the EC2 Fleet is decreased, the status is <code>pending_termination</code> while instances are terminating.</p>
    pub activity_status: Option<String>,
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p> <p>Constraints: Maximum 64 ASCII characters</p>
    pub client_token: Option<String>,
    /// <p>The creation date and time of the EC2 Fleet.</p>
    pub create_time: Option<String>,
    /// <p>Information about the instances that could not be launched by the fleet. Valid only when <b>Type</b> is set to <code>instant</code>.</p>
    pub errors: Option<Vec<DescribeFleetError>>,
    /// <p>Indicates whether running instances should be terminated if the target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.</p>
    pub excess_capacity_termination_policy: Option<String>,
    /// <p>The ID of the EC2 Fleet.</p>
    pub fleet_id: Option<String>,
    /// <p>The state of the EC2 Fleet.</p>
    pub fleet_state: Option<String>,
    /// <p>The number of units fulfilled by this request compared to the set target capacity.</p>
    pub fulfilled_capacity: Option<f64>,
    /// <p>The number of units fulfilled by this request compared to the set target On-Demand capacity.</p>
    pub fulfilled_on_demand_capacity: Option<f64>,
    /// <p>Information about the instances that were launched by the fleet. Valid only when <b>Type</b> is set to <code>instant</code>.</p>
    pub instances: Option<Vec<DescribeFleetsInstances>>,
    /// <p>The launch template and overrides.</p>
    pub launch_template_configs: Option<Vec<FleetLaunchTemplateConfig>>,
    /// <p>The allocation strategy of On-Demand Instances in an EC2 Fleet.</p>
    pub on_demand_options: Option<OnDemandOptions>,
    /// <p>Indicates whether EC2 Fleet should replace unhealthy instances.</p>
    pub replace_unhealthy_instances: Option<bool>,
    /// <p>The configuration of Spot Instances in an EC2 Fleet.</p>
    pub spot_options: Option<SpotOptions>,
    /// <p>The tags for an EC2 Fleet resource.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The number of units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p>
    pub target_capacity_specification: Option<TargetCapacitySpecification>,
    /// <p>Indicates whether running instances should be terminated when the EC2 Fleet expires. </p>
    pub terminate_instances_with_expiration: Option<bool>,
    /// <p>The type of request. Indicates whether the EC2 Fleet only <code>requests</code> the target capacity, or also attempts to <code>maintain</code> it. If you request a certain target capacity, EC2 Fleet only places the required requests; it does not attempt to replenish instances if capacity is diminished, and does not submit requests in alternative capacity pools if capacity is unavailable. To maintain a certain target capacity, EC2 Fleet places the required requests to meet this target capacity. It also automatically replenishes any interrupted Spot Instances. Default: <code>maintain</code>.</p>
    pub type_: Option<String>,
    /// <p>The start date and time of the request, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). The default is to start fulfilling the request immediately. </p>
    pub valid_from: Option<String>,
    /// <p>The end date and time of the request, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). At this point, no new instance requests are placed or able to fulfill the request. The default end date is 7 days from the current date. </p>
    pub valid_until: Option<String>,
}

struct FleetDataDeserializer;
impl FleetDataDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<FleetData, XmlParseError> {
        deserialize_elements::<_, FleetData, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "activityStatus" => {
                    obj.activity_status = Some(FleetActivityStatusDeserializer::deserialize(
                        "activityStatus",
                        stack,
                    )?);
                }
                "clientToken" => {
                    obj.client_token = Some(StringDeserializer::deserialize("clientToken", stack)?);
                }
                "createTime" => {
                    obj.create_time = Some(DateTimeDeserializer::deserialize("createTime", stack)?);
                }
                "errorSet" => {
                    obj.errors.get_or_insert(vec![]).extend(
                        DescribeFleetsErrorSetDeserializer::deserialize("errorSet", stack)?,
                    );
                }
                "excessCapacityTerminationPolicy" => {
                    obj.excess_capacity_termination_policy = Some(
                        FleetExcessCapacityTerminationPolicyDeserializer::deserialize(
                            "excessCapacityTerminationPolicy",
                            stack,
                        )?,
                    );
                }
                "fleetId" => {
                    obj.fleet_id =
                        Some(FleetIdentifierDeserializer::deserialize("fleetId", stack)?);
                }
                "fleetState" => {
                    obj.fleet_state = Some(FleetStateCodeDeserializer::deserialize(
                        "fleetState",
                        stack,
                    )?);
                }
                "fulfilledCapacity" => {
                    obj.fulfilled_capacity =
                        Some(DoubleDeserializer::deserialize("fulfilledCapacity", stack)?);
                }
                "fulfilledOnDemandCapacity" => {
                    obj.fulfilled_on_demand_capacity = Some(DoubleDeserializer::deserialize(
                        "fulfilledOnDemandCapacity",
                        stack,
                    )?);
                }
                "fleetInstanceSet" => {
                    obj.instances.get_or_insert(vec![]).extend(
                        DescribeFleetsInstancesSetDeserializer::deserialize(
                            "fleetInstanceSet",
                            stack,
                        )?,
                    );
                }
                "launchTemplateConfigs" => {
                    obj.launch_template_configs.get_or_insert(vec![]).extend(
                        FleetLaunchTemplateConfigListDeserializer::deserialize(
                            "launchTemplateConfigs",
                            stack,
                        )?,
                    );
                }
                "onDemandOptions" => {
                    obj.on_demand_options = Some(OnDemandOptionsDeserializer::deserialize(
                        "onDemandOptions",
                        stack,
                    )?);
                }
                "replaceUnhealthyInstances" => {
                    obj.replace_unhealthy_instances = Some(BooleanDeserializer::deserialize(
                        "replaceUnhealthyInstances",
                        stack,
                    )?);
                }
                "spotOptions" => {
                    obj.spot_options =
                        Some(SpotOptionsDeserializer::deserialize("spotOptions", stack)?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "targetCapacitySpecification" => {
                    obj.target_capacity_specification =
                        Some(TargetCapacitySpecificationDeserializer::deserialize(
                            "targetCapacitySpecification",
                            stack,
                        )?);
                }
                "terminateInstancesWithExpiration" => {
                    obj.terminate_instances_with_expiration =
                        Some(BooleanDeserializer::deserialize(
                            "terminateInstancesWithExpiration",
                            stack,
                        )?);
                }
                "type" => {
                    obj.type_ = Some(FleetTypeDeserializer::deserialize("type", stack)?);
                }
                "validFrom" => {
                    obj.valid_from = Some(DateTimeDeserializer::deserialize("validFrom", stack)?);
                }
                "validUntil" => {
                    obj.valid_until = Some(DateTimeDeserializer::deserialize("validUntil", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct FleetEventTypeDeserializer;
impl FleetEventTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct FleetExcessCapacityTerminationPolicyDeserializer;
impl FleetExcessCapacityTerminationPolicyDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}

/// Serialize `FleetIdSet` contents to a `SignedRequest`.
struct FleetIdSetSerializer;
impl FleetIdSetSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct FleetIdentifierDeserializer;
impl FleetIdentifierDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a launch template and overrides.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct FleetLaunchTemplateConfig {
    /// <p>The launch template.</p>
    pub launch_template_specification: Option<FleetLaunchTemplateSpecification>,
    /// <p>Any parameters that you specify override the same parameters in the launch template.</p>
    pub overrides: Option<Vec<FleetLaunchTemplateOverrides>>,
}

struct FleetLaunchTemplateConfigDeserializer;
impl FleetLaunchTemplateConfigDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<FleetLaunchTemplateConfig, XmlParseError> {
        deserialize_elements::<_, FleetLaunchTemplateConfig, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "launchTemplateSpecification" => {
                        obj.launch_template_specification =
                            Some(FleetLaunchTemplateSpecificationDeserializer::deserialize(
                                "launchTemplateSpecification",
                                stack,
                            )?);
                    }
                    "overrides" => {
                        obj.overrides.get_or_insert(vec![]).extend(
                            FleetLaunchTemplateOverridesListDeserializer::deserialize(
                                "overrides",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct FleetLaunchTemplateConfigListDeserializer;
impl FleetLaunchTemplateConfigListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<FleetLaunchTemplateConfig>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(FleetLaunchTemplateConfigDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `FleetLaunchTemplateConfigListRequest` contents to a `SignedRequest`.
struct FleetLaunchTemplateConfigListRequestSerializer;
impl FleetLaunchTemplateConfigListRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<FleetLaunchTemplateConfigRequest>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            FleetLaunchTemplateConfigRequestSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes a launch template and overrides.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct FleetLaunchTemplateConfigRequest {
    /// <p>The launch template to use. You must specify either the launch template ID or launch template name in the request. </p>
    pub launch_template_specification: Option<FleetLaunchTemplateSpecificationRequest>,
    /// <p>Any parameters that you specify override the same parameters in the launch template.</p>
    pub overrides: Option<Vec<FleetLaunchTemplateOverridesRequest>>,
}

/// Serialize `FleetLaunchTemplateConfigRequest` contents to a `SignedRequest`.
struct FleetLaunchTemplateConfigRequestSerializer;
impl FleetLaunchTemplateConfigRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &FleetLaunchTemplateConfigRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.launch_template_specification {
            FleetLaunchTemplateSpecificationRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "LaunchTemplateSpecification"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.overrides {
            FleetLaunchTemplateOverridesListRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Overrides"),
                field_value,
            );
        }
    }
}

/// <p>Describes overrides for a launch template.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct FleetLaunchTemplateOverrides {
    /// <p>The Availability Zone in which to launch the instances.</p>
    pub availability_zone: Option<String>,
    /// <p>The instance type.</p>
    pub instance_type: Option<String>,
    /// <p>The maximum price per unit hour that you are willing to pay for a Spot Instance.</p>
    pub max_price: Option<String>,
    /// <p>The location where the instance launched, if applicable.</p>
    pub placement: Option<PlacementResponse>,
    /// <p>The priority for the launch template override. If <b>AllocationStrategy</b> is set to <code>prioritized</code>, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. Valid values are whole numbers starting at <code>0</code>. The lower the number, the higher the priority. If no number is set, the override has the lowest priority.</p>
    pub priority: Option<f64>,
    /// <p>The ID of the subnet in which to launch the instances.</p>
    pub subnet_id: Option<String>,
    /// <p>The number of units provided by the specified instance type.</p>
    pub weighted_capacity: Option<f64>,
}

struct FleetLaunchTemplateOverridesDeserializer;
impl FleetLaunchTemplateOverridesDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<FleetLaunchTemplateOverrides, XmlParseError> {
        deserialize_elements::<_, FleetLaunchTemplateOverrides, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "availabilityZone" => {
                        obj.availability_zone =
                            Some(StringDeserializer::deserialize("availabilityZone", stack)?);
                    }
                    "instanceType" => {
                        obj.instance_type = Some(InstanceTypeDeserializer::deserialize(
                            "instanceType",
                            stack,
                        )?);
                    }
                    "maxPrice" => {
                        obj.max_price = Some(StringDeserializer::deserialize("maxPrice", stack)?);
                    }
                    "placement" => {
                        obj.placement = Some(PlacementResponseDeserializer::deserialize(
                            "placement",
                            stack,
                        )?);
                    }
                    "priority" => {
                        obj.priority = Some(DoubleDeserializer::deserialize("priority", stack)?);
                    }
                    "subnetId" => {
                        obj.subnet_id = Some(StringDeserializer::deserialize("subnetId", stack)?);
                    }
                    "weightedCapacity" => {
                        obj.weighted_capacity =
                            Some(DoubleDeserializer::deserialize("weightedCapacity", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct FleetLaunchTemplateOverridesListDeserializer;
impl FleetLaunchTemplateOverridesListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<FleetLaunchTemplateOverrides>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(FleetLaunchTemplateOverridesDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `FleetLaunchTemplateOverridesListRequest` contents to a `SignedRequest`.
struct FleetLaunchTemplateOverridesListRequestSerializer;
impl FleetLaunchTemplateOverridesListRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<FleetLaunchTemplateOverridesRequest>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            FleetLaunchTemplateOverridesRequestSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes overrides for a launch template.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct FleetLaunchTemplateOverridesRequest {
    /// <p>The Availability Zone in which to launch the instances.</p>
    pub availability_zone: Option<String>,
    /// <p>The instance type.</p>
    pub instance_type: Option<String>,
    /// <p>The maximum price per unit hour that you are willing to pay for a Spot Instance.</p>
    pub max_price: Option<String>,
    /// <p>The location where the instance launched, if applicable.</p>
    pub placement: Option<Placement>,
    /// <p>The priority for the launch template override. If <b>AllocationStrategy</b> is set to <code>prioritized</code>, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. Valid values are whole numbers starting at <code>0</code>. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority.</p>
    pub priority: Option<f64>,
    /// <p>The ID of the subnet in which to launch the instances.</p>
    pub subnet_id: Option<String>,
    /// <p>The number of units provided by the specified instance type.</p>
    pub weighted_capacity: Option<f64>,
}

/// Serialize `FleetLaunchTemplateOverridesRequest` contents to a `SignedRequest`.
struct FleetLaunchTemplateOverridesRequestSerializer;
impl FleetLaunchTemplateOverridesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &FleetLaunchTemplateOverridesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.availability_zone {
            params.put(&format!("{}{}", prefix, "AvailabilityZone"), &field_value);
        }
        if let Some(ref field_value) = obj.instance_type {
            params.put(&format!("{}{}", prefix, "InstanceType"), &field_value);
        }
        if let Some(ref field_value) = obj.max_price {
            params.put(&format!("{}{}", prefix, "MaxPrice"), &field_value);
        }
        if let Some(ref field_value) = obj.placement {
            PlacementSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Placement"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.priority {
            params.put(&format!("{}{}", prefix, "Priority"), &field_value);
        }
        if let Some(ref field_value) = obj.subnet_id {
            params.put(&format!("{}{}", prefix, "SubnetId"), &field_value);
        }
        if let Some(ref field_value) = obj.weighted_capacity {
            params.put(&format!("{}{}", prefix, "WeightedCapacity"), &field_value);
        }
    }
}

/// <p>Describes a launch template.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct FleetLaunchTemplateSpecification {
    /// <p>The ID of the launch template. You must specify either a template ID or a template name.</p>
    pub launch_template_id: Option<String>,
    /// <p>The name of the launch template. You must specify either a template name or a template ID.</p>
    pub launch_template_name: Option<String>,
    /// <p>The version number of the launch template. You must specify a version number.</p>
    pub version: Option<String>,
}

struct FleetLaunchTemplateSpecificationDeserializer;
impl FleetLaunchTemplateSpecificationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<FleetLaunchTemplateSpecification, XmlParseError> {
        deserialize_elements::<_, FleetLaunchTemplateSpecification, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "launchTemplateId" => {
                        obj.launch_template_id =
                            Some(StringDeserializer::deserialize("launchTemplateId", stack)?);
                    }
                    "launchTemplateName" => {
                        obj.launch_template_name =
                            Some(LaunchTemplateNameDeserializer::deserialize(
                                "launchTemplateName",
                                stack,
                            )?);
                    }
                    "version" => {
                        obj.version = Some(StringDeserializer::deserialize("version", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}

/// Serialize `FleetLaunchTemplateSpecification` contents to a `SignedRequest`.
struct FleetLaunchTemplateSpecificationSerializer;
impl FleetLaunchTemplateSpecificationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &FleetLaunchTemplateSpecification) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.launch_template_id {
            params.put(&format!("{}{}", prefix, "LaunchTemplateId"), &field_value);
        }
        if let Some(ref field_value) = obj.launch_template_name {
            params.put(&format!("{}{}", prefix, "LaunchTemplateName"), &field_value);
        }
        if let Some(ref field_value) = obj.version {
            params.put(&format!("{}{}", prefix, "Version"), &field_value);
        }
    }
}

/// <p>The launch template to use. You must specify either the launch template ID or launch template name in the request. </p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct FleetLaunchTemplateSpecificationRequest {
    /// <p>The ID of the launch template.</p>
    pub launch_template_id: Option<String>,
    /// <p>The name of the launch template.</p>
    pub launch_template_name: Option<String>,
    /// <p>The version number of the launch template. </p>
    pub version: Option<String>,
}

/// Serialize `FleetLaunchTemplateSpecificationRequest` contents to a `SignedRequest`.
struct FleetLaunchTemplateSpecificationRequestSerializer;
impl FleetLaunchTemplateSpecificationRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &FleetLaunchTemplateSpecificationRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.launch_template_id {
            params.put(&format!("{}{}", prefix, "LaunchTemplateId"), &field_value);
        }
        if let Some(ref field_value) = obj.launch_template_name {
            params.put(&format!("{}{}", prefix, "LaunchTemplateName"), &field_value);
        }
        if let Some(ref field_value) = obj.version {
            params.put(&format!("{}{}", prefix, "Version"), &field_value);
        }
    }
}

struct FleetOnDemandAllocationStrategyDeserializer;
impl FleetOnDemandAllocationStrategyDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct FleetSetDeserializer;
impl FleetSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<FleetData>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(FleetDataDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct FleetStateCodeDeserializer;
impl FleetStateCodeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct FleetTypeDeserializer;
impl FleetTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct FloatDeserializer;
impl FloatDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<f32, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = f32::from_str(characters(stack)?.as_ref()).unwrap();
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a flow log.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct FlowLog {
    /// <p>The date and time the flow log was created.</p>
    pub creation_time: Option<String>,
    /// <p>Information about the error that occurred. <code>Rate limited</code> indicates that CloudWatch Logs throttling has been applied for one or more network interfaces, or that you've reached the limit on the number of log groups that you can create. <code>Access error</code> indicates that the IAM role associated with the flow log does not have sufficient permissions to publish to CloudWatch Logs. <code>Unknown error</code> indicates an internal error.</p>
    pub deliver_logs_error_message: Option<String>,
    /// <p>The ARN of the IAM role that posts logs to CloudWatch Logs.</p>
    pub deliver_logs_permission_arn: Option<String>,
    /// <p>The status of the logs delivery (<code>SUCCESS</code> | <code>FAILED</code>).</p>
    pub deliver_logs_status: Option<String>,
    /// <p>The flow log ID.</p>
    pub flow_log_id: Option<String>,
    /// <p>The status of the flow log (<code>ACTIVE</code>).</p>
    pub flow_log_status: Option<String>,
    /// <p>Specifies the destination to which the flow log data is published. Flow log data can be published to an CloudWatch Logs log group or an Amazon S3 bucket. If the flow log publishes to CloudWatch Logs, this element indicates the Amazon Resource Name (ARN) of the CloudWatch Logs log group to which the data is published. If the flow log publishes to Amazon S3, this element indicates the ARN of the Amazon S3 bucket to which the data is published.</p>
    pub log_destination: Option<String>,
    /// <p>Specifies the type of destination to which the flow log data is published. Flow log data can be published to CloudWatch Logs or Amazon S3.</p>
    pub log_destination_type: Option<String>,
    /// <p>The name of the flow log group.</p>
    pub log_group_name: Option<String>,
    /// <p>The ID of the resource on which the flow log was created.</p>
    pub resource_id: Option<String>,
    /// <p>The type of traffic captured for the flow log.</p>
    pub traffic_type: Option<String>,
}

struct FlowLogDeserializer;
impl FlowLogDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<FlowLog, XmlParseError> {
        deserialize_elements::<_, FlowLog, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "creationTime" => {
                    obj.creation_time =
                        Some(DateTimeDeserializer::deserialize("creationTime", stack)?);
                }
                "deliverLogsErrorMessage" => {
                    obj.deliver_logs_error_message = Some(StringDeserializer::deserialize(
                        "deliverLogsErrorMessage",
                        stack,
                    )?);
                }
                "deliverLogsPermissionArn" => {
                    obj.deliver_logs_permission_arn = Some(StringDeserializer::deserialize(
                        "deliverLogsPermissionArn",
                        stack,
                    )?);
                }
                "deliverLogsStatus" => {
                    obj.deliver_logs_status =
                        Some(StringDeserializer::deserialize("deliverLogsStatus", stack)?);
                }
                "flowLogId" => {
                    obj.flow_log_id = Some(StringDeserializer::deserialize("flowLogId", stack)?);
                }
                "flowLogStatus" => {
                    obj.flow_log_status =
                        Some(StringDeserializer::deserialize("flowLogStatus", stack)?);
                }
                "logDestination" => {
                    obj.log_destination =
                        Some(StringDeserializer::deserialize("logDestination", stack)?);
                }
                "logDestinationType" => {
                    obj.log_destination_type = Some(LogDestinationTypeDeserializer::deserialize(
                        "logDestinationType",
                        stack,
                    )?);
                }
                "logGroupName" => {
                    obj.log_group_name =
                        Some(StringDeserializer::deserialize("logGroupName", stack)?);
                }
                "resourceId" => {
                    obj.resource_id = Some(StringDeserializer::deserialize("resourceId", stack)?);
                }
                "trafficType" => {
                    obj.traffic_type =
                        Some(TrafficTypeDeserializer::deserialize("trafficType", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct FlowLogSetDeserializer;
impl FlowLogSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<FlowLog>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(FlowLogDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes an Amazon FPGA image (AFI).</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct FpgaImage {
    /// <p>The date and time the AFI was created.</p>
    pub create_time: Option<String>,
    /// <p>Indicates whether data retention support is enabled for the AFI.</p>
    pub data_retention_support: Option<bool>,
    /// <p>The description of the AFI.</p>
    pub description: Option<String>,
    /// <p>The global FPGA image identifier (AGFI ID).</p>
    pub fpga_image_global_id: Option<String>,
    /// <p>The FPGA image identifier (AFI ID).</p>
    pub fpga_image_id: Option<String>,
    /// <p>The name of the AFI.</p>
    pub name: Option<String>,
    /// <p>The alias of the AFI owner. Possible values include <code>self</code>, <code>amazon</code>, and <code>aws-marketplace</code>.</p>
    pub owner_alias: Option<String>,
    /// <p>The AWS account ID of the AFI owner.</p>
    pub owner_id: Option<String>,
    /// <p>Information about the PCI bus.</p>
    pub pci_id: Option<PciId>,
    /// <p>The product codes for the AFI.</p>
    pub product_codes: Option<Vec<ProductCode>>,
    /// <p>Indicates whether the AFI is public.</p>
    pub public: Option<bool>,
    /// <p>The version of the AWS Shell that was used to create the bitstream.</p>
    pub shell_version: Option<String>,
    /// <p>Information about the state of the AFI.</p>
    pub state: Option<FpgaImageState>,
    /// <p>Any tags assigned to the AFI.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The time of the most recent update to the AFI.</p>
    pub update_time: Option<String>,
}

struct FpgaImageDeserializer;
impl FpgaImageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<FpgaImage, XmlParseError> {
        deserialize_elements::<_, FpgaImage, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "createTime" => {
                    obj.create_time = Some(DateTimeDeserializer::deserialize("createTime", stack)?);
                }
                "dataRetentionSupport" => {
                    obj.data_retention_support = Some(BooleanDeserializer::deserialize(
                        "dataRetentionSupport",
                        stack,
                    )?);
                }
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "fpgaImageGlobalId" => {
                    obj.fpga_image_global_id =
                        Some(StringDeserializer::deserialize("fpgaImageGlobalId", stack)?);
                }
                "fpgaImageId" => {
                    obj.fpga_image_id =
                        Some(StringDeserializer::deserialize("fpgaImageId", stack)?);
                }
                "name" => {
                    obj.name = Some(StringDeserializer::deserialize("name", stack)?);
                }
                "ownerAlias" => {
                    obj.owner_alias = Some(StringDeserializer::deserialize("ownerAlias", stack)?);
                }
                "ownerId" => {
                    obj.owner_id = Some(StringDeserializer::deserialize("ownerId", stack)?);
                }
                "pciId" => {
                    obj.pci_id = Some(PciIdDeserializer::deserialize("pciId", stack)?);
                }
                "productCodes" => {
                    obj.product_codes.get_or_insert(vec![]).extend(
                        ProductCodeListDeserializer::deserialize("productCodes", stack)?,
                    );
                }
                "public" => {
                    obj.public = Some(BooleanDeserializer::deserialize("public", stack)?);
                }
                "shellVersion" => {
                    obj.shell_version =
                        Some(StringDeserializer::deserialize("shellVersion", stack)?);
                }
                "state" => {
                    obj.state = Some(FpgaImageStateDeserializer::deserialize("state", stack)?);
                }
                "tags" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tags", stack)?);
                }
                "updateTime" => {
                    obj.update_time = Some(DateTimeDeserializer::deserialize("updateTime", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes an Amazon FPGA image (AFI) attribute.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct FpgaImageAttribute {
    /// <p>The description of the AFI.</p>
    pub description: Option<String>,
    /// <p>The ID of the AFI.</p>
    pub fpga_image_id: Option<String>,
    /// <p>The load permissions.</p>
    pub load_permissions: Option<Vec<LoadPermission>>,
    /// <p>The name of the AFI.</p>
    pub name: Option<String>,
    /// <p>The product codes.</p>
    pub product_codes: Option<Vec<ProductCode>>,
}

struct FpgaImageAttributeDeserializer;
impl FpgaImageAttributeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<FpgaImageAttribute, XmlParseError> {
        deserialize_elements::<_, FpgaImageAttribute, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "fpgaImageId" => {
                    obj.fpga_image_id =
                        Some(StringDeserializer::deserialize("fpgaImageId", stack)?);
                }
                "loadPermissions" => {
                    obj.load_permissions.get_or_insert(vec![]).extend(
                        LoadPermissionListDeserializer::deserialize("loadPermissions", stack)?,
                    );
                }
                "name" => {
                    obj.name = Some(StringDeserializer::deserialize("name", stack)?);
                }
                "productCodes" => {
                    obj.product_codes.get_or_insert(vec![]).extend(
                        ProductCodeListDeserializer::deserialize("productCodes", stack)?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `FpgaImageIdList` contents to a `SignedRequest`.
struct FpgaImageIdListSerializer;
impl FpgaImageIdListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct FpgaImageListDeserializer;
impl FpgaImageListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<FpgaImage>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(FpgaImageDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the state of the bitstream generation process for an Amazon FPGA image (AFI).</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct FpgaImageState {
    /// <p><p>The state. The following are the possible values:</p> <ul> <li> <p> <code>pending</code> - AFI bitstream generation is in progress.</p> </li> <li> <p> <code>available</code> - The AFI is available for use.</p> </li> <li> <p> <code>failed</code> - AFI bitstream generation failed.</p> </li> <li> <p> <code>unavailable</code> - The AFI is no longer available for use.</p> </li> </ul></p>
    pub code: Option<String>,
    /// <p>If the state is <code>failed</code>, this is the error message.</p>
    pub message: Option<String>,
}

struct FpgaImageStateDeserializer;
impl FpgaImageStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<FpgaImageState, XmlParseError> {
        deserialize_elements::<_, FpgaImageState, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "code" => {
                    obj.code = Some(FpgaImageStateCodeDeserializer::deserialize("code", stack)?);
                }
                "message" => {
                    obj.message = Some(StringDeserializer::deserialize("message", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct FpgaImageStateCodeDeserializer;
impl FpgaImageStateCodeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct GatewayTypeDeserializer;
impl GatewayTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct GetConsoleOutputRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the instance.</p>
    pub instance_id: String,
    /// <p>When enabled, retrieves the latest console output for the instance.</p> <p>Default: disabled (<code>false</code>)</p>
    pub latest: Option<bool>,
}

/// Serialize `GetConsoleOutputRequest` contents to a `SignedRequest`.
struct GetConsoleOutputRequestSerializer;
impl GetConsoleOutputRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetConsoleOutputRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "InstanceId"), &obj.instance_id);
        if let Some(ref field_value) = obj.latest {
            params.put(&format!("{}{}", prefix, "Latest"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct GetConsoleOutputResult {
    /// <p>The ID of the instance.</p>
    pub instance_id: Option<String>,
    /// <p>The console output, base64-encoded. If you are using a command line tool, the tool decodes the output for you.</p>
    pub output: Option<String>,
    /// <p>The time at which the output was last updated.</p>
    pub timestamp: Option<String>,
}

struct GetConsoleOutputResultDeserializer;
impl GetConsoleOutputResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<GetConsoleOutputResult, XmlParseError> {
        deserialize_elements::<_, GetConsoleOutputResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "instanceId" => {
                    obj.instance_id = Some(StringDeserializer::deserialize("instanceId", stack)?);
                }
                "output" => {
                    obj.output = Some(StringDeserializer::deserialize("output", stack)?);
                }
                "timestamp" => {
                    obj.timestamp = Some(DateTimeDeserializer::deserialize("timestamp", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct GetConsoleScreenshotRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the instance.</p>
    pub instance_id: String,
    /// <p>When set to <code>true</code>, acts as keystroke input and wakes up an instance that's in standby or "sleep" mode.</p>
    pub wake_up: Option<bool>,
}

/// Serialize `GetConsoleScreenshotRequest` contents to a `SignedRequest`.
struct GetConsoleScreenshotRequestSerializer;
impl GetConsoleScreenshotRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetConsoleScreenshotRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "InstanceId"), &obj.instance_id);
        if let Some(ref field_value) = obj.wake_up {
            params.put(&format!("{}{}", prefix, "WakeUp"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct GetConsoleScreenshotResult {
    /// <p>The data that comprises the image.</p>
    pub image_data: Option<String>,
    /// <p>The ID of the instance.</p>
    pub instance_id: Option<String>,
}

struct GetConsoleScreenshotResultDeserializer;
impl GetConsoleScreenshotResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<GetConsoleScreenshotResult, XmlParseError> {
        deserialize_elements::<_, GetConsoleScreenshotResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "imageData" => {
                        obj.image_data = Some(StringDeserializer::deserialize("imageData", stack)?);
                    }
                    "instanceId" => {
                        obj.instance_id =
                            Some(StringDeserializer::deserialize("instanceId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct GetEbsDefaultKmsKeyIdRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `GetEbsDefaultKmsKeyIdRequest` contents to a `SignedRequest`.
struct GetEbsDefaultKmsKeyIdRequestSerializer;
impl GetEbsDefaultKmsKeyIdRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetEbsDefaultKmsKeyIdRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct GetEbsDefaultKmsKeyIdResult {
    /// <p>The full ARN of the default CMK that your account uses to encrypt an EBS volume when no CMK is specified in the API call that creates the volume.</p>
    pub kms_key_id: Option<String>,
}

struct GetEbsDefaultKmsKeyIdResultDeserializer;
impl GetEbsDefaultKmsKeyIdResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<GetEbsDefaultKmsKeyIdResult, XmlParseError> {
        deserialize_elements::<_, GetEbsDefaultKmsKeyIdResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "kmsKeyId" => {
                        obj.kms_key_id = Some(StringDeserializer::deserialize("kmsKeyId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct GetEbsEncryptionByDefaultRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `GetEbsEncryptionByDefaultRequest` contents to a `SignedRequest`.
struct GetEbsEncryptionByDefaultRequestSerializer;
impl GetEbsEncryptionByDefaultRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetEbsEncryptionByDefaultRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct GetEbsEncryptionByDefaultResult {
    /// <p>Indicates whether default encryption for EBS volumes is enabled or disabled.</p>
    pub ebs_encryption_by_default: Option<bool>,
}

struct GetEbsEncryptionByDefaultResultDeserializer;
impl GetEbsEncryptionByDefaultResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<GetEbsEncryptionByDefaultResult, XmlParseError> {
        deserialize_elements::<_, GetEbsEncryptionByDefaultResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "ebsEncryptionByDefault" => {
                        obj.ebs_encryption_by_default = Some(BooleanDeserializer::deserialize(
                            "ebsEncryptionByDefault",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct GetHostReservationPurchasePreviewRequest {
    /// <p>The IDs of the Dedicated Hosts with which the reservation is associated.</p>
    pub host_id_set: Vec<String>,
    /// <p>The offering ID of the reservation.</p>
    pub offering_id: String,
}

/// Serialize `GetHostReservationPurchasePreviewRequest` contents to a `SignedRequest`.
struct GetHostReservationPurchasePreviewRequestSerializer;
impl GetHostReservationPurchasePreviewRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetHostReservationPurchasePreviewRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        RequestHostIdSetSerializer::serialize(
            params,
            &format!("{}{}", prefix, "HostIdSet"),
            &obj.host_id_set,
        );
        params.put(&format!("{}{}", prefix, "OfferingId"), &obj.offering_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct GetHostReservationPurchasePreviewResult {
    /// <p>The currency in which the <code>totalUpfrontPrice</code> and <code>totalHourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
    pub currency_code: Option<String>,
    /// <p>The purchase information of the Dedicated Host reservation and the Dedicated Hosts associated with it.</p>
    pub purchase: Option<Vec<Purchase>>,
    /// <p>The potential total hourly price of the reservation per hour.</p>
    pub total_hourly_price: Option<String>,
    /// <p>The potential total upfront price. This is billed immediately.</p>
    pub total_upfront_price: Option<String>,
}

struct GetHostReservationPurchasePreviewResultDeserializer;
impl GetHostReservationPurchasePreviewResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<GetHostReservationPurchasePreviewResult, XmlParseError> {
        deserialize_elements::<_, GetHostReservationPurchasePreviewResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "currencyCode" => {
                        obj.currency_code = Some(CurrencyCodeValuesDeserializer::deserialize(
                            "currencyCode",
                            stack,
                        )?);
                    }
                    "purchase" => {
                        obj.purchase
                            .get_or_insert(vec![])
                            .extend(PurchaseSetDeserializer::deserialize("purchase", stack)?);
                    }
                    "totalHourlyPrice" => {
                        obj.total_hourly_price =
                            Some(StringDeserializer::deserialize("totalHourlyPrice", stack)?);
                    }
                    "totalUpfrontPrice" => {
                        obj.total_upfront_price =
                            Some(StringDeserializer::deserialize("totalUpfrontPrice", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct GetLaunchTemplateDataRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the instance.</p>
    pub instance_id: String,
}

/// Serialize `GetLaunchTemplateDataRequest` contents to a `SignedRequest`.
struct GetLaunchTemplateDataRequestSerializer;
impl GetLaunchTemplateDataRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetLaunchTemplateDataRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "InstanceId"), &obj.instance_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct GetLaunchTemplateDataResult {
    /// <p>The instance data.</p>
    pub launch_template_data: Option<ResponseLaunchTemplateData>,
}

struct GetLaunchTemplateDataResultDeserializer;
impl GetLaunchTemplateDataResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<GetLaunchTemplateDataResult, XmlParseError> {
        deserialize_elements::<_, GetLaunchTemplateDataResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "launchTemplateData" => {
                        obj.launch_template_data =
                            Some(ResponseLaunchTemplateDataDeserializer::deserialize(
                                "launchTemplateData",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct GetPasswordDataRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the Windows instance.</p>
    pub instance_id: String,
}

/// Serialize `GetPasswordDataRequest` contents to a `SignedRequest`.
struct GetPasswordDataRequestSerializer;
impl GetPasswordDataRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetPasswordDataRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "InstanceId"), &obj.instance_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct GetPasswordDataResult {
    /// <p>The ID of the Windows instance.</p>
    pub instance_id: Option<String>,
    /// <p>The password of the instance. Returns an empty string if the password is not available.</p>
    pub password_data: Option<String>,
    /// <p>The time the data was last updated.</p>
    pub timestamp: Option<String>,
}

struct GetPasswordDataResultDeserializer;
impl GetPasswordDataResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<GetPasswordDataResult, XmlParseError> {
        deserialize_elements::<_, GetPasswordDataResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "instanceId" => {
                    obj.instance_id = Some(StringDeserializer::deserialize("instanceId", stack)?);
                }
                "passwordData" => {
                    obj.password_data =
                        Some(StringDeserializer::deserialize("passwordData", stack)?);
                }
                "timestamp" => {
                    obj.timestamp = Some(DateTimeDeserializer::deserialize("timestamp", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Contains the parameters for GetReservedInstanceExchangeQuote.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct GetReservedInstancesExchangeQuoteRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The IDs of the Convertible Reserved Instances to exchange.</p>
    pub reserved_instance_ids: Vec<String>,
    /// <p>The configuration of the target Convertible Reserved Instance to exchange for your current Convertible Reserved Instances.</p>
    pub target_configurations: Option<Vec<TargetConfigurationRequest>>,
}

/// Serialize `GetReservedInstancesExchangeQuoteRequest` contents to a `SignedRequest`.
struct GetReservedInstancesExchangeQuoteRequestSerializer;
impl GetReservedInstancesExchangeQuoteRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GetReservedInstancesExchangeQuoteRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        ReservedInstanceIdSetSerializer::serialize(
            params,
            &format!("{}{}", prefix, "ReservedInstanceId"),
            &obj.reserved_instance_ids,
        );
        if let Some(ref field_value) = obj.target_configurations {
            TargetConfigurationRequestSetSerializer::serialize(
                params,
                &format!("{}{}", prefix, "TargetConfiguration"),
                field_value,
            );
        }
    }
}

/// <p>Contains the output of GetReservedInstancesExchangeQuote.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct GetReservedInstancesExchangeQuoteResult {
    /// <p>The currency of the transaction.</p>
    pub currency_code: Option<String>,
    /// <p>If <code>true</code>, the exchange is valid. If <code>false</code>, the exchange cannot be completed.</p>
    pub is_valid_exchange: Option<bool>,
    /// <p>The new end date of the reservation term.</p>
    pub output_reserved_instances_will_expire_at: Option<String>,
    /// <p>The total true upfront charge for the exchange.</p>
    pub payment_due: Option<String>,
    /// <p>The cost associated with the Reserved Instance.</p>
    pub reserved_instance_value_rollup: Option<ReservationValue>,
    /// <p>The configuration of your Convertible Reserved Instances.</p>
    pub reserved_instance_value_set: Option<Vec<ReservedInstanceReservationValue>>,
    /// <p>The cost associated with the Reserved Instance.</p>
    pub target_configuration_value_rollup: Option<ReservationValue>,
    /// <p>The values of the target Convertible Reserved Instances.</p>
    pub target_configuration_value_set: Option<Vec<TargetReservationValue>>,
    /// <p>Describes the reason why the exchange cannot be completed.</p>
    pub validation_failure_reason: Option<String>,
}

struct GetReservedInstancesExchangeQuoteResultDeserializer;
impl GetReservedInstancesExchangeQuoteResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<GetReservedInstancesExchangeQuoteResult, XmlParseError> {
        deserialize_elements::<_, GetReservedInstancesExchangeQuoteResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "currencyCode" => {
                        obj.currency_code =
                            Some(StringDeserializer::deserialize("currencyCode", stack)?);
                    }
                    "isValidExchange" => {
                        obj.is_valid_exchange =
                            Some(BooleanDeserializer::deserialize("isValidExchange", stack)?);
                    }
                    "outputReservedInstancesWillExpireAt" => {
                        obj.output_reserved_instances_will_expire_at =
                            Some(DateTimeDeserializer::deserialize(
                                "outputReservedInstancesWillExpireAt",
                                stack,
                            )?);
                    }
                    "paymentDue" => {
                        obj.payment_due =
                            Some(StringDeserializer::deserialize("paymentDue", stack)?);
                    }
                    "reservedInstanceValueRollup" => {
                        obj.reserved_instance_value_rollup =
                            Some(ReservationValueDeserializer::deserialize(
                                "reservedInstanceValueRollup",
                                stack,
                            )?);
                    }
                    "reservedInstanceValueSet" => {
                        obj.reserved_instance_value_set
                            .get_or_insert(vec![])
                            .extend(
                                ReservedInstanceReservationValueSetDeserializer::deserialize(
                                    "reservedInstanceValueSet",
                                    stack,
                                )?,
                            );
                    }
                    "targetConfigurationValueRollup" => {
                        obj.target_configuration_value_rollup =
                            Some(ReservationValueDeserializer::deserialize(
                                "targetConfigurationValueRollup",
                                stack,
                            )?);
                    }
                    "targetConfigurationValueSet" => {
                        obj.target_configuration_value_set
                            .get_or_insert(vec![])
                            .extend(TargetReservationValueSetDeserializer::deserialize(
                                "targetConfigurationValueSet",
                                stack,
                            )?);
                    }
                    "validationFailureReason" => {
                        obj.validation_failure_reason = Some(StringDeserializer::deserialize(
                            "validationFailureReason",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct GetTransitGatewayAttachmentPropagationsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>transit-gateway-route-table-id</code> - The ID of the transit gateway route table.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>The ID of the attachment.</p>
    pub transit_gateway_attachment_id: String,
}

/// Serialize `GetTransitGatewayAttachmentPropagationsRequest` contents to a `SignedRequest`.
struct GetTransitGatewayAttachmentPropagationsRequestSerializer;
impl GetTransitGatewayAttachmentPropagationsRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &GetTransitGatewayAttachmentPropagationsRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TransitGatewayAttachmentId"),
            &obj.transit_gateway_attachment_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct GetTransitGatewayAttachmentPropagationsResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about the propagation route tables.</p>
    pub transit_gateway_attachment_propagations: Option<Vec<TransitGatewayAttachmentPropagation>>,
}

struct GetTransitGatewayAttachmentPropagationsResultDeserializer;
impl GetTransitGatewayAttachmentPropagationsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<GetTransitGatewayAttachmentPropagationsResult, XmlParseError> {
        deserialize_elements::<_, GetTransitGatewayAttachmentPropagationsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "transitGatewayAttachmentPropagations" => {
                        obj.transit_gateway_attachment_propagations
                            .get_or_insert(vec![])
                            .extend(
                                TransitGatewayAttachmentPropagationListDeserializer::deserialize(
                                    "transitGatewayAttachmentPropagations",
                                    stack,
                                )?,
                            );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct GetTransitGatewayRouteTableAssociationsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>resource-id</code> - The ID of the resource.</p> </li> <li> <p> <code>resource-type</code> - The resource type (<code>vpc</code> | <code>vpn</code>).</p> </li> <li> <p> <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>The ID of the transit gateway route table.</p>
    pub transit_gateway_route_table_id: String,
}

/// Serialize `GetTransitGatewayRouteTableAssociationsRequest` contents to a `SignedRequest`.
struct GetTransitGatewayRouteTableAssociationsRequestSerializer;
impl GetTransitGatewayRouteTableAssociationsRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &GetTransitGatewayRouteTableAssociationsRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TransitGatewayRouteTableId"),
            &obj.transit_gateway_route_table_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct GetTransitGatewayRouteTableAssociationsResult {
    /// <p>Information about the associations.</p>
    pub associations: Option<Vec<TransitGatewayRouteTableAssociation>>,
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
}

struct GetTransitGatewayRouteTableAssociationsResultDeserializer;
impl GetTransitGatewayRouteTableAssociationsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<GetTransitGatewayRouteTableAssociationsResult, XmlParseError> {
        deserialize_elements::<_, GetTransitGatewayRouteTableAssociationsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "associations" => {
                        obj.associations.get_or_insert(vec![]).extend(
                            TransitGatewayRouteTableAssociationListDeserializer::deserialize(
                                "associations",
                                stack,
                            )?,
                        );
                    }
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct GetTransitGatewayRouteTablePropagationsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>resource-id</code> - The ID of the resource.</p> </li> <li> <p> <code>resource-type</code> - The resource type (<code>vpc</code> | <code>vpn</code>).</p> </li> <li> <p> <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p> </li> </ul></p>
    pub filters: Option<Vec<Filter>>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    pub max_results: Option<i64>,
    /// <p>The token for the next page of results.</p>
    pub next_token: Option<String>,
    /// <p>The ID of the transit gateway route table.</p>
    pub transit_gateway_route_table_id: String,
}

/// Serialize `GetTransitGatewayRouteTablePropagationsRequest` contents to a `SignedRequest`.
struct GetTransitGatewayRouteTablePropagationsRequestSerializer;
impl GetTransitGatewayRouteTablePropagationsRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &GetTransitGatewayRouteTablePropagationsRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.filters {
            FilterListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Filter"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        if let Some(ref field_value) = obj.next_token {
            params.put(&format!("{}{}", prefix, "NextToken"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TransitGatewayRouteTableId"),
            &obj.transit_gateway_route_table_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct GetTransitGatewayRouteTablePropagationsResult {
    /// <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: Option<String>,
    /// <p>Information about the route table propagations.</p>
    pub transit_gateway_route_table_propagations: Option<Vec<TransitGatewayRouteTablePropagation>>,
}

struct GetTransitGatewayRouteTablePropagationsResultDeserializer;
impl GetTransitGatewayRouteTablePropagationsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<GetTransitGatewayRouteTablePropagationsResult, XmlParseError> {
        deserialize_elements::<_, GetTransitGatewayRouteTablePropagationsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "nextToken" => {
                        obj.next_token = Some(StringDeserializer::deserialize("nextToken", stack)?);
                    }
                    "transitGatewayRouteTablePropagations" => {
                        obj.transit_gateway_route_table_propagations
                            .get_or_insert(vec![])
                            .extend(
                                TransitGatewayRouteTablePropagationListDeserializer::deserialize(
                                    "transitGatewayRouteTablePropagations",
                                    stack,
                                )?,
                            );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct GroupIdStringListDeserializer;
impl GroupIdStringListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "groupId" {
                obj.push(StringDeserializer::deserialize("groupId", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `GroupIdStringList` contents to a `SignedRequest`.
struct GroupIdStringListSerializer;
impl GroupIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Describes a security group.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct GroupIdentifier {
    /// <p>The ID of the security group.</p>
    pub group_id: Option<String>,
    /// <p>The name of the security group.</p>
    pub group_name: Option<String>,
}

struct GroupIdentifierDeserializer;
impl GroupIdentifierDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<GroupIdentifier, XmlParseError> {
        deserialize_elements::<_, GroupIdentifier, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "groupId" => {
                    obj.group_id = Some(StringDeserializer::deserialize("groupId", stack)?);
                }
                "groupName" => {
                    obj.group_name = Some(StringDeserializer::deserialize("groupName", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `GroupIdentifier` contents to a `SignedRequest`.
struct GroupIdentifierSerializer;
impl GroupIdentifierSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &GroupIdentifier) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.group_id {
            params.put(&format!("{}{}", prefix, "GroupId"), &field_value);
        }
        if let Some(ref field_value) = obj.group_name {
            params.put(&format!("{}{}", prefix, "GroupName"), &field_value);
        }
    }
}

struct GroupIdentifierListDeserializer;
impl GroupIdentifierListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<GroupIdentifier>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(GroupIdentifierDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `GroupIdentifierList` contents to a `SignedRequest`.
struct GroupIdentifierListSerializer;
impl GroupIdentifierListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<GroupIdentifier>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            GroupIdentifierSerializer::serialize(params, &key, obj);
        }
    }
}

struct GroupIdentifierSetDeserializer;
impl GroupIdentifierSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<SecurityGroupIdentifier>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(SecurityGroupIdentifierDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `GroupIds` contents to a `SignedRequest`.
struct GroupIdsSerializer;
impl GroupIdsSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// Serialize `GroupNameStringList` contents to a `SignedRequest`.
struct GroupNameStringListSerializer;
impl GroupNameStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Indicates whether your instance is configured for hibernation. This parameter is valid only if the instance meets the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites">hibernation prerequisites</a>. Hibernation is currently supported only for Amazon Linux. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct HibernationOptions {
    /// <p>If this parameter is set to <code>true</code>, your instance is enabled for hibernation; otherwise, it is not enabled for hibernation.</p>
    pub configured: Option<bool>,
}

struct HibernationOptionsDeserializer;
impl HibernationOptionsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<HibernationOptions, XmlParseError> {
        deserialize_elements::<_, HibernationOptions, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "configured" => {
                    obj.configured = Some(BooleanDeserializer::deserialize("configured", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Indicates whether your instance is configured for hibernation. This parameter is valid only if the instance meets the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites">hibernation prerequisites</a>. Hibernation is currently supported only for Amazon Linux. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct HibernationOptionsRequest {
    /// <p>If you set this parameter to <code>true</code>, your instance is enabled for hibernation.</p> <p>Default: <code>false</code> </p>
    pub configured: Option<bool>,
}

/// Serialize `HibernationOptionsRequest` contents to a `SignedRequest`.
struct HibernationOptionsRequestSerializer;
impl HibernationOptionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &HibernationOptionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.configured {
            params.put(&format!("{}{}", prefix, "Configured"), &field_value);
        }
    }
}

/// <p>Describes an event in the history of the Spot Fleet request.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct HistoryRecord {
    /// <p>Information about the event.</p>
    pub event_information: Option<EventInformation>,
    /// <p><p>The event type.</p> <ul> <li> <p> <code>error</code> - An error with the Spot Fleet request.</p> </li> <li> <p> <code>fleetRequestChange</code> - A change in the status or configuration of the Spot Fleet request.</p> </li> <li> <p> <code>instanceChange</code> - An instance was launched or terminated.</p> </li> <li> <p> <code>Information</code> - An informational event.</p> </li> </ul></p>
    pub event_type: Option<String>,
    /// <p>The date and time of the event, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub timestamp: Option<String>,
}

struct HistoryRecordDeserializer;
impl HistoryRecordDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<HistoryRecord, XmlParseError> {
        deserialize_elements::<_, HistoryRecord, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "eventInformation" => {
                    obj.event_information = Some(EventInformationDeserializer::deserialize(
                        "eventInformation",
                        stack,
                    )?);
                }
                "eventType" => {
                    obj.event_type = Some(EventTypeDeserializer::deserialize("eventType", stack)?);
                }
                "timestamp" => {
                    obj.timestamp = Some(DateTimeDeserializer::deserialize("timestamp", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes an event in the history of an EC2 Fleet.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct HistoryRecordEntry {
    /// <p>Information about the event.</p>
    pub event_information: Option<EventInformation>,
    /// <p>The event type.</p>
    pub event_type: Option<String>,
    /// <p>The date and time of the event, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub timestamp: Option<String>,
}

struct HistoryRecordEntryDeserializer;
impl HistoryRecordEntryDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<HistoryRecordEntry, XmlParseError> {
        deserialize_elements::<_, HistoryRecordEntry, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "eventInformation" => {
                    obj.event_information = Some(EventInformationDeserializer::deserialize(
                        "eventInformation",
                        stack,
                    )?);
                }
                "eventType" => {
                    obj.event_type =
                        Some(FleetEventTypeDeserializer::deserialize("eventType", stack)?);
                }
                "timestamp" => {
                    obj.timestamp = Some(DateTimeDeserializer::deserialize("timestamp", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct HistoryRecordSetDeserializer;
impl HistoryRecordSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<HistoryRecordEntry>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(HistoryRecordEntryDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct HistoryRecordsDeserializer;
impl HistoryRecordsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<HistoryRecord>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(HistoryRecordDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the properties of the Dedicated Host.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct Host {
    /// <p>The time that the Dedicated Host was allocated.</p>
    pub allocation_time: Option<String>,
    /// <p>Whether auto-placement is on or off.</p>
    pub auto_placement: Option<String>,
    /// <p>The Availability Zone of the Dedicated Host.</p>
    pub availability_zone: Option<String>,
    /// <p>The number of new instances that can be launched onto the Dedicated Host.</p>
    pub available_capacity: Option<AvailableCapacity>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p>The ID of the Dedicated Host.</p>
    pub host_id: Option<String>,
    /// <p>The hardware specifications of the Dedicated Host.</p>
    pub host_properties: Option<HostProperties>,
    /// <p>Indicates whether host recovery is enabled or disabled for the Dedicated Host.</p>
    pub host_recovery: Option<String>,
    /// <p>The reservation ID of the Dedicated Host. This returns a <code>null</code> response if the Dedicated Host doesn't have an associated reservation.</p>
    pub host_reservation_id: Option<String>,
    /// <p>The IDs and instance type that are currently running on the Dedicated Host.</p>
    pub instances: Option<Vec<HostInstance>>,
    /// <p>The time that the Dedicated Host was released.</p>
    pub release_time: Option<String>,
    /// <p>The Dedicated Host's state.</p>
    pub state: Option<String>,
    /// <p>Any tags assigned to the Dedicated Host.</p>
    pub tags: Option<Vec<Tag>>,
}

struct HostDeserializer;
impl HostDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<Host, XmlParseError> {
        deserialize_elements::<_, Host, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "allocationTime" => {
                    obj.allocation_time =
                        Some(DateTimeDeserializer::deserialize("allocationTime", stack)?);
                }
                "autoPlacement" => {
                    obj.auto_placement = Some(AutoPlacementDeserializer::deserialize(
                        "autoPlacement",
                        stack,
                    )?);
                }
                "availabilityZone" => {
                    obj.availability_zone =
                        Some(StringDeserializer::deserialize("availabilityZone", stack)?);
                }
                "availableCapacity" => {
                    obj.available_capacity = Some(AvailableCapacityDeserializer::deserialize(
                        "availableCapacity",
                        stack,
                    )?);
                }
                "clientToken" => {
                    obj.client_token = Some(StringDeserializer::deserialize("clientToken", stack)?);
                }
                "hostId" => {
                    obj.host_id = Some(StringDeserializer::deserialize("hostId", stack)?);
                }
                "hostProperties" => {
                    obj.host_properties = Some(HostPropertiesDeserializer::deserialize(
                        "hostProperties",
                        stack,
                    )?);
                }
                "hostRecovery" => {
                    obj.host_recovery = Some(HostRecoveryDeserializer::deserialize(
                        "hostRecovery",
                        stack,
                    )?);
                }
                "hostReservationId" => {
                    obj.host_reservation_id =
                        Some(StringDeserializer::deserialize("hostReservationId", stack)?);
                }
                "instances" => {
                    obj.instances.get_or_insert(vec![]).extend(
                        HostInstanceListDeserializer::deserialize("instances", stack)?,
                    );
                }
                "releaseTime" => {
                    obj.release_time =
                        Some(DateTimeDeserializer::deserialize("releaseTime", stack)?);
                }
                "state" => {
                    obj.state = Some(AllocationStateDeserializer::deserialize("state", stack)?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes an instance running on a Dedicated Host.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct HostInstance {
    /// <p>the IDs of instances that are running on the Dedicated Host.</p>
    pub instance_id: Option<String>,
    /// <p>The instance type size (for example, <code>m3.medium</code>) of the running instance.</p>
    pub instance_type: Option<String>,
}

struct HostInstanceDeserializer;
impl HostInstanceDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<HostInstance, XmlParseError> {
        deserialize_elements::<_, HostInstance, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "instanceId" => {
                    obj.instance_id = Some(StringDeserializer::deserialize("instanceId", stack)?);
                }
                "instanceType" => {
                    obj.instance_type =
                        Some(StringDeserializer::deserialize("instanceType", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct HostInstanceListDeserializer;
impl HostInstanceListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<HostInstance>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(HostInstanceDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct HostListDeserializer;
impl HostListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<Host>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(HostDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Details about the Dedicated Host Reservation offering.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct HostOffering {
    /// <p>The currency of the offering.</p>
    pub currency_code: Option<String>,
    /// <p>The duration of the offering (in seconds).</p>
    pub duration: Option<i64>,
    /// <p>The hourly price of the offering.</p>
    pub hourly_price: Option<String>,
    /// <p>The instance family of the offering.</p>
    pub instance_family: Option<String>,
    /// <p>The ID of the offering.</p>
    pub offering_id: Option<String>,
    /// <p>The available payment option.</p>
    pub payment_option: Option<String>,
    /// <p>The upfront price of the offering. Does not apply to No Upfront offerings.</p>
    pub upfront_price: Option<String>,
}

struct HostOfferingDeserializer;
impl HostOfferingDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<HostOffering, XmlParseError> {
        deserialize_elements::<_, HostOffering, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "currencyCode" => {
                    obj.currency_code = Some(CurrencyCodeValuesDeserializer::deserialize(
                        "currencyCode",
                        stack,
                    )?);
                }
                "duration" => {
                    obj.duration = Some(IntegerDeserializer::deserialize("duration", stack)?);
                }
                "hourlyPrice" => {
                    obj.hourly_price = Some(StringDeserializer::deserialize("hourlyPrice", stack)?);
                }
                "instanceFamily" => {
                    obj.instance_family =
                        Some(StringDeserializer::deserialize("instanceFamily", stack)?);
                }
                "offeringId" => {
                    obj.offering_id = Some(StringDeserializer::deserialize("offeringId", stack)?);
                }
                "paymentOption" => {
                    obj.payment_option = Some(PaymentOptionDeserializer::deserialize(
                        "paymentOption",
                        stack,
                    )?);
                }
                "upfrontPrice" => {
                    obj.upfront_price =
                        Some(StringDeserializer::deserialize("upfrontPrice", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct HostOfferingSetDeserializer;
impl HostOfferingSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<HostOffering>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(HostOfferingDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes properties of a Dedicated Host.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct HostProperties {
    /// <p>The number of cores on the Dedicated Host.</p>
    pub cores: Option<i64>,
    /// <p>The instance type size that the Dedicated Host supports (for example, <code>m3.medium</code>).</p>
    pub instance_type: Option<String>,
    /// <p>The number of sockets on the Dedicated Host.</p>
    pub sockets: Option<i64>,
    /// <p>The number of vCPUs on the Dedicated Host.</p>
    pub total_v_cpus: Option<i64>,
}

struct HostPropertiesDeserializer;
impl HostPropertiesDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<HostProperties, XmlParseError> {
        deserialize_elements::<_, HostProperties, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "cores" => {
                    obj.cores = Some(IntegerDeserializer::deserialize("cores", stack)?);
                }
                "instanceType" => {
                    obj.instance_type =
                        Some(StringDeserializer::deserialize("instanceType", stack)?);
                }
                "sockets" => {
                    obj.sockets = Some(IntegerDeserializer::deserialize("sockets", stack)?);
                }
                "totalVCpus" => {
                    obj.total_v_cpus = Some(IntegerDeserializer::deserialize("totalVCpus", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct HostRecoveryDeserializer;
impl HostRecoveryDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Details about the Dedicated Host Reservation and associated Dedicated Hosts.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct HostReservation {
    /// <p>The number of Dedicated Hosts the reservation is associated with.</p>
    pub count: Option<i64>,
    /// <p>The currency in which the <code>upfrontPrice</code> and <code>hourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
    pub currency_code: Option<String>,
    /// <p>The length of the reservation's term, specified in seconds. Can be <code>31536000 (1 year)</code> | <code>94608000 (3 years)</code>.</p>
    pub duration: Option<i64>,
    /// <p>The date and time that the reservation ends.</p>
    pub end: Option<String>,
    /// <p>The IDs of the Dedicated Hosts associated with the reservation.</p>
    pub host_id_set: Option<Vec<String>>,
    /// <p>The ID of the reservation that specifies the associated Dedicated Hosts.</p>
    pub host_reservation_id: Option<String>,
    /// <p>The hourly price of the reservation.</p>
    pub hourly_price: Option<String>,
    /// <p>The instance family of the Dedicated Host Reservation. The instance family on the Dedicated Host must be the same in order for it to benefit from the reservation.</p>
    pub instance_family: Option<String>,
    /// <p>The ID of the reservation. This remains the same regardless of which Dedicated Hosts are associated with it.</p>
    pub offering_id: Option<String>,
    /// <p>The payment option selected for this reservation.</p>
    pub payment_option: Option<String>,
    /// <p>The date and time that the reservation started.</p>
    pub start: Option<String>,
    /// <p>The state of the reservation.</p>
    pub state: Option<String>,
    /// <p>Any tags assigned to the Dedicated Host Reservation.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The upfront price of the reservation.</p>
    pub upfront_price: Option<String>,
}

struct HostReservationDeserializer;
impl HostReservationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<HostReservation, XmlParseError> {
        deserialize_elements::<_, HostReservation, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "count" => {
                    obj.count = Some(IntegerDeserializer::deserialize("count", stack)?);
                }
                "currencyCode" => {
                    obj.currency_code = Some(CurrencyCodeValuesDeserializer::deserialize(
                        "currencyCode",
                        stack,
                    )?);
                }
                "duration" => {
                    obj.duration = Some(IntegerDeserializer::deserialize("duration", stack)?);
                }
                "end" => {
                    obj.end = Some(DateTimeDeserializer::deserialize("end", stack)?);
                }
                "hostIdSet" => {
                    obj.host_id_set.get_or_insert(vec![]).extend(
                        ResponseHostIdSetDeserializer::deserialize("hostIdSet", stack)?,
                    );
                }
                "hostReservationId" => {
                    obj.host_reservation_id =
                        Some(StringDeserializer::deserialize("hostReservationId", stack)?);
                }
                "hourlyPrice" => {
                    obj.hourly_price = Some(StringDeserializer::deserialize("hourlyPrice", stack)?);
                }
                "instanceFamily" => {
                    obj.instance_family =
                        Some(StringDeserializer::deserialize("instanceFamily", stack)?);
                }
                "offeringId" => {
                    obj.offering_id = Some(StringDeserializer::deserialize("offeringId", stack)?);
                }
                "paymentOption" => {
                    obj.payment_option = Some(PaymentOptionDeserializer::deserialize(
                        "paymentOption",
                        stack,
                    )?);
                }
                "start" => {
                    obj.start = Some(DateTimeDeserializer::deserialize("start", stack)?);
                }
                "state" => {
                    obj.state = Some(ReservationStateDeserializer::deserialize("state", stack)?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "upfrontPrice" => {
                    obj.upfront_price =
                        Some(StringDeserializer::deserialize("upfrontPrice", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `HostReservationIdSet` contents to a `SignedRequest`.
struct HostReservationIdSetSerializer;
impl HostReservationIdSetSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct HostReservationSetDeserializer;
impl HostReservationSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<HostReservation>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(HostReservationDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct HypervisorTypeDeserializer;
impl HypervisorTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes an IAM instance profile.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct IamInstanceProfile {
    /// <p>The Amazon Resource Name (ARN) of the instance profile.</p>
    pub arn: Option<String>,
    /// <p>The ID of the instance profile.</p>
    pub id: Option<String>,
}

struct IamInstanceProfileDeserializer;
impl IamInstanceProfileDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<IamInstanceProfile, XmlParseError> {
        deserialize_elements::<_, IamInstanceProfile, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "arn" => {
                    obj.arn = Some(StringDeserializer::deserialize("arn", stack)?);
                }
                "id" => {
                    obj.id = Some(StringDeserializer::deserialize("id", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes an association between an IAM instance profile and an instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct IamInstanceProfileAssociation {
    /// <p>The ID of the association.</p>
    pub association_id: Option<String>,
    /// <p>The IAM instance profile.</p>
    pub iam_instance_profile: Option<IamInstanceProfile>,
    /// <p>The ID of the instance.</p>
    pub instance_id: Option<String>,
    /// <p>The state of the association.</p>
    pub state: Option<String>,
    /// <p>The time the IAM instance profile was associated with the instance.</p>
    pub timestamp: Option<String>,
}

struct IamInstanceProfileAssociationDeserializer;
impl IamInstanceProfileAssociationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<IamInstanceProfileAssociation, XmlParseError> {
        deserialize_elements::<_, IamInstanceProfileAssociation, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "associationId" => {
                        obj.association_id =
                            Some(StringDeserializer::deserialize("associationId", stack)?);
                    }
                    "iamInstanceProfile" => {
                        obj.iam_instance_profile =
                            Some(IamInstanceProfileDeserializer::deserialize(
                                "iamInstanceProfile",
                                stack,
                            )?);
                    }
                    "instanceId" => {
                        obj.instance_id =
                            Some(StringDeserializer::deserialize("instanceId", stack)?);
                    }
                    "state" => {
                        obj.state =
                            Some(IamInstanceProfileAssociationStateDeserializer::deserialize(
                                "state", stack,
                            )?);
                    }
                    "timestamp" => {
                        obj.timestamp =
                            Some(DateTimeDeserializer::deserialize("timestamp", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct IamInstanceProfileAssociationSetDeserializer;
impl IamInstanceProfileAssociationSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<IamInstanceProfileAssociation>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(IamInstanceProfileAssociationDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct IamInstanceProfileAssociationStateDeserializer;
impl IamInstanceProfileAssociationStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes an IAM instance profile.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct IamInstanceProfileSpecification {
    /// <p>The Amazon Resource Name (ARN) of the instance profile.</p>
    pub arn: Option<String>,
    /// <p>The name of the instance profile.</p>
    pub name: Option<String>,
}

struct IamInstanceProfileSpecificationDeserializer;
impl IamInstanceProfileSpecificationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<IamInstanceProfileSpecification, XmlParseError> {
        deserialize_elements::<_, IamInstanceProfileSpecification, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "arn" => {
                        obj.arn = Some(StringDeserializer::deserialize("arn", stack)?);
                    }
                    "name" => {
                        obj.name = Some(StringDeserializer::deserialize("name", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}

/// Serialize `IamInstanceProfileSpecification` contents to a `SignedRequest`.
struct IamInstanceProfileSpecificationSerializer;
impl IamInstanceProfileSpecificationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &IamInstanceProfileSpecification) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.arn {
            params.put(&format!("{}{}", prefix, "Arn"), &field_value);
        }
        if let Some(ref field_value) = obj.name {
            params.put(&format!("{}{}", prefix, "Name"), &field_value);
        }
    }
}

/// <p>Describes the ICMP type and code.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct IcmpTypeCode {
    /// <p>The ICMP code. A value of -1 means all codes for the specified ICMP type.</p>
    pub code: Option<i64>,
    /// <p>The ICMP type. A value of -1 means all types.</p>
    pub type_: Option<i64>,
}

struct IcmpTypeCodeDeserializer;
impl IcmpTypeCodeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<IcmpTypeCode, XmlParseError> {
        deserialize_elements::<_, IcmpTypeCode, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "code" => {
                    obj.code = Some(IntegerDeserializer::deserialize("code", stack)?);
                }
                "type" => {
                    obj.type_ = Some(IntegerDeserializer::deserialize("type", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `IcmpTypeCode` contents to a `SignedRequest`.
struct IcmpTypeCodeSerializer;
impl IcmpTypeCodeSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &IcmpTypeCode) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.code {
            params.put(&format!("{}{}", prefix, "Code"), &field_value);
        }
        if let Some(ref field_value) = obj.type_ {
            params.put(&format!("{}{}", prefix, "Type"), &field_value);
        }
    }
}

/// <p>Describes the ID format for a resource.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct IdFormat {
    /// <p>The date in UTC at which you are permanently switched over to using longer IDs. If a deadline is not yet available for this resource type, this field is not returned.</p>
    pub deadline: Option<String>,
    /// <p>The type of resource.</p>
    pub resource: Option<String>,
    /// <p>Indicates whether longer IDs (17-character IDs) are enabled for the resource.</p>
    pub use_long_ids: Option<bool>,
}

struct IdFormatDeserializer;
impl IdFormatDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<IdFormat, XmlParseError> {
        deserialize_elements::<_, IdFormat, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "deadline" => {
                    obj.deadline = Some(DateTimeDeserializer::deserialize("deadline", stack)?);
                }
                "resource" => {
                    obj.resource = Some(StringDeserializer::deserialize("resource", stack)?);
                }
                "useLongIds" => {
                    obj.use_long_ids = Some(BooleanDeserializer::deserialize("useLongIds", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct IdFormatListDeserializer;
impl IdFormatListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<IdFormat>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(IdFormatDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes an image.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct Image {
    /// <p>The architecture of the image.</p>
    pub architecture: Option<String>,
    /// <p>Any block device mapping entries.</p>
    pub block_device_mappings: Option<Vec<BlockDeviceMapping>>,
    /// <p>The date and time the image was created.</p>
    pub creation_date: Option<String>,
    /// <p>The description of the AMI that was provided during image creation.</p>
    pub description: Option<String>,
    /// <p>Specifies whether enhanced networking with ENA is enabled.</p>
    pub ena_support: Option<bool>,
    /// <p>The hypervisor type of the image.</p>
    pub hypervisor: Option<String>,
    /// <p>The ID of the AMI.</p>
    pub image_id: Option<String>,
    /// <p>The location of the AMI.</p>
    pub image_location: Option<String>,
    /// <p>The AWS account alias (for example, <code>amazon</code>, <code>self</code>) or the AWS account ID of the AMI owner.</p>
    pub image_owner_alias: Option<String>,
    /// <p>The type of image.</p>
    pub image_type: Option<String>,
    /// <p>The kernel associated with the image, if any. Only applicable for machine images.</p>
    pub kernel_id: Option<String>,
    /// <p>The name of the AMI that was provided during image creation.</p>
    pub name: Option<String>,
    /// <p>The AWS account ID of the image owner.</p>
    pub owner_id: Option<String>,
    /// <p>The value is <code>Windows</code> for Windows AMIs; otherwise blank.</p>
    pub platform: Option<String>,
    /// <p>Any product codes associated with the AMI.</p>
    pub product_codes: Option<Vec<ProductCode>>,
    /// <p>Indicates whether the image has public launch permissions. The value is <code>true</code> if this image has public launch permissions or <code>false</code> if it has only implicit and explicit launch permissions.</p>
    pub public: Option<bool>,
    /// <p>The RAM disk associated with the image, if any. Only applicable for machine images.</p>
    pub ramdisk_id: Option<String>,
    /// <p>The device name of the root device volume (for example, <code>/dev/sda1</code>).</p>
    pub root_device_name: Option<String>,
    /// <p>The type of root device used by the AMI. The AMI can use an EBS volume or an instance store volume.</p>
    pub root_device_type: Option<String>,
    /// <p>Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
    pub sriov_net_support: Option<String>,
    /// <p>The current state of the AMI. If the state is <code>available</code>, the image is successfully registered and can be used to launch an instance.</p>
    pub state: Option<String>,
    /// <p>The reason for the state change.</p>
    pub state_reason: Option<StateReason>,
    /// <p>Any tags assigned to the image.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The type of virtualization of the AMI.</p>
    pub virtualization_type: Option<String>,
}

struct ImageDeserializer;
impl ImageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<Image, XmlParseError> {
        deserialize_elements::<_, Image, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "architecture" => {
                    obj.architecture = Some(ArchitectureValuesDeserializer::deserialize(
                        "architecture",
                        stack,
                    )?);
                }
                "blockDeviceMapping" => {
                    obj.block_device_mappings.get_or_insert(vec![]).extend(
                        BlockDeviceMappingListDeserializer::deserialize(
                            "blockDeviceMapping",
                            stack,
                        )?,
                    );
                }
                "creationDate" => {
                    obj.creation_date =
                        Some(StringDeserializer::deserialize("creationDate", stack)?);
                }
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "enaSupport" => {
                    obj.ena_support = Some(BooleanDeserializer::deserialize("enaSupport", stack)?);
                }
                "hypervisor" => {
                    obj.hypervisor = Some(HypervisorTypeDeserializer::deserialize(
                        "hypervisor",
                        stack,
                    )?);
                }
                "imageId" => {
                    obj.image_id = Some(StringDeserializer::deserialize("imageId", stack)?);
                }
                "imageLocation" => {
                    obj.image_location =
                        Some(StringDeserializer::deserialize("imageLocation", stack)?);
                }
                "imageOwnerAlias" => {
                    obj.image_owner_alias =
                        Some(StringDeserializer::deserialize("imageOwnerAlias", stack)?);
                }
                "imageType" => {
                    obj.image_type = Some(ImageTypeValuesDeserializer::deserialize(
                        "imageType",
                        stack,
                    )?);
                }
                "kernelId" => {
                    obj.kernel_id = Some(StringDeserializer::deserialize("kernelId", stack)?);
                }
                "name" => {
                    obj.name = Some(StringDeserializer::deserialize("name", stack)?);
                }
                "imageOwnerId" => {
                    obj.owner_id = Some(StringDeserializer::deserialize("imageOwnerId", stack)?);
                }
                "platform" => {
                    obj.platform =
                        Some(PlatformValuesDeserializer::deserialize("platform", stack)?);
                }
                "productCodes" => {
                    obj.product_codes.get_or_insert(vec![]).extend(
                        ProductCodeListDeserializer::deserialize("productCodes", stack)?,
                    );
                }
                "isPublic" => {
                    obj.public = Some(BooleanDeserializer::deserialize("isPublic", stack)?);
                }
                "ramdiskId" => {
                    obj.ramdisk_id = Some(StringDeserializer::deserialize("ramdiskId", stack)?);
                }
                "rootDeviceName" => {
                    obj.root_device_name =
                        Some(StringDeserializer::deserialize("rootDeviceName", stack)?);
                }
                "rootDeviceType" => {
                    obj.root_device_type = Some(DeviceTypeDeserializer::deserialize(
                        "rootDeviceType",
                        stack,
                    )?);
                }
                "sriovNetSupport" => {
                    obj.sriov_net_support =
                        Some(StringDeserializer::deserialize("sriovNetSupport", stack)?);
                }
                "imageState" => {
                    obj.state = Some(ImageStateDeserializer::deserialize("imageState", stack)?);
                }
                "stateReason" => {
                    obj.state_reason =
                        Some(StateReasonDeserializer::deserialize("stateReason", stack)?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "virtualizationType" => {
                    obj.virtualization_type = Some(VirtualizationTypeDeserializer::deserialize(
                        "virtualizationType",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes an image attribute.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ImageAttribute {
    /// <p>The block device mapping entries.</p>
    pub block_device_mappings: Option<Vec<BlockDeviceMapping>>,
    /// <p>A description for the AMI.</p>
    pub description: Option<AttributeValue>,
    /// <p>The ID of the AMI.</p>
    pub image_id: Option<String>,
    /// <p>The kernel ID.</p>
    pub kernel_id: Option<AttributeValue>,
    /// <p>The launch permissions.</p>
    pub launch_permissions: Option<Vec<LaunchPermission>>,
    /// <p>The product codes.</p>
    pub product_codes: Option<Vec<ProductCode>>,
    /// <p>The RAM disk ID.</p>
    pub ramdisk_id: Option<AttributeValue>,
    /// <p>Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
    pub sriov_net_support: Option<AttributeValue>,
}

struct ImageAttributeDeserializer;
impl ImageAttributeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ImageAttribute, XmlParseError> {
        deserialize_elements::<_, ImageAttribute, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "blockDeviceMapping" => {
                    obj.block_device_mappings.get_or_insert(vec![]).extend(
                        BlockDeviceMappingListDeserializer::deserialize(
                            "blockDeviceMapping",
                            stack,
                        )?,
                    );
                }
                "description" => {
                    obj.description = Some(AttributeValueDeserializer::deserialize(
                        "description",
                        stack,
                    )?);
                }
                "imageId" => {
                    obj.image_id = Some(StringDeserializer::deserialize("imageId", stack)?);
                }
                "kernel" => {
                    obj.kernel_id = Some(AttributeValueDeserializer::deserialize("kernel", stack)?);
                }
                "launchPermission" => {
                    obj.launch_permissions.get_or_insert(vec![]).extend(
                        LaunchPermissionListDeserializer::deserialize("launchPermission", stack)?,
                    );
                }
                "productCodes" => {
                    obj.product_codes.get_or_insert(vec![]).extend(
                        ProductCodeListDeserializer::deserialize("productCodes", stack)?,
                    );
                }
                "ramdisk" => {
                    obj.ramdisk_id =
                        Some(AttributeValueDeserializer::deserialize("ramdisk", stack)?);
                }
                "sriovNetSupport" => {
                    obj.sriov_net_support = Some(AttributeValueDeserializer::deserialize(
                        "sriovNetSupport",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes the disk container object for an import image task.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ImageDiskContainer {
    /// <p>The description of the disk image.</p>
    pub description: Option<String>,
    /// <p>The block device mapping for the disk.</p>
    pub device_name: Option<String>,
    /// <p>The format of the disk image being imported.</p> <p>Valid values: <code>VHD</code> | <code>VMDK</code> | <code>OVA</code> </p>
    pub format: Option<String>,
    /// <p>The ID of the EBS snapshot to be used for importing the snapshot.</p>
    pub snapshot_id: Option<String>,
    /// <p>The URL to the Amazon S3-based disk image being imported. The URL can either be a https URL (https://..) or an Amazon S3 URL (s3://..)</p>
    pub url: Option<String>,
    /// <p>The S3 bucket for the disk image.</p>
    pub user_bucket: Option<UserBucket>,
}

/// Serialize `ImageDiskContainer` contents to a `SignedRequest`.
struct ImageDiskContainerSerializer;
impl ImageDiskContainerSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ImageDiskContainer) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.device_name {
            params.put(&format!("{}{}", prefix, "DeviceName"), &field_value);
        }
        if let Some(ref field_value) = obj.format {
            params.put(&format!("{}{}", prefix, "Format"), &field_value);
        }
        if let Some(ref field_value) = obj.snapshot_id {
            params.put(&format!("{}{}", prefix, "SnapshotId"), &field_value);
        }
        if let Some(ref field_value) = obj.url {
            params.put(&format!("{}{}", prefix, "Url"), &field_value);
        }
        if let Some(ref field_value) = obj.user_bucket {
            UserBucketSerializer::serialize(
                params,
                &format!("{}{}", prefix, "UserBucket"),
                field_value,
            );
        }
    }
}

/// Serialize `ImageDiskContainerList` contents to a `SignedRequest`.
struct ImageDiskContainerListSerializer;
impl ImageDiskContainerListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<ImageDiskContainer>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            ImageDiskContainerSerializer::serialize(params, &key, obj);
        }
    }
}

/// Serialize `ImageIdStringList` contents to a `SignedRequest`.
struct ImageIdStringListSerializer;
impl ImageIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct ImageListDeserializer;
impl ImageListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<Image>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ImageDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct ImageStateDeserializer;
impl ImageStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct ImageTypeValuesDeserializer;
impl ImageTypeValuesDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ImportClientVpnClientCertificateRevocationListRequest {
    /// <p>The client certificate revocation list file. For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/cvpn-working-certificates.html#cvpn-working-certificates-generate">Generate a Client Certificate Revocation List</a> in the <i>AWS Client VPN Administrator Guide</i>.</p>
    pub certificate_revocation_list: String,
    /// <p>The ID of the Client VPN endpoint to which the client certificate revocation list applies.</p>
    pub client_vpn_endpoint_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `ImportClientVpnClientCertificateRevocationListRequest` contents to a `SignedRequest`.
struct ImportClientVpnClientCertificateRevocationListRequestSerializer;
impl ImportClientVpnClientCertificateRevocationListRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &ImportClientVpnClientCertificateRevocationListRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "CertificateRevocationList"),
            &obj.certificate_revocation_list,
        );
        params.put(
            &format!("{}{}", prefix, "ClientVpnEndpointId"),
            &obj.client_vpn_endpoint_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ImportClientVpnClientCertificateRevocationListResult {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub return_: Option<bool>,
}

struct ImportClientVpnClientCertificateRevocationListResultDeserializer;
impl ImportClientVpnClientCertificateRevocationListResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ImportClientVpnClientCertificateRevocationListResult, XmlParseError> {
        deserialize_elements::<_, ImportClientVpnClientCertificateRevocationListResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for ImportImage.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ImportImageRequest {
    /// <p>The architecture of the virtual machine.</p> <p>Valid values: <code>i386</code> | <code>x86_64</code> </p>
    pub architecture: Option<String>,
    /// <p>The client-specific data.</p>
    pub client_data: Option<ClientData>,
    /// <p>The token to enable idempotency for VM import requests.</p>
    pub client_token: Option<String>,
    /// <p>A description string for the import image task.</p>
    pub description: Option<String>,
    /// <p>Information about the disk containers.</p>
    pub disk_containers: Option<Vec<ImageDiskContainer>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Specifies whether the destination AMI of the imported image should be encrypted. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using <code>KmsKeyId</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub encrypted: Option<bool>,
    /// <p>The target hypervisor platform.</p> <p>Valid values: <code>xen</code> </p>
    pub hypervisor: Option<String>,
    /// <p>An identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted AMI. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set. </p> <p>The CMK identifier may be provided in any of the following formats: </p> <ul> <li> <p>Key ID</p> </li> <li> <p>Key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p> </li> <li> <p>ARN using key ID. The ID ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>key</code> namespace, and then the CMK ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p> </li> <li> <p>ARN using key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>. </p> </li> </ul> <p>AWS parses <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure. </p> <p>The specified CMK must exist in the Region that the AMI is being copied to.</p>
    pub kms_key_id: Option<String>,
    /// <p>The license type to be used for the Amazon Machine Image (AMI) after importing.</p> <p> <b>Note:</b> You may only use BYOL if you have existing licenses with rights to use these licenses in a third party cloud like AWS. For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html#prerequisites-image">Prerequisites</a> in the VM Import/Export User Guide.</p> <p>Valid values include:</p> <ul> <li> <p> <code>Auto</code> - Detects the source-system operating system (OS) and applies the appropriate license.</p> </li> <li> <p> <code>AWS</code> - Replaces the source-system license with an AWS license, if appropriate.</p> </li> <li> <p> <code>BYOL</code> - Retains the source-system license, if appropriate.</p> </li> </ul> <p>Default value: <code>Auto</code> </p>
    pub license_type: Option<String>,
    /// <p>The operating system of the virtual machine.</p> <p>Valid values: <code>Windows</code> | <code>Linux</code> </p>
    pub platform: Option<String>,
    /// <p>The name of the role to use when not using the default role, 'vmimport'.</p>
    pub role_name: Option<String>,
}

/// Serialize `ImportImageRequest` contents to a `SignedRequest`.
struct ImportImageRequestSerializer;
impl ImportImageRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ImportImageRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.architecture {
            params.put(&format!("{}{}", prefix, "Architecture"), &field_value);
        }
        if let Some(ref field_value) = obj.client_data {
            ClientDataSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ClientData"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.disk_containers {
            ImageDiskContainerListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "DiskContainer"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.encrypted {
            params.put(&format!("{}{}", prefix, "Encrypted"), &field_value);
        }
        if let Some(ref field_value) = obj.hypervisor {
            params.put(&format!("{}{}", prefix, "Hypervisor"), &field_value);
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"), &field_value);
        }
        if let Some(ref field_value) = obj.license_type {
            params.put(&format!("{}{}", prefix, "LicenseType"), &field_value);
        }
        if let Some(ref field_value) = obj.platform {
            params.put(&format!("{}{}", prefix, "Platform"), &field_value);
        }
        if let Some(ref field_value) = obj.role_name {
            params.put(&format!("{}{}", prefix, "RoleName"), &field_value);
        }
    }
}

/// <p>Contains the output for ImportImage.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ImportImageResult {
    /// <p>The architecture of the virtual machine.</p>
    pub architecture: Option<String>,
    /// <p>A description of the import task.</p>
    pub description: Option<String>,
    /// <p>Indicates whether the AMI is encypted.</p>
    pub encrypted: Option<bool>,
    /// <p>The target hypervisor of the import task.</p>
    pub hypervisor: Option<String>,
    /// <p>The ID of the Amazon Machine Image (AMI) created by the import task.</p>
    pub image_id: Option<String>,
    /// <p>The task ID of the import image task.</p>
    pub import_task_id: Option<String>,
    /// <p>The identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to create the encrypted AMI.</p>
    pub kms_key_id: Option<String>,
    /// <p>The license type of the virtual machine.</p>
    pub license_type: Option<String>,
    /// <p>The operating system of the virtual machine.</p>
    pub platform: Option<String>,
    /// <p>The progress of the task.</p>
    pub progress: Option<String>,
    /// <p>Information about the snapshots.</p>
    pub snapshot_details: Option<Vec<SnapshotDetail>>,
    /// <p>A brief status of the task.</p>
    pub status: Option<String>,
    /// <p>A detailed status message of the import task.</p>
    pub status_message: Option<String>,
}

struct ImportImageResultDeserializer;
impl ImportImageResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ImportImageResult, XmlParseError> {
        deserialize_elements::<_, ImportImageResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "architecture" => {
                    obj.architecture =
                        Some(StringDeserializer::deserialize("architecture", stack)?);
                }
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "encrypted" => {
                    obj.encrypted = Some(BooleanDeserializer::deserialize("encrypted", stack)?);
                }
                "hypervisor" => {
                    obj.hypervisor = Some(StringDeserializer::deserialize("hypervisor", stack)?);
                }
                "imageId" => {
                    obj.image_id = Some(StringDeserializer::deserialize("imageId", stack)?);
                }
                "importTaskId" => {
                    obj.import_task_id =
                        Some(StringDeserializer::deserialize("importTaskId", stack)?);
                }
                "kmsKeyId" => {
                    obj.kms_key_id = Some(StringDeserializer::deserialize("kmsKeyId", stack)?);
                }
                "licenseType" => {
                    obj.license_type = Some(StringDeserializer::deserialize("licenseType", stack)?);
                }
                "platform" => {
                    obj.platform = Some(StringDeserializer::deserialize("platform", stack)?);
                }
                "progress" => {
                    obj.progress = Some(StringDeserializer::deserialize("progress", stack)?);
                }
                "snapshotDetailSet" => {
                    obj.snapshot_details.get_or_insert(vec![]).extend(
                        SnapshotDetailListDeserializer::deserialize("snapshotDetailSet", stack)?,
                    );
                }
                "status" => {
                    obj.status = Some(StringDeserializer::deserialize("status", stack)?);
                }
                "statusMessage" => {
                    obj.status_message =
                        Some(StringDeserializer::deserialize("statusMessage", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes an import image task.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ImportImageTask {
    /// <p>The architecture of the virtual machine.</p> <p>Valid values: <code>i386</code> | <code>x86_64</code> </p>
    pub architecture: Option<String>,
    /// <p>A description of the import task.</p>
    pub description: Option<String>,
    /// <p>Indicates whether the image is encrypted.</p>
    pub encrypted: Option<bool>,
    /// <p>The target hypervisor for the import task.</p> <p>Valid values: <code>xen</code> </p>
    pub hypervisor: Option<String>,
    /// <p>The ID of the Amazon Machine Image (AMI) of the imported virtual machine.</p>
    pub image_id: Option<String>,
    /// <p>The ID of the import image task.</p>
    pub import_task_id: Option<String>,
    /// <p>The identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to create the encrypted image.</p>
    pub kms_key_id: Option<String>,
    /// <p>The license type of the virtual machine.</p>
    pub license_type: Option<String>,
    /// <p>The description string for the import image task.</p>
    pub platform: Option<String>,
    /// <p>The percentage of progress of the import image task.</p>
    pub progress: Option<String>,
    /// <p>Information about the snapshots.</p>
    pub snapshot_details: Option<Vec<SnapshotDetail>>,
    /// <p>A brief status for the import image task.</p>
    pub status: Option<String>,
    /// <p>A descriptive status message for the import image task.</p>
    pub status_message: Option<String>,
}

struct ImportImageTaskDeserializer;
impl ImportImageTaskDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ImportImageTask, XmlParseError> {
        deserialize_elements::<_, ImportImageTask, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "architecture" => {
                    obj.architecture =
                        Some(StringDeserializer::deserialize("architecture", stack)?);
                }
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "encrypted" => {
                    obj.encrypted = Some(BooleanDeserializer::deserialize("encrypted", stack)?);
                }
                "hypervisor" => {
                    obj.hypervisor = Some(StringDeserializer::deserialize("hypervisor", stack)?);
                }
                "imageId" => {
                    obj.image_id = Some(StringDeserializer::deserialize("imageId", stack)?);
                }
                "importTaskId" => {
                    obj.import_task_id =
                        Some(StringDeserializer::deserialize("importTaskId", stack)?);
                }
                "kmsKeyId" => {
                    obj.kms_key_id = Some(StringDeserializer::deserialize("kmsKeyId", stack)?);
                }
                "licenseType" => {
                    obj.license_type = Some(StringDeserializer::deserialize("licenseType", stack)?);
                }
                "platform" => {
                    obj.platform = Some(StringDeserializer::deserialize("platform", stack)?);
                }
                "progress" => {
                    obj.progress = Some(StringDeserializer::deserialize("progress", stack)?);
                }
                "snapshotDetailSet" => {
                    obj.snapshot_details.get_or_insert(vec![]).extend(
                        SnapshotDetailListDeserializer::deserialize("snapshotDetailSet", stack)?,
                    );
                }
                "status" => {
                    obj.status = Some(StringDeserializer::deserialize("status", stack)?);
                }
                "statusMessage" => {
                    obj.status_message =
                        Some(StringDeserializer::deserialize("statusMessage", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct ImportImageTaskListDeserializer;
impl ImportImageTaskListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ImportImageTask>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ImportImageTaskDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the launch specification for VM import.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ImportInstanceLaunchSpecification {
    /// <p>Reserved.</p>
    pub additional_info: Option<String>,
    /// <p>The architecture of the instance.</p>
    pub architecture: Option<String>,
    /// <p>The security group IDs.</p>
    pub group_ids: Option<Vec<String>>,
    /// <p>The security group names.</p>
    pub group_names: Option<Vec<String>>,
    /// <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p>
    pub instance_initiated_shutdown_behavior: Option<String>,
    /// <p>The instance type. For more information about the instance types that you can import, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#vmimport-instance-types">Instance Types</a> in the VM Import/Export User Guide.</p>
    pub instance_type: Option<String>,
    /// <p>Indicates whether monitoring is enabled.</p>
    pub monitoring: Option<bool>,
    /// <p>The placement information for the instance.</p>
    pub placement: Option<Placement>,
    /// <p>[EC2-VPC] An available IP address from the IP address range of the subnet.</p>
    pub private_ip_address: Option<String>,
    /// <p>[EC2-VPC] The ID of the subnet in which to launch the instance.</p>
    pub subnet_id: Option<String>,
    /// <p>The Base64-encoded user data to make available to the instance.</p>
    pub user_data: Option<UserData>,
}

/// Serialize `ImportInstanceLaunchSpecification` contents to a `SignedRequest`.
struct ImportInstanceLaunchSpecificationSerializer;
impl ImportInstanceLaunchSpecificationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ImportInstanceLaunchSpecification) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.additional_info {
            params.put(&format!("{}{}", prefix, "AdditionalInfo"), &field_value);
        }
        if let Some(ref field_value) = obj.architecture {
            params.put(&format!("{}{}", prefix, "Architecture"), &field_value);
        }
        if let Some(ref field_value) = obj.group_ids {
            SecurityGroupIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "GroupId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.group_names {
            SecurityGroupStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "GroupName"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.instance_initiated_shutdown_behavior {
            params.put(
                &format!("{}{}", prefix, "InstanceInitiatedShutdownBehavior"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.instance_type {
            params.put(&format!("{}{}", prefix, "InstanceType"), &field_value);
        }
        if let Some(ref field_value) = obj.monitoring {
            params.put(&format!("{}{}", prefix, "Monitoring"), &field_value);
        }
        if let Some(ref field_value) = obj.placement {
            PlacementSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Placement"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.private_ip_address {
            params.put(&format!("{}{}", prefix, "PrivateIpAddress"), &field_value);
        }
        if let Some(ref field_value) = obj.subnet_id {
            params.put(&format!("{}{}", prefix, "SubnetId"), &field_value);
        }
        if let Some(ref field_value) = obj.user_data {
            UserDataSerializer::serialize(
                params,
                &format!("{}{}", prefix, "UserData"),
                field_value,
            );
        }
    }
}

/// <p>Contains the parameters for ImportInstance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ImportInstanceRequest {
    /// <p>A description for the instance being imported.</p>
    pub description: Option<String>,
    /// <p>The disk image.</p>
    pub disk_images: Option<Vec<DiskImage>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The launch specification.</p>
    pub launch_specification: Option<ImportInstanceLaunchSpecification>,
    /// <p>The instance operating system.</p>
    pub platform: String,
}

/// Serialize `ImportInstanceRequest` contents to a `SignedRequest`.
struct ImportInstanceRequestSerializer;
impl ImportInstanceRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ImportInstanceRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.disk_images {
            DiskImageListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "DiskImage"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.launch_specification {
            ImportInstanceLaunchSpecificationSerializer::serialize(
                params,
                &format!("{}{}", prefix, "LaunchSpecification"),
                field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "Platform"), &obj.platform);
    }
}

/// <p>Contains the output for ImportInstance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ImportInstanceResult {
    /// <p>Information about the conversion task.</p>
    pub conversion_task: Option<ConversionTask>,
}

struct ImportInstanceResultDeserializer;
impl ImportInstanceResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ImportInstanceResult, XmlParseError> {
        deserialize_elements::<_, ImportInstanceResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "conversionTask" => {
                    obj.conversion_task = Some(ConversionTaskDeserializer::deserialize(
                        "conversionTask",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes an import instance task.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ImportInstanceTaskDetails {
    /// <p>A description of the task.</p>
    pub description: Option<String>,
    /// <p>The ID of the instance.</p>
    pub instance_id: Option<String>,
    /// <p>The instance operating system.</p>
    pub platform: Option<String>,
    /// <p>The volumes.</p>
    pub volumes: Option<Vec<ImportInstanceVolumeDetailItem>>,
}

struct ImportInstanceTaskDetailsDeserializer;
impl ImportInstanceTaskDetailsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ImportInstanceTaskDetails, XmlParseError> {
        deserialize_elements::<_, ImportInstanceTaskDetails, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "description" => {
                        obj.description =
                            Some(StringDeserializer::deserialize("description", stack)?);
                    }
                    "instanceId" => {
                        obj.instance_id =
                            Some(StringDeserializer::deserialize("instanceId", stack)?);
                    }
                    "platform" => {
                        obj.platform =
                            Some(PlatformValuesDeserializer::deserialize("platform", stack)?);
                    }
                    "volumes" => {
                        obj.volumes.get_or_insert(vec![]).extend(
                            ImportInstanceVolumeDetailSetDeserializer::deserialize(
                                "volumes", stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes an import volume task.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ImportInstanceVolumeDetailItem {
    /// <p>The Availability Zone where the resulting instance will reside.</p>
    pub availability_zone: Option<String>,
    /// <p>The number of bytes converted so far.</p>
    pub bytes_converted: Option<i64>,
    /// <p>A description of the task.</p>
    pub description: Option<String>,
    /// <p>The image.</p>
    pub image: Option<DiskImageDescription>,
    /// <p>The status of the import of this particular disk image.</p>
    pub status: Option<String>,
    /// <p>The status information or errors related to the disk image.</p>
    pub status_message: Option<String>,
    /// <p>The volume.</p>
    pub volume: Option<DiskImageVolumeDescription>,
}

struct ImportInstanceVolumeDetailItemDeserializer;
impl ImportInstanceVolumeDetailItemDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ImportInstanceVolumeDetailItem, XmlParseError> {
        deserialize_elements::<_, ImportInstanceVolumeDetailItem, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "availabilityZone" => {
                        obj.availability_zone =
                            Some(StringDeserializer::deserialize("availabilityZone", stack)?);
                    }
                    "bytesConverted" => {
                        obj.bytes_converted =
                            Some(LongDeserializer::deserialize("bytesConverted", stack)?);
                    }
                    "description" => {
                        obj.description =
                            Some(StringDeserializer::deserialize("description", stack)?);
                    }
                    "image" => {
                        obj.image = Some(DiskImageDescriptionDeserializer::deserialize(
                            "image", stack,
                        )?);
                    }
                    "status" => {
                        obj.status = Some(StringDeserializer::deserialize("status", stack)?);
                    }
                    "statusMessage" => {
                        obj.status_message =
                            Some(StringDeserializer::deserialize("statusMessage", stack)?);
                    }
                    "volume" => {
                        obj.volume = Some(DiskImageVolumeDescriptionDeserializer::deserialize(
                            "volume", stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct ImportInstanceVolumeDetailSetDeserializer;
impl ImportInstanceVolumeDetailSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ImportInstanceVolumeDetailItem>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ImportInstanceVolumeDetailItemDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ImportKeyPairRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>A unique name for the key pair.</p>
    pub key_name: String,
    /// <p>The public key. For API calls, the text must be base64-encoded. For command line tools, base64 encoding is performed for you.</p>
    pub public_key_material: bytes::Bytes,
}

/// Serialize `ImportKeyPairRequest` contents to a `SignedRequest`.
struct ImportKeyPairRequestSerializer;
impl ImportKeyPairRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ImportKeyPairRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "KeyName"), &obj.key_name);
        params.put(
            &format!("{}{}", prefix, "PublicKeyMaterial"),
            ::std::str::from_utf8(&obj.public_key_material).unwrap(),
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ImportKeyPairResult {
    /// <p>The MD5 public key fingerprint as specified in section 4 of RFC 4716.</p>
    pub key_fingerprint: Option<String>,
    /// <p>The key pair name you provided.</p>
    pub key_name: Option<String>,
}

struct ImportKeyPairResultDeserializer;
impl ImportKeyPairResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ImportKeyPairResult, XmlParseError> {
        deserialize_elements::<_, ImportKeyPairResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "keyFingerprint" => {
                    obj.key_fingerprint =
                        Some(StringDeserializer::deserialize("keyFingerprint", stack)?);
                }
                "keyName" => {
                    obj.key_name = Some(StringDeserializer::deserialize("keyName", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Contains the parameters for ImportSnapshot.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ImportSnapshotRequest {
    /// <p>The client-specific data.</p>
    pub client_data: Option<ClientData>,
    /// <p>Token to enable idempotency for VM import requests.</p>
    pub client_token: Option<String>,
    /// <p>The description string for the import snapshot task.</p>
    pub description: Option<String>,
    /// <p>Information about the disk container.</p>
    pub disk_container: Option<SnapshotDiskContainer>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Specifies whether the destination snapshot of the imported image should be encrypted. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using <code>KmsKeyId</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub encrypted: Option<bool>,
    /// <p>An identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted snapshot. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set. </p> <p>The CMK identifier may be provided in any of the following formats: </p> <ul> <li> <p>Key ID</p> </li> <li> <p>Key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p> </li> <li> <p>ARN using key ID. The ID ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>key</code> namespace, and then the CMK ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p> </li> <li> <p>ARN using key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>. </p> </li> </ul> <p>AWS parses <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure. </p> <p>The specified CMK must exist in the Region that the snapshot is being copied to.</p>
    pub kms_key_id: Option<String>,
    /// <p>The name of the role to use when not using the default role, 'vmimport'.</p>
    pub role_name: Option<String>,
}

/// Serialize `ImportSnapshotRequest` contents to a `SignedRequest`.
struct ImportSnapshotRequestSerializer;
impl ImportSnapshotRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ImportSnapshotRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.client_data {
            ClientDataSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ClientData"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.disk_container {
            SnapshotDiskContainerSerializer::serialize(
                params,
                &format!("{}{}", prefix, "DiskContainer"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.encrypted {
            params.put(&format!("{}{}", prefix, "Encrypted"), &field_value);
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"), &field_value);
        }
        if let Some(ref field_value) = obj.role_name {
            params.put(&format!("{}{}", prefix, "RoleName"), &field_value);
        }
    }
}

/// <p>Contains the output for ImportSnapshot.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ImportSnapshotResult {
    /// <p>A description of the import snapshot task.</p>
    pub description: Option<String>,
    /// <p>The ID of the import snapshot task.</p>
    pub import_task_id: Option<String>,
    /// <p>Information about the import snapshot task.</p>
    pub snapshot_task_detail: Option<SnapshotTaskDetail>,
}

struct ImportSnapshotResultDeserializer;
impl ImportSnapshotResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ImportSnapshotResult, XmlParseError> {
        deserialize_elements::<_, ImportSnapshotResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "importTaskId" => {
                    obj.import_task_id =
                        Some(StringDeserializer::deserialize("importTaskId", stack)?);
                }
                "snapshotTaskDetail" => {
                    obj.snapshot_task_detail = Some(SnapshotTaskDetailDeserializer::deserialize(
                        "snapshotTaskDetail",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes an import snapshot task.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ImportSnapshotTask {
    /// <p>A description of the import snapshot task.</p>
    pub description: Option<String>,
    /// <p>The ID of the import snapshot task.</p>
    pub import_task_id: Option<String>,
    /// <p>Describes an import snapshot task.</p>
    pub snapshot_task_detail: Option<SnapshotTaskDetail>,
}

struct ImportSnapshotTaskDeserializer;
impl ImportSnapshotTaskDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ImportSnapshotTask, XmlParseError> {
        deserialize_elements::<_, ImportSnapshotTask, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "importTaskId" => {
                    obj.import_task_id =
                        Some(StringDeserializer::deserialize("importTaskId", stack)?);
                }
                "snapshotTaskDetail" => {
                    obj.snapshot_task_detail = Some(SnapshotTaskDetailDeserializer::deserialize(
                        "snapshotTaskDetail",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct ImportSnapshotTaskListDeserializer;
impl ImportSnapshotTaskListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ImportSnapshotTask>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ImportSnapshotTaskDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `ImportTaskIdList` contents to a `SignedRequest`.
struct ImportTaskIdListSerializer;
impl ImportTaskIdListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Contains the parameters for ImportVolume.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ImportVolumeRequest {
    /// <p>The Availability Zone for the resulting EBS volume.</p>
    pub availability_zone: String,
    /// <p>A description of the volume.</p>
    pub description: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The disk image.</p>
    pub image: DiskImageDetail,
    /// <p>The volume size.</p>
    pub volume: VolumeDetail,
}

/// Serialize `ImportVolumeRequest` contents to a `SignedRequest`.
struct ImportVolumeRequestSerializer;
impl ImportVolumeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ImportVolumeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "AvailabilityZone"),
            &obj.availability_zone,
        );
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        DiskImageDetailSerializer::serialize(params, &format!("{}{}", prefix, "Image"), &obj.image);
        VolumeDetailSerializer::serialize(params, &format!("{}{}", prefix, "Volume"), &obj.volume);
    }
}

/// <p>Contains the output for ImportVolume.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ImportVolumeResult {
    /// <p>Information about the conversion task.</p>
    pub conversion_task: Option<ConversionTask>,
}

struct ImportVolumeResultDeserializer;
impl ImportVolumeResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ImportVolumeResult, XmlParseError> {
        deserialize_elements::<_, ImportVolumeResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "conversionTask" => {
                    obj.conversion_task = Some(ConversionTaskDeserializer::deserialize(
                        "conversionTask",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes an import volume task.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ImportVolumeTaskDetails {
    /// <p>The Availability Zone where the resulting volume will reside.</p>
    pub availability_zone: Option<String>,
    /// <p>The number of bytes converted so far.</p>
    pub bytes_converted: Option<i64>,
    /// <p>The description you provided when starting the import volume task.</p>
    pub description: Option<String>,
    /// <p>The image.</p>
    pub image: Option<DiskImageDescription>,
    /// <p>The volume.</p>
    pub volume: Option<DiskImageVolumeDescription>,
}

struct ImportVolumeTaskDetailsDeserializer;
impl ImportVolumeTaskDetailsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ImportVolumeTaskDetails, XmlParseError> {
        deserialize_elements::<_, ImportVolumeTaskDetails, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "availabilityZone" => {
                        obj.availability_zone =
                            Some(StringDeserializer::deserialize("availabilityZone", stack)?);
                    }
                    "bytesConverted" => {
                        obj.bytes_converted =
                            Some(LongDeserializer::deserialize("bytesConverted", stack)?);
                    }
                    "description" => {
                        obj.description =
                            Some(StringDeserializer::deserialize("description", stack)?);
                    }
                    "image" => {
                        obj.image = Some(DiskImageDescriptionDeserializer::deserialize(
                            "image", stack,
                        )?);
                    }
                    "volume" => {
                        obj.volume = Some(DiskImageVolumeDescriptionDeserializer::deserialize(
                            "volume", stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes an instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct Instance {
    /// <p>The AMI launch index, which can be used to find this instance in the launch group.</p>
    pub ami_launch_index: Option<i64>,
    /// <p>The architecture of the image.</p>
    pub architecture: Option<String>,
    /// <p>Any block device mapping entries for the instance.</p>
    pub block_device_mappings: Option<Vec<InstanceBlockDeviceMapping>>,
    /// <p>The ID of the Capacity Reservation.</p>
    pub capacity_reservation_id: Option<String>,
    /// <p>Information about the Capacity Reservation targeting option.</p>
    pub capacity_reservation_specification: Option<CapacityReservationSpecificationResponse>,
    /// <p>The idempotency token you provided when you launched the instance, if applicable.</p>
    pub client_token: Option<String>,
    /// <p>The CPU options for the instance.</p>
    pub cpu_options: Option<CpuOptions>,
    /// <p>Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.</p>
    pub ebs_optimized: Option<bool>,
    /// <p>The Elastic GPU associated with the instance.</p>
    pub elastic_gpu_associations: Option<Vec<ElasticGpuAssociation>>,
    /// <p> The elastic inference accelerator associated with the instance. </p>
    pub elastic_inference_accelerator_associations:
        Option<Vec<ElasticInferenceAcceleratorAssociation>>,
    /// <p>Specifies whether enhanced networking with ENA is enabled.</p>
    pub ena_support: Option<bool>,
    /// <p>Indicates whether the instance is enabled for hibernation.</p>
    pub hibernation_options: Option<HibernationOptions>,
    /// <p>The hypervisor type of the instance.</p>
    pub hypervisor: Option<String>,
    /// <p>The IAM instance profile associated with the instance, if applicable.</p>
    pub iam_instance_profile: Option<IamInstanceProfile>,
    /// <p>The ID of the AMI used to launch the instance.</p>
    pub image_id: Option<String>,
    /// <p>The ID of the instance.</p>
    pub instance_id: Option<String>,
    /// <p>Indicates whether this is a Spot Instance or a Scheduled Instance.</p>
    pub instance_lifecycle: Option<String>,
    /// <p>The instance type.</p>
    pub instance_type: Option<String>,
    /// <p>The kernel associated with this instance, if applicable.</p>
    pub kernel_id: Option<String>,
    /// <p>The name of the key pair, if this instance was launched with an associated key pair.</p>
    pub key_name: Option<String>,
    /// <p>The time the instance was launched.</p>
    pub launch_time: Option<String>,
    /// <p>The license configurations.</p>
    pub licenses: Option<Vec<LicenseConfiguration>>,
    /// <p>The monitoring for the instance.</p>
    pub monitoring: Option<Monitoring>,
    /// <p>[EC2-VPC] The network interfaces for the instance.</p>
    pub network_interfaces: Option<Vec<InstanceNetworkInterface>>,
    /// <p>The location where the instance launched, if applicable.</p>
    pub placement: Option<Placement>,
    /// <p>The value is <code>Windows</code> for Windows instances; otherwise blank.</p>
    pub platform: Option<String>,
    /// <p>(IPv4 only) The private DNS hostname name assigned to the instance. This DNS hostname can only be used inside the Amazon EC2 network. This name is not available until the instance enters the <code>running</code> state. </p> <p>[EC2-VPC] The Amazon-provided DNS server resolves Amazon-provided private DNS hostnames if you've enabled DNS resolution and DNS hostnames in your VPC. If you are not using the Amazon-provided DNS server in your VPC, your custom domain name servers must resolve the hostname as appropriate.</p>
    pub private_dns_name: Option<String>,
    /// <p>The private IPv4 address assigned to the instance.</p>
    pub private_ip_address: Option<String>,
    /// <p>The product codes attached to this instance, if applicable.</p>
    pub product_codes: Option<Vec<ProductCode>>,
    /// <p>(IPv4 only) The public DNS name assigned to the instance. This name is not available until the instance enters the <code>running</code> state. For EC2-VPC, this name is only available if you've enabled DNS hostnames for your VPC.</p>
    pub public_dns_name: Option<String>,
    /// <p>The public IPv4 address assigned to the instance, if applicable.</p>
    pub public_ip_address: Option<String>,
    /// <p>The RAM disk associated with this instance, if applicable.</p>
    pub ramdisk_id: Option<String>,
    /// <p>The device name of the root device volume (for example, <code>/dev/sda1</code>).</p>
    pub root_device_name: Option<String>,
    /// <p>The root device type used by the AMI. The AMI can use an EBS volume or an instance store volume.</p>
    pub root_device_type: Option<String>,
    /// <p>The security groups for the instance.</p>
    pub security_groups: Option<Vec<GroupIdentifier>>,
    /// <p>Specifies whether to enable an instance launched in a VPC to perform NAT. This controls whether source/destination checking is enabled on the instance. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the instance to perform NAT. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html">NAT Instances</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    pub source_dest_check: Option<bool>,
    /// <p>If the request is a Spot Instance request, the ID of the request.</p>
    pub spot_instance_request_id: Option<String>,
    /// <p>Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
    pub sriov_net_support: Option<String>,
    /// <p>The current state of the instance.</p>
    pub state: Option<InstanceState>,
    /// <p>The reason for the most recent state transition.</p>
    pub state_reason: Option<StateReason>,
    /// <p>The reason for the most recent state transition. This might be an empty string.</p>
    pub state_transition_reason: Option<String>,
    /// <p>[EC2-VPC] The ID of the subnet in which the instance is running.</p>
    pub subnet_id: Option<String>,
    /// <p>Any tags assigned to the instance.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The virtualization type of the instance.</p>
    pub virtualization_type: Option<String>,
    /// <p>[EC2-VPC] The ID of the VPC in which the instance is running.</p>
    pub vpc_id: Option<String>,
}

struct InstanceDeserializer;
impl InstanceDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Instance, XmlParseError> {
        deserialize_elements::<_, Instance, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "amiLaunchIndex" => {
                    obj.ami_launch_index =
                        Some(IntegerDeserializer::deserialize("amiLaunchIndex", stack)?);
                }
                "architecture" => {
                    obj.architecture = Some(ArchitectureValuesDeserializer::deserialize(
                        "architecture",
                        stack,
                    )?);
                }
                "blockDeviceMapping" => {
                    obj.block_device_mappings.get_or_insert(vec![]).extend(
                        InstanceBlockDeviceMappingListDeserializer::deserialize(
                            "blockDeviceMapping",
                            stack,
                        )?,
                    );
                }
                "capacityReservationId" => {
                    obj.capacity_reservation_id = Some(StringDeserializer::deserialize(
                        "capacityReservationId",
                        stack,
                    )?);
                }
                "capacityReservationSpecification" => {
                    obj.capacity_reservation_specification = Some(
                        CapacityReservationSpecificationResponseDeserializer::deserialize(
                            "capacityReservationSpecification",
                            stack,
                        )?,
                    );
                }
                "clientToken" => {
                    obj.client_token = Some(StringDeserializer::deserialize("clientToken", stack)?);
                }
                "cpuOptions" => {
                    obj.cpu_options =
                        Some(CpuOptionsDeserializer::deserialize("cpuOptions", stack)?);
                }
                "ebsOptimized" => {
                    obj.ebs_optimized =
                        Some(BooleanDeserializer::deserialize("ebsOptimized", stack)?);
                }
                "elasticGpuAssociationSet" => {
                    obj.elastic_gpu_associations.get_or_insert(vec![]).extend(
                        ElasticGpuAssociationListDeserializer::deserialize(
                            "elasticGpuAssociationSet",
                            stack,
                        )?,
                    );
                }
                "elasticInferenceAcceleratorAssociationSet" => {
                    obj.elastic_inference_accelerator_associations
                        .get_or_insert(vec![])
                        .extend(
                            ElasticInferenceAcceleratorAssociationListDeserializer::deserialize(
                                "elasticInferenceAcceleratorAssociationSet",
                                stack,
                            )?,
                        );
                }
                "enaSupport" => {
                    obj.ena_support = Some(BooleanDeserializer::deserialize("enaSupport", stack)?);
                }
                "hibernationOptions" => {
                    obj.hibernation_options = Some(HibernationOptionsDeserializer::deserialize(
                        "hibernationOptions",
                        stack,
                    )?);
                }
                "hypervisor" => {
                    obj.hypervisor = Some(HypervisorTypeDeserializer::deserialize(
                        "hypervisor",
                        stack,
                    )?);
                }
                "iamInstanceProfile" => {
                    obj.iam_instance_profile = Some(IamInstanceProfileDeserializer::deserialize(
                        "iamInstanceProfile",
                        stack,
                    )?);
                }
                "imageId" => {
                    obj.image_id = Some(StringDeserializer::deserialize("imageId", stack)?);
                }
                "instanceId" => {
                    obj.instance_id = Some(StringDeserializer::deserialize("instanceId", stack)?);
                }
                "instanceLifecycle" => {
                    obj.instance_lifecycle = Some(InstanceLifecycleTypeDeserializer::deserialize(
                        "instanceLifecycle",
                        stack,
                    )?);
                }
                "instanceType" => {
                    obj.instance_type = Some(InstanceTypeDeserializer::deserialize(
                        "instanceType",
                        stack,
                    )?);
                }
                "kernelId" => {
                    obj.kernel_id = Some(StringDeserializer::deserialize("kernelId", stack)?);
                }
                "keyName" => {
                    obj.key_name = Some(StringDeserializer::deserialize("keyName", stack)?);
                }
                "launchTime" => {
                    obj.launch_time = Some(DateTimeDeserializer::deserialize("launchTime", stack)?);
                }
                "licenseSet" => {
                    obj.licenses
                        .get_or_insert(vec![])
                        .extend(LicenseListDeserializer::deserialize("licenseSet", stack)?);
                }
                "monitoring" => {
                    obj.monitoring =
                        Some(MonitoringDeserializer::deserialize("monitoring", stack)?);
                }
                "networkInterfaceSet" => {
                    obj.network_interfaces.get_or_insert(vec![]).extend(
                        InstanceNetworkInterfaceListDeserializer::deserialize(
                            "networkInterfaceSet",
                            stack,
                        )?,
                    );
                }
                "placement" => {
                    obj.placement = Some(PlacementDeserializer::deserialize("placement", stack)?);
                }
                "platform" => {
                    obj.platform =
                        Some(PlatformValuesDeserializer::deserialize("platform", stack)?);
                }
                "privateDnsName" => {
                    obj.private_dns_name =
                        Some(StringDeserializer::deserialize("privateDnsName", stack)?);
                }
                "privateIpAddress" => {
                    obj.private_ip_address =
                        Some(StringDeserializer::deserialize("privateIpAddress", stack)?);
                }
                "productCodes" => {
                    obj.product_codes.get_or_insert(vec![]).extend(
                        ProductCodeListDeserializer::deserialize("productCodes", stack)?,
                    );
                }
                "dnsName" => {
                    obj.public_dns_name = Some(StringDeserializer::deserialize("dnsName", stack)?);
                }
                "ipAddress" => {
                    obj.public_ip_address =
                        Some(StringDeserializer::deserialize("ipAddress", stack)?);
                }
                "ramdiskId" => {
                    obj.ramdisk_id = Some(StringDeserializer::deserialize("ramdiskId", stack)?);
                }
                "rootDeviceName" => {
                    obj.root_device_name =
                        Some(StringDeserializer::deserialize("rootDeviceName", stack)?);
                }
                "rootDeviceType" => {
                    obj.root_device_type = Some(DeviceTypeDeserializer::deserialize(
                        "rootDeviceType",
                        stack,
                    )?);
                }
                "groupSet" => {
                    obj.security_groups.get_or_insert(vec![]).extend(
                        GroupIdentifierListDeserializer::deserialize("groupSet", stack)?,
                    );
                }
                "sourceDestCheck" => {
                    obj.source_dest_check =
                        Some(BooleanDeserializer::deserialize("sourceDestCheck", stack)?);
                }
                "spotInstanceRequestId" => {
                    obj.spot_instance_request_id = Some(StringDeserializer::deserialize(
                        "spotInstanceRequestId",
                        stack,
                    )?);
                }
                "sriovNetSupport" => {
                    obj.sriov_net_support =
                        Some(StringDeserializer::deserialize("sriovNetSupport", stack)?);
                }
                "instanceState" => {
                    obj.state = Some(InstanceStateDeserializer::deserialize(
                        "instanceState",
                        stack,
                    )?);
                }
                "stateReason" => {
                    obj.state_reason =
                        Some(StateReasonDeserializer::deserialize("stateReason", stack)?);
                }
                "reason" => {
                    obj.state_transition_reason =
                        Some(StringDeserializer::deserialize("reason", stack)?);
                }
                "subnetId" => {
                    obj.subnet_id = Some(StringDeserializer::deserialize("subnetId", stack)?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "virtualizationType" => {
                    obj.virtualization_type = Some(VirtualizationTypeDeserializer::deserialize(
                        "virtualizationType",
                        stack,
                    )?);
                }
                "vpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes an instance attribute.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceAttribute {
    /// <p>The block device mapping of the instance.</p>
    pub block_device_mappings: Option<Vec<InstanceBlockDeviceMapping>>,
    /// <p>If the value is <code>true</code>, you can't terminate the instance through the Amazon EC2 console, CLI, or API; otherwise, you can.</p>
    pub disable_api_termination: Option<AttributeBooleanValue>,
    /// <p>Indicates whether the instance is optimized for Amazon EBS I/O.</p>
    pub ebs_optimized: Option<AttributeBooleanValue>,
    /// <p>Indicates whether enhanced networking with ENA is enabled.</p>
    pub ena_support: Option<AttributeBooleanValue>,
    /// <p>The security groups associated with the instance.</p>
    pub groups: Option<Vec<GroupIdentifier>>,
    /// <p>The ID of the instance.</p>
    pub instance_id: Option<String>,
    /// <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p>
    pub instance_initiated_shutdown_behavior: Option<AttributeValue>,
    /// <p>The instance type.</p>
    pub instance_type: Option<AttributeValue>,
    /// <p>The kernel ID.</p>
    pub kernel_id: Option<AttributeValue>,
    /// <p>A list of product codes.</p>
    pub product_codes: Option<Vec<ProductCode>>,
    /// <p>The RAM disk ID.</p>
    pub ramdisk_id: Option<AttributeValue>,
    /// <p>The device name of the root device volume (for example, <code>/dev/sda1</code>).</p>
    pub root_device_name: Option<AttributeValue>,
    /// <p>Indicates whether source/destination checking is enabled. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. This value must be <code>false</code> for a NAT instance to perform NAT.</p>
    pub source_dest_check: Option<AttributeBooleanValue>,
    /// <p>Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.</p>
    pub sriov_net_support: Option<AttributeValue>,
    /// <p>The user data.</p>
    pub user_data: Option<AttributeValue>,
}

struct InstanceAttributeDeserializer;
impl InstanceAttributeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InstanceAttribute, XmlParseError> {
        deserialize_elements::<_, InstanceAttribute, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "blockDeviceMapping" => {
                    obj.block_device_mappings.get_or_insert(vec![]).extend(
                        InstanceBlockDeviceMappingListDeserializer::deserialize(
                            "blockDeviceMapping",
                            stack,
                        )?,
                    );
                }
                "disableApiTermination" => {
                    obj.disable_api_termination =
                        Some(AttributeBooleanValueDeserializer::deserialize(
                            "disableApiTermination",
                            stack,
                        )?);
                }
                "ebsOptimized" => {
                    obj.ebs_optimized = Some(AttributeBooleanValueDeserializer::deserialize(
                        "ebsOptimized",
                        stack,
                    )?);
                }
                "enaSupport" => {
                    obj.ena_support = Some(AttributeBooleanValueDeserializer::deserialize(
                        "enaSupport",
                        stack,
                    )?);
                }
                "groupSet" => {
                    obj.groups.get_or_insert(vec![]).extend(
                        GroupIdentifierListDeserializer::deserialize("groupSet", stack)?,
                    );
                }
                "instanceId" => {
                    obj.instance_id = Some(StringDeserializer::deserialize("instanceId", stack)?);
                }
                "instanceInitiatedShutdownBehavior" => {
                    obj.instance_initiated_shutdown_behavior =
                        Some(AttributeValueDeserializer::deserialize(
                            "instanceInitiatedShutdownBehavior",
                            stack,
                        )?);
                }
                "instanceType" => {
                    obj.instance_type = Some(AttributeValueDeserializer::deserialize(
                        "instanceType",
                        stack,
                    )?);
                }
                "kernel" => {
                    obj.kernel_id = Some(AttributeValueDeserializer::deserialize("kernel", stack)?);
                }
                "productCodes" => {
                    obj.product_codes.get_or_insert(vec![]).extend(
                        ProductCodeListDeserializer::deserialize("productCodes", stack)?,
                    );
                }
                "ramdisk" => {
                    obj.ramdisk_id =
                        Some(AttributeValueDeserializer::deserialize("ramdisk", stack)?);
                }
                "rootDeviceName" => {
                    obj.root_device_name = Some(AttributeValueDeserializer::deserialize(
                        "rootDeviceName",
                        stack,
                    )?);
                }
                "sourceDestCheck" => {
                    obj.source_dest_check = Some(AttributeBooleanValueDeserializer::deserialize(
                        "sourceDestCheck",
                        stack,
                    )?);
                }
                "sriovNetSupport" => {
                    obj.sriov_net_support = Some(AttributeValueDeserializer::deserialize(
                        "sriovNetSupport",
                        stack,
                    )?);
                }
                "userData" => {
                    obj.user_data =
                        Some(AttributeValueDeserializer::deserialize("userData", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes a block device mapping.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceBlockDeviceMapping {
    /// <p>The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
    pub device_name: Option<String>,
    /// <p>Parameters used to automatically set up EBS volumes when the instance is launched.</p>
    pub ebs: Option<EbsInstanceBlockDevice>,
}

struct InstanceBlockDeviceMappingDeserializer;
impl InstanceBlockDeviceMappingDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InstanceBlockDeviceMapping, XmlParseError> {
        deserialize_elements::<_, InstanceBlockDeviceMapping, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "deviceName" => {
                        obj.device_name =
                            Some(StringDeserializer::deserialize("deviceName", stack)?);
                    }
                    "ebs" => {
                        obj.ebs = Some(EbsInstanceBlockDeviceDeserializer::deserialize(
                            "ebs", stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct InstanceBlockDeviceMappingListDeserializer;
impl InstanceBlockDeviceMappingListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<InstanceBlockDeviceMapping>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(InstanceBlockDeviceMappingDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a block device mapping entry.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceBlockDeviceMappingSpecification {
    /// <p>The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
    pub device_name: Option<String>,
    /// <p>Parameters used to automatically set up EBS volumes when the instance is launched.</p>
    pub ebs: Option<EbsInstanceBlockDeviceSpecification>,
    /// <p>suppress the specified device included in the block device mapping.</p>
    pub no_device: Option<String>,
    /// <p>The virtual device name.</p>
    pub virtual_name: Option<String>,
}

/// Serialize `InstanceBlockDeviceMappingSpecification` contents to a `SignedRequest`.
struct InstanceBlockDeviceMappingSpecificationSerializer;
impl InstanceBlockDeviceMappingSpecificationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &InstanceBlockDeviceMappingSpecification) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.device_name {
            params.put(&format!("{}{}", prefix, "DeviceName"), &field_value);
        }
        if let Some(ref field_value) = obj.ebs {
            EbsInstanceBlockDeviceSpecificationSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Ebs"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.no_device {
            params.put(&format!("{}{}", prefix, "NoDevice"), &field_value);
        }
        if let Some(ref field_value) = obj.virtual_name {
            params.put(&format!("{}{}", prefix, "VirtualName"), &field_value);
        }
    }
}

/// Serialize `InstanceBlockDeviceMappingSpecificationList` contents to a `SignedRequest`.
struct InstanceBlockDeviceMappingSpecificationListSerializer;
impl InstanceBlockDeviceMappingSpecificationListSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &Vec<InstanceBlockDeviceMappingSpecification>,
    ) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            InstanceBlockDeviceMappingSpecificationSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Information about the instance type that the Dedicated Host supports.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceCapacity {
    /// <p>The number of instances that can still be launched onto the Dedicated Host.</p>
    pub available_capacity: Option<i64>,
    /// <p>The instance type size supported by the Dedicated Host.</p>
    pub instance_type: Option<String>,
    /// <p>The total number of instances that can be launched onto the Dedicated Host.</p>
    pub total_capacity: Option<i64>,
}

struct InstanceCapacityDeserializer;
impl InstanceCapacityDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InstanceCapacity, XmlParseError> {
        deserialize_elements::<_, InstanceCapacity, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "availableCapacity" => {
                    obj.available_capacity = Some(IntegerDeserializer::deserialize(
                        "availableCapacity",
                        stack,
                    )?);
                }
                "instanceType" => {
                    obj.instance_type =
                        Some(StringDeserializer::deserialize("instanceType", stack)?);
                }
                "totalCapacity" => {
                    obj.total_capacity =
                        Some(IntegerDeserializer::deserialize("totalCapacity", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes a Reserved Instance listing state.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceCount {
    /// <p>The number of listed Reserved Instances in the state specified by the <code>state</code>.</p>
    pub instance_count: Option<i64>,
    /// <p>The states of the listed Reserved Instances.</p>
    pub state: Option<String>,
}

struct InstanceCountDeserializer;
impl InstanceCountDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InstanceCount, XmlParseError> {
        deserialize_elements::<_, InstanceCount, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "instanceCount" => {
                    obj.instance_count =
                        Some(IntegerDeserializer::deserialize("instanceCount", stack)?);
                }
                "state" => {
                    obj.state = Some(ListingStateDeserializer::deserialize("state", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct InstanceCountListDeserializer;
impl InstanceCountListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<InstanceCount>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(InstanceCountDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the credit option for CPU usage of a T2 or T3 instance. </p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceCreditSpecification {
    /// <p>The credit option for CPU usage of the instance. Valid values are <code>standard</code> and <code>unlimited</code>.</p>
    pub cpu_credits: Option<String>,
    /// <p>The ID of the instance.</p>
    pub instance_id: Option<String>,
}

struct InstanceCreditSpecificationDeserializer;
impl InstanceCreditSpecificationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InstanceCreditSpecification, XmlParseError> {
        deserialize_elements::<_, InstanceCreditSpecification, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "cpuCredits" => {
                        obj.cpu_credits =
                            Some(StringDeserializer::deserialize("cpuCredits", stack)?);
                    }
                    "instanceId" => {
                        obj.instance_id =
                            Some(StringDeserializer::deserialize("instanceId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct InstanceCreditSpecificationListDeserializer;
impl InstanceCreditSpecificationListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<InstanceCreditSpecification>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(InstanceCreditSpecificationDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `InstanceCreditSpecificationListRequest` contents to a `SignedRequest`.
struct InstanceCreditSpecificationListRequestSerializer;
impl InstanceCreditSpecificationListRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<InstanceCreditSpecificationRequest>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            InstanceCreditSpecificationRequestSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes the credit option for CPU usage of a T2 or T3 instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceCreditSpecificationRequest {
    /// <p>The credit option for CPU usage of the instance. Valid values are <code>standard</code> and <code>unlimited</code>.</p>
    pub cpu_credits: Option<String>,
    /// <p>The ID of the instance.</p>
    pub instance_id: Option<String>,
}

/// Serialize `InstanceCreditSpecificationRequest` contents to a `SignedRequest`.
struct InstanceCreditSpecificationRequestSerializer;
impl InstanceCreditSpecificationRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &InstanceCreditSpecificationRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.cpu_credits {
            params.put(&format!("{}{}", prefix, "CpuCredits"), &field_value);
        }
        if let Some(ref field_value) = obj.instance_id {
            params.put(&format!("{}{}", prefix, "InstanceId"), &field_value);
        }
    }
}

struct InstanceEventIdDeserializer;
impl InstanceEventIdDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes an instance to export.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceExportDetails {
    /// <p>The ID of the resource being exported.</p>
    pub instance_id: Option<String>,
    /// <p>The target virtualization environment.</p>
    pub target_environment: Option<String>,
}

struct InstanceExportDetailsDeserializer;
impl InstanceExportDetailsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InstanceExportDetails, XmlParseError> {
        deserialize_elements::<_, InstanceExportDetails, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "instanceId" => {
                    obj.instance_id = Some(StringDeserializer::deserialize("instanceId", stack)?);
                }
                "targetEnvironment" => {
                    obj.target_environment = Some(ExportEnvironmentDeserializer::deserialize(
                        "targetEnvironment",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct InstanceHealthStatusDeserializer;
impl InstanceHealthStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct InstanceIdDeserializer;
impl InstanceIdDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct InstanceIdSetDeserializer;
impl InstanceIdSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(StringDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `InstanceIdStringList` contents to a `SignedRequest`.
struct InstanceIdStringListSerializer;
impl InstanceIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct InstanceIdsSetDeserializer;
impl InstanceIdsSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(InstanceIdDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct InstanceInterruptionBehaviorDeserializer;
impl InstanceInterruptionBehaviorDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes an IPv6 address.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceIpv6Address {
    /// <p>The IPv6 address.</p>
    pub ipv_6_address: Option<String>,
}

struct InstanceIpv6AddressDeserializer;
impl InstanceIpv6AddressDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InstanceIpv6Address, XmlParseError> {
        deserialize_elements::<_, InstanceIpv6Address, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "ipv6Address" => {
                    obj.ipv_6_address =
                        Some(StringDeserializer::deserialize("ipv6Address", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `InstanceIpv6Address` contents to a `SignedRequest`.
struct InstanceIpv6AddressSerializer;
impl InstanceIpv6AddressSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &InstanceIpv6Address) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.ipv_6_address {
            params.put(&format!("{}{}", prefix, "Ipv6Address"), &field_value);
        }
    }
}

struct InstanceIpv6AddressListDeserializer;
impl InstanceIpv6AddressListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<InstanceIpv6Address>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(InstanceIpv6AddressDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `InstanceIpv6AddressList` contents to a `SignedRequest`.
struct InstanceIpv6AddressListSerializer;
impl InstanceIpv6AddressListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<InstanceIpv6Address>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            InstanceIpv6AddressSerializer::serialize(params, &key, obj);
        }
    }
}

/// Serialize `InstanceIpv6AddressListRequest` contents to a `SignedRequest`.
struct InstanceIpv6AddressListRequestSerializer;
impl InstanceIpv6AddressListRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<InstanceIpv6AddressRequest>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            InstanceIpv6AddressRequestSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes an IPv6 address.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceIpv6AddressRequest {
    /// <p>The IPv6 address.</p>
    pub ipv_6_address: Option<String>,
}

/// Serialize `InstanceIpv6AddressRequest` contents to a `SignedRequest`.
struct InstanceIpv6AddressRequestSerializer;
impl InstanceIpv6AddressRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &InstanceIpv6AddressRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.ipv_6_address {
            params.put(&format!("{}{}", prefix, "Ipv6Address"), &field_value);
        }
    }
}

struct InstanceLifecycleDeserializer;
impl InstanceLifecycleDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct InstanceLifecycleTypeDeserializer;
impl InstanceLifecycleTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct InstanceListDeserializer;
impl InstanceListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<Instance>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(InstanceDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the market (purchasing) option for the instances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceMarketOptionsRequest {
    /// <p>The market type.</p>
    pub market_type: Option<String>,
    /// <p>The options for Spot Instances.</p>
    pub spot_options: Option<SpotMarketOptions>,
}

/// Serialize `InstanceMarketOptionsRequest` contents to a `SignedRequest`.
struct InstanceMarketOptionsRequestSerializer;
impl InstanceMarketOptionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &InstanceMarketOptionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.market_type {
            params.put(&format!("{}{}", prefix, "MarketType"), &field_value);
        }
        if let Some(ref field_value) = obj.spot_options {
            SpotMarketOptionsSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SpotOptions"),
                field_value,
            );
        }
    }
}

struct InstanceMatchCriteriaDeserializer;
impl InstanceMatchCriteriaDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes the monitoring of an instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceMonitoring {
    /// <p>The ID of the instance.</p>
    pub instance_id: Option<String>,
    /// <p>The monitoring for the instance.</p>
    pub monitoring: Option<Monitoring>,
}

struct InstanceMonitoringDeserializer;
impl InstanceMonitoringDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InstanceMonitoring, XmlParseError> {
        deserialize_elements::<_, InstanceMonitoring, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "instanceId" => {
                    obj.instance_id = Some(StringDeserializer::deserialize("instanceId", stack)?);
                }
                "monitoring" => {
                    obj.monitoring =
                        Some(MonitoringDeserializer::deserialize("monitoring", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct InstanceMonitoringListDeserializer;
impl InstanceMonitoringListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<InstanceMonitoring>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(InstanceMonitoringDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a network interface.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceNetworkInterface {
    /// <p>The association information for an Elastic IPv4 associated with the network interface.</p>
    pub association: Option<InstanceNetworkInterfaceAssociation>,
    /// <p>The network interface attachment.</p>
    pub attachment: Option<InstanceNetworkInterfaceAttachment>,
    /// <p>The description.</p>
    pub description: Option<String>,
    /// <p>One or more security groups.</p>
    pub groups: Option<Vec<GroupIdentifier>>,
    /// <p>Describes the type of network interface.</p> <p>Valid values: <code>interface</code> | <code>efa</code> </p>
    pub interface_type: Option<String>,
    /// <p>One or more IPv6 addresses associated with the network interface.</p>
    pub ipv_6_addresses: Option<Vec<InstanceIpv6Address>>,
    /// <p>The MAC address.</p>
    pub mac_address: Option<String>,
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: Option<String>,
    /// <p>The ID of the AWS account that created the network interface.</p>
    pub owner_id: Option<String>,
    /// <p>The private DNS name.</p>
    pub private_dns_name: Option<String>,
    /// <p>The IPv4 address of the network interface within the subnet.</p>
    pub private_ip_address: Option<String>,
    /// <p>One or more private IPv4 addresses associated with the network interface.</p>
    pub private_ip_addresses: Option<Vec<InstancePrivateIpAddress>>,
    /// <p>Indicates whether to validate network traffic to or from this network interface.</p>
    pub source_dest_check: Option<bool>,
    /// <p>The status of the network interface.</p>
    pub status: Option<String>,
    /// <p>The ID of the subnet.</p>
    pub subnet_id: Option<String>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: Option<String>,
}

struct InstanceNetworkInterfaceDeserializer;
impl InstanceNetworkInterfaceDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InstanceNetworkInterface, XmlParseError> {
        deserialize_elements::<_, InstanceNetworkInterface, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "association" => {
                        obj.association = Some(
                            InstanceNetworkInterfaceAssociationDeserializer::deserialize(
                                "association",
                                stack,
                            )?,
                        );
                    }
                    "attachment" => {
                        obj.attachment =
                            Some(InstanceNetworkInterfaceAttachmentDeserializer::deserialize(
                                "attachment",
                                stack,
                            )?);
                    }
                    "description" => {
                        obj.description =
                            Some(StringDeserializer::deserialize("description", stack)?);
                    }
                    "groupSet" => {
                        obj.groups.get_or_insert(vec![]).extend(
                            GroupIdentifierListDeserializer::deserialize("groupSet", stack)?,
                        );
                    }
                    "interfaceType" => {
                        obj.interface_type =
                            Some(StringDeserializer::deserialize("interfaceType", stack)?);
                    }
                    "ipv6AddressesSet" => {
                        obj.ipv_6_addresses.get_or_insert(vec![]).extend(
                            InstanceIpv6AddressListDeserializer::deserialize(
                                "ipv6AddressesSet",
                                stack,
                            )?,
                        );
                    }
                    "macAddress" => {
                        obj.mac_address =
                            Some(StringDeserializer::deserialize("macAddress", stack)?);
                    }
                    "networkInterfaceId" => {
                        obj.network_interface_id = Some(StringDeserializer::deserialize(
                            "networkInterfaceId",
                            stack,
                        )?);
                    }
                    "ownerId" => {
                        obj.owner_id = Some(StringDeserializer::deserialize("ownerId", stack)?);
                    }
                    "privateDnsName" => {
                        obj.private_dns_name =
                            Some(StringDeserializer::deserialize("privateDnsName", stack)?);
                    }
                    "privateIpAddress" => {
                        obj.private_ip_address =
                            Some(StringDeserializer::deserialize("privateIpAddress", stack)?);
                    }
                    "privateIpAddressesSet" => {
                        obj.private_ip_addresses.get_or_insert(vec![]).extend(
                            InstancePrivateIpAddressListDeserializer::deserialize(
                                "privateIpAddressesSet",
                                stack,
                            )?,
                        );
                    }
                    "sourceDestCheck" => {
                        obj.source_dest_check =
                            Some(BooleanDeserializer::deserialize("sourceDestCheck", stack)?);
                    }
                    "status" => {
                        obj.status = Some(NetworkInterfaceStatusDeserializer::deserialize(
                            "status", stack,
                        )?);
                    }
                    "subnetId" => {
                        obj.subnet_id = Some(StringDeserializer::deserialize("subnetId", stack)?);
                    }
                    "vpcId" => {
                        obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes association information for an Elastic IP address (IPv4).</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceNetworkInterfaceAssociation {
    /// <p>The ID of the owner of the Elastic IP address.</p>
    pub ip_owner_id: Option<String>,
    /// <p>The public DNS name.</p>
    pub public_dns_name: Option<String>,
    /// <p>The public IP address or Elastic IP address bound to the network interface.</p>
    pub public_ip: Option<String>,
}

struct InstanceNetworkInterfaceAssociationDeserializer;
impl InstanceNetworkInterfaceAssociationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InstanceNetworkInterfaceAssociation, XmlParseError> {
        deserialize_elements::<_, InstanceNetworkInterfaceAssociation, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "ipOwnerId" => {
                        obj.ip_owner_id =
                            Some(StringDeserializer::deserialize("ipOwnerId", stack)?);
                    }
                    "publicDnsName" => {
                        obj.public_dns_name =
                            Some(StringDeserializer::deserialize("publicDnsName", stack)?);
                    }
                    "publicIp" => {
                        obj.public_ip = Some(StringDeserializer::deserialize("publicIp", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes a network interface attachment.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceNetworkInterfaceAttachment {
    /// <p>The time stamp when the attachment initiated.</p>
    pub attach_time: Option<String>,
    /// <p>The ID of the network interface attachment.</p>
    pub attachment_id: Option<String>,
    /// <p>Indicates whether the network interface is deleted when the instance is terminated.</p>
    pub delete_on_termination: Option<bool>,
    /// <p>The index of the device on the instance for the network interface attachment.</p>
    pub device_index: Option<i64>,
    /// <p>The attachment state.</p>
    pub status: Option<String>,
}

struct InstanceNetworkInterfaceAttachmentDeserializer;
impl InstanceNetworkInterfaceAttachmentDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InstanceNetworkInterfaceAttachment, XmlParseError> {
        deserialize_elements::<_, InstanceNetworkInterfaceAttachment, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "attachTime" => {
                        obj.attach_time =
                            Some(DateTimeDeserializer::deserialize("attachTime", stack)?);
                    }
                    "attachmentId" => {
                        obj.attachment_id =
                            Some(StringDeserializer::deserialize("attachmentId", stack)?);
                    }
                    "deleteOnTermination" => {
                        obj.delete_on_termination = Some(BooleanDeserializer::deserialize(
                            "deleteOnTermination",
                            stack,
                        )?);
                    }
                    "deviceIndex" => {
                        obj.device_index =
                            Some(IntegerDeserializer::deserialize("deviceIndex", stack)?);
                    }
                    "status" => {
                        obj.status =
                            Some(AttachmentStatusDeserializer::deserialize("status", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct InstanceNetworkInterfaceListDeserializer;
impl InstanceNetworkInterfaceListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<InstanceNetworkInterface>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(InstanceNetworkInterfaceDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a network interface.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceNetworkInterfaceSpecification {
    /// <p>Indicates whether to assign a public IPv4 address to an instance you launch in a VPC. The public IP address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is <code>true</code>.</p>
    pub associate_public_ip_address: Option<bool>,
    /// <p>If set to <code>true</code>, the interface is deleted when the instance is terminated. You can specify <code>true</code> only if creating a new network interface when launching an instance.</p>
    pub delete_on_termination: Option<bool>,
    /// <p>The description of the network interface. Applies only if creating a network interface when launching an instance.</p>
    pub description: Option<String>,
    /// <p>The position of the network interface in the attachment order. A primary network interface has a device index of 0.</p> <p>If you specify a network interface when launching an instance, you must specify the device index.</p>
    pub device_index: Option<i64>,
    /// <p>The IDs of the security groups for the network interface. Applies only if creating a network interface when launching an instance.</p>
    pub groups: Option<Vec<String>>,
    /// <p>The type of network interface. To create an Elastic Fabric Adapter (EFA), specify <code>efa</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa.html">Elastic Fabric Adapter</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>If you are not creating an EFA, specify <code>interface</code> or omit this parameter.</p> <p>Valid values: <code>interface</code> | <code>efa</code> </p>
    pub interface_type: Option<String>,
    /// <p>A number of IPv6 addresses to assign to the network interface. Amazon EC2 chooses the IPv6 addresses from the range of the subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.</p>
    pub ipv_6_address_count: Option<i64>,
    /// <p>One or more IPv6 addresses to assign to the network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.</p>
    pub ipv_6_addresses: Option<Vec<InstanceIpv6Address>>,
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: Option<String>,
    /// <p>The private IPv4 address of the network interface. Applies only if creating a network interface when launching an instance. You cannot specify this option if you're launching more than one instance in a <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html">RunInstances</a> request.</p>
    pub private_ip_address: Option<String>,
    /// <p>One or more private IPv4 addresses to assign to the network interface. Only one private IPv4 address can be designated as primary. You cannot specify this option if you're launching more than one instance in a <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html">RunInstances</a> request.</p>
    pub private_ip_addresses: Option<Vec<PrivateIpAddressSpecification>>,
    /// <p>The number of secondary private IPv4 addresses. You can't specify this option and specify more than one private IP address using the private IP addresses option. You cannot specify this option if you're launching more than one instance in a <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html">RunInstances</a> request.</p>
    pub secondary_private_ip_address_count: Option<i64>,
    /// <p>The ID of the subnet associated with the network string. Applies only if creating a network interface when launching an instance.</p>
    pub subnet_id: Option<String>,
}

struct InstanceNetworkInterfaceSpecificationDeserializer;
impl InstanceNetworkInterfaceSpecificationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InstanceNetworkInterfaceSpecification, XmlParseError> {
        deserialize_elements::<_, InstanceNetworkInterfaceSpecification, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "associatePublicIpAddress" => {
                        obj.associate_public_ip_address = Some(BooleanDeserializer::deserialize(
                            "associatePublicIpAddress",
                            stack,
                        )?);
                    }
                    "deleteOnTermination" => {
                        obj.delete_on_termination = Some(BooleanDeserializer::deserialize(
                            "deleteOnTermination",
                            stack,
                        )?);
                    }
                    "description" => {
                        obj.description =
                            Some(StringDeserializer::deserialize("description", stack)?);
                    }
                    "deviceIndex" => {
                        obj.device_index =
                            Some(IntegerDeserializer::deserialize("deviceIndex", stack)?);
                    }
                    "SecurityGroupId" => {
                        obj.groups.get_or_insert(vec![]).extend(
                            SecurityGroupIdStringListDeserializer::deserialize(
                                "SecurityGroupId",
                                stack,
                            )?,
                        );
                    }
                    "InterfaceType" => {
                        obj.interface_type =
                            Some(StringDeserializer::deserialize("InterfaceType", stack)?);
                    }
                    "ipv6AddressCount" => {
                        obj.ipv_6_address_count =
                            Some(IntegerDeserializer::deserialize("ipv6AddressCount", stack)?);
                    }
                    "ipv6AddressesSet" => {
                        obj.ipv_6_addresses.get_or_insert(vec![]).extend(
                            InstanceIpv6AddressListDeserializer::deserialize(
                                "ipv6AddressesSet",
                                stack,
                            )?,
                        );
                    }
                    "networkInterfaceId" => {
                        obj.network_interface_id = Some(StringDeserializer::deserialize(
                            "networkInterfaceId",
                            stack,
                        )?);
                    }
                    "privateIpAddress" => {
                        obj.private_ip_address =
                            Some(StringDeserializer::deserialize("privateIpAddress", stack)?);
                    }
                    "privateIpAddressesSet" => {
                        obj.private_ip_addresses.get_or_insert(vec![]).extend(
                            PrivateIpAddressSpecificationListDeserializer::deserialize(
                                "privateIpAddressesSet",
                                stack,
                            )?,
                        );
                    }
                    "secondaryPrivateIpAddressCount" => {
                        obj.secondary_private_ip_address_count =
                            Some(IntegerDeserializer::deserialize(
                                "secondaryPrivateIpAddressCount",
                                stack,
                            )?);
                    }
                    "subnetId" => {
                        obj.subnet_id = Some(StringDeserializer::deserialize("subnetId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}

/// Serialize `InstanceNetworkInterfaceSpecification` contents to a `SignedRequest`.
struct InstanceNetworkInterfaceSpecificationSerializer;
impl InstanceNetworkInterfaceSpecificationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &InstanceNetworkInterfaceSpecification) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.associate_public_ip_address {
            params.put(
                &format!("{}{}", prefix, "AssociatePublicIpAddress"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.delete_on_termination {
            params.put(
                &format!("{}{}", prefix, "DeleteOnTermination"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.device_index {
            params.put(&format!("{}{}", prefix, "DeviceIndex"), &field_value);
        }
        if let Some(ref field_value) = obj.groups {
            SecurityGroupIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SecurityGroupId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.interface_type {
            params.put(&format!("{}{}", prefix, "InterfaceType"), &field_value);
        }
        if let Some(ref field_value) = obj.ipv_6_address_count {
            params.put(&format!("{}{}", prefix, "Ipv6AddressCount"), &field_value);
        }
        if let Some(ref field_value) = obj.ipv_6_addresses {
            InstanceIpv6AddressListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Ipv6AddressesSet"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.network_interface_id {
            params.put(&format!("{}{}", prefix, "NetworkInterfaceId"), &field_value);
        }
        if let Some(ref field_value) = obj.private_ip_address {
            params.put(&format!("{}{}", prefix, "PrivateIpAddress"), &field_value);
        }
        if let Some(ref field_value) = obj.private_ip_addresses {
            PrivateIpAddressSpecificationListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "PrivateIpAddressesSet"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.secondary_private_ip_address_count {
            params.put(
                &format!("{}{}", prefix, "SecondaryPrivateIpAddressCount"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.subnet_id {
            params.put(&format!("{}{}", prefix, "SubnetId"), &field_value);
        }
    }
}

struct InstanceNetworkInterfaceSpecificationListDeserializer;
impl InstanceNetworkInterfaceSpecificationListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<InstanceNetworkInterfaceSpecification>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(
                    InstanceNetworkInterfaceSpecificationDeserializer::deserialize("item", stack)?,
                );
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `InstanceNetworkInterfaceSpecificationList` contents to a `SignedRequest`.
struct InstanceNetworkInterfaceSpecificationListSerializer;
impl InstanceNetworkInterfaceSpecificationListSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &Vec<InstanceNetworkInterfaceSpecification>,
    ) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            InstanceNetworkInterfaceSpecificationSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes a private IPv4 address.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstancePrivateIpAddress {
    /// <p>The association information for an Elastic IP address for the network interface.</p>
    pub association: Option<InstanceNetworkInterfaceAssociation>,
    /// <p>Indicates whether this IPv4 address is the primary private IP address of the network interface.</p>
    pub primary: Option<bool>,
    /// <p>The private IPv4 DNS name.</p>
    pub private_dns_name: Option<String>,
    /// <p>The private IPv4 address of the network interface.</p>
    pub private_ip_address: Option<String>,
}

struct InstancePrivateIpAddressDeserializer;
impl InstancePrivateIpAddressDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InstancePrivateIpAddress, XmlParseError> {
        deserialize_elements::<_, InstancePrivateIpAddress, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "association" => {
                        obj.association = Some(
                            InstanceNetworkInterfaceAssociationDeserializer::deserialize(
                                "association",
                                stack,
                            )?,
                        );
                    }
                    "primary" => {
                        obj.primary = Some(BooleanDeserializer::deserialize("primary", stack)?);
                    }
                    "privateDnsName" => {
                        obj.private_dns_name =
                            Some(StringDeserializer::deserialize("privateDnsName", stack)?);
                    }
                    "privateIpAddress" => {
                        obj.private_ip_address =
                            Some(StringDeserializer::deserialize("privateIpAddress", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct InstancePrivateIpAddressListDeserializer;
impl InstancePrivateIpAddressListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<InstancePrivateIpAddress>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(InstancePrivateIpAddressDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>The instance details to specify which volumes should be snapshotted.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceSpecification {
    /// <p>Excludes the root volume from being snapshotted.</p>
    pub exclude_boot_volume: Option<bool>,
    /// <p>The instance to specify which volumes should be snapshotted.</p>
    pub instance_id: Option<String>,
}

/// Serialize `InstanceSpecification` contents to a `SignedRequest`.
struct InstanceSpecificationSerializer;
impl InstanceSpecificationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &InstanceSpecification) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.exclude_boot_volume {
            params.put(&format!("{}{}", prefix, "ExcludeBootVolume"), &field_value);
        }
        if let Some(ref field_value) = obj.instance_id {
            params.put(&format!("{}{}", prefix, "InstanceId"), &field_value);
        }
    }
}

/// <p>Describes the current state of an instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceState {
    /// <p>The state of the instance as a 16-bit unsigned integer. </p> <p>The high byte is all of the bits between 2^8 and (2^16)-1, which equals decimal values between 256 and 65,535. These numerical values are used for internal purposes and should be ignored.</p> <p>The low byte is all of the bits between 2^0 and (2^8)-1, which equals decimal values between 0 and 255. </p> <p>The valid values for instance-state-code will all be in the range of the low byte and they are:</p> <ul> <li> <p> <code>0</code> : <code>pending</code> </p> </li> <li> <p> <code>16</code> : <code>running</code> </p> </li> <li> <p> <code>32</code> : <code>shutting-down</code> </p> </li> <li> <p> <code>48</code> : <code>terminated</code> </p> </li> <li> <p> <code>64</code> : <code>stopping</code> </p> </li> <li> <p> <code>80</code> : <code>stopped</code> </p> </li> </ul> <p>You can ignore the high byte value by zeroing out all of the bits above 2^8 or 256 in decimal.</p>
    pub code: Option<i64>,
    /// <p>The current state of the instance.</p>
    pub name: Option<String>,
}

struct InstanceStateDeserializer;
impl InstanceStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InstanceState, XmlParseError> {
        deserialize_elements::<_, InstanceState, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "code" => {
                    obj.code = Some(IntegerDeserializer::deserialize("code", stack)?);
                }
                "name" => {
                    obj.name = Some(InstanceStateNameDeserializer::deserialize("name", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes an instance state change.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceStateChange {
    /// <p>The current state of the instance.</p>
    pub current_state: Option<InstanceState>,
    /// <p>The ID of the instance.</p>
    pub instance_id: Option<String>,
    /// <p>The previous state of the instance.</p>
    pub previous_state: Option<InstanceState>,
}

struct InstanceStateChangeDeserializer;
impl InstanceStateChangeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InstanceStateChange, XmlParseError> {
        deserialize_elements::<_, InstanceStateChange, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "currentState" => {
                    obj.current_state = Some(InstanceStateDeserializer::deserialize(
                        "currentState",
                        stack,
                    )?);
                }
                "instanceId" => {
                    obj.instance_id = Some(StringDeserializer::deserialize("instanceId", stack)?);
                }
                "previousState" => {
                    obj.previous_state = Some(InstanceStateDeserializer::deserialize(
                        "previousState",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct InstanceStateChangeListDeserializer;
impl InstanceStateChangeListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<InstanceStateChange>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(InstanceStateChangeDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct InstanceStateNameDeserializer;
impl InstanceStateNameDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes the status of an instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceStatus {
    /// <p>The Availability Zone of the instance.</p>
    pub availability_zone: Option<String>,
    /// <p>Any scheduled events associated with the instance.</p>
    pub events: Option<Vec<InstanceStatusEvent>>,
    /// <p>The ID of the instance.</p>
    pub instance_id: Option<String>,
    /// <p>The intended state of the instance. <a>DescribeInstanceStatus</a> requires that an instance be in the <code>running</code> state.</p>
    pub instance_state: Option<InstanceState>,
    /// <p>Reports impaired functionality that stems from issues internal to the instance, such as impaired reachability.</p>
    pub instance_status: Option<InstanceStatusSummary>,
    /// <p>Reports impaired functionality that stems from issues related to the systems that support an instance, such as hardware failures and network connectivity problems.</p>
    pub system_status: Option<InstanceStatusSummary>,
}

struct InstanceStatusDeserializer;
impl InstanceStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InstanceStatus, XmlParseError> {
        deserialize_elements::<_, InstanceStatus, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "availabilityZone" => {
                    obj.availability_zone =
                        Some(StringDeserializer::deserialize("availabilityZone", stack)?);
                }
                "eventsSet" => {
                    obj.events.get_or_insert(vec![]).extend(
                        InstanceStatusEventListDeserializer::deserialize("eventsSet", stack)?,
                    );
                }
                "instanceId" => {
                    obj.instance_id = Some(StringDeserializer::deserialize("instanceId", stack)?);
                }
                "instanceState" => {
                    obj.instance_state = Some(InstanceStateDeserializer::deserialize(
                        "instanceState",
                        stack,
                    )?);
                }
                "instanceStatus" => {
                    obj.instance_status = Some(InstanceStatusSummaryDeserializer::deserialize(
                        "instanceStatus",
                        stack,
                    )?);
                }
                "systemStatus" => {
                    obj.system_status = Some(InstanceStatusSummaryDeserializer::deserialize(
                        "systemStatus",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes the instance status.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceStatusDetails {
    /// <p>The time when a status check failed. For an instance that was launched and impaired, this is the time when the instance was launched.</p>
    pub impaired_since: Option<String>,
    /// <p>The type of instance status.</p>
    pub name: Option<String>,
    /// <p>The status.</p>
    pub status: Option<String>,
}

struct InstanceStatusDetailsDeserializer;
impl InstanceStatusDetailsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InstanceStatusDetails, XmlParseError> {
        deserialize_elements::<_, InstanceStatusDetails, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "impairedSince" => {
                    obj.impaired_since =
                        Some(DateTimeDeserializer::deserialize("impairedSince", stack)?);
                }
                "name" => {
                    obj.name = Some(StatusNameDeserializer::deserialize("name", stack)?);
                }
                "status" => {
                    obj.status = Some(StatusTypeDeserializer::deserialize("status", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct InstanceStatusDetailsListDeserializer;
impl InstanceStatusDetailsListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<InstanceStatusDetails>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(InstanceStatusDetailsDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a scheduled event for an instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceStatusEvent {
    /// <p>The event code.</p>
    pub code: Option<String>,
    /// <p>A description of the event.</p> <p>After a scheduled event is completed, it can still be described for up to a week. If the event has been completed, this description starts with the following text: [Completed].</p>
    pub description: Option<String>,
    /// <p>The ID of the event.</p>
    pub instance_event_id: Option<String>,
    /// <p>The latest scheduled end time for the event.</p>
    pub not_after: Option<String>,
    /// <p>The earliest scheduled start time for the event.</p>
    pub not_before: Option<String>,
    /// <p>The deadline for starting the event.</p>
    pub not_before_deadline: Option<String>,
}

struct InstanceStatusEventDeserializer;
impl InstanceStatusEventDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InstanceStatusEvent, XmlParseError> {
        deserialize_elements::<_, InstanceStatusEvent, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "code" => {
                    obj.code = Some(EventCodeDeserializer::deserialize("code", stack)?);
                }
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "instanceEventId" => {
                    obj.instance_event_id = Some(InstanceEventIdDeserializer::deserialize(
                        "instanceEventId",
                        stack,
                    )?);
                }
                "notAfter" => {
                    obj.not_after = Some(DateTimeDeserializer::deserialize("notAfter", stack)?);
                }
                "notBefore" => {
                    obj.not_before = Some(DateTimeDeserializer::deserialize("notBefore", stack)?);
                }
                "notBeforeDeadline" => {
                    obj.not_before_deadline = Some(DateTimeDeserializer::deserialize(
                        "notBeforeDeadline",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct InstanceStatusEventListDeserializer;
impl InstanceStatusEventListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<InstanceStatusEvent>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(InstanceStatusEventDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct InstanceStatusListDeserializer;
impl InstanceStatusListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<InstanceStatus>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(InstanceStatusDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the status of an instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InstanceStatusSummary {
    /// <p>The system instance health or application instance health.</p>
    pub details: Option<Vec<InstanceStatusDetails>>,
    /// <p>The status.</p>
    pub status: Option<String>,
}

struct InstanceStatusSummaryDeserializer;
impl InstanceStatusSummaryDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InstanceStatusSummary, XmlParseError> {
        deserialize_elements::<_, InstanceStatusSummary, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "details" => {
                    obj.details.get_or_insert(vec![]).extend(
                        InstanceStatusDetailsListDeserializer::deserialize("details", stack)?,
                    );
                }
                "status" => {
                    obj.status = Some(SummaryStatusDeserializer::deserialize("status", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct InstanceTypeDeserializer;
impl InstanceTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}

/// Serialize `InstanceTypeList` contents to a `SignedRequest`.
struct InstanceTypeListSerializer;
impl InstanceTypeListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct IntegerDeserializer;
impl IntegerDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<i64, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = i64::from_str(characters(stack)?.as_ref()).unwrap();
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct InterfacePermissionTypeDeserializer;
impl InterfacePermissionTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes an internet gateway.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InternetGateway {
    /// <p>Any VPCs attached to the internet gateway.</p>
    pub attachments: Option<Vec<InternetGatewayAttachment>>,
    /// <p>The ID of the internet gateway.</p>
    pub internet_gateway_id: Option<String>,
    /// <p>The ID of the AWS account that owns the internet gateway.</p>
    pub owner_id: Option<String>,
    /// <p>Any tags assigned to the internet gateway.</p>
    pub tags: Option<Vec<Tag>>,
}

struct InternetGatewayDeserializer;
impl InternetGatewayDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InternetGateway, XmlParseError> {
        deserialize_elements::<_, InternetGateway, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "attachmentSet" => {
                    obj.attachments.get_or_insert(vec![]).extend(
                        InternetGatewayAttachmentListDeserializer::deserialize(
                            "attachmentSet",
                            stack,
                        )?,
                    );
                }
                "internetGatewayId" => {
                    obj.internet_gateway_id =
                        Some(StringDeserializer::deserialize("internetGatewayId", stack)?);
                }
                "ownerId" => {
                    obj.owner_id = Some(StringDeserializer::deserialize("ownerId", stack)?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes the attachment of a VPC to an internet gateway or an egress-only internet gateway.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct InternetGatewayAttachment {
    /// <p>The current state of the attachment. For an internet gateway, the state is <code>available</code> when attached to a VPC; otherwise, this value is not returned.</p>
    pub state: Option<String>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: Option<String>,
}

struct InternetGatewayAttachmentDeserializer;
impl InternetGatewayAttachmentDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<InternetGatewayAttachment, XmlParseError> {
        deserialize_elements::<_, InternetGatewayAttachment, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "state" => {
                        obj.state =
                            Some(AttachmentStatusDeserializer::deserialize("state", stack)?);
                    }
                    "vpcId" => {
                        obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct InternetGatewayAttachmentListDeserializer;
impl InternetGatewayAttachmentListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<InternetGatewayAttachment>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(InternetGatewayAttachmentDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct InternetGatewayListDeserializer;
impl InternetGatewayListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<InternetGateway>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(InternetGatewayDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a set of permissions for a security group rule.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct IpPermission {
    /// <p>The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of <code>-1</code> indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.</p>
    pub from_port: Option<i64>,
    /// <p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>, <code>icmpv6</code>) or number (see <a href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers</a>).</p> <p>[VPC only] Use <code>-1</code> to specify all protocols. When authorizing security group rules, specifying <code>-1</code> or a protocol number other than <code>tcp</code>, <code>udp</code>, <code>icmp</code>, or <code>icmpv6</code> allows traffic on all ports, regardless of any port range you specify. For <code>tcp</code>, <code>udp</code>, and <code>icmp</code>, you must specify a port range. For <code>icmpv6</code>, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.</p>
    pub ip_protocol: Option<String>,
    /// <p>The IPv4 ranges.</p>
    pub ip_ranges: Option<Vec<IpRange>>,
    /// <p>[VPC only] The IPv6 ranges.</p>
    pub ipv_6_ranges: Option<Vec<Ipv6Range>>,
    /// <p>[VPC only] The prefix list IDs for an AWS service. With outbound rules, this is the AWS service to access through a VPC endpoint from instances associated with the security group.</p>
    pub prefix_list_ids: Option<Vec<PrefixListId>>,
    /// <p>The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of <code>-1</code> indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6 types, you must specify all codes.</p>
    pub to_port: Option<i64>,
    /// <p>The security group and AWS account ID pairs.</p>
    pub user_id_group_pairs: Option<Vec<UserIdGroupPair>>,
}

struct IpPermissionDeserializer;
impl IpPermissionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<IpPermission, XmlParseError> {
        deserialize_elements::<_, IpPermission, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "fromPort" => {
                    obj.from_port = Some(IntegerDeserializer::deserialize("fromPort", stack)?);
                }
                "ipProtocol" => {
                    obj.ip_protocol = Some(StringDeserializer::deserialize("ipProtocol", stack)?);
                }
                "ipRanges" => {
                    obj.ip_ranges
                        .get_or_insert(vec![])
                        .extend(IpRangeListDeserializer::deserialize("ipRanges", stack)?);
                }
                "ipv6Ranges" => {
                    obj.ipv_6_ranges
                        .get_or_insert(vec![])
                        .extend(Ipv6RangeListDeserializer::deserialize("ipv6Ranges", stack)?);
                }
                "prefixListIds" => {
                    obj.prefix_list_ids.get_or_insert(vec![]).extend(
                        PrefixListIdListDeserializer::deserialize("prefixListIds", stack)?,
                    );
                }
                "toPort" => {
                    obj.to_port = Some(IntegerDeserializer::deserialize("toPort", stack)?);
                }
                "groups" => {
                    obj.user_id_group_pairs.get_or_insert(vec![]).extend(
                        UserIdGroupPairListDeserializer::deserialize("groups", stack)?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `IpPermission` contents to a `SignedRequest`.
struct IpPermissionSerializer;
impl IpPermissionSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &IpPermission) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.from_port {
            params.put(&format!("{}{}", prefix, "FromPort"), &field_value);
        }
        if let Some(ref field_value) = obj.ip_protocol {
            params.put(&format!("{}{}", prefix, "IpProtocol"), &field_value);
        }
        if let Some(ref field_value) = obj.ip_ranges {
            IpRangeListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "IpRanges"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.ipv_6_ranges {
            Ipv6RangeListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Ipv6Ranges"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.prefix_list_ids {
            PrefixListIdListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "PrefixListIds"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.to_port {
            params.put(&format!("{}{}", prefix, "ToPort"), &field_value);
        }
        if let Some(ref field_value) = obj.user_id_group_pairs {
            UserIdGroupPairListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Groups"),
                field_value,
            );
        }
    }
}

struct IpPermissionListDeserializer;
impl IpPermissionListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<IpPermission>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(IpPermissionDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `IpPermissionList` contents to a `SignedRequest`.
struct IpPermissionListSerializer;
impl IpPermissionListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<IpPermission>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            IpPermissionSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes an IPv4 range.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct IpRange {
    /// <p>The IPv4 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv4 address, use the /32 prefix length.</p>
    pub cidr_ip: Option<String>,
    /// <p>A description for the security group rule that references this IPv4 address range.</p> <p>Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*</p>
    pub description: Option<String>,
}

struct IpRangeDeserializer;
impl IpRangeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<IpRange, XmlParseError> {
        deserialize_elements::<_, IpRange, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "cidrIp" => {
                    obj.cidr_ip = Some(StringDeserializer::deserialize("cidrIp", stack)?);
                }
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `IpRange` contents to a `SignedRequest`.
struct IpRangeSerializer;
impl IpRangeSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &IpRange) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.cidr_ip {
            params.put(&format!("{}{}", prefix, "CidrIp"), &field_value);
        }
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
    }
}

struct IpRangeListDeserializer;
impl IpRangeListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<IpRange>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(IpRangeDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `IpRangeList` contents to a `SignedRequest`.
struct IpRangeListSerializer;
impl IpRangeListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<IpRange>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            IpRangeSerializer::serialize(params, &key, obj);
        }
    }
}

struct IpRangesDeserializer;
impl IpRangesDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(StringDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct Ipv6AddressListDeserializer;
impl Ipv6AddressListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(StringDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `Ipv6AddressList` contents to a `SignedRequest`.
struct Ipv6AddressListSerializer;
impl Ipv6AddressListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Describes an IPv6 CIDR block.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct Ipv6CidrBlock {
    /// <p>The IPv6 CIDR block.</p>
    pub ipv_6_cidr_block: Option<String>,
}

struct Ipv6CidrBlockDeserializer;
impl Ipv6CidrBlockDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Ipv6CidrBlock, XmlParseError> {
        deserialize_elements::<_, Ipv6CidrBlock, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "ipv6CidrBlock" => {
                    obj.ipv_6_cidr_block =
                        Some(StringDeserializer::deserialize("ipv6CidrBlock", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct Ipv6CidrBlockSetDeserializer;
impl Ipv6CidrBlockSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<Ipv6CidrBlock>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(Ipv6CidrBlockDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>[EC2-VPC only] Describes an IPv6 range.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct Ipv6Range {
    /// <p>The IPv6 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv6 address, use the /128 prefix length.</p>
    pub cidr_ipv_6: Option<String>,
    /// <p>A description for the security group rule that references this IPv6 address range.</p> <p>Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*</p>
    pub description: Option<String>,
}

struct Ipv6RangeDeserializer;
impl Ipv6RangeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Ipv6Range, XmlParseError> {
        deserialize_elements::<_, Ipv6Range, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "cidrIpv6" => {
                    obj.cidr_ipv_6 = Some(StringDeserializer::deserialize("cidrIpv6", stack)?);
                }
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `Ipv6Range` contents to a `SignedRequest`.
struct Ipv6RangeSerializer;
impl Ipv6RangeSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Ipv6Range) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.cidr_ipv_6 {
            params.put(&format!("{}{}", prefix, "CidrIpv6"), &field_value);
        }
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
    }
}

struct Ipv6RangeListDeserializer;
impl Ipv6RangeListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<Ipv6Range>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(Ipv6RangeDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `Ipv6RangeList` contents to a `SignedRequest`.
struct Ipv6RangeListSerializer;
impl Ipv6RangeListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<Ipv6Range>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            Ipv6RangeSerializer::serialize(params, &key, obj);
        }
    }
}

struct Ipv6SupportValueDeserializer;
impl Ipv6SupportValueDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}

/// Serialize `KeyNameStringList` contents to a `SignedRequest`.
struct KeyNameStringListSerializer;
impl KeyNameStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Describes a key pair.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct KeyPair {
    /// <p>The SHA-1 digest of the DER encoded private key.</p>
    pub key_fingerprint: Option<String>,
    /// <p>An unencrypted PEM encoded RSA private key.</p>
    pub key_material: Option<String>,
    /// <p>The name of the key pair.</p>
    pub key_name: Option<String>,
}

struct KeyPairDeserializer;
impl KeyPairDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<KeyPair, XmlParseError> {
        deserialize_elements::<_, KeyPair, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "keyFingerprint" => {
                    obj.key_fingerprint =
                        Some(StringDeserializer::deserialize("keyFingerprint", stack)?);
                }
                "keyMaterial" => {
                    obj.key_material = Some(StringDeserializer::deserialize("keyMaterial", stack)?);
                }
                "keyName" => {
                    obj.key_name = Some(StringDeserializer::deserialize("keyName", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes a key pair.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct KeyPairInfo {
    /// <p>If you used <a>CreateKeyPair</a> to create the key pair, this is the SHA-1 digest of the DER encoded private key. If you used <a>ImportKeyPair</a> to provide AWS the public key, this is the MD5 public key fingerprint as specified in section 4 of RFC4716.</p>
    pub key_fingerprint: Option<String>,
    /// <p>The name of the key pair.</p>
    pub key_name: Option<String>,
}

struct KeyPairInfoDeserializer;
impl KeyPairInfoDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<KeyPairInfo, XmlParseError> {
        deserialize_elements::<_, KeyPairInfo, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "keyFingerprint" => {
                    obj.key_fingerprint =
                        Some(StringDeserializer::deserialize("keyFingerprint", stack)?);
                }
                "keyName" => {
                    obj.key_name = Some(StringDeserializer::deserialize("keyName", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct KeyPairListDeserializer;
impl KeyPairListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<KeyPairInfo>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(KeyPairInfoDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a launch permission.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchPermission {
    /// <p>The name of the group.</p>
    pub group: Option<String>,
    /// <p>The AWS account ID.</p>
    pub user_id: Option<String>,
}

struct LaunchPermissionDeserializer;
impl LaunchPermissionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LaunchPermission, XmlParseError> {
        deserialize_elements::<_, LaunchPermission, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "group" => {
                    obj.group = Some(PermissionGroupDeserializer::deserialize("group", stack)?);
                }
                "userId" => {
                    obj.user_id = Some(StringDeserializer::deserialize("userId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `LaunchPermission` contents to a `SignedRequest`.
struct LaunchPermissionSerializer;
impl LaunchPermissionSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &LaunchPermission) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.group {
            params.put(&format!("{}{}", prefix, "Group"), &field_value);
        }
        if let Some(ref field_value) = obj.user_id {
            params.put(&format!("{}{}", prefix, "UserId"), &field_value);
        }
    }
}

struct LaunchPermissionListDeserializer;
impl LaunchPermissionListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<LaunchPermission>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(LaunchPermissionDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `LaunchPermissionList` contents to a `SignedRequest`.
struct LaunchPermissionListSerializer;
impl LaunchPermissionListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<LaunchPermission>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            LaunchPermissionSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes a launch permission modification.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchPermissionModifications {
    /// <p>The AWS account ID to add to the list of launch permissions for the AMI.</p>
    pub add: Option<Vec<LaunchPermission>>,
    /// <p>The AWS account ID to remove from the list of launch permissions for the AMI.</p>
    pub remove: Option<Vec<LaunchPermission>>,
}

/// Serialize `LaunchPermissionModifications` contents to a `SignedRequest`.
struct LaunchPermissionModificationsSerializer;
impl LaunchPermissionModificationsSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &LaunchPermissionModifications) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.add {
            LaunchPermissionListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Add"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.remove {
            LaunchPermissionListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Remove"),
                field_value,
            );
        }
    }
}

/// <p>Describes the launch specification for an instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchSpecification {
    /// <p>Deprecated.</p>
    pub addressing_type: Option<String>,
    /// <p>One or more block device mapping entries.</p>
    pub block_device_mappings: Option<Vec<BlockDeviceMapping>>,
    /// <p>Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.</p> <p>Default: <code>false</code> </p>
    pub ebs_optimized: Option<bool>,
    /// <p>The IAM instance profile.</p>
    pub iam_instance_profile: Option<IamInstanceProfileSpecification>,
    /// <p>The ID of the AMI.</p>
    pub image_id: Option<String>,
    /// <p>The instance type.</p>
    pub instance_type: Option<String>,
    /// <p>The ID of the kernel.</p>
    pub kernel_id: Option<String>,
    /// <p>The name of the key pair.</p>
    pub key_name: Option<String>,
    pub monitoring: Option<RunInstancesMonitoringEnabled>,
    /// <p>One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.</p>
    pub network_interfaces: Option<Vec<InstanceNetworkInterfaceSpecification>>,
    /// <p>The placement information for the instance.</p>
    pub placement: Option<SpotPlacement>,
    /// <p>The ID of the RAM disk.</p>
    pub ramdisk_id: Option<String>,
    /// <p>One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.</p>
    pub security_groups: Option<Vec<GroupIdentifier>>,
    /// <p>The ID of the subnet in which to launch the instance.</p>
    pub subnet_id: Option<String>,
    /// <p>The Base64-encoded user data for the instance.</p>
    pub user_data: Option<String>,
}

struct LaunchSpecificationDeserializer;
impl LaunchSpecificationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LaunchSpecification, XmlParseError> {
        deserialize_elements::<_, LaunchSpecification, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "addressingType" => {
                    obj.addressing_type =
                        Some(StringDeserializer::deserialize("addressingType", stack)?);
                }
                "blockDeviceMapping" => {
                    obj.block_device_mappings.get_or_insert(vec![]).extend(
                        BlockDeviceMappingListDeserializer::deserialize(
                            "blockDeviceMapping",
                            stack,
                        )?,
                    );
                }
                "ebsOptimized" => {
                    obj.ebs_optimized =
                        Some(BooleanDeserializer::deserialize("ebsOptimized", stack)?);
                }
                "iamInstanceProfile" => {
                    obj.iam_instance_profile =
                        Some(IamInstanceProfileSpecificationDeserializer::deserialize(
                            "iamInstanceProfile",
                            stack,
                        )?);
                }
                "imageId" => {
                    obj.image_id = Some(StringDeserializer::deserialize("imageId", stack)?);
                }
                "instanceType" => {
                    obj.instance_type = Some(InstanceTypeDeserializer::deserialize(
                        "instanceType",
                        stack,
                    )?);
                }
                "kernelId" => {
                    obj.kernel_id = Some(StringDeserializer::deserialize("kernelId", stack)?);
                }
                "keyName" => {
                    obj.key_name = Some(StringDeserializer::deserialize("keyName", stack)?);
                }
                "monitoring" => {
                    obj.monitoring = Some(RunInstancesMonitoringEnabledDeserializer::deserialize(
                        "monitoring",
                        stack,
                    )?);
                }
                "networkInterfaceSet" => {
                    obj.network_interfaces.get_or_insert(vec![]).extend(
                        InstanceNetworkInterfaceSpecificationListDeserializer::deserialize(
                            "networkInterfaceSet",
                            stack,
                        )?,
                    );
                }
                "placement" => {
                    obj.placement =
                        Some(SpotPlacementDeserializer::deserialize("placement", stack)?);
                }
                "ramdiskId" => {
                    obj.ramdisk_id = Some(StringDeserializer::deserialize("ramdiskId", stack)?);
                }
                "groupSet" => {
                    obj.security_groups.get_or_insert(vec![]).extend(
                        GroupIdentifierListDeserializer::deserialize("groupSet", stack)?,
                    );
                }
                "subnetId" => {
                    obj.subnet_id = Some(StringDeserializer::deserialize("subnetId", stack)?);
                }
                "userData" => {
                    obj.user_data = Some(StringDeserializer::deserialize("userData", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct LaunchSpecsListDeserializer;
impl LaunchSpecsListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<SpotFleetLaunchSpecification>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(SpotFleetLaunchSpecificationDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `LaunchSpecsList` contents to a `SignedRequest`.
struct LaunchSpecsListSerializer;
impl LaunchSpecsListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<SpotFleetLaunchSpecification>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            SpotFleetLaunchSpecificationSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes a launch template.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplate {
    /// <p>The time launch template was created.</p>
    pub create_time: Option<String>,
    /// <p>The principal that created the launch template. </p>
    pub created_by: Option<String>,
    /// <p>The version number of the default version of the launch template.</p>
    pub default_version_number: Option<i64>,
    /// <p>The version number of the latest version of the launch template.</p>
    pub latest_version_number: Option<i64>,
    /// <p>The ID of the launch template.</p>
    pub launch_template_id: Option<String>,
    /// <p>The name of the launch template.</p>
    pub launch_template_name: Option<String>,
    /// <p>The tags for the launch template.</p>
    pub tags: Option<Vec<Tag>>,
}

struct LaunchTemplateDeserializer;
impl LaunchTemplateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LaunchTemplate, XmlParseError> {
        deserialize_elements::<_, LaunchTemplate, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "createTime" => {
                    obj.create_time = Some(DateTimeDeserializer::deserialize("createTime", stack)?);
                }
                "createdBy" => {
                    obj.created_by = Some(StringDeserializer::deserialize("createdBy", stack)?);
                }
                "defaultVersionNumber" => {
                    obj.default_version_number = Some(LongDeserializer::deserialize(
                        "defaultVersionNumber",
                        stack,
                    )?);
                }
                "latestVersionNumber" => {
                    obj.latest_version_number =
                        Some(LongDeserializer::deserialize("latestVersionNumber", stack)?);
                }
                "launchTemplateId" => {
                    obj.launch_template_id =
                        Some(StringDeserializer::deserialize("launchTemplateId", stack)?);
                }
                "launchTemplateName" => {
                    obj.launch_template_name = Some(LaunchTemplateNameDeserializer::deserialize(
                        "launchTemplateName",
                        stack,
                    )?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes a launch template and overrides.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateAndOverridesResponse {
    /// <p>The launch template.</p>
    pub launch_template_specification: Option<FleetLaunchTemplateSpecification>,
    /// <p>Any parameters that you specify override the same parameters in the launch template.</p>
    pub overrides: Option<FleetLaunchTemplateOverrides>,
}

struct LaunchTemplateAndOverridesResponseDeserializer;
impl LaunchTemplateAndOverridesResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LaunchTemplateAndOverridesResponse, XmlParseError> {
        deserialize_elements::<_, LaunchTemplateAndOverridesResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "launchTemplateSpecification" => {
                        obj.launch_template_specification =
                            Some(FleetLaunchTemplateSpecificationDeserializer::deserialize(
                                "launchTemplateSpecification",
                                stack,
                            )?);
                    }
                    "overrides" => {
                        obj.overrides =
                            Some(FleetLaunchTemplateOverridesDeserializer::deserialize(
                                "overrides",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes a block device mapping.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateBlockDeviceMapping {
    /// <p>The device name.</p>
    pub device_name: Option<String>,
    /// <p>Information about the block device for an EBS volume.</p>
    pub ebs: Option<LaunchTemplateEbsBlockDevice>,
    /// <p>Suppresses the specified device included in the block device mapping of the AMI.</p>
    pub no_device: Option<String>,
    /// <p>The virtual device name (ephemeralN).</p>
    pub virtual_name: Option<String>,
}

struct LaunchTemplateBlockDeviceMappingDeserializer;
impl LaunchTemplateBlockDeviceMappingDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LaunchTemplateBlockDeviceMapping, XmlParseError> {
        deserialize_elements::<_, LaunchTemplateBlockDeviceMapping, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "deviceName" => {
                        obj.device_name =
                            Some(StringDeserializer::deserialize("deviceName", stack)?);
                    }
                    "ebs" => {
                        obj.ebs = Some(LaunchTemplateEbsBlockDeviceDeserializer::deserialize(
                            "ebs", stack,
                        )?);
                    }
                    "noDevice" => {
                        obj.no_device = Some(StringDeserializer::deserialize("noDevice", stack)?);
                    }
                    "virtualName" => {
                        obj.virtual_name =
                            Some(StringDeserializer::deserialize("virtualName", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct LaunchTemplateBlockDeviceMappingListDeserializer;
impl LaunchTemplateBlockDeviceMappingListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<LaunchTemplateBlockDeviceMapping>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(LaunchTemplateBlockDeviceMappingDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a block device mapping.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateBlockDeviceMappingRequest {
    /// <p>The device name (for example, /dev/sdh or xvdh).</p>
    pub device_name: Option<String>,
    /// <p>Parameters used to automatically set up EBS volumes when the instance is launched.</p>
    pub ebs: Option<LaunchTemplateEbsBlockDeviceRequest>,
    /// <p>Suppresses the specified device included in the block device mapping of the AMI.</p>
    pub no_device: Option<String>,
    /// <p>The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for ephemeral0 and ephemeral1. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume.</p>
    pub virtual_name: Option<String>,
}

/// Serialize `LaunchTemplateBlockDeviceMappingRequest` contents to a `SignedRequest`.
struct LaunchTemplateBlockDeviceMappingRequestSerializer;
impl LaunchTemplateBlockDeviceMappingRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &LaunchTemplateBlockDeviceMappingRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.device_name {
            params.put(&format!("{}{}", prefix, "DeviceName"), &field_value);
        }
        if let Some(ref field_value) = obj.ebs {
            LaunchTemplateEbsBlockDeviceRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Ebs"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.no_device {
            params.put(&format!("{}{}", prefix, "NoDevice"), &field_value);
        }
        if let Some(ref field_value) = obj.virtual_name {
            params.put(&format!("{}{}", prefix, "VirtualName"), &field_value);
        }
    }
}

/// Serialize `LaunchTemplateBlockDeviceMappingRequestList` contents to a `SignedRequest`.
struct LaunchTemplateBlockDeviceMappingRequestListSerializer;
impl LaunchTemplateBlockDeviceMappingRequestListSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &Vec<LaunchTemplateBlockDeviceMappingRequest>,
    ) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            LaunchTemplateBlockDeviceMappingRequestSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes an instance's Capacity Reservation targeting option. You can specify only one option at a time. Use the <code>CapacityReservationPreference</code> parameter to configure the instance to run in On-Demand capacity or to run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone). Use the <code>CapacityReservationTarget</code> parameter to explicitly target a specific Capacity Reservation.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateCapacityReservationSpecificationRequest {
    /// <p><p>Indicates the instance&#39;s Capacity Reservation preferences. Possible preferences include:</p> <ul> <li> <p> <code>open</code> - The instance can run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p> </li> <li> <p> <code>none</code> - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.</p> </li> </ul></p>
    pub capacity_reservation_preference: Option<String>,
    /// <p>Information about the target Capacity Reservation.</p>
    pub capacity_reservation_target: Option<CapacityReservationTarget>,
}

/// Serialize `LaunchTemplateCapacityReservationSpecificationRequest` contents to a `SignedRequest`.
struct LaunchTemplateCapacityReservationSpecificationRequestSerializer;
impl LaunchTemplateCapacityReservationSpecificationRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &LaunchTemplateCapacityReservationSpecificationRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.capacity_reservation_preference {
            params.put(
                &format!("{}{}", prefix, "CapacityReservationPreference"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.capacity_reservation_target {
            CapacityReservationTargetSerializer::serialize(
                params,
                &format!("{}{}", prefix, "CapacityReservationTarget"),
                field_value,
            );
        }
    }
}

/// <p>Information about the Capacity Reservation targeting option.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateCapacityReservationSpecificationResponse {
    /// <p><p>Indicates the instance&#39;s Capacity Reservation preferences. Possible preferences include:</p> <ul> <li> <p> <code>open</code> - The instance can run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p> </li> <li> <p> <code>none</code> - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.</p> </li> </ul></p>
    pub capacity_reservation_preference: Option<String>,
    /// <p>Information about the target Capacity Reservation.</p>
    pub capacity_reservation_target: Option<CapacityReservationTargetResponse>,
}

struct LaunchTemplateCapacityReservationSpecificationResponseDeserializer;
impl LaunchTemplateCapacityReservationSpecificationResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LaunchTemplateCapacityReservationSpecificationResponse, XmlParseError> {
        deserialize_elements::<_, LaunchTemplateCapacityReservationSpecificationResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "capacityReservationPreference" => {
                        obj.capacity_reservation_preference =
                            Some(CapacityReservationPreferenceDeserializer::deserialize(
                                "capacityReservationPreference",
                                stack,
                            )?);
                    }
                    "capacityReservationTarget" => {
                        obj.capacity_reservation_target =
                            Some(CapacityReservationTargetResponseDeserializer::deserialize(
                                "capacityReservationTarget",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes a launch template and overrides.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateConfig {
    /// <p>The launch template.</p>
    pub launch_template_specification: Option<FleetLaunchTemplateSpecification>,
    /// <p>Any parameters that you specify override the same parameters in the launch template.</p>
    pub overrides: Option<Vec<LaunchTemplateOverrides>>,
}

struct LaunchTemplateConfigDeserializer;
impl LaunchTemplateConfigDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LaunchTemplateConfig, XmlParseError> {
        deserialize_elements::<_, LaunchTemplateConfig, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "launchTemplateSpecification" => {
                    obj.launch_template_specification =
                        Some(FleetLaunchTemplateSpecificationDeserializer::deserialize(
                            "launchTemplateSpecification",
                            stack,
                        )?);
                }
                "overrides" => {
                    obj.overrides.get_or_insert(vec![]).extend(
                        LaunchTemplateOverridesListDeserializer::deserialize("overrides", stack)?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `LaunchTemplateConfig` contents to a `SignedRequest`.
struct LaunchTemplateConfigSerializer;
impl LaunchTemplateConfigSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &LaunchTemplateConfig) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.launch_template_specification {
            FleetLaunchTemplateSpecificationSerializer::serialize(
                params,
                &format!("{}{}", prefix, "LaunchTemplateSpecification"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.overrides {
            LaunchTemplateOverridesListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Overrides"),
                field_value,
            );
        }
    }
}

struct LaunchTemplateConfigListDeserializer;
impl LaunchTemplateConfigListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<LaunchTemplateConfig>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(LaunchTemplateConfigDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `LaunchTemplateConfigList` contents to a `SignedRequest`.
struct LaunchTemplateConfigListSerializer;
impl LaunchTemplateConfigListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<LaunchTemplateConfig>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            LaunchTemplateConfigSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>The CPU options for the instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateCpuOptions {
    /// <p>The number of CPU cores for the instance.</p>
    pub core_count: Option<i64>,
    /// <p>The number of threads per CPU core.</p>
    pub threads_per_core: Option<i64>,
}

struct LaunchTemplateCpuOptionsDeserializer;
impl LaunchTemplateCpuOptionsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LaunchTemplateCpuOptions, XmlParseError> {
        deserialize_elements::<_, LaunchTemplateCpuOptions, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "coreCount" => {
                        obj.core_count =
                            Some(IntegerDeserializer::deserialize("coreCount", stack)?);
                    }
                    "threadsPerCore" => {
                        obj.threads_per_core =
                            Some(IntegerDeserializer::deserialize("threadsPerCore", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>The CPU options for the instance. Both the core count and threads per core must be specified in the request.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateCpuOptionsRequest {
    /// <p>The number of CPU cores for the instance.</p>
    pub core_count: Option<i64>,
    /// <p>The number of threads per CPU core. To disable Intel Hyper-Threading Technology for the instance, specify a value of 1. Otherwise, specify the default value of 2.</p>
    pub threads_per_core: Option<i64>,
}

/// Serialize `LaunchTemplateCpuOptionsRequest` contents to a `SignedRequest`.
struct LaunchTemplateCpuOptionsRequestSerializer;
impl LaunchTemplateCpuOptionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &LaunchTemplateCpuOptionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.core_count {
            params.put(&format!("{}{}", prefix, "CoreCount"), &field_value);
        }
        if let Some(ref field_value) = obj.threads_per_core {
            params.put(&format!("{}{}", prefix, "ThreadsPerCore"), &field_value);
        }
    }
}

/// <p>Describes a block device for an EBS volume.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateEbsBlockDevice {
    /// <p>Indicates whether the EBS volume is deleted on instance termination.</p>
    pub delete_on_termination: Option<bool>,
    /// <p>Indicates whether the EBS volume is encrypted.</p>
    pub encrypted: Option<bool>,
    /// <p>The number of I/O operations per second (IOPS) that the volume supports. </p>
    pub iops: Option<i64>,
    /// <p>The ARN of the AWS Key Management Service (AWS KMS) CMK used for encryption.</p>
    pub kms_key_id: Option<String>,
    /// <p>The ID of the snapshot.</p>
    pub snapshot_id: Option<String>,
    /// <p>The size of the volume, in GiB.</p>
    pub volume_size: Option<i64>,
    /// <p>The volume type.</p>
    pub volume_type: Option<String>,
}

struct LaunchTemplateEbsBlockDeviceDeserializer;
impl LaunchTemplateEbsBlockDeviceDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LaunchTemplateEbsBlockDevice, XmlParseError> {
        deserialize_elements::<_, LaunchTemplateEbsBlockDevice, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "deleteOnTermination" => {
                        obj.delete_on_termination = Some(BooleanDeserializer::deserialize(
                            "deleteOnTermination",
                            stack,
                        )?);
                    }
                    "encrypted" => {
                        obj.encrypted = Some(BooleanDeserializer::deserialize("encrypted", stack)?);
                    }
                    "iops" => {
                        obj.iops = Some(IntegerDeserializer::deserialize("iops", stack)?);
                    }
                    "kmsKeyId" => {
                        obj.kms_key_id = Some(StringDeserializer::deserialize("kmsKeyId", stack)?);
                    }
                    "snapshotId" => {
                        obj.snapshot_id =
                            Some(StringDeserializer::deserialize("snapshotId", stack)?);
                    }
                    "volumeSize" => {
                        obj.volume_size =
                            Some(IntegerDeserializer::deserialize("volumeSize", stack)?);
                    }
                    "volumeType" => {
                        obj.volume_type =
                            Some(VolumeTypeDeserializer::deserialize("volumeType", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>The parameters for a block device for an EBS volume.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateEbsBlockDeviceRequest {
    /// <p>Indicates whether the EBS volume is deleted on instance termination.</p>
    pub delete_on_termination: Option<bool>,
    /// <p>Indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.</p>
    pub encrypted: Option<bool>,
    /// <p>The number of I/O operations per second (IOPS) that the volume supports. For io1, this represents the number of IOPS that are provisioned for the volume. For gp2, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information about General Purpose SSD baseline performance, I/O credits, and bursting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS Volume Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Condition: This parameter is required for requests to create io1 volumes; it is not used in requests to create gp2, st1, sc1, or standard volumes.</p>
    pub iops: Option<i64>,
    /// <p>The ARN of the AWS Key Management Service (AWS KMS) CMK used for encryption.</p>
    pub kms_key_id: Option<String>,
    /// <p>The ID of the snapshot.</p>
    pub snapshot_id: Option<String>,
    /// <p>The size of the volume, in GiB.</p> <p>Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.</p>
    pub volume_size: Option<i64>,
    /// <p>The volume type.</p>
    pub volume_type: Option<String>,
}

/// Serialize `LaunchTemplateEbsBlockDeviceRequest` contents to a `SignedRequest`.
struct LaunchTemplateEbsBlockDeviceRequestSerializer;
impl LaunchTemplateEbsBlockDeviceRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &LaunchTemplateEbsBlockDeviceRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.delete_on_termination {
            params.put(
                &format!("{}{}", prefix, "DeleteOnTermination"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.encrypted {
            params.put(&format!("{}{}", prefix, "Encrypted"), &field_value);
        }
        if let Some(ref field_value) = obj.iops {
            params.put(&format!("{}{}", prefix, "Iops"), &field_value);
        }
        if let Some(ref field_value) = obj.kms_key_id {
            params.put(&format!("{}{}", prefix, "KmsKeyId"), &field_value);
        }
        if let Some(ref field_value) = obj.snapshot_id {
            params.put(&format!("{}{}", prefix, "SnapshotId"), &field_value);
        }
        if let Some(ref field_value) = obj.volume_size {
            params.put(&format!("{}{}", prefix, "VolumeSize"), &field_value);
        }
        if let Some(ref field_value) = obj.volume_type {
            params.put(&format!("{}{}", prefix, "VolumeType"), &field_value);
        }
    }
}

/// <p> Describes an elastic inference accelerator. </p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateElasticInferenceAccelerator {
    /// <p> The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, and eia1.xlarge. </p>
    pub type_: String,
}

/// Serialize `LaunchTemplateElasticInferenceAccelerator` contents to a `SignedRequest`.
struct LaunchTemplateElasticInferenceAcceleratorSerializer;
impl LaunchTemplateElasticInferenceAcceleratorSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &LaunchTemplateElasticInferenceAccelerator) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Type"), &obj.type_);
    }
}

/// Serialize `LaunchTemplateElasticInferenceAcceleratorList` contents to a `SignedRequest`.
struct LaunchTemplateElasticInferenceAcceleratorListSerializer;
impl LaunchTemplateElasticInferenceAcceleratorListSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &Vec<LaunchTemplateElasticInferenceAccelerator>,
    ) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            LaunchTemplateElasticInferenceAcceleratorSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p> Describes an elastic inference accelerator. </p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateElasticInferenceAcceleratorResponse {
    /// <p> The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, and eia1.xlarge. </p>
    pub type_: Option<String>,
}

struct LaunchTemplateElasticInferenceAcceleratorResponseDeserializer;
impl LaunchTemplateElasticInferenceAcceleratorResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LaunchTemplateElasticInferenceAcceleratorResponse, XmlParseError> {
        deserialize_elements::<_, LaunchTemplateElasticInferenceAcceleratorResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "type" => {
                        obj.type_ = Some(StringDeserializer::deserialize("type", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct LaunchTemplateElasticInferenceAcceleratorResponseListDeserializer;
impl LaunchTemplateElasticInferenceAcceleratorResponseListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<LaunchTemplateElasticInferenceAcceleratorResponse>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(
                    LaunchTemplateElasticInferenceAcceleratorResponseDeserializer::deserialize(
                        "item", stack,
                    )?,
                );
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct LaunchTemplateErrorCodeDeserializer;
impl LaunchTemplateErrorCodeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Indicates whether an instance is configured for hibernation.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateHibernationOptions {
    /// <p>If this parameter is set to <code>true</code>, the instance is enabled for hibernation; otherwise, it is not enabled for hibernation.</p>
    pub configured: Option<bool>,
}

struct LaunchTemplateHibernationOptionsDeserializer;
impl LaunchTemplateHibernationOptionsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LaunchTemplateHibernationOptions, XmlParseError> {
        deserialize_elements::<_, LaunchTemplateHibernationOptions, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "configured" => {
                        obj.configured =
                            Some(BooleanDeserializer::deserialize("configured", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Indicates whether the instance is configured for hibernation. This parameter is valid only if the instance meets the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites">hibernation prerequisites</a>. Hibernation is currently supported only for Amazon Linux.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateHibernationOptionsRequest {
    /// <p>If you set this parameter to <code>true</code>, the instance is enabled for hibernation.</p> <p>Default: <code>false</code> </p>
    pub configured: Option<bool>,
}

/// Serialize `LaunchTemplateHibernationOptionsRequest` contents to a `SignedRequest`.
struct LaunchTemplateHibernationOptionsRequestSerializer;
impl LaunchTemplateHibernationOptionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &LaunchTemplateHibernationOptionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.configured {
            params.put(&format!("{}{}", prefix, "Configured"), &field_value);
        }
    }
}

/// <p>Describes an IAM instance profile.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateIamInstanceProfileSpecification {
    /// <p>The Amazon Resource Name (ARN) of the instance profile.</p>
    pub arn: Option<String>,
    /// <p>The name of the instance profile.</p>
    pub name: Option<String>,
}

struct LaunchTemplateIamInstanceProfileSpecificationDeserializer;
impl LaunchTemplateIamInstanceProfileSpecificationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LaunchTemplateIamInstanceProfileSpecification, XmlParseError> {
        deserialize_elements::<_, LaunchTemplateIamInstanceProfileSpecification, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "arn" => {
                        obj.arn = Some(StringDeserializer::deserialize("arn", stack)?);
                    }
                    "name" => {
                        obj.name = Some(StringDeserializer::deserialize("name", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>An IAM instance profile.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateIamInstanceProfileSpecificationRequest {
    /// <p>The Amazon Resource Name (ARN) of the instance profile.</p>
    pub arn: Option<String>,
    /// <p>The name of the instance profile.</p>
    pub name: Option<String>,
}

/// Serialize `LaunchTemplateIamInstanceProfileSpecificationRequest` contents to a `SignedRequest`.
struct LaunchTemplateIamInstanceProfileSpecificationRequestSerializer;
impl LaunchTemplateIamInstanceProfileSpecificationRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &LaunchTemplateIamInstanceProfileSpecificationRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.arn {
            params.put(&format!("{}{}", prefix, "Arn"), &field_value);
        }
        if let Some(ref field_value) = obj.name {
            params.put(&format!("{}{}", prefix, "Name"), &field_value);
        }
    }
}

/// <p>The market (purchasing) option for the instances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateInstanceMarketOptions {
    /// <p>The market type.</p>
    pub market_type: Option<String>,
    /// <p>The options for Spot Instances.</p>
    pub spot_options: Option<LaunchTemplateSpotMarketOptions>,
}

struct LaunchTemplateInstanceMarketOptionsDeserializer;
impl LaunchTemplateInstanceMarketOptionsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LaunchTemplateInstanceMarketOptions, XmlParseError> {
        deserialize_elements::<_, LaunchTemplateInstanceMarketOptions, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "marketType" => {
                        obj.market_type =
                            Some(MarketTypeDeserializer::deserialize("marketType", stack)?);
                    }
                    "spotOptions" => {
                        obj.spot_options =
                            Some(LaunchTemplateSpotMarketOptionsDeserializer::deserialize(
                                "spotOptions",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>The market (purchasing) option for the instances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateInstanceMarketOptionsRequest {
    /// <p>The market type.</p>
    pub market_type: Option<String>,
    /// <p>The options for Spot Instances.</p>
    pub spot_options: Option<LaunchTemplateSpotMarketOptionsRequest>,
}

/// Serialize `LaunchTemplateInstanceMarketOptionsRequest` contents to a `SignedRequest`.
struct LaunchTemplateInstanceMarketOptionsRequestSerializer;
impl LaunchTemplateInstanceMarketOptionsRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &LaunchTemplateInstanceMarketOptionsRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.market_type {
            params.put(&format!("{}{}", prefix, "MarketType"), &field_value);
        }
        if let Some(ref field_value) = obj.spot_options {
            LaunchTemplateSpotMarketOptionsRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SpotOptions"),
                field_value,
            );
        }
    }
}

/// <p>Describes a network interface.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateInstanceNetworkInterfaceSpecification {
    /// <p>Indicates whether to associate a public IPv4 address with eth0 for a new network interface.</p>
    pub associate_public_ip_address: Option<bool>,
    /// <p>Indicates whether the network interface is deleted when the instance is terminated.</p>
    pub delete_on_termination: Option<bool>,
    /// <p>A description for the network interface.</p>
    pub description: Option<String>,
    /// <p>The device index for the network interface attachment.</p>
    pub device_index: Option<i64>,
    /// <p>The IDs of one or more security groups.</p>
    pub groups: Option<Vec<String>>,
    /// <p>The type of network interface.</p>
    pub interface_type: Option<String>,
    /// <p>The number of IPv6 addresses for the network interface.</p>
    pub ipv_6_address_count: Option<i64>,
    /// <p>The IPv6 addresses for the network interface.</p>
    pub ipv_6_addresses: Option<Vec<InstanceIpv6Address>>,
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: Option<String>,
    /// <p>The primary private IPv4 address of the network interface.</p>
    pub private_ip_address: Option<String>,
    /// <p>One or more private IPv4 addresses.</p>
    pub private_ip_addresses: Option<Vec<PrivateIpAddressSpecification>>,
    /// <p>The number of secondary private IPv4 addresses for the network interface.</p>
    pub secondary_private_ip_address_count: Option<i64>,
    /// <p>The ID of the subnet for the network interface.</p>
    pub subnet_id: Option<String>,
}

struct LaunchTemplateInstanceNetworkInterfaceSpecificationDeserializer;
impl LaunchTemplateInstanceNetworkInterfaceSpecificationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LaunchTemplateInstanceNetworkInterfaceSpecification, XmlParseError> {
        deserialize_elements::<_, LaunchTemplateInstanceNetworkInterfaceSpecification, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "associatePublicIpAddress" => {
                        obj.associate_public_ip_address = Some(BooleanDeserializer::deserialize(
                            "associatePublicIpAddress",
                            stack,
                        )?);
                    }
                    "deleteOnTermination" => {
                        obj.delete_on_termination = Some(BooleanDeserializer::deserialize(
                            "deleteOnTermination",
                            stack,
                        )?);
                    }
                    "description" => {
                        obj.description =
                            Some(StringDeserializer::deserialize("description", stack)?);
                    }
                    "deviceIndex" => {
                        obj.device_index =
                            Some(IntegerDeserializer::deserialize("deviceIndex", stack)?);
                    }
                    "groupSet" => {
                        obj.groups.get_or_insert(vec![]).extend(
                            GroupIdStringListDeserializer::deserialize("groupSet", stack)?,
                        );
                    }
                    "interfaceType" => {
                        obj.interface_type =
                            Some(StringDeserializer::deserialize("interfaceType", stack)?);
                    }
                    "ipv6AddressCount" => {
                        obj.ipv_6_address_count =
                            Some(IntegerDeserializer::deserialize("ipv6AddressCount", stack)?);
                    }
                    "ipv6AddressesSet" => {
                        obj.ipv_6_addresses.get_or_insert(vec![]).extend(
                            InstanceIpv6AddressListDeserializer::deserialize(
                                "ipv6AddressesSet",
                                stack,
                            )?,
                        );
                    }
                    "networkInterfaceId" => {
                        obj.network_interface_id = Some(StringDeserializer::deserialize(
                            "networkInterfaceId",
                            stack,
                        )?);
                    }
                    "privateIpAddress" => {
                        obj.private_ip_address =
                            Some(StringDeserializer::deserialize("privateIpAddress", stack)?);
                    }
                    "privateIpAddressesSet" => {
                        obj.private_ip_addresses.get_or_insert(vec![]).extend(
                            PrivateIpAddressSpecificationListDeserializer::deserialize(
                                "privateIpAddressesSet",
                                stack,
                            )?,
                        );
                    }
                    "secondaryPrivateIpAddressCount" => {
                        obj.secondary_private_ip_address_count =
                            Some(IntegerDeserializer::deserialize(
                                "secondaryPrivateIpAddressCount",
                                stack,
                            )?);
                    }
                    "subnetId" => {
                        obj.subnet_id = Some(StringDeserializer::deserialize("subnetId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct LaunchTemplateInstanceNetworkInterfaceSpecificationListDeserializer;
impl LaunchTemplateInstanceNetworkInterfaceSpecificationListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<LaunchTemplateInstanceNetworkInterfaceSpecification>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(
                    LaunchTemplateInstanceNetworkInterfaceSpecificationDeserializer::deserialize(
                        "item", stack,
                    )?,
                );
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>The parameters for a network interface.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateInstanceNetworkInterfaceSpecificationRequest {
    /// <p>Associates a public IPv4 address with eth0 for a new network interface.</p>
    pub associate_public_ip_address: Option<bool>,
    /// <p>Indicates whether the network interface is deleted when the instance is terminated.</p>
    pub delete_on_termination: Option<bool>,
    /// <p>A description for the network interface.</p>
    pub description: Option<String>,
    /// <p>The device index for the network interface attachment.</p>
    pub device_index: Option<i64>,
    /// <p>The IDs of one or more security groups.</p>
    pub groups: Option<Vec<String>>,
    /// <p>The type of network interface. To create an Elastic Fabric Adapter (EFA), specify <code>efa</code>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa.html">Elastic Fabric Adapter</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>If you are not creating an EFA, specify <code>interface</code> or omit this parameter.</p> <p>Valid values: <code>interface</code> | <code>efa</code> </p>
    pub interface_type: Option<String>,
    /// <p>The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses.</p>
    pub ipv_6_address_count: Option<i64>,
    /// <p>One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't use this option if you're specifying a number of IPv6 addresses.</p>
    pub ipv_6_addresses: Option<Vec<InstanceIpv6AddressRequest>>,
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: Option<String>,
    /// <p>The primary private IPv4 address of the network interface.</p>
    pub private_ip_address: Option<String>,
    /// <p>One or more private IPv4 addresses.</p>
    pub private_ip_addresses: Option<Vec<PrivateIpAddressSpecification>>,
    /// <p>The number of secondary private IPv4 addresses to assign to a network interface.</p>
    pub secondary_private_ip_address_count: Option<i64>,
    /// <p>The ID of the subnet for the network interface.</p>
    pub subnet_id: Option<String>,
}

/// Serialize `LaunchTemplateInstanceNetworkInterfaceSpecificationRequest` contents to a `SignedRequest`.
struct LaunchTemplateInstanceNetworkInterfaceSpecificationRequestSerializer;
impl LaunchTemplateInstanceNetworkInterfaceSpecificationRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &LaunchTemplateInstanceNetworkInterfaceSpecificationRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.associate_public_ip_address {
            params.put(
                &format!("{}{}", prefix, "AssociatePublicIpAddress"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.delete_on_termination {
            params.put(
                &format!("{}{}", prefix, "DeleteOnTermination"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.device_index {
            params.put(&format!("{}{}", prefix, "DeviceIndex"), &field_value);
        }
        if let Some(ref field_value) = obj.groups {
            SecurityGroupIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SecurityGroupId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.interface_type {
            params.put(&format!("{}{}", prefix, "InterfaceType"), &field_value);
        }
        if let Some(ref field_value) = obj.ipv_6_address_count {
            params.put(&format!("{}{}", prefix, "Ipv6AddressCount"), &field_value);
        }
        if let Some(ref field_value) = obj.ipv_6_addresses {
            InstanceIpv6AddressListRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Ipv6Addresses"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.network_interface_id {
            params.put(&format!("{}{}", prefix, "NetworkInterfaceId"), &field_value);
        }
        if let Some(ref field_value) = obj.private_ip_address {
            params.put(&format!("{}{}", prefix, "PrivateIpAddress"), &field_value);
        }
        if let Some(ref field_value) = obj.private_ip_addresses {
            PrivateIpAddressSpecificationListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "PrivateIpAddresses"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.secondary_private_ip_address_count {
            params.put(
                &format!("{}{}", prefix, "SecondaryPrivateIpAddressCount"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.subnet_id {
            params.put(&format!("{}{}", prefix, "SubnetId"), &field_value);
        }
    }
}

/// Serialize `LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList` contents to a `SignedRequest`.
struct LaunchTemplateInstanceNetworkInterfaceSpecificationRequestListSerializer;
impl LaunchTemplateInstanceNetworkInterfaceSpecificationRequestListSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &Vec<LaunchTemplateInstanceNetworkInterfaceSpecificationRequest>,
    ) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            LaunchTemplateInstanceNetworkInterfaceSpecificationRequestSerializer::serialize(
                params, &key, obj,
            );
        }
    }
}

/// <p>Describes a license configuration.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateLicenseConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the license configuration.</p>
    pub license_configuration_arn: Option<String>,
}

struct LaunchTemplateLicenseConfigurationDeserializer;
impl LaunchTemplateLicenseConfigurationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LaunchTemplateLicenseConfiguration, XmlParseError> {
        deserialize_elements::<_, LaunchTemplateLicenseConfiguration, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "licenseConfigurationArn" => {
                        obj.license_configuration_arn = Some(StringDeserializer::deserialize(
                            "licenseConfigurationArn",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes a license configuration.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateLicenseConfigurationRequest {
    /// <p>The Amazon Resource Name (ARN) of the license configuration.</p>
    pub license_configuration_arn: Option<String>,
}

/// Serialize `LaunchTemplateLicenseConfigurationRequest` contents to a `SignedRequest`.
struct LaunchTemplateLicenseConfigurationRequestSerializer;
impl LaunchTemplateLicenseConfigurationRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &LaunchTemplateLicenseConfigurationRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.license_configuration_arn {
            params.put(
                &format!("{}{}", prefix, "LicenseConfigurationArn"),
                &field_value,
            );
        }
    }
}

struct LaunchTemplateLicenseListDeserializer;
impl LaunchTemplateLicenseListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<LaunchTemplateLicenseConfiguration>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(LaunchTemplateLicenseConfigurationDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `LaunchTemplateLicenseSpecificationListRequest` contents to a `SignedRequest`.
struct LaunchTemplateLicenseSpecificationListRequestSerializer;
impl LaunchTemplateLicenseSpecificationListRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &Vec<LaunchTemplateLicenseConfigurationRequest>,
    ) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            LaunchTemplateLicenseConfigurationRequestSerializer::serialize(params, &key, obj);
        }
    }
}

struct LaunchTemplateNameDeserializer;
impl LaunchTemplateNameDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}

/// Serialize `LaunchTemplateNameStringList` contents to a `SignedRequest`.
struct LaunchTemplateNameStringListSerializer;
impl LaunchTemplateNameStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Describes overrides for a launch template.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateOverrides {
    /// <p>The Availability Zone in which to launch the instances.</p>
    pub availability_zone: Option<String>,
    /// <p>The instance type.</p>
    pub instance_type: Option<String>,
    /// <p>The priority for the launch template override. If <b>OnDemandAllocationStrategy</b> is set to <code>prioritized</code>, Spot Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. Valid values are whole numbers starting at <code>0</code>. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority.</p>
    pub priority: Option<f64>,
    /// <p>The maximum price per unit hour that you are willing to pay for a Spot Instance.</p>
    pub spot_price: Option<String>,
    /// <p>The ID of the subnet in which to launch the instances.</p>
    pub subnet_id: Option<String>,
    /// <p>The number of units provided by the specified instance type.</p>
    pub weighted_capacity: Option<f64>,
}

struct LaunchTemplateOverridesDeserializer;
impl LaunchTemplateOverridesDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LaunchTemplateOverrides, XmlParseError> {
        deserialize_elements::<_, LaunchTemplateOverrides, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "availabilityZone" => {
                        obj.availability_zone =
                            Some(StringDeserializer::deserialize("availabilityZone", stack)?);
                    }
                    "instanceType" => {
                        obj.instance_type = Some(InstanceTypeDeserializer::deserialize(
                            "instanceType",
                            stack,
                        )?);
                    }
                    "priority" => {
                        obj.priority = Some(DoubleDeserializer::deserialize("priority", stack)?);
                    }
                    "spotPrice" => {
                        obj.spot_price = Some(StringDeserializer::deserialize("spotPrice", stack)?);
                    }
                    "subnetId" => {
                        obj.subnet_id = Some(StringDeserializer::deserialize("subnetId", stack)?);
                    }
                    "weightedCapacity" => {
                        obj.weighted_capacity =
                            Some(DoubleDeserializer::deserialize("weightedCapacity", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}

/// Serialize `LaunchTemplateOverrides` contents to a `SignedRequest`.
struct LaunchTemplateOverridesSerializer;
impl LaunchTemplateOverridesSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &LaunchTemplateOverrides) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.availability_zone {
            params.put(&format!("{}{}", prefix, "AvailabilityZone"), &field_value);
        }
        if let Some(ref field_value) = obj.instance_type {
            params.put(&format!("{}{}", prefix, "InstanceType"), &field_value);
        }
        if let Some(ref field_value) = obj.priority {
            params.put(&format!("{}{}", prefix, "Priority"), &field_value);
        }
        if let Some(ref field_value) = obj.spot_price {
            params.put(&format!("{}{}", prefix, "SpotPrice"), &field_value);
        }
        if let Some(ref field_value) = obj.subnet_id {
            params.put(&format!("{}{}", prefix, "SubnetId"), &field_value);
        }
        if let Some(ref field_value) = obj.weighted_capacity {
            params.put(&format!("{}{}", prefix, "WeightedCapacity"), &field_value);
        }
    }
}

struct LaunchTemplateOverridesListDeserializer;
impl LaunchTemplateOverridesListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<LaunchTemplateOverrides>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(LaunchTemplateOverridesDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `LaunchTemplateOverridesList` contents to a `SignedRequest`.
struct LaunchTemplateOverridesListSerializer;
impl LaunchTemplateOverridesListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<LaunchTemplateOverrides>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            LaunchTemplateOverridesSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes the placement of an instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplatePlacement {
    /// <p>The affinity setting for the instance on the Dedicated Host.</p>
    pub affinity: Option<String>,
    /// <p>The Availability Zone of the instance.</p>
    pub availability_zone: Option<String>,
    /// <p>The name of the placement group for the instance.</p>
    pub group_name: Option<String>,
    /// <p>The ID of the Dedicated Host for the instance.</p>
    pub host_id: Option<String>,
    /// <p>Reserved for future use.</p>
    pub spread_domain: Option<String>,
    /// <p>The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of <code>dedicated</code> runs on single-tenant hardware. </p>
    pub tenancy: Option<String>,
}

struct LaunchTemplatePlacementDeserializer;
impl LaunchTemplatePlacementDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LaunchTemplatePlacement, XmlParseError> {
        deserialize_elements::<_, LaunchTemplatePlacement, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "affinity" => {
                        obj.affinity = Some(StringDeserializer::deserialize("affinity", stack)?);
                    }
                    "availabilityZone" => {
                        obj.availability_zone =
                            Some(StringDeserializer::deserialize("availabilityZone", stack)?);
                    }
                    "groupName" => {
                        obj.group_name = Some(StringDeserializer::deserialize("groupName", stack)?);
                    }
                    "hostId" => {
                        obj.host_id = Some(StringDeserializer::deserialize("hostId", stack)?);
                    }
                    "spreadDomain" => {
                        obj.spread_domain =
                            Some(StringDeserializer::deserialize("spreadDomain", stack)?);
                    }
                    "tenancy" => {
                        obj.tenancy = Some(TenancyDeserializer::deserialize("tenancy", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes the placement of an instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplatePlacementRequest {
    /// <p>The affinity setting for an instance on a Dedicated Host.</p>
    pub affinity: Option<String>,
    /// <p>The Availability Zone for the instance.</p>
    pub availability_zone: Option<String>,
    /// <p>The name of the placement group for the instance.</p>
    pub group_name: Option<String>,
    /// <p>The ID of the Dedicated Host for the instance.</p>
    pub host_id: Option<String>,
    /// <p>Reserved for future use.</p>
    pub spread_domain: Option<String>,
    /// <p>The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware.</p>
    pub tenancy: Option<String>,
}

/// Serialize `LaunchTemplatePlacementRequest` contents to a `SignedRequest`.
struct LaunchTemplatePlacementRequestSerializer;
impl LaunchTemplatePlacementRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &LaunchTemplatePlacementRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.affinity {
            params.put(&format!("{}{}", prefix, "Affinity"), &field_value);
        }
        if let Some(ref field_value) = obj.availability_zone {
            params.put(&format!("{}{}", prefix, "AvailabilityZone"), &field_value);
        }
        if let Some(ref field_value) = obj.group_name {
            params.put(&format!("{}{}", prefix, "GroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.host_id {
            params.put(&format!("{}{}", prefix, "HostId"), &field_value);
        }
        if let Some(ref field_value) = obj.spread_domain {
            params.put(&format!("{}{}", prefix, "SpreadDomain"), &field_value);
        }
        if let Some(ref field_value) = obj.tenancy {
            params.put(&format!("{}{}", prefix, "Tenancy"), &field_value);
        }
    }
}

struct LaunchTemplateSetDeserializer;
impl LaunchTemplateSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<LaunchTemplate>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(LaunchTemplateDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>The launch template to use. You must specify either the launch template ID or launch template name in the request, but not both.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateSpecification {
    /// <p>The ID of the launch template.</p>
    pub launch_template_id: Option<String>,
    /// <p>The name of the launch template.</p>
    pub launch_template_name: Option<String>,
    /// <p>The version number of the launch template.</p> <p>Default: The default version for the launch template.</p>
    pub version: Option<String>,
}

/// Serialize `LaunchTemplateSpecification` contents to a `SignedRequest`.
struct LaunchTemplateSpecificationSerializer;
impl LaunchTemplateSpecificationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &LaunchTemplateSpecification) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.launch_template_id {
            params.put(&format!("{}{}", prefix, "LaunchTemplateId"), &field_value);
        }
        if let Some(ref field_value) = obj.launch_template_name {
            params.put(&format!("{}{}", prefix, "LaunchTemplateName"), &field_value);
        }
        if let Some(ref field_value) = obj.version {
            params.put(&format!("{}{}", prefix, "Version"), &field_value);
        }
    }
}

/// <p>The options for Spot Instances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateSpotMarketOptions {
    /// <p>The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).</p>
    pub block_duration_minutes: Option<i64>,
    /// <p>The behavior when a Spot Instance is interrupted.</p>
    pub instance_interruption_behavior: Option<String>,
    /// <p>The maximum hourly price you're willing to pay for the Spot Instances.</p>
    pub max_price: Option<String>,
    /// <p>The Spot Instance request type.</p>
    pub spot_instance_type: Option<String>,
    /// <p>The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached.</p>
    pub valid_until: Option<String>,
}

struct LaunchTemplateSpotMarketOptionsDeserializer;
impl LaunchTemplateSpotMarketOptionsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LaunchTemplateSpotMarketOptions, XmlParseError> {
        deserialize_elements::<_, LaunchTemplateSpotMarketOptions, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "blockDurationMinutes" => {
                        obj.block_duration_minutes = Some(IntegerDeserializer::deserialize(
                            "blockDurationMinutes",
                            stack,
                        )?);
                    }
                    "instanceInterruptionBehavior" => {
                        obj.instance_interruption_behavior =
                            Some(InstanceInterruptionBehaviorDeserializer::deserialize(
                                "instanceInterruptionBehavior",
                                stack,
                            )?);
                    }
                    "maxPrice" => {
                        obj.max_price = Some(StringDeserializer::deserialize("maxPrice", stack)?);
                    }
                    "spotInstanceType" => {
                        obj.spot_instance_type = Some(SpotInstanceTypeDeserializer::deserialize(
                            "spotInstanceType",
                            stack,
                        )?);
                    }
                    "validUntil" => {
                        obj.valid_until =
                            Some(DateTimeDeserializer::deserialize("validUntil", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>The options for Spot Instances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateSpotMarketOptionsRequest {
    /// <p>The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).</p>
    pub block_duration_minutes: Option<i64>,
    /// <p>The behavior when a Spot Instance is interrupted. The default is <code>terminate</code>.</p>
    pub instance_interruption_behavior: Option<String>,
    /// <p>The maximum hourly price you're willing to pay for the Spot Instances.</p>
    pub max_price: Option<String>,
    /// <p>The Spot Instance request type.</p>
    pub spot_instance_type: Option<String>,
    /// <p>The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached. The default end date is 7 days from the current date.</p>
    pub valid_until: Option<String>,
}

/// Serialize `LaunchTemplateSpotMarketOptionsRequest` contents to a `SignedRequest`.
struct LaunchTemplateSpotMarketOptionsRequestSerializer;
impl LaunchTemplateSpotMarketOptionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &LaunchTemplateSpotMarketOptionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.block_duration_minutes {
            params.put(
                &format!("{}{}", prefix, "BlockDurationMinutes"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.instance_interruption_behavior {
            params.put(
                &format!("{}{}", prefix, "InstanceInterruptionBehavior"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.max_price {
            params.put(&format!("{}{}", prefix, "MaxPrice"), &field_value);
        }
        if let Some(ref field_value) = obj.spot_instance_type {
            params.put(&format!("{}{}", prefix, "SpotInstanceType"), &field_value);
        }
        if let Some(ref field_value) = obj.valid_until {
            params.put(&format!("{}{}", prefix, "ValidUntil"), &field_value);
        }
    }
}

/// <p>The tag specification for the launch template.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateTagSpecification {
    /// <p>The type of resource.</p>
    pub resource_type: Option<String>,
    /// <p>The tags for the resource.</p>
    pub tags: Option<Vec<Tag>>,
}

struct LaunchTemplateTagSpecificationDeserializer;
impl LaunchTemplateTagSpecificationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LaunchTemplateTagSpecification, XmlParseError> {
        deserialize_elements::<_, LaunchTemplateTagSpecification, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "resourceType" => {
                        obj.resource_type = Some(ResourceTypeDeserializer::deserialize(
                            "resourceType",
                            stack,
                        )?);
                    }
                    "tagSet" => {
                        obj.tags
                            .get_or_insert(vec![])
                            .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct LaunchTemplateTagSpecificationListDeserializer;
impl LaunchTemplateTagSpecificationListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<LaunchTemplateTagSpecification>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(LaunchTemplateTagSpecificationDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>The tags specification for the launch template.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateTagSpecificationRequest {
    /// <p>The type of resource to tag. Currently, the resource types that support tagging on creation are <code>instance</code> and <code>volume</code>. To tag a resource after it has been created, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>.</p>
    pub resource_type: Option<String>,
    /// <p>The tags to apply to the resource.</p>
    pub tags: Option<Vec<Tag>>,
}

/// Serialize `LaunchTemplateTagSpecificationRequest` contents to a `SignedRequest`.
struct LaunchTemplateTagSpecificationRequestSerializer;
impl LaunchTemplateTagSpecificationRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &LaunchTemplateTagSpecificationRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.resource_type {
            params.put(&format!("{}{}", prefix, "ResourceType"), &field_value);
        }
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
    }
}

/// Serialize `LaunchTemplateTagSpecificationRequestList` contents to a `SignedRequest`.
struct LaunchTemplateTagSpecificationRequestListSerializer;
impl LaunchTemplateTagSpecificationRequestListSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &Vec<LaunchTemplateTagSpecificationRequest>,
    ) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            LaunchTemplateTagSpecificationRequestSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes a launch template version.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplateVersion {
    /// <p>The time the version was created.</p>
    pub create_time: Option<String>,
    /// <p>The principal that created the version.</p>
    pub created_by: Option<String>,
    /// <p>Indicates whether the version is the default version.</p>
    pub default_version: Option<bool>,
    /// <p>Information about the launch template.</p>
    pub launch_template_data: Option<ResponseLaunchTemplateData>,
    /// <p>The ID of the launch template.</p>
    pub launch_template_id: Option<String>,
    /// <p>The name of the launch template.</p>
    pub launch_template_name: Option<String>,
    /// <p>The description for the version.</p>
    pub version_description: Option<String>,
    /// <p>The version number.</p>
    pub version_number: Option<i64>,
}

struct LaunchTemplateVersionDeserializer;
impl LaunchTemplateVersionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LaunchTemplateVersion, XmlParseError> {
        deserialize_elements::<_, LaunchTemplateVersion, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "createTime" => {
                    obj.create_time = Some(DateTimeDeserializer::deserialize("createTime", stack)?);
                }
                "createdBy" => {
                    obj.created_by = Some(StringDeserializer::deserialize("createdBy", stack)?);
                }
                "defaultVersion" => {
                    obj.default_version =
                        Some(BooleanDeserializer::deserialize("defaultVersion", stack)?);
                }
                "launchTemplateData" => {
                    obj.launch_template_data =
                        Some(ResponseLaunchTemplateDataDeserializer::deserialize(
                            "launchTemplateData",
                            stack,
                        )?);
                }
                "launchTemplateId" => {
                    obj.launch_template_id =
                        Some(StringDeserializer::deserialize("launchTemplateId", stack)?);
                }
                "launchTemplateName" => {
                    obj.launch_template_name = Some(LaunchTemplateNameDeserializer::deserialize(
                        "launchTemplateName",
                        stack,
                    )?);
                }
                "versionDescription" => {
                    obj.version_description = Some(VersionDescriptionDeserializer::deserialize(
                        "versionDescription",
                        stack,
                    )?);
                }
                "versionNumber" => {
                    obj.version_number =
                        Some(LongDeserializer::deserialize("versionNumber", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct LaunchTemplateVersionSetDeserializer;
impl LaunchTemplateVersionSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<LaunchTemplateVersion>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(LaunchTemplateVersionDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the monitoring for the instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplatesMonitoring {
    /// <p>Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.</p>
    pub enabled: Option<bool>,
}

struct LaunchTemplatesMonitoringDeserializer;
impl LaunchTemplatesMonitoringDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LaunchTemplatesMonitoring, XmlParseError> {
        deserialize_elements::<_, LaunchTemplatesMonitoring, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "enabled" => {
                        obj.enabled = Some(BooleanDeserializer::deserialize("enabled", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes the monitoring for the instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LaunchTemplatesMonitoringRequest {
    /// <p>Specify <code>true</code> to enable detailed monitoring. Otherwise, basic monitoring is enabled.</p>
    pub enabled: Option<bool>,
}

/// Serialize `LaunchTemplatesMonitoringRequest` contents to a `SignedRequest`.
struct LaunchTemplatesMonitoringRequestSerializer;
impl LaunchTemplatesMonitoringRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &LaunchTemplatesMonitoringRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.enabled {
            params.put(&format!("{}{}", prefix, "Enabled"), &field_value);
        }
    }
}

/// <p>Describes a license configuration.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LicenseConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the license configuration.</p>
    pub license_configuration_arn: Option<String>,
}

struct LicenseConfigurationDeserializer;
impl LicenseConfigurationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LicenseConfiguration, XmlParseError> {
        deserialize_elements::<_, LicenseConfiguration, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "licenseConfigurationArn" => {
                    obj.license_configuration_arn = Some(StringDeserializer::deserialize(
                        "licenseConfigurationArn",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes a license configuration.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LicenseConfigurationRequest {
    /// <p>The Amazon Resource Name (ARN) of the license configuration.</p>
    pub license_configuration_arn: Option<String>,
}

/// Serialize `LicenseConfigurationRequest` contents to a `SignedRequest`.
struct LicenseConfigurationRequestSerializer;
impl LicenseConfigurationRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &LicenseConfigurationRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.license_configuration_arn {
            params.put(
                &format!("{}{}", prefix, "LicenseConfigurationArn"),
                &field_value,
            );
        }
    }
}

struct LicenseListDeserializer;
impl LicenseListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<LicenseConfiguration>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(LicenseConfigurationDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `LicenseSpecificationListRequest` contents to a `SignedRequest`.
struct LicenseSpecificationListRequestSerializer;
impl LicenseSpecificationListRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<LicenseConfigurationRequest>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            LicenseConfigurationRequestSerializer::serialize(params, &key, obj);
        }
    }
}

struct ListingStateDeserializer;
impl ListingStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct ListingStatusDeserializer;
impl ListingStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes the Classic Load Balancers and target groups to attach to a Spot Fleet request.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LoadBalancersConfig {
    /// <p>The Classic Load Balancers.</p>
    pub classic_load_balancers_config: Option<ClassicLoadBalancersConfig>,
    /// <p>The target groups.</p>
    pub target_groups_config: Option<TargetGroupsConfig>,
}

struct LoadBalancersConfigDeserializer;
impl LoadBalancersConfigDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LoadBalancersConfig, XmlParseError> {
        deserialize_elements::<_, LoadBalancersConfig, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "classicLoadBalancersConfig" => {
                    obj.classic_load_balancers_config =
                        Some(ClassicLoadBalancersConfigDeserializer::deserialize(
                            "classicLoadBalancersConfig",
                            stack,
                        )?);
                }
                "targetGroupsConfig" => {
                    obj.target_groups_config = Some(TargetGroupsConfigDeserializer::deserialize(
                        "targetGroupsConfig",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `LoadBalancersConfig` contents to a `SignedRequest`.
struct LoadBalancersConfigSerializer;
impl LoadBalancersConfigSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &LoadBalancersConfig) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.classic_load_balancers_config {
            ClassicLoadBalancersConfigSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ClassicLoadBalancersConfig"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.target_groups_config {
            TargetGroupsConfigSerializer::serialize(
                params,
                &format!("{}{}", prefix, "TargetGroupsConfig"),
                field_value,
            );
        }
    }
}

/// <p>Describes a load permission.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LoadPermission {
    /// <p>The name of the group.</p>
    pub group: Option<String>,
    /// <p>The AWS account ID.</p>
    pub user_id: Option<String>,
}

struct LoadPermissionDeserializer;
impl LoadPermissionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<LoadPermission, XmlParseError> {
        deserialize_elements::<_, LoadPermission, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "group" => {
                    obj.group = Some(PermissionGroupDeserializer::deserialize("group", stack)?);
                }
                "userId" => {
                    obj.user_id = Some(StringDeserializer::deserialize("userId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct LoadPermissionListDeserializer;
impl LoadPermissionListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<LoadPermission>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(LoadPermissionDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `LoadPermissionListRequest` contents to a `SignedRequest`.
struct LoadPermissionListRequestSerializer;
impl LoadPermissionListRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<LoadPermissionRequest>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            LoadPermissionRequestSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes modifications to the load permissions of an Amazon FPGA image (AFI).</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LoadPermissionModifications {
    /// <p>The load permissions to add.</p>
    pub add: Option<Vec<LoadPermissionRequest>>,
    /// <p>The load permissions to remove.</p>
    pub remove: Option<Vec<LoadPermissionRequest>>,
}

/// Serialize `LoadPermissionModifications` contents to a `SignedRequest`.
struct LoadPermissionModificationsSerializer;
impl LoadPermissionModificationsSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &LoadPermissionModifications) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.add {
            LoadPermissionListRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Add"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.remove {
            LoadPermissionListRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Remove"),
                field_value,
            );
        }
    }
}

/// <p>Describes a load permission.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct LoadPermissionRequest {
    /// <p>The name of the group.</p>
    pub group: Option<String>,
    /// <p>The AWS account ID.</p>
    pub user_id: Option<String>,
}

/// Serialize `LoadPermissionRequest` contents to a `SignedRequest`.
struct LoadPermissionRequestSerializer;
impl LoadPermissionRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &LoadPermissionRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.group {
            params.put(&format!("{}{}", prefix, "Group"), &field_value);
        }
        if let Some(ref field_value) = obj.user_id {
            params.put(&format!("{}{}", prefix, "UserId"), &field_value);
        }
    }
}

struct LogDestinationTypeDeserializer;
impl LogDestinationTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct LongDeserializer;
impl LongDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<i64, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = i64::from_str(characters(stack)?.as_ref()).unwrap();
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct MarketTypeDeserializer;
impl MarketTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct MillisecondDateTimeDeserializer;
impl MillisecondDateTimeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyCapacityReservationRequest {
    /// <p>The ID of the Capacity Reservation.</p>
    pub capacity_reservation_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to <code>expired</code> when it reaches its end date and time.</p> <p>The Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.</p> <p>You must provide an <code>EndDate</code> value if <code>EndDateType</code> is <code>limited</code>. Omit <code>EndDate</code> if <code>EndDateType</code> is <code>unlimited</code>.</p>
    pub end_date: Option<String>,
    /// <p><p>Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:</p> <ul> <li> <p> <code>unlimited</code> - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an <code>EndDate</code> value if <code>EndDateType</code> is <code>unlimited</code>.</p> </li> <li> <p> <code>limited</code> - The Capacity Reservation expires automatically at a specified date and time. You must provide an <code>EndDate</code> value if <code>EndDateType</code> is <code>limited</code>.</p> </li> </ul></p>
    pub end_date_type: Option<String>,
    /// <p>The number of instances for which to reserve capacity.</p>
    pub instance_count: Option<i64>,
}

/// Serialize `ModifyCapacityReservationRequest` contents to a `SignedRequest`.
struct ModifyCapacityReservationRequestSerializer;
impl ModifyCapacityReservationRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyCapacityReservationRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "CapacityReservationId"),
            &obj.capacity_reservation_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.end_date {
            params.put(&format!("{}{}", prefix, "EndDate"), &field_value);
        }
        if let Some(ref field_value) = obj.end_date_type {
            params.put(&format!("{}{}", prefix, "EndDateType"), &field_value);
        }
        if let Some(ref field_value) = obj.instance_count {
            params.put(&format!("{}{}", prefix, "InstanceCount"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyCapacityReservationResult {
    /// <p>Information about the Capacity Reservation.</p>
    pub return_: Option<bool>,
}

struct ModifyCapacityReservationResultDeserializer;
impl ModifyCapacityReservationResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyCapacityReservationResult, XmlParseError> {
        deserialize_elements::<_, ModifyCapacityReservationResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyClientVpnEndpointRequest {
    /// <p>The ID of the Client VPN endpoint to modify.</p>
    pub client_vpn_endpoint_id: String,
    /// <p><p>Information about the client connection logging options.</p> <p>If you enable client connection logging, data about client connections is sent to a Cloudwatch Logs log stream. The following information is logged:</p> <ul> <li> <p>Client connection requests</p> </li> <li> <p>Client connection results (successful and unsuccessful)</p> </li> <li> <p>Reasons for unsuccessful client connection requests</p> </li> <li> <p>Client connection termination time</p> </li> </ul></p>
    pub connection_log_options: Option<ConnectionLogOptions>,
    /// <p>A brief description of the Client VPN endpoint.</p>
    pub description: Option<String>,
    /// <p>Information about the DNS servers to be used by Client VPN connections. A Client VPN endpoint can have up to two DNS servers.</p>
    pub dns_servers: Option<DnsServersOptionsModifyStructure>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ARN of the server certificate to be used. The server certificate must be provisioned in AWS Certificate Manager (ACM).</p>
    pub server_certificate_arn: Option<String>,
}

/// Serialize `ModifyClientVpnEndpointRequest` contents to a `SignedRequest`.
struct ModifyClientVpnEndpointRequestSerializer;
impl ModifyClientVpnEndpointRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyClientVpnEndpointRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "ClientVpnEndpointId"),
            &obj.client_vpn_endpoint_id,
        );
        if let Some(ref field_value) = obj.connection_log_options {
            ConnectionLogOptionsSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ConnectionLogOptions"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.dns_servers {
            DnsServersOptionsModifyStructureSerializer::serialize(
                params,
                &format!("{}{}", prefix, "DnsServers"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.server_certificate_arn {
            params.put(
                &format!("{}{}", prefix, "ServerCertificateArn"),
                &field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyClientVpnEndpointResult {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub return_: Option<bool>,
}

struct ModifyClientVpnEndpointResultDeserializer;
impl ModifyClientVpnEndpointResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyClientVpnEndpointResult, XmlParseError> {
        deserialize_elements::<_, ModifyClientVpnEndpointResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyEbsDefaultKmsKeyIdRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>An identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) to use to encrypt the volume. This parameter is only required if you want to use a customer-managed CMK; if this parameter is not specified, your AWS-managed CMK for the account is used. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set. </p> <p>The CMK identifier may be provided in any of the following formats: </p> <ul> <li> <p>Key ID: For example, key/1234abcd-12ab-34cd-56ef-1234567890ab.</p> </li> <li> <p>Key alias: For example, alias/ExampleAlias. </p> </li> <li> <p>Key ARN: The key ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>key</code> namespace, and then the CMK ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>. </p> </li> <li> <p>Alias ARN: The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>. </p> </li> </ul> <p>AWS authenticates <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. The action will eventually fail. </p>
    pub kms_key_id: String,
}

/// Serialize `ModifyEbsDefaultKmsKeyIdRequest` contents to a `SignedRequest`.
struct ModifyEbsDefaultKmsKeyIdRequestSerializer;
impl ModifyEbsDefaultKmsKeyIdRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyEbsDefaultKmsKeyIdRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "KmsKeyId"), &obj.kms_key_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyEbsDefaultKmsKeyIdResult {
    /// <p>The full ARN of the default CMK that your account uses to encrypt an EBS volume when no CMK is specified in the API call that creates the volume.</p>
    pub kms_key_id: Option<String>,
}

struct ModifyEbsDefaultKmsKeyIdResultDeserializer;
impl ModifyEbsDefaultKmsKeyIdResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyEbsDefaultKmsKeyIdResult, XmlParseError> {
        deserialize_elements::<_, ModifyEbsDefaultKmsKeyIdResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "kmsKeyId" => {
                        obj.kms_key_id = Some(StringDeserializer::deserialize("kmsKeyId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyFleetRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.</p>
    pub excess_capacity_termination_policy: Option<String>,
    /// <p>The ID of the EC2 Fleet.</p>
    pub fleet_id: String,
    /// <p>The size of the EC2 Fleet.</p>
    pub target_capacity_specification: TargetCapacitySpecificationRequest,
}

/// Serialize `ModifyFleetRequest` contents to a `SignedRequest`.
struct ModifyFleetRequestSerializer;
impl ModifyFleetRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyFleetRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.excess_capacity_termination_policy {
            params.put(
                &format!("{}{}", prefix, "ExcessCapacityTerminationPolicy"),
                &field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "FleetId"), &obj.fleet_id);
        TargetCapacitySpecificationRequestSerializer::serialize(
            params,
            &format!("{}{}", prefix, "TargetCapacitySpecification"),
            &obj.target_capacity_specification,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyFleetResult {
    /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
    pub return_: Option<bool>,
}

struct ModifyFleetResultDeserializer;
impl ModifyFleetResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyFleetResult, XmlParseError> {
        deserialize_elements::<_, ModifyFleetResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "return" => {
                    obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyFpgaImageAttributeRequest {
    /// <p>The name of the attribute.</p>
    pub attribute: Option<String>,
    /// <p>A description for the AFI.</p>
    pub description: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the AFI.</p>
    pub fpga_image_id: String,
    /// <p>The load permission for the AFI.</p>
    pub load_permission: Option<LoadPermissionModifications>,
    /// <p>A name for the AFI.</p>
    pub name: Option<String>,
    /// <p>The operation type.</p>
    pub operation_type: Option<String>,
    /// <p>The product codes. After you add a product code to an AFI, it can't be removed. This parameter is valid only when modifying the <code>productCodes</code> attribute.</p>
    pub product_codes: Option<Vec<String>>,
    /// <p>The user groups. This parameter is valid only when modifying the <code>loadPermission</code> attribute.</p>
    pub user_groups: Option<Vec<String>>,
    /// <p>The AWS account IDs. This parameter is valid only when modifying the <code>loadPermission</code> attribute.</p>
    pub user_ids: Option<Vec<String>>,
}

/// Serialize `ModifyFpgaImageAttributeRequest` contents to a `SignedRequest`.
struct ModifyFpgaImageAttributeRequestSerializer;
impl ModifyFpgaImageAttributeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyFpgaImageAttributeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.attribute {
            params.put(&format!("{}{}", prefix, "Attribute"), &field_value);
        }
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "FpgaImageId"), &obj.fpga_image_id);
        if let Some(ref field_value) = obj.load_permission {
            LoadPermissionModificationsSerializer::serialize(
                params,
                &format!("{}{}", prefix, "LoadPermission"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.name {
            params.put(&format!("{}{}", prefix, "Name"), &field_value);
        }
        if let Some(ref field_value) = obj.operation_type {
            params.put(&format!("{}{}", prefix, "OperationType"), &field_value);
        }
        if let Some(ref field_value) = obj.product_codes {
            ProductCodeStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ProductCode"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.user_groups {
            UserGroupStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "UserGroup"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.user_ids {
            UserIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "UserId"),
                field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyFpgaImageAttributeResult {
    /// <p>Information about the attribute.</p>
    pub fpga_image_attribute: Option<FpgaImageAttribute>,
}

struct ModifyFpgaImageAttributeResultDeserializer;
impl ModifyFpgaImageAttributeResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyFpgaImageAttributeResult, XmlParseError> {
        deserialize_elements::<_, ModifyFpgaImageAttributeResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "fpgaImageAttribute" => {
                        obj.fpga_image_attribute =
                            Some(FpgaImageAttributeDeserializer::deserialize(
                                "fpgaImageAttribute",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyHostsRequest {
    /// <p>Specify whether to enable or disable auto-placement.</p>
    pub auto_placement: Option<String>,
    /// <p>The IDs of the Dedicated Hosts to modify.</p>
    pub host_ids: Vec<String>,
    /// <p>Indicates whether to enable or disable host recovery for the Dedicated Host. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-recovery.html"> Host Recovery</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub host_recovery: Option<String>,
}

/// Serialize `ModifyHostsRequest` contents to a `SignedRequest`.
struct ModifyHostsRequestSerializer;
impl ModifyHostsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyHostsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.auto_placement {
            params.put(&format!("{}{}", prefix, "AutoPlacement"), &field_value);
        }
        RequestHostIdListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "HostId"),
            &obj.host_ids,
        );
        if let Some(ref field_value) = obj.host_recovery {
            params.put(&format!("{}{}", prefix, "HostRecovery"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyHostsResult {
    /// <p>The IDs of the Dedicated Hosts that were successfully modified.</p>
    pub successful: Option<Vec<String>>,
    /// <p>The IDs of the Dedicated Hosts that could not be modified. Check whether the setting you requested can be used.</p>
    pub unsuccessful: Option<Vec<UnsuccessfulItem>>,
}

struct ModifyHostsResultDeserializer;
impl ModifyHostsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyHostsResult, XmlParseError> {
        deserialize_elements::<_, ModifyHostsResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "successful" => {
                    obj.successful.get_or_insert(vec![]).extend(
                        ResponseHostIdListDeserializer::deserialize("successful", stack)?,
                    );
                }
                "unsuccessful" => {
                    obj.unsuccessful.get_or_insert(vec![]).extend(
                        UnsuccessfulItemListDeserializer::deserialize("unsuccessful", stack)?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyIdFormatRequest {
    /// <p>The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p> <p>Alternatively, use the <code>all-current</code> option to include all resource types that are currently within their opt-in period for longer IDs.</p>
    pub resource: String,
    /// <p>Indicate whether the resource should use longer IDs (17-character IDs).</p>
    pub use_long_ids: bool,
}

/// Serialize `ModifyIdFormatRequest` contents to a `SignedRequest`.
struct ModifyIdFormatRequestSerializer;
impl ModifyIdFormatRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyIdFormatRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Resource"), &obj.resource);
        params.put(&format!("{}{}", prefix, "UseLongIds"), &obj.use_long_ids);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyIdentityIdFormatRequest {
    /// <p>The ARN of the principal, which can be an IAM user, IAM role, or the root user. Specify <code>all</code> to modify the ID format for all IAM users, IAM roles, and the root user of the account.</p>
    pub principal_arn: String,
    /// <p>The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p> <p>Alternatively, use the <code>all-current</code> option to include all resource types that are currently within their opt-in period for longer IDs.</p>
    pub resource: String,
    /// <p>Indicates whether the resource should use longer IDs (17-character IDs)</p>
    pub use_long_ids: bool,
}

/// Serialize `ModifyIdentityIdFormatRequest` contents to a `SignedRequest`.
struct ModifyIdentityIdFormatRequestSerializer;
impl ModifyIdentityIdFormatRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyIdentityIdFormatRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "PrincipalArn"), &obj.principal_arn);
        params.put(&format!("{}{}", prefix, "Resource"), &obj.resource);
        params.put(&format!("{}{}", prefix, "UseLongIds"), &obj.use_long_ids);
    }
}

/// <p>Contains the parameters for ModifyImageAttribute.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyImageAttributeRequest {
    /// <p>The name of the attribute to modify. The valid values are <code>description</code>, <code>launchPermission</code>, and <code>productCodes</code>.</p>
    pub attribute: Option<String>,
    /// <p>A new description for the AMI.</p>
    pub description: Option<AttributeValue>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the AMI.</p>
    pub image_id: String,
    /// <p>A new launch permission for the AMI.</p>
    pub launch_permission: Option<LaunchPermissionModifications>,
    /// <p>The operation type. This parameter can be used only when the <code>Attribute</code> parameter is <code>launchPermission</code>.</p>
    pub operation_type: Option<String>,
    /// <p>The DevPay product codes. After you add a product code to an AMI, it can't be removed.</p>
    pub product_codes: Option<Vec<String>>,
    /// <p>The user groups. This parameter can be used only when the <code>Attribute</code> parameter is <code>launchPermission</code>.</p>
    pub user_groups: Option<Vec<String>>,
    /// <p>The AWS account IDs. This parameter can be used only when the <code>Attribute</code> parameter is <code>launchPermission</code>.</p>
    pub user_ids: Option<Vec<String>>,
    /// <p>The value of the attribute being modified. This parameter can be used only when the <code>Attribute</code> parameter is <code>description</code> or <code>productCodes</code>.</p>
    pub value: Option<String>,
}

/// Serialize `ModifyImageAttributeRequest` contents to a `SignedRequest`.
struct ModifyImageAttributeRequestSerializer;
impl ModifyImageAttributeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyImageAttributeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.attribute {
            params.put(&format!("{}{}", prefix, "Attribute"), &field_value);
        }
        if let Some(ref field_value) = obj.description {
            AttributeValueSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Description"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "ImageId"), &obj.image_id);
        if let Some(ref field_value) = obj.launch_permission {
            LaunchPermissionModificationsSerializer::serialize(
                params,
                &format!("{}{}", prefix, "LaunchPermission"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.operation_type {
            params.put(&format!("{}{}", prefix, "OperationType"), &field_value);
        }
        if let Some(ref field_value) = obj.product_codes {
            ProductCodeStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ProductCode"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.user_groups {
            UserGroupStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "UserGroup"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.user_ids {
            UserIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "UserId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.value {
            params.put(&format!("{}{}", prefix, "Value"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyInstanceAttributeRequest {
    /// <p>The name of the attribute.</p>
    pub attribute: Option<String>,
    /// <p>Modifies the <code>DeleteOnTermination</code> attribute for volumes that are currently attached. The volume must be owned by the caller. If no value is specified for <code>DeleteOnTermination</code>, the default is <code>true</code> and the volume is deleted when the instance is terminated.</p> <p>To add instance store volumes to an Amazon EBS-backed instance, you must add them when you launch the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html#Using_OverridingAMIBDM">Updating the Block Device Mapping when Launching an Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub block_device_mappings: Option<Vec<InstanceBlockDeviceMappingSpecification>>,
    /// <p>If the value is <code>true</code>, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. You cannot use this parameter for Spot Instances.</p>
    pub disable_api_termination: Option<AttributeBooleanValue>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Specifies whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.</p>
    pub ebs_optimized: Option<AttributeBooleanValue>,
    /// <p>Set to <code>true</code> to enable enhanced networking with ENA for the instance.</p> <p>This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable.</p>
    pub ena_support: Option<AttributeBooleanValue>,
    /// <p>[EC2-VPC] Changes the security groups of the instance. You must specify at least one security group, even if it's just the default security group for the VPC. You must specify the security group ID, not the security group name.</p>
    pub groups: Option<Vec<String>>,
    /// <p>The ID of the instance.</p>
    pub instance_id: String,
    /// <p>Specifies whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p>
    pub instance_initiated_shutdown_behavior: Option<AttributeValue>,
    /// <p>Changes the instance type to the specified value. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a>. If the instance type is not valid, the error returned is <code>InvalidInstanceAttributeValue</code>.</p>
    pub instance_type: Option<AttributeValue>,
    /// <p>Changes the instance's kernel to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html">PV-GRUB</a>.</p>
    pub kernel: Option<AttributeValue>,
    /// <p>Changes the instance's RAM disk to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html">PV-GRUB</a>.</p>
    pub ramdisk: Option<AttributeValue>,
    /// <p>Specifies whether source/destination checking is enabled. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. This value must be <code>false</code> for a NAT instance to perform NAT.</p>
    pub source_dest_check: Option<AttributeBooleanValue>,
    /// <p>Set to <code>simple</code> to enable enhanced networking with the Intel 82599 Virtual Function interface for the instance.</p> <p>There is no way to disable enhanced networking with the Intel 82599 Virtual Function interface at this time.</p> <p>This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable.</p>
    pub sriov_net_support: Option<AttributeValue>,
    /// <p>Changes the instance's user data to the specified value. If you are using an AWS SDK or command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text.</p>
    pub user_data: Option<BlobAttributeValue>,
    /// <p>A new value for the attribute. Use only with the <code>kernel</code>, <code>ramdisk</code>, <code>userData</code>, <code>disableApiTermination</code>, or <code>instanceInitiatedShutdownBehavior</code> attribute.</p>
    pub value: Option<String>,
}

/// Serialize `ModifyInstanceAttributeRequest` contents to a `SignedRequest`.
struct ModifyInstanceAttributeRequestSerializer;
impl ModifyInstanceAttributeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyInstanceAttributeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.attribute {
            params.put(&format!("{}{}", prefix, "Attribute"), &field_value);
        }
        if let Some(ref field_value) = obj.block_device_mappings {
            InstanceBlockDeviceMappingSpecificationListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "BlockDeviceMapping"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.disable_api_termination {
            AttributeBooleanValueSerializer::serialize(
                params,
                &format!("{}{}", prefix, "DisableApiTermination"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.ebs_optimized {
            AttributeBooleanValueSerializer::serialize(
                params,
                &format!("{}{}", prefix, "EbsOptimized"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.ena_support {
            AttributeBooleanValueSerializer::serialize(
                params,
                &format!("{}{}", prefix, "EnaSupport"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.groups {
            GroupIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "GroupId"),
                field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "InstanceId"), &obj.instance_id);
        if let Some(ref field_value) = obj.instance_initiated_shutdown_behavior {
            AttributeValueSerializer::serialize(
                params,
                &format!("{}{}", prefix, "InstanceInitiatedShutdownBehavior"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.instance_type {
            AttributeValueSerializer::serialize(
                params,
                &format!("{}{}", prefix, "InstanceType"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.kernel {
            AttributeValueSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Kernel"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.ramdisk {
            AttributeValueSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Ramdisk"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.source_dest_check {
            AttributeBooleanValueSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SourceDestCheck"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.sriov_net_support {
            AttributeValueSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SriovNetSupport"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.user_data {
            BlobAttributeValueSerializer::serialize(
                params,
                &format!("{}{}", prefix, "UserData"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.value {
            params.put(&format!("{}{}", prefix, "Value"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyInstanceCapacityReservationAttributesRequest {
    /// <p>Information about the Capacity Reservation targeting option.</p>
    pub capacity_reservation_specification: CapacityReservationSpecification,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the instance to be modified.</p>
    pub instance_id: String,
}

/// Serialize `ModifyInstanceCapacityReservationAttributesRequest` contents to a `SignedRequest`.
struct ModifyInstanceCapacityReservationAttributesRequestSerializer;
impl ModifyInstanceCapacityReservationAttributesRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &ModifyInstanceCapacityReservationAttributesRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        CapacityReservationSpecificationSerializer::serialize(
            params,
            &format!("{}{}", prefix, "CapacityReservationSpecification"),
            &obj.capacity_reservation_specification,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "InstanceId"), &obj.instance_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyInstanceCapacityReservationAttributesResult {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub return_: Option<bool>,
}

struct ModifyInstanceCapacityReservationAttributesResultDeserializer;
impl ModifyInstanceCapacityReservationAttributesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyInstanceCapacityReservationAttributesResult, XmlParseError> {
        deserialize_elements::<_, ModifyInstanceCapacityReservationAttributesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyInstanceCreditSpecificationRequest {
    /// <p>A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Information about the credit option for CPU usage.</p>
    pub instance_credit_specifications: Vec<InstanceCreditSpecificationRequest>,
}

/// Serialize `ModifyInstanceCreditSpecificationRequest` contents to a `SignedRequest`.
struct ModifyInstanceCreditSpecificationRequestSerializer;
impl ModifyInstanceCreditSpecificationRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyInstanceCreditSpecificationRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        InstanceCreditSpecificationListRequestSerializer::serialize(
            params,
            &format!("{}{}", prefix, "InstanceCreditSpecification"),
            &obj.instance_credit_specifications,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyInstanceCreditSpecificationResult {
    /// <p>Information about the instances whose credit option for CPU usage was successfully modified.</p>
    pub successful_instance_credit_specifications:
        Option<Vec<SuccessfulInstanceCreditSpecificationItem>>,
    /// <p>Information about the instances whose credit option for CPU usage was not modified.</p>
    pub unsuccessful_instance_credit_specifications:
        Option<Vec<UnsuccessfulInstanceCreditSpecificationItem>>,
}

struct ModifyInstanceCreditSpecificationResultDeserializer;
impl ModifyInstanceCreditSpecificationResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyInstanceCreditSpecificationResult, XmlParseError> {
        deserialize_elements::<_, ModifyInstanceCreditSpecificationResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "successfulInstanceCreditSpecificationSet" => {
                        obj.successful_instance_credit_specifications
                            .get_or_insert(vec![])
                            .extend(
                                SuccessfulInstanceCreditSpecificationSetDeserializer::deserialize(
                                    "successfulInstanceCreditSpecificationSet",
                                    stack,
                                )?,
                            );
                    }
                    "unsuccessfulInstanceCreditSpecificationSet" => {
                        obj.unsuccessful_instance_credit_specifications
                                .get_or_insert(vec![])
                                .extend(UnsuccessfulInstanceCreditSpecificationSetDeserializer::deserialize("unsuccessfulInstanceCreditSpecificationSet", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyInstanceEventStartTimeRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the event whose date and time you are modifying.</p>
    pub instance_event_id: String,
    /// <p>The ID of the instance with the scheduled event.</p>
    pub instance_id: String,
    /// <p>The new date and time when the event will take place.</p>
    pub not_before: String,
}

/// Serialize `ModifyInstanceEventStartTimeRequest` contents to a `SignedRequest`.
struct ModifyInstanceEventStartTimeRequestSerializer;
impl ModifyInstanceEventStartTimeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyInstanceEventStartTimeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "InstanceEventId"),
            &obj.instance_event_id,
        );
        params.put(&format!("{}{}", prefix, "InstanceId"), &obj.instance_id);
        params.put(&format!("{}{}", prefix, "NotBefore"), &obj.not_before);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyInstanceEventStartTimeResult {
    pub event: Option<InstanceStatusEvent>,
}

struct ModifyInstanceEventStartTimeResultDeserializer;
impl ModifyInstanceEventStartTimeResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyInstanceEventStartTimeResult, XmlParseError> {
        deserialize_elements::<_, ModifyInstanceEventStartTimeResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "event" => {
                        obj.event = Some(InstanceStatusEventDeserializer::deserialize(
                            "event", stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyInstancePlacementRequest {
    /// <p>The affinity setting for the instance.</p>
    pub affinity: Option<String>,
    /// <p>The name of the placement group in which to place the instance. For spread placement groups, the instance must have a tenancy of <code>default</code>. For cluster and partition placement groups, the instance must have a tenancy of <code>default</code> or <code>dedicated</code>.</p> <p>To remove an instance from a placement group, specify an empty string ("").</p>
    pub group_name: Option<String>,
    /// <p>The ID of the Dedicated Host with which to associate the instance.</p>
    pub host_id: Option<String>,
    /// <p>The ID of the instance that you are modifying.</p>
    pub instance_id: String,
    /// <p>Reserved for future use.</p>
    pub partition_number: Option<i64>,
    /// <p>The tenancy for the instance.</p>
    pub tenancy: Option<String>,
}

/// Serialize `ModifyInstancePlacementRequest` contents to a `SignedRequest`.
struct ModifyInstancePlacementRequestSerializer;
impl ModifyInstancePlacementRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyInstancePlacementRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.affinity {
            params.put(&format!("{}{}", prefix, "Affinity"), &field_value);
        }
        if let Some(ref field_value) = obj.group_name {
            params.put(&format!("{}{}", prefix, "GroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.host_id {
            params.put(&format!("{}{}", prefix, "HostId"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "InstanceId"), &obj.instance_id);
        if let Some(ref field_value) = obj.partition_number {
            params.put(&format!("{}{}", prefix, "PartitionNumber"), &field_value);
        }
        if let Some(ref field_value) = obj.tenancy {
            params.put(&format!("{}{}", prefix, "Tenancy"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyInstancePlacementResult {
    /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
    pub return_: Option<bool>,
}

struct ModifyInstancePlacementResultDeserializer;
impl ModifyInstancePlacementResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyInstancePlacementResult, XmlParseError> {
        deserialize_elements::<_, ModifyInstancePlacementResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyLaunchTemplateRequest {
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p> <p>Constraint: Maximum 128 ASCII characters.</p>
    pub client_token: Option<String>,
    /// <p>The version number of the launch template to set as the default version.</p>
    pub default_version: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the launch template. You must specify either the launch template ID or launch template name in the request.</p>
    pub launch_template_id: Option<String>,
    /// <p>The name of the launch template. You must specify either the launch template ID or launch template name in the request.</p>
    pub launch_template_name: Option<String>,
}

/// Serialize `ModifyLaunchTemplateRequest` contents to a `SignedRequest`.
struct ModifyLaunchTemplateRequestSerializer;
impl ModifyLaunchTemplateRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyLaunchTemplateRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        if let Some(ref field_value) = obj.default_version {
            params.put(&format!("{}{}", prefix, "SetDefaultVersion"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.launch_template_id {
            params.put(&format!("{}{}", prefix, "LaunchTemplateId"), &field_value);
        }
        if let Some(ref field_value) = obj.launch_template_name {
            params.put(&format!("{}{}", prefix, "LaunchTemplateName"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyLaunchTemplateResult {
    /// <p>Information about the launch template.</p>
    pub launch_template: Option<LaunchTemplate>,
}

struct ModifyLaunchTemplateResultDeserializer;
impl ModifyLaunchTemplateResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyLaunchTemplateResult, XmlParseError> {
        deserialize_elements::<_, ModifyLaunchTemplateResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "launchTemplate" => {
                        obj.launch_template = Some(LaunchTemplateDeserializer::deserialize(
                            "launchTemplate",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for ModifyNetworkInterfaceAttribute.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyNetworkInterfaceAttributeRequest {
    /// <p>Information about the interface attachment. If modifying the 'delete on termination' attribute, you must specify the ID of the interface attachment.</p>
    pub attachment: Option<NetworkInterfaceAttachmentChanges>,
    /// <p>A description for the network interface.</p>
    pub description: Option<AttributeValue>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Changes the security groups for the network interface. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.</p>
    pub groups: Option<Vec<String>>,
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: String,
    /// <p>Indicates whether source/destination checking is enabled. A value of <code>true</code> means checking is enabled, and <code>false</code> means checking is disabled. This value must be <code>false</code> for a NAT instance to perform NAT. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html">NAT Instances</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    pub source_dest_check: Option<AttributeBooleanValue>,
}

/// Serialize `ModifyNetworkInterfaceAttributeRequest` contents to a `SignedRequest`.
struct ModifyNetworkInterfaceAttributeRequestSerializer;
impl ModifyNetworkInterfaceAttributeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyNetworkInterfaceAttributeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.attachment {
            NetworkInterfaceAttachmentChangesSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Attachment"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.description {
            AttributeValueSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Description"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.groups {
            SecurityGroupIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SecurityGroupId"),
                field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "NetworkInterfaceId"),
            &obj.network_interface_id,
        );
        if let Some(ref field_value) = obj.source_dest_check {
            AttributeBooleanValueSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SourceDestCheck"),
                field_value,
            );
        }
    }
}

/// <p>Contains the parameters for ModifyReservedInstances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyReservedInstancesRequest {
    /// <p>A unique, case-sensitive token you provide to ensure idempotency of your modification request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p>The IDs of the Reserved Instances to modify.</p>
    pub reserved_instances_ids: Vec<String>,
    /// <p>The configuration settings for the Reserved Instances to modify.</p>
    pub target_configurations: Vec<ReservedInstancesConfiguration>,
}

/// Serialize `ModifyReservedInstancesRequest` contents to a `SignedRequest`.
struct ModifyReservedInstancesRequestSerializer;
impl ModifyReservedInstancesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyReservedInstancesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        ReservedInstancesIdStringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "ReservedInstancesId"),
            &obj.reserved_instances_ids,
        );
        ReservedInstancesConfigurationListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "ReservedInstancesConfigurationSetItemType"),
            &obj.target_configurations,
        );
    }
}

/// <p>Contains the output of ModifyReservedInstances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyReservedInstancesResult {
    /// <p>The ID for the modification.</p>
    pub reserved_instances_modification_id: Option<String>,
}

struct ModifyReservedInstancesResultDeserializer;
impl ModifyReservedInstancesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyReservedInstancesResult, XmlParseError> {
        deserialize_elements::<_, ModifyReservedInstancesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "reservedInstancesModificationId" => {
                        obj.reserved_instances_modification_id =
                            Some(StringDeserializer::deserialize(
                                "reservedInstancesModificationId",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for ModifySnapshotAttribute.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifySnapshotAttributeRequest {
    /// <p>The snapshot attribute to modify. Only volume creation permissions can be modified.</p>
    pub attribute: Option<String>,
    /// <p>A JSON representation of the snapshot attribute modification.</p>
    pub create_volume_permission: Option<CreateVolumePermissionModifications>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The group to modify for the snapshot.</p>
    pub group_names: Option<Vec<String>>,
    /// <p>The type of operation to perform to the attribute.</p>
    pub operation_type: Option<String>,
    /// <p>The ID of the snapshot.</p>
    pub snapshot_id: String,
    /// <p>The account ID to modify for the snapshot.</p>
    pub user_ids: Option<Vec<String>>,
}

/// Serialize `ModifySnapshotAttributeRequest` contents to a `SignedRequest`.
struct ModifySnapshotAttributeRequestSerializer;
impl ModifySnapshotAttributeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifySnapshotAttributeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.attribute {
            params.put(&format!("{}{}", prefix, "Attribute"), &field_value);
        }
        if let Some(ref field_value) = obj.create_volume_permission {
            CreateVolumePermissionModificationsSerializer::serialize(
                params,
                &format!("{}{}", prefix, "CreateVolumePermission"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.group_names {
            GroupNameStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "UserGroup"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.operation_type {
            params.put(&format!("{}{}", prefix, "OperationType"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "SnapshotId"), &obj.snapshot_id);
        if let Some(ref field_value) = obj.user_ids {
            UserIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "UserId"),
                field_value,
            );
        }
    }
}

/// <p>Contains the parameters for ModifySpotFleetRequest.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifySpotFleetRequestRequest {
    /// <p>Indicates whether running Spot Instances should be terminated if the target capacity of the Spot Fleet request is decreased below the current size of the Spot Fleet.</p>
    pub excess_capacity_termination_policy: Option<String>,
    /// <p>The ID of the Spot Fleet request.</p>
    pub spot_fleet_request_id: String,
    /// <p>The size of the fleet.</p>
    pub target_capacity: Option<i64>,
}

/// Serialize `ModifySpotFleetRequestRequest` contents to a `SignedRequest`.
struct ModifySpotFleetRequestRequestSerializer;
impl ModifySpotFleetRequestRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifySpotFleetRequestRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.excess_capacity_termination_policy {
            params.put(
                &format!("{}{}", prefix, "ExcessCapacityTerminationPolicy"),
                &field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "SpotFleetRequestId"),
            &obj.spot_fleet_request_id,
        );
        if let Some(ref field_value) = obj.target_capacity {
            params.put(&format!("{}{}", prefix, "TargetCapacity"), &field_value);
        }
    }
}

/// <p>Contains the output of ModifySpotFleetRequest.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifySpotFleetRequestResponse {
    /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
    pub return_: Option<bool>,
}

struct ModifySpotFleetRequestResponseDeserializer;
impl ModifySpotFleetRequestResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifySpotFleetRequestResponse, XmlParseError> {
        deserialize_elements::<_, ModifySpotFleetRequestResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifySubnetAttributeRequest {
    /// <p>Specify <code>true</code> to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. This includes a network interface that's created when launching an instance into the subnet (the instance therefore receives an IPv6 address). </p> <p>If you enable the IPv6 addressing feature for your subnet, your network interface or instance only receives an IPv6 address if it's created using version <code>2016-11-15</code> or later of the Amazon EC2 API.</p>
    pub assign_ipv_6_address_on_creation: Option<AttributeBooleanValue>,
    /// <p>Specify <code>true</code> to indicate that ENIs attached to instances created in the specified subnet should be assigned a public IPv4 address.</p>
    pub map_public_ip_on_launch: Option<AttributeBooleanValue>,
    /// <p>The ID of the subnet.</p>
    pub subnet_id: String,
}

/// Serialize `ModifySubnetAttributeRequest` contents to a `SignedRequest`.
struct ModifySubnetAttributeRequestSerializer;
impl ModifySubnetAttributeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifySubnetAttributeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.assign_ipv_6_address_on_creation {
            AttributeBooleanValueSerializer::serialize(
                params,
                &format!("{}{}", prefix, "AssignIpv6AddressOnCreation"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.map_public_ip_on_launch {
            AttributeBooleanValueSerializer::serialize(
                params,
                &format!("{}{}", prefix, "MapPublicIpOnLaunch"),
                field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "SubnetId"), &obj.subnet_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyTransitGatewayVpcAttachmentRequest {
    /// <p>The IDs of one or more subnets to add. You can specify at most one subnet per Availability Zone.</p>
    pub add_subnet_ids: Option<Vec<String>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The new VPC attachment options.</p>
    pub options: Option<ModifyTransitGatewayVpcAttachmentRequestOptions>,
    /// <p>The IDs of one or more subnets to remove.</p>
    pub remove_subnet_ids: Option<Vec<String>>,
    /// <p>The ID of the attachment.</p>
    pub transit_gateway_attachment_id: String,
}

/// Serialize `ModifyTransitGatewayVpcAttachmentRequest` contents to a `SignedRequest`.
struct ModifyTransitGatewayVpcAttachmentRequestSerializer;
impl ModifyTransitGatewayVpcAttachmentRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyTransitGatewayVpcAttachmentRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.add_subnet_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "AddSubnetIds"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.options {
            ModifyTransitGatewayVpcAttachmentRequestOptionsSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Options"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.remove_subnet_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "RemoveSubnetIds"),
                field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "TransitGatewayAttachmentId"),
            &obj.transit_gateway_attachment_id,
        );
    }
}

/// <p>Describes the options for a VPC attachment.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyTransitGatewayVpcAttachmentRequestOptions {
    /// <p>Enable or disable DNS support. The default is <code>enable</code>.</p>
    pub dns_support: Option<String>,
    /// <p>Enable or disable IPv6 support. The default is <code>enable</code>.</p>
    pub ipv_6_support: Option<String>,
}

/// Serialize `ModifyTransitGatewayVpcAttachmentRequestOptions` contents to a `SignedRequest`.
struct ModifyTransitGatewayVpcAttachmentRequestOptionsSerializer;
impl ModifyTransitGatewayVpcAttachmentRequestOptionsSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &ModifyTransitGatewayVpcAttachmentRequestOptions,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dns_support {
            params.put(&format!("{}{}", prefix, "DnsSupport"), &field_value);
        }
        if let Some(ref field_value) = obj.ipv_6_support {
            params.put(&format!("{}{}", prefix, "Ipv6Support"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyTransitGatewayVpcAttachmentResult {
    /// <p>Information about the modified attachment.</p>
    pub transit_gateway_vpc_attachment: Option<TransitGatewayVpcAttachment>,
}

struct ModifyTransitGatewayVpcAttachmentResultDeserializer;
impl ModifyTransitGatewayVpcAttachmentResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyTransitGatewayVpcAttachmentResult, XmlParseError> {
        deserialize_elements::<_, ModifyTransitGatewayVpcAttachmentResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "transitGatewayVpcAttachment" => {
                        obj.transit_gateway_vpc_attachment =
                            Some(TransitGatewayVpcAttachmentDeserializer::deserialize(
                                "transitGatewayVpcAttachment",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for ModifyVolumeAttribute.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyVolumeAttributeRequest {
    /// <p>Indicates whether the volume should be auto-enabled for I/O operations.</p>
    pub auto_enable_io: Option<AttributeBooleanValue>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the volume.</p>
    pub volume_id: String,
}

/// Serialize `ModifyVolumeAttributeRequest` contents to a `SignedRequest`.
struct ModifyVolumeAttributeRequestSerializer;
impl ModifyVolumeAttributeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyVolumeAttributeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.auto_enable_io {
            AttributeBooleanValueSerializer::serialize(
                params,
                &format!("{}{}", prefix, "AutoEnableIO"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "VolumeId"), &obj.volume_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyVolumeRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The target IOPS rate of the volume.</p> <p>This is only valid for Provisioned IOPS SSD (<code>io1</code>) volumes. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html#EBSVolumeTypes_piops">Provisioned IOPS SSD (io1) Volumes</a>.</p> <p>Default: If no IOPS value is specified, the existing value is retained.</p>
    pub iops: Option<i64>,
    /// <p>The target size of the volume, in GiB. The target volume size must be greater than or equal to than the existing size of the volume. For information about available EBS volume sizes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS Volume Types</a>.</p> <p>Default: If no size is specified, the existing size is retained.</p>
    pub size: Option<i64>,
    /// <p>The ID of the volume.</p>
    pub volume_id: String,
    /// <p>The target EBS volume type of the volume.</p> <p>Default: If no type is specified, the existing type is retained.</p>
    pub volume_type: Option<String>,
}

/// Serialize `ModifyVolumeRequest` contents to a `SignedRequest`.
struct ModifyVolumeRequestSerializer;
impl ModifyVolumeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyVolumeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.iops {
            params.put(&format!("{}{}", prefix, "Iops"), &field_value);
        }
        if let Some(ref field_value) = obj.size {
            params.put(&format!("{}{}", prefix, "Size"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "VolumeId"), &obj.volume_id);
        if let Some(ref field_value) = obj.volume_type {
            params.put(&format!("{}{}", prefix, "VolumeType"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyVolumeResult {
    /// <p>Information about the volume modification.</p>
    pub volume_modification: Option<VolumeModification>,
}

struct ModifyVolumeResultDeserializer;
impl ModifyVolumeResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyVolumeResult, XmlParseError> {
        deserialize_elements::<_, ModifyVolumeResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "volumeModification" => {
                    obj.volume_modification = Some(VolumeModificationDeserializer::deserialize(
                        "volumeModification",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyVpcAttributeRequest {
    /// <p>Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames; otherwise, they do not.</p> <p>You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute. You can only enable DNS hostnames if you've enabled DNS support.</p>
    pub enable_dns_hostnames: Option<AttributeBooleanValue>,
    /// <p>Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP address at the base of the VPC network range "plus two" succeed. If disabled, the Amazon provided DNS service in the VPC that resolves public DNS hostnames to IP addresses is not enabled.</p> <p>You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute.</p>
    pub enable_dns_support: Option<AttributeBooleanValue>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: String,
}

/// Serialize `ModifyVpcAttributeRequest` contents to a `SignedRequest`.
struct ModifyVpcAttributeRequestSerializer;
impl ModifyVpcAttributeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyVpcAttributeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.enable_dns_hostnames {
            AttributeBooleanValueSerializer::serialize(
                params,
                &format!("{}{}", prefix, "EnableDnsHostnames"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.enable_dns_support {
            AttributeBooleanValueSerializer::serialize(
                params,
                &format!("{}{}", prefix, "EnableDnsSupport"),
                field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "VpcId"), &obj.vpc_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyVpcEndpointConnectionNotificationRequest {
    /// <p>One or more events for the endpoint. Valid values are <code>Accept</code>, <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.</p>
    pub connection_events: Option<Vec<String>>,
    /// <p>The ARN for the SNS topic for the notification.</p>
    pub connection_notification_arn: Option<String>,
    /// <p>The ID of the notification.</p>
    pub connection_notification_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `ModifyVpcEndpointConnectionNotificationRequest` contents to a `SignedRequest`.
struct ModifyVpcEndpointConnectionNotificationRequestSerializer;
impl ModifyVpcEndpointConnectionNotificationRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &ModifyVpcEndpointConnectionNotificationRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.connection_events {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ConnectionEvents"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.connection_notification_arn {
            params.put(
                &format!("{}{}", prefix, "ConnectionNotificationArn"),
                &field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "ConnectionNotificationId"),
            &obj.connection_notification_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyVpcEndpointConnectionNotificationResult {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub return_value: Option<bool>,
}

struct ModifyVpcEndpointConnectionNotificationResultDeserializer;
impl ModifyVpcEndpointConnectionNotificationResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyVpcEndpointConnectionNotificationResult, XmlParseError> {
        deserialize_elements::<_, ModifyVpcEndpointConnectionNotificationResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_value = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for ModifyVpcEndpoint.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyVpcEndpointRequest {
    /// <p>(Gateway endpoint) One or more route tables IDs to associate with the endpoint.</p>
    pub add_route_table_ids: Option<Vec<String>>,
    /// <p>(Interface endpoint) One or more security group IDs to associate with the network interface.</p>
    pub add_security_group_ids: Option<Vec<String>>,
    /// <p>(Interface endpoint) One or more subnet IDs in which to serve the endpoint.</p>
    pub add_subnet_ids: Option<Vec<String>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format. If this parameter is not specified, we attach a default policy that allows full access to the service.</p>
    pub policy_document: Option<String>,
    /// <p>(Interface endpoint) Indicate whether a private hosted zone is associated with the VPC.</p>
    pub private_dns_enabled: Option<bool>,
    /// <p>(Gateway endpoint) One or more route table IDs to disassociate from the endpoint.</p>
    pub remove_route_table_ids: Option<Vec<String>>,
    /// <p>(Interface endpoint) One or more security group IDs to disassociate from the network interface.</p>
    pub remove_security_group_ids: Option<Vec<String>>,
    /// <p>(Interface endpoint) One or more subnets IDs in which to remove the endpoint.</p>
    pub remove_subnet_ids: Option<Vec<String>>,
    /// <p>(Gateway endpoint) Specify <code>true</code> to reset the policy document to the default policy. The default policy allows full access to the service.</p>
    pub reset_policy: Option<bool>,
    /// <p>The ID of the endpoint.</p>
    pub vpc_endpoint_id: String,
}

/// Serialize `ModifyVpcEndpointRequest` contents to a `SignedRequest`.
struct ModifyVpcEndpointRequestSerializer;
impl ModifyVpcEndpointRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyVpcEndpointRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.add_route_table_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "AddRouteTableId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.add_security_group_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "AddSecurityGroupId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.add_subnet_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "AddSubnetId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.policy_document {
            params.put(&format!("{}{}", prefix, "PolicyDocument"), &field_value);
        }
        if let Some(ref field_value) = obj.private_dns_enabled {
            params.put(&format!("{}{}", prefix, "PrivateDnsEnabled"), &field_value);
        }
        if let Some(ref field_value) = obj.remove_route_table_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "RemoveRouteTableId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.remove_security_group_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "RemoveSecurityGroupId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.remove_subnet_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "RemoveSubnetId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.reset_policy {
            params.put(&format!("{}{}", prefix, "ResetPolicy"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "VpcEndpointId"),
            &obj.vpc_endpoint_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyVpcEndpointResult {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub return_: Option<bool>,
}

struct ModifyVpcEndpointResultDeserializer;
impl ModifyVpcEndpointResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyVpcEndpointResult, XmlParseError> {
        deserialize_elements::<_, ModifyVpcEndpointResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyVpcEndpointServiceConfigurationRequest {
    /// <p>Indicate whether requests to create an endpoint to your service must be accepted.</p>
    pub acceptance_required: Option<bool>,
    /// <p>The Amazon Resource Names (ARNs) of Network Load Balancers to add to your service configuration.</p>
    pub add_network_load_balancer_arns: Option<Vec<String>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The Amazon Resource Names (ARNs) of Network Load Balancers to remove from your service configuration.</p>
    pub remove_network_load_balancer_arns: Option<Vec<String>>,
    /// <p>The ID of the service.</p>
    pub service_id: String,
}

/// Serialize `ModifyVpcEndpointServiceConfigurationRequest` contents to a `SignedRequest`.
struct ModifyVpcEndpointServiceConfigurationRequestSerializer;
impl ModifyVpcEndpointServiceConfigurationRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &ModifyVpcEndpointServiceConfigurationRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.acceptance_required {
            params.put(&format!("{}{}", prefix, "AcceptanceRequired"), &field_value);
        }
        if let Some(ref field_value) = obj.add_network_load_balancer_arns {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "AddNetworkLoadBalancerArn"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.remove_network_load_balancer_arns {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "RemoveNetworkLoadBalancerArn"),
                field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "ServiceId"), &obj.service_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyVpcEndpointServiceConfigurationResult {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub return_: Option<bool>,
}

struct ModifyVpcEndpointServiceConfigurationResultDeserializer;
impl ModifyVpcEndpointServiceConfigurationResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyVpcEndpointServiceConfigurationResult, XmlParseError> {
        deserialize_elements::<_, ModifyVpcEndpointServiceConfigurationResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyVpcEndpointServicePermissionsRequest {
    /// <p>The Amazon Resource Names (ARN) of one or more principals. Permissions are granted to the principals in this list. To grant permissions to all principals, specify an asterisk (*).</p>
    pub add_allowed_principals: Option<Vec<String>>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The Amazon Resource Names (ARN) of one or more principals. Permissions are revoked for principals in this list.</p>
    pub remove_allowed_principals: Option<Vec<String>>,
    /// <p>The ID of the service.</p>
    pub service_id: String,
}

/// Serialize `ModifyVpcEndpointServicePermissionsRequest` contents to a `SignedRequest`.
struct ModifyVpcEndpointServicePermissionsRequestSerializer;
impl ModifyVpcEndpointServicePermissionsRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &ModifyVpcEndpointServicePermissionsRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.add_allowed_principals {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "AddAllowedPrincipals"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.remove_allowed_principals {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "RemoveAllowedPrincipals"),
                field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "ServiceId"), &obj.service_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyVpcEndpointServicePermissionsResult {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub return_value: Option<bool>,
}

struct ModifyVpcEndpointServicePermissionsResultDeserializer;
impl ModifyVpcEndpointServicePermissionsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyVpcEndpointServicePermissionsResult, XmlParseError> {
        deserialize_elements::<_, ModifyVpcEndpointServicePermissionsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_value = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyVpcPeeringConnectionOptionsRequest {
    /// <p>The VPC peering connection options for the accepter VPC.</p>
    pub accepter_peering_connection_options: Option<PeeringConnectionOptionsRequest>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The VPC peering connection options for the requester VPC.</p>
    pub requester_peering_connection_options: Option<PeeringConnectionOptionsRequest>,
    /// <p>The ID of the VPC peering connection.</p>
    pub vpc_peering_connection_id: String,
}

/// Serialize `ModifyVpcPeeringConnectionOptionsRequest` contents to a `SignedRequest`.
struct ModifyVpcPeeringConnectionOptionsRequestSerializer;
impl ModifyVpcPeeringConnectionOptionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyVpcPeeringConnectionOptionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.accepter_peering_connection_options {
            PeeringConnectionOptionsRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "AccepterPeeringConnectionOptions"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.requester_peering_connection_options {
            PeeringConnectionOptionsRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "RequesterPeeringConnectionOptions"),
                field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "VpcPeeringConnectionId"),
            &obj.vpc_peering_connection_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyVpcPeeringConnectionOptionsResult {
    /// <p>Information about the VPC peering connection options for the accepter VPC.</p>
    pub accepter_peering_connection_options: Option<PeeringConnectionOptions>,
    /// <p>Information about the VPC peering connection options for the requester VPC.</p>
    pub requester_peering_connection_options: Option<PeeringConnectionOptions>,
}

struct ModifyVpcPeeringConnectionOptionsResultDeserializer;
impl ModifyVpcPeeringConnectionOptionsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyVpcPeeringConnectionOptionsResult, XmlParseError> {
        deserialize_elements::<_, ModifyVpcPeeringConnectionOptionsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "accepterPeeringConnectionOptions" => {
                        obj.accepter_peering_connection_options =
                            Some(PeeringConnectionOptionsDeserializer::deserialize(
                                "accepterPeeringConnectionOptions",
                                stack,
                            )?);
                    }
                    "requesterPeeringConnectionOptions" => {
                        obj.requester_peering_connection_options =
                            Some(PeeringConnectionOptionsDeserializer::deserialize(
                                "requesterPeeringConnectionOptions",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyVpcTenancyRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The instance tenancy attribute for the VPC. </p>
    pub instance_tenancy: String,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: String,
}

/// Serialize `ModifyVpcTenancyRequest` contents to a `SignedRequest`.
struct ModifyVpcTenancyRequestSerializer;
impl ModifyVpcTenancyRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyVpcTenancyRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "InstanceTenancy"),
            &obj.instance_tenancy,
        );
        params.put(&format!("{}{}", prefix, "VpcId"), &obj.vpc_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyVpcTenancyResult {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    pub return_value: Option<bool>,
}

struct ModifyVpcTenancyResultDeserializer;
impl ModifyVpcTenancyResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyVpcTenancyResult, XmlParseError> {
        deserialize_elements::<_, ModifyVpcTenancyResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "return" => {
                    obj.return_value = Some(BooleanDeserializer::deserialize("return", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyVpnConnectionRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the transit gateway.</p>
    pub transit_gateway_id: Option<String>,
    /// <p>The ID of the VPN connection.</p>
    pub vpn_connection_id: String,
    /// <p>The ID of the virtual private gateway at the AWS side of the VPN connection.</p>
    pub vpn_gateway_id: Option<String>,
}

/// Serialize `ModifyVpnConnectionRequest` contents to a `SignedRequest`.
struct ModifyVpnConnectionRequestSerializer;
impl ModifyVpnConnectionRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ModifyVpnConnectionRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.transit_gateway_id {
            params.put(&format!("{}{}", prefix, "TransitGatewayId"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "VpnConnectionId"),
            &obj.vpn_connection_id,
        );
        if let Some(ref field_value) = obj.vpn_gateway_id {
            params.put(&format!("{}{}", prefix, "VpnGatewayId"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ModifyVpnConnectionResult {
    pub vpn_connection: Option<VpnConnection>,
}

struct ModifyVpnConnectionResultDeserializer;
impl ModifyVpnConnectionResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ModifyVpnConnectionResult, XmlParseError> {
        deserialize_elements::<_, ModifyVpnConnectionResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "vpnConnection" => {
                        obj.vpn_connection = Some(VpnConnectionDeserializer::deserialize(
                            "vpnConnection",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct MonitorInstancesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The IDs of the instances.</p>
    pub instance_ids: Vec<String>,
}

/// Serialize `MonitorInstancesRequest` contents to a `SignedRequest`.
struct MonitorInstancesRequestSerializer;
impl MonitorInstancesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &MonitorInstancesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        InstanceIdStringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "InstanceId"),
            &obj.instance_ids,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct MonitorInstancesResult {
    /// <p>The monitoring information.</p>
    pub instance_monitorings: Option<Vec<InstanceMonitoring>>,
}

struct MonitorInstancesResultDeserializer;
impl MonitorInstancesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<MonitorInstancesResult, XmlParseError> {
        deserialize_elements::<_, MonitorInstancesResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "instancesSet" => {
                    obj.instance_monitorings.get_or_insert(vec![]).extend(
                        InstanceMonitoringListDeserializer::deserialize("instancesSet", stack)?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes the monitoring of an instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct Monitoring {
    /// <p>Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.</p>
    pub state: Option<String>,
}

struct MonitoringDeserializer;
impl MonitoringDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Monitoring, XmlParseError> {
        deserialize_elements::<_, Monitoring, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "state" => {
                    obj.state = Some(MonitoringStateDeserializer::deserialize("state", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct MonitoringStateDeserializer;
impl MonitoringStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct MoveAddressToVpcRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The Elastic IP address.</p>
    pub public_ip: String,
}

/// Serialize `MoveAddressToVpcRequest` contents to a `SignedRequest`.
struct MoveAddressToVpcRequestSerializer;
impl MoveAddressToVpcRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &MoveAddressToVpcRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "PublicIp"), &obj.public_ip);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct MoveAddressToVpcResult {
    /// <p>The allocation ID for the Elastic IP address.</p>
    pub allocation_id: Option<String>,
    /// <p>The status of the move of the IP address.</p>
    pub status: Option<String>,
}

struct MoveAddressToVpcResultDeserializer;
impl MoveAddressToVpcResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<MoveAddressToVpcResult, XmlParseError> {
        deserialize_elements::<_, MoveAddressToVpcResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "allocationId" => {
                    obj.allocation_id =
                        Some(StringDeserializer::deserialize("allocationId", stack)?);
                }
                "status" => {
                    obj.status = Some(StatusDeserializer::deserialize("status", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct MoveStatusDeserializer;
impl MoveStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes the status of a moving Elastic IP address.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct MovingAddressStatus {
    /// <p>The status of the Elastic IP address that's being moved to the EC2-VPC platform, or restored to the EC2-Classic platform.</p>
    pub move_status: Option<String>,
    /// <p>The Elastic IP address.</p>
    pub public_ip: Option<String>,
}

struct MovingAddressStatusDeserializer;
impl MovingAddressStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<MovingAddressStatus, XmlParseError> {
        deserialize_elements::<_, MovingAddressStatus, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "moveStatus" => {
                    obj.move_status =
                        Some(MoveStatusDeserializer::deserialize("moveStatus", stack)?);
                }
                "publicIp" => {
                    obj.public_ip = Some(StringDeserializer::deserialize("publicIp", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct MovingAddressStatusSetDeserializer;
impl MovingAddressStatusSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<MovingAddressStatus>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(MovingAddressStatusDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a NAT gateway.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct NatGateway {
    /// <p>The date and time the NAT gateway was created.</p>
    pub create_time: Option<String>,
    /// <p>The date and time the NAT gateway was deleted, if applicable.</p>
    pub delete_time: Option<String>,
    /// <p>If the NAT gateway could not be created, specifies the error code for the failure. (<code>InsufficientFreeAddressesInSubnet</code> | <code>Gateway.NotAttached</code> | <code>InvalidAllocationID.NotFound</code> | <code>Resource.AlreadyAssociated</code> | <code>InternalError</code> | <code>InvalidSubnetID.NotFound</code>)</p>
    pub failure_code: Option<String>,
    /// <p><p>If the NAT gateway could not be created, specifies the error message for the failure, that corresponds to the error code.</p> <ul> <li> <p>For InsufficientFreeAddressesInSubnet: &quot;Subnet has insufficient free addresses to create this NAT gateway&quot;</p> </li> <li> <p>For Gateway.NotAttached: &quot;Network vpc-xxxxxxxx has no Internet gateway attached&quot;</p> </li> <li> <p>For InvalidAllocationID.NotFound: &quot;Elastic IP address eipalloc-xxxxxxxx could not be associated with this NAT gateway&quot;</p> </li> <li> <p>For Resource.AlreadyAssociated: &quot;Elastic IP address eipalloc-xxxxxxxx is already associated&quot;</p> </li> <li> <p>For InternalError: &quot;Network interface eni-xxxxxxxx, created and used internally by this NAT gateway is in an invalid state. Please try again.&quot;</p> </li> <li> <p>For InvalidSubnetID.NotFound: &quot;The specified subnet subnet-xxxxxxxx does not exist or could not be found.&quot;</p> </li> </ul></p>
    pub failure_message: Option<String>,
    /// <p>Information about the IP addresses and network interface associated with the NAT gateway.</p>
    pub nat_gateway_addresses: Option<Vec<NatGatewayAddress>>,
    /// <p>The ID of the NAT gateway.</p>
    pub nat_gateway_id: Option<String>,
    /// <p>Reserved. If you need to sustain traffic greater than the <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.</p>
    pub provisioned_bandwidth: Option<ProvisionedBandwidth>,
    /// <p><p>The state of the NAT gateway.</p> <ul> <li> <p> <code>pending</code>: The NAT gateway is being created and is not ready to process traffic.</p> </li> <li> <p> <code>failed</code>: The NAT gateway could not be created. Check the <code>failureCode</code> and <code>failureMessage</code> fields for the reason.</p> </li> <li> <p> <code>available</code>: The NAT gateway is able to process traffic. This status remains until you delete the NAT gateway, and does not indicate the health of the NAT gateway.</p> </li> <li> <p> <code>deleting</code>: The NAT gateway is in the process of being terminated and may still be processing traffic.</p> </li> <li> <p> <code>deleted</code>: The NAT gateway has been terminated and is no longer processing traffic.</p> </li> </ul></p>
    pub state: Option<String>,
    /// <p>The ID of the subnet in which the NAT gateway is located.</p>
    pub subnet_id: Option<String>,
    /// <p>The tags for the NAT gateway.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The ID of the VPC in which the NAT gateway is located.</p>
    pub vpc_id: Option<String>,
}

struct NatGatewayDeserializer;
impl NatGatewayDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<NatGateway, XmlParseError> {
        deserialize_elements::<_, NatGateway, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "createTime" => {
                    obj.create_time = Some(DateTimeDeserializer::deserialize("createTime", stack)?);
                }
                "deleteTime" => {
                    obj.delete_time = Some(DateTimeDeserializer::deserialize("deleteTime", stack)?);
                }
                "failureCode" => {
                    obj.failure_code = Some(StringDeserializer::deserialize("failureCode", stack)?);
                }
                "failureMessage" => {
                    obj.failure_message =
                        Some(StringDeserializer::deserialize("failureMessage", stack)?);
                }
                "natGatewayAddressSet" => {
                    obj.nat_gateway_addresses.get_or_insert(vec![]).extend(
                        NatGatewayAddressListDeserializer::deserialize(
                            "natGatewayAddressSet",
                            stack,
                        )?,
                    );
                }
                "natGatewayId" => {
                    obj.nat_gateway_id =
                        Some(StringDeserializer::deserialize("natGatewayId", stack)?);
                }
                "provisionedBandwidth" => {
                    obj.provisioned_bandwidth =
                        Some(ProvisionedBandwidthDeserializer::deserialize(
                            "provisionedBandwidth",
                            stack,
                        )?);
                }
                "state" => {
                    obj.state = Some(NatGatewayStateDeserializer::deserialize("state", stack)?);
                }
                "subnetId" => {
                    obj.subnet_id = Some(StringDeserializer::deserialize("subnetId", stack)?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "vpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes the IP addresses and network interface associated with a NAT gateway.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct NatGatewayAddress {
    /// <p>The allocation ID of the Elastic IP address that's associated with the NAT gateway.</p>
    pub allocation_id: Option<String>,
    /// <p>The ID of the network interface associated with the NAT gateway.</p>
    pub network_interface_id: Option<String>,
    /// <p>The private IP address associated with the Elastic IP address.</p>
    pub private_ip: Option<String>,
    /// <p>The Elastic IP address associated with the NAT gateway.</p>
    pub public_ip: Option<String>,
}

struct NatGatewayAddressDeserializer;
impl NatGatewayAddressDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<NatGatewayAddress, XmlParseError> {
        deserialize_elements::<_, NatGatewayAddress, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "allocationId" => {
                    obj.allocation_id =
                        Some(StringDeserializer::deserialize("allocationId", stack)?);
                }
                "networkInterfaceId" => {
                    obj.network_interface_id = Some(StringDeserializer::deserialize(
                        "networkInterfaceId",
                        stack,
                    )?);
                }
                "privateIp" => {
                    obj.private_ip = Some(StringDeserializer::deserialize("privateIp", stack)?);
                }
                "publicIp" => {
                    obj.public_ip = Some(StringDeserializer::deserialize("publicIp", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct NatGatewayAddressListDeserializer;
impl NatGatewayAddressListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<NatGatewayAddress>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(NatGatewayAddressDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct NatGatewayListDeserializer;
impl NatGatewayListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<NatGateway>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(NatGatewayDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct NatGatewayStateDeserializer;
impl NatGatewayStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a network ACL.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct NetworkAcl {
    /// <p>Any associations between the network ACL and one or more subnets</p>
    pub associations: Option<Vec<NetworkAclAssociation>>,
    /// <p>One or more entries (rules) in the network ACL.</p>
    pub entries: Option<Vec<NetworkAclEntry>>,
    /// <p>Indicates whether this is the default network ACL for the VPC.</p>
    pub is_default: Option<bool>,
    /// <p>The ID of the network ACL.</p>
    pub network_acl_id: Option<String>,
    /// <p>The ID of the AWS account that owns the network ACL.</p>
    pub owner_id: Option<String>,
    /// <p>Any tags assigned to the network ACL.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The ID of the VPC for the network ACL.</p>
    pub vpc_id: Option<String>,
}

struct NetworkAclDeserializer;
impl NetworkAclDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<NetworkAcl, XmlParseError> {
        deserialize_elements::<_, NetworkAcl, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "associationSet" => {
                    obj.associations.get_or_insert(vec![]).extend(
                        NetworkAclAssociationListDeserializer::deserialize(
                            "associationSet",
                            stack,
                        )?,
                    );
                }
                "entrySet" => {
                    obj.entries.get_or_insert(vec![]).extend(
                        NetworkAclEntryListDeserializer::deserialize("entrySet", stack)?,
                    );
                }
                "default" => {
                    obj.is_default = Some(BooleanDeserializer::deserialize("default", stack)?);
                }
                "networkAclId" => {
                    obj.network_acl_id =
                        Some(StringDeserializer::deserialize("networkAclId", stack)?);
                }
                "ownerId" => {
                    obj.owner_id = Some(StringDeserializer::deserialize("ownerId", stack)?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "vpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes an association between a network ACL and a subnet.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct NetworkAclAssociation {
    /// <p>The ID of the association between a network ACL and a subnet.</p>
    pub network_acl_association_id: Option<String>,
    /// <p>The ID of the network ACL.</p>
    pub network_acl_id: Option<String>,
    /// <p>The ID of the subnet.</p>
    pub subnet_id: Option<String>,
}

struct NetworkAclAssociationDeserializer;
impl NetworkAclAssociationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<NetworkAclAssociation, XmlParseError> {
        deserialize_elements::<_, NetworkAclAssociation, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "networkAclAssociationId" => {
                    obj.network_acl_association_id = Some(StringDeserializer::deserialize(
                        "networkAclAssociationId",
                        stack,
                    )?);
                }
                "networkAclId" => {
                    obj.network_acl_id =
                        Some(StringDeserializer::deserialize("networkAclId", stack)?);
                }
                "subnetId" => {
                    obj.subnet_id = Some(StringDeserializer::deserialize("subnetId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct NetworkAclAssociationListDeserializer;
impl NetworkAclAssociationListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<NetworkAclAssociation>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(NetworkAclAssociationDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes an entry in a network ACL.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct NetworkAclEntry {
    /// <p>The IPv4 network range to allow or deny, in CIDR notation.</p>
    pub cidr_block: Option<String>,
    /// <p>Indicates whether the rule is an egress rule (applied to traffic leaving the subnet).</p>
    pub egress: Option<bool>,
    /// <p>ICMP protocol: The ICMP type and code.</p>
    pub icmp_type_code: Option<IcmpTypeCode>,
    /// <p>The IPv6 network range to allow or deny, in CIDR notation.</p>
    pub ipv_6_cidr_block: Option<String>,
    /// <p>TCP or UDP protocols: The range of ports the rule applies to.</p>
    pub port_range: Option<PortRange>,
    /// <p>The protocol number. A value of "-1" means all protocols.</p>
    pub protocol: Option<String>,
    /// <p>Indicates whether to allow or deny the traffic that matches the rule.</p>
    pub rule_action: Option<String>,
    /// <p>The rule number for the entry. ACL entries are processed in ascending order by rule number.</p>
    pub rule_number: Option<i64>,
}

struct NetworkAclEntryDeserializer;
impl NetworkAclEntryDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<NetworkAclEntry, XmlParseError> {
        deserialize_elements::<_, NetworkAclEntry, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "cidrBlock" => {
                    obj.cidr_block = Some(StringDeserializer::deserialize("cidrBlock", stack)?);
                }
                "egress" => {
                    obj.egress = Some(BooleanDeserializer::deserialize("egress", stack)?);
                }
                "icmpTypeCode" => {
                    obj.icmp_type_code = Some(IcmpTypeCodeDeserializer::deserialize(
                        "icmpTypeCode",
                        stack,
                    )?);
                }
                "ipv6CidrBlock" => {
                    obj.ipv_6_cidr_block =
                        Some(StringDeserializer::deserialize("ipv6CidrBlock", stack)?);
                }
                "portRange" => {
                    obj.port_range = Some(PortRangeDeserializer::deserialize("portRange", stack)?);
                }
                "protocol" => {
                    obj.protocol = Some(StringDeserializer::deserialize("protocol", stack)?);
                }
                "ruleAction" => {
                    obj.rule_action =
                        Some(RuleActionDeserializer::deserialize("ruleAction", stack)?);
                }
                "ruleNumber" => {
                    obj.rule_number = Some(IntegerDeserializer::deserialize("ruleNumber", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct NetworkAclEntryListDeserializer;
impl NetworkAclEntryListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<NetworkAclEntry>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(NetworkAclEntryDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct NetworkAclListDeserializer;
impl NetworkAclListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<NetworkAcl>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(NetworkAclDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a network interface.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct NetworkInterface {
    /// <p>The association information for an Elastic IP address (IPv4) associated with the network interface.</p>
    pub association: Option<NetworkInterfaceAssociation>,
    /// <p>The network interface attachment.</p>
    pub attachment: Option<NetworkInterfaceAttachment>,
    /// <p>The Availability Zone.</p>
    pub availability_zone: Option<String>,
    /// <p>A description.</p>
    pub description: Option<String>,
    /// <p>Any security groups for the network interface.</p>
    pub groups: Option<Vec<GroupIdentifier>>,
    /// <p>The type of network interface.</p>
    pub interface_type: Option<String>,
    /// <p>The IPv6 addresses associated with the network interface.</p>
    pub ipv_6_addresses: Option<Vec<NetworkInterfaceIpv6Address>>,
    /// <p>The MAC address.</p>
    pub mac_address: Option<String>,
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: Option<String>,
    /// <p>The AWS account ID of the owner of the network interface.</p>
    pub owner_id: Option<String>,
    /// <p>The private DNS name.</p>
    pub private_dns_name: Option<String>,
    /// <p>The IPv4 address of the network interface within the subnet.</p>
    pub private_ip_address: Option<String>,
    /// <p>The private IPv4 addresses associated with the network interface.</p>
    pub private_ip_addresses: Option<Vec<NetworkInterfacePrivateIpAddress>>,
    /// <p>The ID of the entity that launched the instance on your behalf (for example, AWS Management Console or Auto Scaling).</p>
    pub requester_id: Option<String>,
    /// <p>Indicates whether the network interface is being managed by AWS.</p>
    pub requester_managed: Option<bool>,
    /// <p>Indicates whether traffic to or from the instance is validated.</p>
    pub source_dest_check: Option<bool>,
    /// <p>The status of the network interface.</p>
    pub status: Option<String>,
    /// <p>The ID of the subnet.</p>
    pub subnet_id: Option<String>,
    /// <p>Any tags assigned to the network interface.</p>
    pub tag_set: Option<Vec<Tag>>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: Option<String>,
}

struct NetworkInterfaceDeserializer;
impl NetworkInterfaceDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<NetworkInterface, XmlParseError> {
        deserialize_elements::<_, NetworkInterface, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "association" => {
                    obj.association = Some(NetworkInterfaceAssociationDeserializer::deserialize(
                        "association",
                        stack,
                    )?);
                }
                "attachment" => {
                    obj.attachment = Some(NetworkInterfaceAttachmentDeserializer::deserialize(
                        "attachment",
                        stack,
                    )?);
                }
                "availabilityZone" => {
                    obj.availability_zone =
                        Some(StringDeserializer::deserialize("availabilityZone", stack)?);
                }
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "groupSet" => {
                    obj.groups.get_or_insert(vec![]).extend(
                        GroupIdentifierListDeserializer::deserialize("groupSet", stack)?,
                    );
                }
                "interfaceType" => {
                    obj.interface_type = Some(NetworkInterfaceTypeDeserializer::deserialize(
                        "interfaceType",
                        stack,
                    )?);
                }
                "ipv6AddressesSet" => {
                    obj.ipv_6_addresses.get_or_insert(vec![]).extend(
                        NetworkInterfaceIpv6AddressesListDeserializer::deserialize(
                            "ipv6AddressesSet",
                            stack,
                        )?,
                    );
                }
                "macAddress" => {
                    obj.mac_address = Some(StringDeserializer::deserialize("macAddress", stack)?);
                }
                "networkInterfaceId" => {
                    obj.network_interface_id = Some(StringDeserializer::deserialize(
                        "networkInterfaceId",
                        stack,
                    )?);
                }
                "ownerId" => {
                    obj.owner_id = Some(StringDeserializer::deserialize("ownerId", stack)?);
                }
                "privateDnsName" => {
                    obj.private_dns_name =
                        Some(StringDeserializer::deserialize("privateDnsName", stack)?);
                }
                "privateIpAddress" => {
                    obj.private_ip_address =
                        Some(StringDeserializer::deserialize("privateIpAddress", stack)?);
                }
                "privateIpAddressesSet" => {
                    obj.private_ip_addresses.get_or_insert(vec![]).extend(
                        NetworkInterfacePrivateIpAddressListDeserializer::deserialize(
                            "privateIpAddressesSet",
                            stack,
                        )?,
                    );
                }
                "requesterId" => {
                    obj.requester_id = Some(StringDeserializer::deserialize("requesterId", stack)?);
                }
                "requesterManaged" => {
                    obj.requester_managed =
                        Some(BooleanDeserializer::deserialize("requesterManaged", stack)?);
                }
                "sourceDestCheck" => {
                    obj.source_dest_check =
                        Some(BooleanDeserializer::deserialize("sourceDestCheck", stack)?);
                }
                "status" => {
                    obj.status = Some(NetworkInterfaceStatusDeserializer::deserialize(
                        "status", stack,
                    )?);
                }
                "subnetId" => {
                    obj.subnet_id = Some(StringDeserializer::deserialize("subnetId", stack)?);
                }
                "tagSet" => {
                    obj.tag_set
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "vpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes association information for an Elastic IP address (IPv4 only).</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct NetworkInterfaceAssociation {
    /// <p>The allocation ID.</p>
    pub allocation_id: Option<String>,
    /// <p>The association ID.</p>
    pub association_id: Option<String>,
    /// <p>The ID of the Elastic IP address owner.</p>
    pub ip_owner_id: Option<String>,
    /// <p>The public DNS name.</p>
    pub public_dns_name: Option<String>,
    /// <p>The address of the Elastic IP address bound to the network interface.</p>
    pub public_ip: Option<String>,
}

struct NetworkInterfaceAssociationDeserializer;
impl NetworkInterfaceAssociationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<NetworkInterfaceAssociation, XmlParseError> {
        deserialize_elements::<_, NetworkInterfaceAssociation, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "allocationId" => {
                        obj.allocation_id =
                            Some(StringDeserializer::deserialize("allocationId", stack)?);
                    }
                    "associationId" => {
                        obj.association_id =
                            Some(StringDeserializer::deserialize("associationId", stack)?);
                    }
                    "ipOwnerId" => {
                        obj.ip_owner_id =
                            Some(StringDeserializer::deserialize("ipOwnerId", stack)?);
                    }
                    "publicDnsName" => {
                        obj.public_dns_name =
                            Some(StringDeserializer::deserialize("publicDnsName", stack)?);
                    }
                    "publicIp" => {
                        obj.public_ip = Some(StringDeserializer::deserialize("publicIp", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes a network interface attachment.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct NetworkInterfaceAttachment {
    /// <p>The timestamp indicating when the attachment initiated.</p>
    pub attach_time: Option<String>,
    /// <p>The ID of the network interface attachment.</p>
    pub attachment_id: Option<String>,
    /// <p>Indicates whether the network interface is deleted when the instance is terminated.</p>
    pub delete_on_termination: Option<bool>,
    /// <p>The device index of the network interface attachment on the instance.</p>
    pub device_index: Option<i64>,
    /// <p>The ID of the instance.</p>
    pub instance_id: Option<String>,
    /// <p>The AWS account ID of the owner of the instance.</p>
    pub instance_owner_id: Option<String>,
    /// <p>The attachment state.</p>
    pub status: Option<String>,
}

struct NetworkInterfaceAttachmentDeserializer;
impl NetworkInterfaceAttachmentDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<NetworkInterfaceAttachment, XmlParseError> {
        deserialize_elements::<_, NetworkInterfaceAttachment, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "attachTime" => {
                        obj.attach_time =
                            Some(DateTimeDeserializer::deserialize("attachTime", stack)?);
                    }
                    "attachmentId" => {
                        obj.attachment_id =
                            Some(StringDeserializer::deserialize("attachmentId", stack)?);
                    }
                    "deleteOnTermination" => {
                        obj.delete_on_termination = Some(BooleanDeserializer::deserialize(
                            "deleteOnTermination",
                            stack,
                        )?);
                    }
                    "deviceIndex" => {
                        obj.device_index =
                            Some(IntegerDeserializer::deserialize("deviceIndex", stack)?);
                    }
                    "instanceId" => {
                        obj.instance_id =
                            Some(StringDeserializer::deserialize("instanceId", stack)?);
                    }
                    "instanceOwnerId" => {
                        obj.instance_owner_id =
                            Some(StringDeserializer::deserialize("instanceOwnerId", stack)?);
                    }
                    "status" => {
                        obj.status =
                            Some(AttachmentStatusDeserializer::deserialize("status", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes an attachment change.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct NetworkInterfaceAttachmentChanges {
    /// <p>The ID of the network interface attachment.</p>
    pub attachment_id: Option<String>,
    /// <p>Indicates whether the network interface is deleted when the instance is terminated.</p>
    pub delete_on_termination: Option<bool>,
}

/// Serialize `NetworkInterfaceAttachmentChanges` contents to a `SignedRequest`.
struct NetworkInterfaceAttachmentChangesSerializer;
impl NetworkInterfaceAttachmentChangesSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &NetworkInterfaceAttachmentChanges) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.attachment_id {
            params.put(&format!("{}{}", prefix, "AttachmentId"), &field_value);
        }
        if let Some(ref field_value) = obj.delete_on_termination {
            params.put(
                &format!("{}{}", prefix, "DeleteOnTermination"),
                &field_value,
            );
        }
    }
}

/// Serialize `NetworkInterfaceIdList` contents to a `SignedRequest`.
struct NetworkInterfaceIdListSerializer;
impl NetworkInterfaceIdListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Describes an IPv6 address associated with a network interface.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct NetworkInterfaceIpv6Address {
    /// <p>The IPv6 address.</p>
    pub ipv_6_address: Option<String>,
}

struct NetworkInterfaceIpv6AddressDeserializer;
impl NetworkInterfaceIpv6AddressDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<NetworkInterfaceIpv6Address, XmlParseError> {
        deserialize_elements::<_, NetworkInterfaceIpv6Address, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "ipv6Address" => {
                        obj.ipv_6_address =
                            Some(StringDeserializer::deserialize("ipv6Address", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct NetworkInterfaceIpv6AddressesListDeserializer;
impl NetworkInterfaceIpv6AddressesListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<NetworkInterfaceIpv6Address>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(NetworkInterfaceIpv6AddressDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct NetworkInterfaceListDeserializer;
impl NetworkInterfaceListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<NetworkInterface>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(NetworkInterfaceDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a permission for a network interface.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct NetworkInterfacePermission {
    /// <p>The AWS account ID.</p>
    pub aws_account_id: Option<String>,
    /// <p>The AWS service.</p>
    pub aws_service: Option<String>,
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: Option<String>,
    /// <p>The ID of the network interface permission.</p>
    pub network_interface_permission_id: Option<String>,
    /// <p>The type of permission.</p>
    pub permission: Option<String>,
    /// <p>Information about the state of the permission.</p>
    pub permission_state: Option<NetworkInterfacePermissionState>,
}

struct NetworkInterfacePermissionDeserializer;
impl NetworkInterfacePermissionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<NetworkInterfacePermission, XmlParseError> {
        deserialize_elements::<_, NetworkInterfacePermission, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "awsAccountId" => {
                        obj.aws_account_id =
                            Some(StringDeserializer::deserialize("awsAccountId", stack)?);
                    }
                    "awsService" => {
                        obj.aws_service =
                            Some(StringDeserializer::deserialize("awsService", stack)?);
                    }
                    "networkInterfaceId" => {
                        obj.network_interface_id = Some(StringDeserializer::deserialize(
                            "networkInterfaceId",
                            stack,
                        )?);
                    }
                    "networkInterfacePermissionId" => {
                        obj.network_interface_permission_id = Some(
                            StringDeserializer::deserialize("networkInterfacePermissionId", stack)?,
                        );
                    }
                    "permission" => {
                        obj.permission = Some(InterfacePermissionTypeDeserializer::deserialize(
                            "permission",
                            stack,
                        )?);
                    }
                    "permissionState" => {
                        obj.permission_state =
                            Some(NetworkInterfacePermissionStateDeserializer::deserialize(
                                "permissionState",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}

/// Serialize `NetworkInterfacePermissionIdList` contents to a `SignedRequest`.
struct NetworkInterfacePermissionIdListSerializer;
impl NetworkInterfacePermissionIdListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct NetworkInterfacePermissionListDeserializer;
impl NetworkInterfacePermissionListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<NetworkInterfacePermission>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(NetworkInterfacePermissionDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the state of a network interface permission.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct NetworkInterfacePermissionState {
    /// <p>The state of the permission.</p>
    pub state: Option<String>,
    /// <p>A status message, if applicable.</p>
    pub status_message: Option<String>,
}

struct NetworkInterfacePermissionStateDeserializer;
impl NetworkInterfacePermissionStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<NetworkInterfacePermissionState, XmlParseError> {
        deserialize_elements::<_, NetworkInterfacePermissionState, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "state" => {
                        obj.state = Some(
                            NetworkInterfacePermissionStateCodeDeserializer::deserialize(
                                "state", stack,
                            )?,
                        );
                    }
                    "statusMessage" => {
                        obj.status_message =
                            Some(StringDeserializer::deserialize("statusMessage", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct NetworkInterfacePermissionStateCodeDeserializer;
impl NetworkInterfacePermissionStateCodeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes the private IPv4 address of a network interface.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct NetworkInterfacePrivateIpAddress {
    /// <p>The association information for an Elastic IP address (IPv4) associated with the network interface.</p>
    pub association: Option<NetworkInterfaceAssociation>,
    /// <p>Indicates whether this IPv4 address is the primary private IPv4 address of the network interface.</p>
    pub primary: Option<bool>,
    /// <p>The private DNS name.</p>
    pub private_dns_name: Option<String>,
    /// <p>The private IPv4 address.</p>
    pub private_ip_address: Option<String>,
}

struct NetworkInterfacePrivateIpAddressDeserializer;
impl NetworkInterfacePrivateIpAddressDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<NetworkInterfacePrivateIpAddress, XmlParseError> {
        deserialize_elements::<_, NetworkInterfacePrivateIpAddress, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "association" => {
                        obj.association =
                            Some(NetworkInterfaceAssociationDeserializer::deserialize(
                                "association",
                                stack,
                            )?);
                    }
                    "primary" => {
                        obj.primary = Some(BooleanDeserializer::deserialize("primary", stack)?);
                    }
                    "privateDnsName" => {
                        obj.private_dns_name =
                            Some(StringDeserializer::deserialize("privateDnsName", stack)?);
                    }
                    "privateIpAddress" => {
                        obj.private_ip_address =
                            Some(StringDeserializer::deserialize("privateIpAddress", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct NetworkInterfacePrivateIpAddressListDeserializer;
impl NetworkInterfacePrivateIpAddressListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<NetworkInterfacePrivateIpAddress>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(NetworkInterfacePrivateIpAddressDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct NetworkInterfaceStatusDeserializer;
impl NetworkInterfaceStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct NetworkInterfaceTypeDeserializer;
impl NetworkInterfaceTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct NewDhcpConfiguration {
    pub key: Option<String>,
    pub values: Option<Vec<String>>,
}

/// Serialize `NewDhcpConfiguration` contents to a `SignedRequest`.
struct NewDhcpConfigurationSerializer;
impl NewDhcpConfigurationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &NewDhcpConfiguration) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.key {
            params.put(&format!("{}{}", prefix, "Key"), &field_value);
        }
        if let Some(ref field_value) = obj.values {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Value"),
                field_value,
            );
        }
    }
}

/// Serialize `NewDhcpConfigurationList` contents to a `SignedRequest`.
struct NewDhcpConfigurationListSerializer;
impl NewDhcpConfigurationListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<NewDhcpConfiguration>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            NewDhcpConfigurationSerializer::serialize(params, &key, obj);
        }
    }
}

struct NextTokenDeserializer;
impl NextTokenDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}

/// Serialize `OccurrenceDayRequestSet` contents to a `SignedRequest`.
struct OccurrenceDayRequestSetSerializer;
impl OccurrenceDayRequestSetSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<i64>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct OccurrenceDaySetDeserializer;
impl OccurrenceDaySetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<i64>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(IntegerDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct OfferingClassTypeDeserializer;
impl OfferingClassTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct OfferingTypeValuesDeserializer;
impl OfferingTypeValuesDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct OnDemandAllocationStrategyDeserializer;
impl OnDemandAllocationStrategyDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>The allocation strategy of On-Demand Instances in an EC2 Fleet.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct OnDemandOptions {
    /// <p>The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify <code>lowest-price</code>, EC2 Fleet uses price to determine the order, launching the lowest price first. If you specify <code>prioritized</code>, EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first. If you do not specify a value, EC2 Fleet defaults to <code>lowest-price</code>.</p>
    pub allocation_strategy: Option<String>,
    /// <p>The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.</p>
    pub min_target_capacity: Option<i64>,
    /// <p>Indicates that the fleet launches all On-Demand Instances into a single Availability Zone.</p>
    pub single_availability_zone: Option<bool>,
    /// <p>Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet.</p>
    pub single_instance_type: Option<bool>,
}

struct OnDemandOptionsDeserializer;
impl OnDemandOptionsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<OnDemandOptions, XmlParseError> {
        deserialize_elements::<_, OnDemandOptions, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "allocationStrategy" => {
                    obj.allocation_strategy =
                        Some(FleetOnDemandAllocationStrategyDeserializer::deserialize(
                            "allocationStrategy",
                            stack,
                        )?);
                }
                "minTargetCapacity" => {
                    obj.min_target_capacity = Some(IntegerDeserializer::deserialize(
                        "minTargetCapacity",
                        stack,
                    )?);
                }
                "singleAvailabilityZone" => {
                    obj.single_availability_zone = Some(BooleanDeserializer::deserialize(
                        "singleAvailabilityZone",
                        stack,
                    )?);
                }
                "singleInstanceType" => {
                    obj.single_instance_type = Some(BooleanDeserializer::deserialize(
                        "singleInstanceType",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>The allocation strategy of On-Demand Instances in an EC2 Fleet.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct OnDemandOptionsRequest {
    /// <p>The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify <code>lowest-price</code>, EC2 Fleet uses price to determine the order, launching the lowest price first. If you specify <code>prioritized</code>, EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first. If you do not specify a value, EC2 Fleet defaults to <code>lowest-price</code>.</p>
    pub allocation_strategy: Option<String>,
    /// <p>The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.</p>
    pub min_target_capacity: Option<i64>,
    /// <p>Indicates that the fleet launches all On-Demand Instances into a single Availability Zone.</p>
    pub single_availability_zone: Option<bool>,
    /// <p>Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet.</p>
    pub single_instance_type: Option<bool>,
}

/// Serialize `OnDemandOptionsRequest` contents to a `SignedRequest`.
struct OnDemandOptionsRequestSerializer;
impl OnDemandOptionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &OnDemandOptionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.allocation_strategy {
            params.put(&format!("{}{}", prefix, "AllocationStrategy"), &field_value);
        }
        if let Some(ref field_value) = obj.min_target_capacity {
            params.put(&format!("{}{}", prefix, "MinTargetCapacity"), &field_value);
        }
        if let Some(ref field_value) = obj.single_availability_zone {
            params.put(
                &format!("{}{}", prefix, "SingleAvailabilityZone"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.single_instance_type {
            params.put(&format!("{}{}", prefix, "SingleInstanceType"), &field_value);
        }
    }
}

/// Serialize `OwnerStringList` contents to a `SignedRequest`.
struct OwnerStringListSerializer;
impl OwnerStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct PaymentOptionDeserializer;
impl PaymentOptionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes the data that identifies an Amazon FPGA image (AFI) on the PCI bus.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct PciId {
    /// <p>The ID of the device.</p>
    pub device_id: Option<String>,
    /// <p>The ID of the subsystem.</p>
    pub subsystem_id: Option<String>,
    /// <p>The ID of the vendor for the subsystem.</p>
    pub subsystem_vendor_id: Option<String>,
    /// <p>The ID of the vendor.</p>
    pub vendor_id: Option<String>,
}

struct PciIdDeserializer;
impl PciIdDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<PciId, XmlParseError> {
        deserialize_elements::<_, PciId, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "DeviceId" => {
                    obj.device_id = Some(StringDeserializer::deserialize("DeviceId", stack)?);
                }
                "SubsystemId" => {
                    obj.subsystem_id = Some(StringDeserializer::deserialize("SubsystemId", stack)?);
                }
                "SubsystemVendorId" => {
                    obj.subsystem_vendor_id =
                        Some(StringDeserializer::deserialize("SubsystemVendorId", stack)?);
                }
                "VendorId" => {
                    obj.vendor_id = Some(StringDeserializer::deserialize("VendorId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes the VPC peering connection options.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct PeeringConnectionOptions {
    /// <p>If true, the public DNS hostnames of instances in the specified VPC resolve to private IP addresses when queried from instances in the peer VPC.</p>
    pub allow_dns_resolution_from_remote_vpc: Option<bool>,
    /// <p>If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC using ClassicLink to instances in a peer VPC.</p>
    pub allow_egress_from_local_classic_link_to_remote_vpc: Option<bool>,
    /// <p>If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC using ClassicLink.</p>
    pub allow_egress_from_local_vpc_to_remote_classic_link: Option<bool>,
}

struct PeeringConnectionOptionsDeserializer;
impl PeeringConnectionOptionsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PeeringConnectionOptions, XmlParseError> {
        deserialize_elements::<_, PeeringConnectionOptions, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "allowDnsResolutionFromRemoteVpc" => {
                        obj.allow_dns_resolution_from_remote_vpc =
                            Some(BooleanDeserializer::deserialize(
                                "allowDnsResolutionFromRemoteVpc",
                                stack,
                            )?);
                    }
                    "allowEgressFromLocalClassicLinkToRemoteVpc" => {
                        obj.allow_egress_from_local_classic_link_to_remote_vpc =
                            Some(BooleanDeserializer::deserialize(
                                "allowEgressFromLocalClassicLinkToRemoteVpc",
                                stack,
                            )?);
                    }
                    "allowEgressFromLocalVpcToRemoteClassicLink" => {
                        obj.allow_egress_from_local_vpc_to_remote_classic_link =
                            Some(BooleanDeserializer::deserialize(
                                "allowEgressFromLocalVpcToRemoteClassicLink",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>The VPC peering connection options.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct PeeringConnectionOptionsRequest {
    /// <p>If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.</p>
    pub allow_dns_resolution_from_remote_vpc: Option<bool>,
    /// <p>If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC using ClassicLink to instances in a peer VPC.</p>
    pub allow_egress_from_local_classic_link_to_remote_vpc: Option<bool>,
    /// <p>If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC using ClassicLink.</p>
    pub allow_egress_from_local_vpc_to_remote_classic_link: Option<bool>,
}

/// Serialize `PeeringConnectionOptionsRequest` contents to a `SignedRequest`.
struct PeeringConnectionOptionsRequestSerializer;
impl PeeringConnectionOptionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &PeeringConnectionOptionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.allow_dns_resolution_from_remote_vpc {
            params.put(
                &format!("{}{}", prefix, "AllowDnsResolutionFromRemoteVpc"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.allow_egress_from_local_classic_link_to_remote_vpc {
            params.put(
                &format!("{}{}", prefix, "AllowEgressFromLocalClassicLinkToRemoteVpc"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.allow_egress_from_local_vpc_to_remote_classic_link {
            params.put(
                &format!("{}{}", prefix, "AllowEgressFromLocalVpcToRemoteClassicLink"),
                &field_value,
            );
        }
    }
}

struct PermissionGroupDeserializer;
impl PermissionGroupDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes the placement of an instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct Placement {
    /// <p>The affinity setting for the instance on the Dedicated Host. This parameter is not supported for the <a>ImportInstance</a> command.</p>
    pub affinity: Option<String>,
    /// <p>The Availability Zone of the instance.</p> <p>If not specified, an Availability Zone will be automatically chosen for you based on the load balancing criteria for the Region.</p>
    pub availability_zone: Option<String>,
    /// <p>The name of the placement group the instance is in.</p>
    pub group_name: Option<String>,
    /// <p>The ID of the Dedicated Host on which the instance resides. This parameter is not supported for the <a>ImportInstance</a> command.</p>
    pub host_id: Option<String>,
    /// <p>The number of the partition the instance is in. Valid only if the placement group strategy is set to <code>partition</code>.</p>
    pub partition_number: Option<i64>,
    /// <p>Reserved for future use.</p>
    pub spread_domain: Option<String>,
    /// <p>The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of <code>dedicated</code> runs on single-tenant hardware. The <code>host</code> tenancy is not supported for the <a>ImportInstance</a> command.</p>
    pub tenancy: Option<String>,
}

struct PlacementDeserializer;
impl PlacementDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Placement, XmlParseError> {
        deserialize_elements::<_, Placement, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "affinity" => {
                    obj.affinity = Some(StringDeserializer::deserialize("affinity", stack)?);
                }
                "availabilityZone" => {
                    obj.availability_zone =
                        Some(StringDeserializer::deserialize("availabilityZone", stack)?);
                }
                "groupName" => {
                    obj.group_name = Some(StringDeserializer::deserialize("groupName", stack)?);
                }
                "hostId" => {
                    obj.host_id = Some(StringDeserializer::deserialize("hostId", stack)?);
                }
                "partitionNumber" => {
                    obj.partition_number =
                        Some(IntegerDeserializer::deserialize("partitionNumber", stack)?);
                }
                "spreadDomain" => {
                    obj.spread_domain =
                        Some(StringDeserializer::deserialize("spreadDomain", stack)?);
                }
                "tenancy" => {
                    obj.tenancy = Some(TenancyDeserializer::deserialize("tenancy", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `Placement` contents to a `SignedRequest`.
struct PlacementSerializer;
impl PlacementSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Placement) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.affinity {
            params.put(&format!("{}{}", prefix, "Affinity"), &field_value);
        }
        if let Some(ref field_value) = obj.availability_zone {
            params.put(&format!("{}{}", prefix, "AvailabilityZone"), &field_value);
        }
        if let Some(ref field_value) = obj.group_name {
            params.put(&format!("{}{}", prefix, "GroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.host_id {
            params.put(&format!("{}{}", prefix, "HostId"), &field_value);
        }
        if let Some(ref field_value) = obj.partition_number {
            params.put(&format!("{}{}", prefix, "PartitionNumber"), &field_value);
        }
        if let Some(ref field_value) = obj.spread_domain {
            params.put(&format!("{}{}", prefix, "SpreadDomain"), &field_value);
        }
        if let Some(ref field_value) = obj.tenancy {
            params.put(&format!("{}{}", prefix, "Tenancy"), &field_value);
        }
    }
}

/// <p>Describes a placement group.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct PlacementGroup {
    /// <p>The name of the placement group.</p>
    pub group_name: Option<String>,
    /// <p>The number of partitions. Valid only if <b>strategy</b> is set to <code>partition</code>.</p>
    pub partition_count: Option<i64>,
    /// <p>The state of the placement group.</p>
    pub state: Option<String>,
    /// <p>The placement strategy.</p>
    pub strategy: Option<String>,
}

struct PlacementGroupDeserializer;
impl PlacementGroupDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PlacementGroup, XmlParseError> {
        deserialize_elements::<_, PlacementGroup, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "groupName" => {
                    obj.group_name = Some(StringDeserializer::deserialize("groupName", stack)?);
                }
                "partitionCount" => {
                    obj.partition_count =
                        Some(IntegerDeserializer::deserialize("partitionCount", stack)?);
                }
                "state" => {
                    obj.state = Some(PlacementGroupStateDeserializer::deserialize(
                        "state", stack,
                    )?);
                }
                "strategy" => {
                    obj.strategy = Some(PlacementStrategyDeserializer::deserialize(
                        "strategy", stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct PlacementGroupListDeserializer;
impl PlacementGroupListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<PlacementGroup>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(PlacementGroupDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct PlacementGroupStateDeserializer;
impl PlacementGroupStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}

/// Serialize `PlacementGroupStringList` contents to a `SignedRequest`.
struct PlacementGroupStringListSerializer;
impl PlacementGroupStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Describes the placement of an instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct PlacementResponse {
    /// <p>The name of the placement group the instance is in.</p>
    pub group_name: Option<String>,
}

struct PlacementResponseDeserializer;
impl PlacementResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PlacementResponse, XmlParseError> {
        deserialize_elements::<_, PlacementResponse, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "groupName" => {
                    obj.group_name = Some(StringDeserializer::deserialize("groupName", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct PlacementStrategyDeserializer;
impl PlacementStrategyDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct PlatformValuesDeserializer;
impl PlatformValuesDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a range of ports.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct PortRange {
    /// <p>The first port in the range.</p>
    pub from: Option<i64>,
    /// <p>The last port in the range.</p>
    pub to: Option<i64>,
}

struct PortRangeDeserializer;
impl PortRangeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PortRange, XmlParseError> {
        deserialize_elements::<_, PortRange, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "from" => {
                    obj.from = Some(IntegerDeserializer::deserialize("from", stack)?);
                }
                "to" => {
                    obj.to = Some(IntegerDeserializer::deserialize("to", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `PortRange` contents to a `SignedRequest`.
struct PortRangeSerializer;
impl PortRangeSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &PortRange) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.from {
            params.put(&format!("{}{}", prefix, "From"), &field_value);
        }
        if let Some(ref field_value) = obj.to {
            params.put(&format!("{}{}", prefix, "To"), &field_value);
        }
    }
}

/// <p>Describes prefixes for AWS services.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct PrefixList {
    /// <p>The IP address range of the AWS service.</p>
    pub cidrs: Option<Vec<String>>,
    /// <p>The ID of the prefix.</p>
    pub prefix_list_id: Option<String>,
    /// <p>The name of the prefix.</p>
    pub prefix_list_name: Option<String>,
}

struct PrefixListDeserializer;
impl PrefixListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PrefixList, XmlParseError> {
        deserialize_elements::<_, PrefixList, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "cidrSet" => {
                    obj.cidrs
                        .get_or_insert(vec![])
                        .extend(ValueStringListDeserializer::deserialize("cidrSet", stack)?);
                }
                "prefixListId" => {
                    obj.prefix_list_id =
                        Some(StringDeserializer::deserialize("prefixListId", stack)?);
                }
                "prefixListName" => {
                    obj.prefix_list_name =
                        Some(StringDeserializer::deserialize("prefixListName", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes a prefix list ID.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct PrefixListId {
    /// <p>A description for the security group rule that references this prefix list ID.</p> <p>Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*</p>
    pub description: Option<String>,
    /// <p>The ID of the prefix.</p>
    pub prefix_list_id: Option<String>,
}

struct PrefixListIdDeserializer;
impl PrefixListIdDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PrefixListId, XmlParseError> {
        deserialize_elements::<_, PrefixListId, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "prefixListId" => {
                    obj.prefix_list_id =
                        Some(StringDeserializer::deserialize("prefixListId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `PrefixListId` contents to a `SignedRequest`.
struct PrefixListIdSerializer;
impl PrefixListIdSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &PrefixListId) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.prefix_list_id {
            params.put(&format!("{}{}", prefix, "PrefixListId"), &field_value);
        }
    }
}

struct PrefixListIdListDeserializer;
impl PrefixListIdListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<PrefixListId>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(PrefixListIdDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `PrefixListIdList` contents to a `SignedRequest`.
struct PrefixListIdListSerializer;
impl PrefixListIdListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<PrefixListId>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            PrefixListIdSerializer::serialize(params, &key, obj);
        }
    }
}

struct PrefixListIdSetDeserializer;
impl PrefixListIdSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(StringDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct PrefixListSetDeserializer;
impl PrefixListSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<PrefixList>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(PrefixListDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the price for a Reserved Instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct PriceSchedule {
    /// <p>The current price schedule, as determined by the term remaining for the Reserved Instance in the listing.</p> <p>A specific price schedule is always in effect, but only one price schedule can be active at any time. Take, for example, a Reserved Instance listing that has five months remaining in its term. When you specify price schedules for five months and two months, this means that schedule 1, covering the first three months of the remaining term, will be active during months 5, 4, and 3. Then schedule 2, covering the last two months of the term, will be active for months 2 and 1.</p>
    pub active: Option<bool>,
    /// <p>The currency for transacting the Reserved Instance resale. At this time, the only supported currency is <code>USD</code>.</p>
    pub currency_code: Option<String>,
    /// <p>The fixed price for the term.</p>
    pub price: Option<f64>,
    /// <p>The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.</p>
    pub term: Option<i64>,
}

struct PriceScheduleDeserializer;
impl PriceScheduleDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PriceSchedule, XmlParseError> {
        deserialize_elements::<_, PriceSchedule, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "active" => {
                    obj.active = Some(BooleanDeserializer::deserialize("active", stack)?);
                }
                "currencyCode" => {
                    obj.currency_code = Some(CurrencyCodeValuesDeserializer::deserialize(
                        "currencyCode",
                        stack,
                    )?);
                }
                "price" => {
                    obj.price = Some(DoubleDeserializer::deserialize("price", stack)?);
                }
                "term" => {
                    obj.term = Some(LongDeserializer::deserialize("term", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct PriceScheduleListDeserializer;
impl PriceScheduleListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<PriceSchedule>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(PriceScheduleDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the price for a Reserved Instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct PriceScheduleSpecification {
    /// <p>The currency for transacting the Reserved Instance resale. At this time, the only supported currency is <code>USD</code>.</p>
    pub currency_code: Option<String>,
    /// <p>The fixed price for the term.</p>
    pub price: Option<f64>,
    /// <p>The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.</p>
    pub term: Option<i64>,
}

/// Serialize `PriceScheduleSpecification` contents to a `SignedRequest`.
struct PriceScheduleSpecificationSerializer;
impl PriceScheduleSpecificationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &PriceScheduleSpecification) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.currency_code {
            params.put(&format!("{}{}", prefix, "CurrencyCode"), &field_value);
        }
        if let Some(ref field_value) = obj.price {
            params.put(&format!("{}{}", prefix, "Price"), &field_value);
        }
        if let Some(ref field_value) = obj.term {
            params.put(&format!("{}{}", prefix, "Term"), &field_value);
        }
    }
}

/// Serialize `PriceScheduleSpecificationList` contents to a `SignedRequest`.
struct PriceScheduleSpecificationListSerializer;
impl PriceScheduleSpecificationListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<PriceScheduleSpecification>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            PriceScheduleSpecificationSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes a Reserved Instance offering.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct PricingDetail {
    /// <p>The number of reservations available for the price.</p>
    pub count: Option<i64>,
    /// <p>The price per instance.</p>
    pub price: Option<f64>,
}

struct PricingDetailDeserializer;
impl PricingDetailDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PricingDetail, XmlParseError> {
        deserialize_elements::<_, PricingDetail, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "count" => {
                    obj.count = Some(IntegerDeserializer::deserialize("count", stack)?);
                }
                "price" => {
                    obj.price = Some(DoubleDeserializer::deserialize("price", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct PricingDetailsListDeserializer;
impl PricingDetailsListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<PricingDetail>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(PricingDetailDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>PrincipalIdFormat description</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct PrincipalIdFormat {
    /// <p>PrincipalIdFormatARN description</p>
    pub arn: Option<String>,
    /// <p>PrincipalIdFormatStatuses description</p>
    pub statuses: Option<Vec<IdFormat>>,
}

struct PrincipalIdFormatDeserializer;
impl PrincipalIdFormatDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PrincipalIdFormat, XmlParseError> {
        deserialize_elements::<_, PrincipalIdFormat, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "arn" => {
                    obj.arn = Some(StringDeserializer::deserialize("arn", stack)?);
                }
                "statusSet" => {
                    obj.statuses
                        .get_or_insert(vec![])
                        .extend(IdFormatListDeserializer::deserialize("statusSet", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct PrincipalIdFormatListDeserializer;
impl PrincipalIdFormatListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<PrincipalIdFormat>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(PrincipalIdFormatDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct PrincipalTypeDeserializer;
impl PrincipalTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}

/// Serialize `PrivateIpAddressConfigSet` contents to a `SignedRequest`.
struct PrivateIpAddressConfigSetSerializer;
impl PrivateIpAddressConfigSetSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &Vec<ScheduledInstancesPrivateIpAddressConfig>,
    ) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            ScheduledInstancesPrivateIpAddressConfigSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes a secondary private IPv4 address for a network interface.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct PrivateIpAddressSpecification {
    /// <p>Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary.</p>
    pub primary: Option<bool>,
    /// <p>The private IPv4 addresses.</p>
    pub private_ip_address: Option<String>,
}

struct PrivateIpAddressSpecificationDeserializer;
impl PrivateIpAddressSpecificationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PrivateIpAddressSpecification, XmlParseError> {
        deserialize_elements::<_, PrivateIpAddressSpecification, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "primary" => {
                        obj.primary = Some(BooleanDeserializer::deserialize("primary", stack)?);
                    }
                    "privateIpAddress" => {
                        obj.private_ip_address =
                            Some(StringDeserializer::deserialize("privateIpAddress", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}

/// Serialize `PrivateIpAddressSpecification` contents to a `SignedRequest`.
struct PrivateIpAddressSpecificationSerializer;
impl PrivateIpAddressSpecificationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &PrivateIpAddressSpecification) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.primary {
            params.put(&format!("{}{}", prefix, "Primary"), &field_value);
        }
        if let Some(ref field_value) = obj.private_ip_address {
            params.put(&format!("{}{}", prefix, "PrivateIpAddress"), &field_value);
        }
    }
}

struct PrivateIpAddressSpecificationListDeserializer;
impl PrivateIpAddressSpecificationListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<PrivateIpAddressSpecification>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(PrivateIpAddressSpecificationDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `PrivateIpAddressSpecificationList` contents to a `SignedRequest`.
struct PrivateIpAddressSpecificationListSerializer;
impl PrivateIpAddressSpecificationListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<PrivateIpAddressSpecification>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            PrivateIpAddressSpecificationSerializer::serialize(params, &key, obj);
        }
    }
}

/// Serialize `PrivateIpAddressStringList` contents to a `SignedRequest`.
struct PrivateIpAddressStringListSerializer;
impl PrivateIpAddressStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Describes a product code.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ProductCode {
    /// <p>The product code.</p>
    pub product_code_id: Option<String>,
    /// <p>The type of product code.</p>
    pub product_code_type: Option<String>,
}

struct ProductCodeDeserializer;
impl ProductCodeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ProductCode, XmlParseError> {
        deserialize_elements::<_, ProductCode, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "productCode" => {
                    obj.product_code_id =
                        Some(StringDeserializer::deserialize("productCode", stack)?);
                }
                "type" => {
                    obj.product_code_type =
                        Some(ProductCodeValuesDeserializer::deserialize("type", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct ProductCodeListDeserializer;
impl ProductCodeListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ProductCode>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ProductCodeDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `ProductCodeStringList` contents to a `SignedRequest`.
struct ProductCodeStringListSerializer;
impl ProductCodeStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct ProductCodeValuesDeserializer;
impl ProductCodeValuesDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}

/// Serialize `ProductDescriptionList` contents to a `SignedRequest`.
struct ProductDescriptionListSerializer;
impl ProductDescriptionListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Describes a virtual private gateway propagating route.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct PropagatingVgw {
    /// <p>The ID of the virtual private gateway.</p>
    pub gateway_id: Option<String>,
}

struct PropagatingVgwDeserializer;
impl PropagatingVgwDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PropagatingVgw, XmlParseError> {
        deserialize_elements::<_, PropagatingVgw, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "gatewayId" => {
                    obj.gateway_id = Some(StringDeserializer::deserialize("gatewayId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct PropagatingVgwListDeserializer;
impl PropagatingVgwListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<PropagatingVgw>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(PropagatingVgwDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ProvisionByoipCidrRequest {
    /// <p>The public IPv4 address range, in CIDR notation. The most specific prefix that you can specify is /24. The address range cannot overlap with another address range that you've brought to this or another Region.</p>
    pub cidr: String,
    /// <p>A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP.</p>
    pub cidr_authorization_context: Option<CidrAuthorizationContext>,
    /// <p>A description for the address range and the address pool.</p>
    pub description: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `ProvisionByoipCidrRequest` contents to a `SignedRequest`.
struct ProvisionByoipCidrRequestSerializer;
impl ProvisionByoipCidrRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ProvisionByoipCidrRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Cidr"), &obj.cidr);
        if let Some(ref field_value) = obj.cidr_authorization_context {
            CidrAuthorizationContextSerializer::serialize(
                params,
                &format!("{}{}", prefix, "CidrAuthorizationContext"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ProvisionByoipCidrResult {
    /// <p>Information about the address pool.</p>
    pub byoip_cidr: Option<ByoipCidr>,
}

struct ProvisionByoipCidrResultDeserializer;
impl ProvisionByoipCidrResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ProvisionByoipCidrResult, XmlParseError> {
        deserialize_elements::<_, ProvisionByoipCidrResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "byoipCidr" => {
                        obj.byoip_cidr =
                            Some(ByoipCidrDeserializer::deserialize("byoipCidr", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Reserved. If you need to sustain traffic greater than the <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ProvisionedBandwidth {
    /// <p>Reserved. If you need to sustain traffic greater than the <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.</p>
    pub provision_time: Option<String>,
    /// <p>Reserved. If you need to sustain traffic greater than the <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.</p>
    pub provisioned: Option<String>,
    /// <p>Reserved. If you need to sustain traffic greater than the <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.</p>
    pub request_time: Option<String>,
    /// <p>Reserved. If you need to sustain traffic greater than the <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.</p>
    pub requested: Option<String>,
    /// <p>Reserved. If you need to sustain traffic greater than the <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">documented limits</a>, contact us through the <a href="https://console.aws.amazon.com/support/home?">Support Center</a>.</p>
    pub status: Option<String>,
}

struct ProvisionedBandwidthDeserializer;
impl ProvisionedBandwidthDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ProvisionedBandwidth, XmlParseError> {
        deserialize_elements::<_, ProvisionedBandwidth, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "provisionTime" => {
                    obj.provision_time =
                        Some(DateTimeDeserializer::deserialize("provisionTime", stack)?);
                }
                "provisioned" => {
                    obj.provisioned = Some(StringDeserializer::deserialize("provisioned", stack)?);
                }
                "requestTime" => {
                    obj.request_time =
                        Some(DateTimeDeserializer::deserialize("requestTime", stack)?);
                }
                "requested" => {
                    obj.requested = Some(StringDeserializer::deserialize("requested", stack)?);
                }
                "status" => {
                    obj.status = Some(StringDeserializer::deserialize("status", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `PublicIpStringList` contents to a `SignedRequest`.
struct PublicIpStringListSerializer;
impl PublicIpStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Describes an address pool.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct PublicIpv4Pool {
    /// <p>A description of the address pool.</p>
    pub description: Option<String>,
    /// <p>The address ranges.</p>
    pub pool_address_ranges: Option<Vec<PublicIpv4PoolRange>>,
    /// <p>The ID of the IPv4 address pool.</p>
    pub pool_id: Option<String>,
    /// <p>The total number of addresses.</p>
    pub total_address_count: Option<i64>,
    /// <p>The total number of available addresses.</p>
    pub total_available_address_count: Option<i64>,
}

struct PublicIpv4PoolDeserializer;
impl PublicIpv4PoolDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PublicIpv4Pool, XmlParseError> {
        deserialize_elements::<_, PublicIpv4Pool, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "poolAddressRangeSet" => {
                    obj.pool_address_ranges.get_or_insert(vec![]).extend(
                        PublicIpv4PoolRangeSetDeserializer::deserialize(
                            "poolAddressRangeSet",
                            stack,
                        )?,
                    );
                }
                "poolId" => {
                    obj.pool_id = Some(StringDeserializer::deserialize("poolId", stack)?);
                }
                "totalAddressCount" => {
                    obj.total_address_count = Some(IntegerDeserializer::deserialize(
                        "totalAddressCount",
                        stack,
                    )?);
                }
                "totalAvailableAddressCount" => {
                    obj.total_available_address_count = Some(IntegerDeserializer::deserialize(
                        "totalAvailableAddressCount",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes an address range of an IPv4 address pool.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct PublicIpv4PoolRange {
    /// <p>The number of addresses in the range.</p>
    pub address_count: Option<i64>,
    /// <p>The number of available addresses in the range.</p>
    pub available_address_count: Option<i64>,
    /// <p>The first IP address in the range.</p>
    pub first_address: Option<String>,
    /// <p>The last IP address in the range.</p>
    pub last_address: Option<String>,
}

struct PublicIpv4PoolRangeDeserializer;
impl PublicIpv4PoolRangeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PublicIpv4PoolRange, XmlParseError> {
        deserialize_elements::<_, PublicIpv4PoolRange, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "addressCount" => {
                    obj.address_count =
                        Some(IntegerDeserializer::deserialize("addressCount", stack)?);
                }
                "availableAddressCount" => {
                    obj.available_address_count = Some(IntegerDeserializer::deserialize(
                        "availableAddressCount",
                        stack,
                    )?);
                }
                "firstAddress" => {
                    obj.first_address =
                        Some(StringDeserializer::deserialize("firstAddress", stack)?);
                }
                "lastAddress" => {
                    obj.last_address = Some(StringDeserializer::deserialize("lastAddress", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct PublicIpv4PoolRangeSetDeserializer;
impl PublicIpv4PoolRangeSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<PublicIpv4PoolRange>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(PublicIpv4PoolRangeDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct PublicIpv4PoolSetDeserializer;
impl PublicIpv4PoolSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<PublicIpv4Pool>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(PublicIpv4PoolDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the result of the purchase.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct Purchase {
    /// <p>The currency in which the <code>UpfrontPrice</code> and <code>HourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
    pub currency_code: Option<String>,
    /// <p>The duration of the reservation's term in seconds.</p>
    pub duration: Option<i64>,
    /// <p>The IDs of the Dedicated Hosts associated with the reservation.</p>
    pub host_id_set: Option<Vec<String>>,
    /// <p>The ID of the reservation.</p>
    pub host_reservation_id: Option<String>,
    /// <p>The hourly price of the reservation per hour.</p>
    pub hourly_price: Option<String>,
    /// <p>The instance family on the Dedicated Host that the reservation can be associated with.</p>
    pub instance_family: Option<String>,
    /// <p>The payment option for the reservation.</p>
    pub payment_option: Option<String>,
    /// <p>The upfront price of the reservation.</p>
    pub upfront_price: Option<String>,
}

struct PurchaseDeserializer;
impl PurchaseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Purchase, XmlParseError> {
        deserialize_elements::<_, Purchase, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "currencyCode" => {
                    obj.currency_code = Some(CurrencyCodeValuesDeserializer::deserialize(
                        "currencyCode",
                        stack,
                    )?);
                }
                "duration" => {
                    obj.duration = Some(IntegerDeserializer::deserialize("duration", stack)?);
                }
                "hostIdSet" => {
                    obj.host_id_set.get_or_insert(vec![]).extend(
                        ResponseHostIdSetDeserializer::deserialize("hostIdSet", stack)?,
                    );
                }
                "hostReservationId" => {
                    obj.host_reservation_id =
                        Some(StringDeserializer::deserialize("hostReservationId", stack)?);
                }
                "hourlyPrice" => {
                    obj.hourly_price = Some(StringDeserializer::deserialize("hourlyPrice", stack)?);
                }
                "instanceFamily" => {
                    obj.instance_family =
                        Some(StringDeserializer::deserialize("instanceFamily", stack)?);
                }
                "paymentOption" => {
                    obj.payment_option = Some(PaymentOptionDeserializer::deserialize(
                        "paymentOption",
                        stack,
                    )?);
                }
                "upfrontPrice" => {
                    obj.upfront_price =
                        Some(StringDeserializer::deserialize("upfrontPrice", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct PurchaseHostReservationRequest {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p>The currency in which the <code>totalUpfrontPrice</code>, <code>LimitPrice</code>, and <code>totalHourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
    pub currency_code: Option<String>,
    /// <p>The IDs of the Dedicated Hosts with which the reservation will be associated.</p>
    pub host_id_set: Vec<String>,
    /// <p>The specified limit is checked against the total upfront cost of the reservation (calculated as the offering's upfront cost multiplied by the host count). If the total upfront cost is greater than the specified price limit, the request fails. This is used to ensure that the purchase does not exceed the expected upfront cost of the purchase. At this time, the only supported currency is <code>USD</code>. For example, to indicate a limit price of USD 100, specify 100.00.</p>
    pub limit_price: Option<String>,
    /// <p>The ID of the offering.</p>
    pub offering_id: String,
}

/// Serialize `PurchaseHostReservationRequest` contents to a `SignedRequest`.
struct PurchaseHostReservationRequestSerializer;
impl PurchaseHostReservationRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &PurchaseHostReservationRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        if let Some(ref field_value) = obj.currency_code {
            params.put(&format!("{}{}", prefix, "CurrencyCode"), &field_value);
        }
        RequestHostIdSetSerializer::serialize(
            params,
            &format!("{}{}", prefix, "HostIdSet"),
            &obj.host_id_set,
        );
        if let Some(ref field_value) = obj.limit_price {
            params.put(&format!("{}{}", prefix, "LimitPrice"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "OfferingId"), &obj.offering_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct PurchaseHostReservationResult {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">How to Ensure Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p>The currency in which the <code>totalUpfrontPrice</code> and <code>totalHourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.</p>
    pub currency_code: Option<String>,
    /// <p>Describes the details of the purchase.</p>
    pub purchase: Option<Vec<Purchase>>,
    /// <p>The total hourly price of the reservation calculated per hour.</p>
    pub total_hourly_price: Option<String>,
    /// <p>The total amount charged to your account when you purchase the reservation.</p>
    pub total_upfront_price: Option<String>,
}

struct PurchaseHostReservationResultDeserializer;
impl PurchaseHostReservationResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PurchaseHostReservationResult, XmlParseError> {
        deserialize_elements::<_, PurchaseHostReservationResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "clientToken" => {
                        obj.client_token =
                            Some(StringDeserializer::deserialize("clientToken", stack)?);
                    }
                    "currencyCode" => {
                        obj.currency_code = Some(CurrencyCodeValuesDeserializer::deserialize(
                            "currencyCode",
                            stack,
                        )?);
                    }
                    "purchase" => {
                        obj.purchase
                            .get_or_insert(vec![])
                            .extend(PurchaseSetDeserializer::deserialize("purchase", stack)?);
                    }
                    "totalHourlyPrice" => {
                        obj.total_hourly_price =
                            Some(StringDeserializer::deserialize("totalHourlyPrice", stack)?);
                    }
                    "totalUpfrontPrice" => {
                        obj.total_upfront_price =
                            Some(StringDeserializer::deserialize("totalUpfrontPrice", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes a request to purchase Scheduled Instances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct PurchaseRequest {
    /// <p>The number of instances.</p>
    pub instance_count: i64,
    /// <p>The purchase token.</p>
    pub purchase_token: String,
}

/// Serialize `PurchaseRequest` contents to a `SignedRequest`.
struct PurchaseRequestSerializer;
impl PurchaseRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &PurchaseRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "InstanceCount"),
            &obj.instance_count,
        );
        params.put(
            &format!("{}{}", prefix, "PurchaseToken"),
            &obj.purchase_token,
        );
    }
}

/// Serialize `PurchaseRequestSet` contents to a `SignedRequest`.
struct PurchaseRequestSetSerializer;
impl PurchaseRequestSetSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<PurchaseRequest>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            PurchaseRequestSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Contains the parameters for PurchaseReservedInstancesOffering.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct PurchaseReservedInstancesOfferingRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The number of Reserved Instances to purchase.</p>
    pub instance_count: i64,
    /// <p>Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices.</p>
    pub limit_price: Option<ReservedInstanceLimitPrice>,
    /// <p>The ID of the Reserved Instance offering to purchase.</p>
    pub reserved_instances_offering_id: String,
}

/// Serialize `PurchaseReservedInstancesOfferingRequest` contents to a `SignedRequest`.
struct PurchaseReservedInstancesOfferingRequestSerializer;
impl PurchaseReservedInstancesOfferingRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &PurchaseReservedInstancesOfferingRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "InstanceCount"),
            &obj.instance_count,
        );
        if let Some(ref field_value) = obj.limit_price {
            ReservedInstanceLimitPriceSerializer::serialize(
                params,
                &format!("{}{}", prefix, "LimitPrice"),
                field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "ReservedInstancesOfferingId"),
            &obj.reserved_instances_offering_id,
        );
    }
}

/// <p>Contains the output of PurchaseReservedInstancesOffering.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct PurchaseReservedInstancesOfferingResult {
    /// <p>The IDs of the purchased Reserved Instances.</p>
    pub reserved_instances_id: Option<String>,
}

struct PurchaseReservedInstancesOfferingResultDeserializer;
impl PurchaseReservedInstancesOfferingResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PurchaseReservedInstancesOfferingResult, XmlParseError> {
        deserialize_elements::<_, PurchaseReservedInstancesOfferingResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "reservedInstancesId" => {
                        obj.reserved_instances_id = Some(StringDeserializer::deserialize(
                            "reservedInstancesId",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for PurchaseScheduledInstances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct PurchaseScheduledInstancesRequest {
    /// <p>Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The purchase requests.</p>
    pub purchase_requests: Vec<PurchaseRequest>,
}

/// Serialize `PurchaseScheduledInstancesRequest` contents to a `SignedRequest`.
struct PurchaseScheduledInstancesRequestSerializer;
impl PurchaseScheduledInstancesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &PurchaseScheduledInstancesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        PurchaseRequestSetSerializer::serialize(
            params,
            &format!("{}{}", prefix, "PurchaseRequest"),
            &obj.purchase_requests,
        );
    }
}

/// <p>Contains the output of PurchaseScheduledInstances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct PurchaseScheduledInstancesResult {
    /// <p>Information about the Scheduled Instances.</p>
    pub scheduled_instance_set: Option<Vec<ScheduledInstance>>,
}

struct PurchaseScheduledInstancesResultDeserializer;
impl PurchaseScheduledInstancesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<PurchaseScheduledInstancesResult, XmlParseError> {
        deserialize_elements::<_, PurchaseScheduledInstancesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "scheduledInstanceSet" => {
                        obj.scheduled_instance_set.get_or_insert(vec![]).extend(
                            PurchasedScheduledInstanceSetDeserializer::deserialize(
                                "scheduledInstanceSet",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct PurchaseSetDeserializer;
impl PurchaseSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<Purchase>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(PurchaseDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct PurchasedScheduledInstanceSetDeserializer;
impl PurchasedScheduledInstanceSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ScheduledInstance>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ScheduledInstanceDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct RIProductDescriptionDeserializer;
impl RIProductDescriptionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}

/// Serialize `ReasonCodesList` contents to a `SignedRequest`.
struct ReasonCodesListSerializer;
impl ReasonCodesListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct RebootInstancesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The instance IDs.</p>
    pub instance_ids: Vec<String>,
}

/// Serialize `RebootInstancesRequest` contents to a `SignedRequest`.
struct RebootInstancesRequestSerializer;
impl RebootInstancesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RebootInstancesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        InstanceIdStringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "InstanceId"),
            &obj.instance_ids,
        );
    }
}

/// <p>Describes a recurring charge.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct RecurringCharge {
    /// <p>The amount of the recurring charge.</p>
    pub amount: Option<f64>,
    /// <p>The frequency of the recurring charge.</p>
    pub frequency: Option<String>,
}

struct RecurringChargeDeserializer;
impl RecurringChargeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RecurringCharge, XmlParseError> {
        deserialize_elements::<_, RecurringCharge, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "amount" => {
                    obj.amount = Some(DoubleDeserializer::deserialize("amount", stack)?);
                }
                "frequency" => {
                    obj.frequency = Some(RecurringChargeFrequencyDeserializer::deserialize(
                        "frequency",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct RecurringChargeFrequencyDeserializer;
impl RecurringChargeFrequencyDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct RecurringChargesListDeserializer;
impl RecurringChargesListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<RecurringCharge>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(RecurringChargeDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a Region.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct Region {
    /// <p>The Region service endpoint.</p>
    pub endpoint: Option<String>,
    /// <p>The name of the Region.</p>
    pub region_name: Option<String>,
}

struct RegionDeserializer;
impl RegionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<Region, XmlParseError> {
        deserialize_elements::<_, Region, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "regionEndpoint" => {
                    obj.endpoint = Some(StringDeserializer::deserialize("regionEndpoint", stack)?);
                }
                "regionName" => {
                    obj.region_name = Some(StringDeserializer::deserialize("regionName", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct RegionListDeserializer;
impl RegionListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<Region>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(RegionDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `RegionNameStringList` contents to a `SignedRequest`.
struct RegionNameStringListSerializer;
impl RegionNameStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Contains the parameters for RegisterImage.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct RegisterImageRequest {
    /// <p>The architecture of the AMI.</p> <p>Default: For Amazon EBS-backed AMIs, <code>i386</code>. For instance store-backed AMIs, the architecture specified in the manifest file.</p>
    pub architecture: Option<String>,
    /// <p>The billing product codes. Your account must be authorized to specify billing product codes. Otherwise, you can use the AWS Marketplace to bill for the use of an AMI.</p>
    pub billing_products: Option<Vec<String>>,
    /// <p>The block device mapping entries.</p>
    pub block_device_mappings: Option<Vec<BlockDeviceMapping>>,
    /// <p>A description for your AMI.</p>
    pub description: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Set to <code>true</code> to enable enhanced networking with ENA for the AMI and any instances that you launch from the AMI.</p> <p>This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.</p>
    pub ena_support: Option<bool>,
    /// <p>The full path to your AMI manifest in Amazon S3 storage. The specified bucket must have the <code>aws-exec-read</code> canned access control list (ACL) to ensure that it can be accessed by Amazon EC2. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl">Canned ACLs</a> in the <i>Amazon S3 Service Developer Guide</i>.</p>
    pub image_location: Option<String>,
    /// <p>The ID of the kernel.</p>
    pub kernel_id: Option<String>,
    /// <p>A name for your AMI.</p> <p>Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)</p>
    pub name: String,
    /// <p>The ID of the RAM disk.</p>
    pub ramdisk_id: Option<String>,
    /// <p>The device name of the root device volume (for example, <code>/dev/sda1</code>).</p>
    pub root_device_name: Option<String>,
    /// <p>Set to <code>simple</code> to enable enhanced networking with the Intel 82599 Virtual Function interface for the AMI and any instances that you launch from the AMI.</p> <p>There is no way to disable <code>sriovNetSupport</code> at this time.</p> <p>This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.</p>
    pub sriov_net_support: Option<String>,
    /// <p>The type of virtualization (<code>hvm</code> | <code>paravirtual</code>).</p> <p>Default: <code>paravirtual</code> </p>
    pub virtualization_type: Option<String>,
}

/// Serialize `RegisterImageRequest` contents to a `SignedRequest`.
struct RegisterImageRequestSerializer;
impl RegisterImageRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RegisterImageRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.architecture {
            params.put(&format!("{}{}", prefix, "Architecture"), &field_value);
        }
        if let Some(ref field_value) = obj.billing_products {
            BillingProductListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "BillingProduct"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.block_device_mappings {
            BlockDeviceMappingRequestListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "BlockDeviceMapping"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.ena_support {
            params.put(&format!("{}{}", prefix, "EnaSupport"), &field_value);
        }
        if let Some(ref field_value) = obj.image_location {
            params.put(&format!("{}{}", prefix, "ImageLocation"), &field_value);
        }
        if let Some(ref field_value) = obj.kernel_id {
            params.put(&format!("{}{}", prefix, "KernelId"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "Name"), &obj.name);
        if let Some(ref field_value) = obj.ramdisk_id {
            params.put(&format!("{}{}", prefix, "RamdiskId"), &field_value);
        }
        if let Some(ref field_value) = obj.root_device_name {
            params.put(&format!("{}{}", prefix, "RootDeviceName"), &field_value);
        }
        if let Some(ref field_value) = obj.sriov_net_support {
            params.put(&format!("{}{}", prefix, "SriovNetSupport"), &field_value);
        }
        if let Some(ref field_value) = obj.virtualization_type {
            params.put(&format!("{}{}", prefix, "VirtualizationType"), &field_value);
        }
    }
}

/// <p>Contains the output of RegisterImage.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct RegisterImageResult {
    /// <p>The ID of the newly registered AMI.</p>
    pub image_id: Option<String>,
}

struct RegisterImageResultDeserializer;
impl RegisterImageResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RegisterImageResult, XmlParseError> {
        deserialize_elements::<_, RegisterImageResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "imageId" => {
                    obj.image_id = Some(StringDeserializer::deserialize("imageId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct RejectTransitGatewayVpcAttachmentRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the attachment.</p>
    pub transit_gateway_attachment_id: String,
}

/// Serialize `RejectTransitGatewayVpcAttachmentRequest` contents to a `SignedRequest`.
struct RejectTransitGatewayVpcAttachmentRequestSerializer;
impl RejectTransitGatewayVpcAttachmentRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RejectTransitGatewayVpcAttachmentRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TransitGatewayAttachmentId"),
            &obj.transit_gateway_attachment_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct RejectTransitGatewayVpcAttachmentResult {
    /// <p>Information about the attachment.</p>
    pub transit_gateway_vpc_attachment: Option<TransitGatewayVpcAttachment>,
}

struct RejectTransitGatewayVpcAttachmentResultDeserializer;
impl RejectTransitGatewayVpcAttachmentResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RejectTransitGatewayVpcAttachmentResult, XmlParseError> {
        deserialize_elements::<_, RejectTransitGatewayVpcAttachmentResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "transitGatewayVpcAttachment" => {
                        obj.transit_gateway_vpc_attachment =
                            Some(TransitGatewayVpcAttachmentDeserializer::deserialize(
                                "transitGatewayVpcAttachment",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct RejectVpcEndpointConnectionsRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the service.</p>
    pub service_id: String,
    /// <p>The IDs of one or more VPC endpoints.</p>
    pub vpc_endpoint_ids: Vec<String>,
}

/// Serialize `RejectVpcEndpointConnectionsRequest` contents to a `SignedRequest`.
struct RejectVpcEndpointConnectionsRequestSerializer;
impl RejectVpcEndpointConnectionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RejectVpcEndpointConnectionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "ServiceId"), &obj.service_id);
        ValueStringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "VpcEndpointId"),
            &obj.vpc_endpoint_ids,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct RejectVpcEndpointConnectionsResult {
    /// <p>Information about the endpoints that were not rejected, if applicable.</p>
    pub unsuccessful: Option<Vec<UnsuccessfulItem>>,
}

struct RejectVpcEndpointConnectionsResultDeserializer;
impl RejectVpcEndpointConnectionsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RejectVpcEndpointConnectionsResult, XmlParseError> {
        deserialize_elements::<_, RejectVpcEndpointConnectionsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "unsuccessful" => {
                        obj.unsuccessful.get_or_insert(vec![]).extend(
                            UnsuccessfulItemSetDeserializer::deserialize("unsuccessful", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct RejectVpcPeeringConnectionRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the VPC peering connection.</p>
    pub vpc_peering_connection_id: String,
}

/// Serialize `RejectVpcPeeringConnectionRequest` contents to a `SignedRequest`.
struct RejectVpcPeeringConnectionRequestSerializer;
impl RejectVpcPeeringConnectionRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RejectVpcPeeringConnectionRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "VpcPeeringConnectionId"),
            &obj.vpc_peering_connection_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct RejectVpcPeeringConnectionResult {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    pub return_: Option<bool>,
}

struct RejectVpcPeeringConnectionResultDeserializer;
impl RejectVpcPeeringConnectionResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RejectVpcPeeringConnectionResult, XmlParseError> {
        deserialize_elements::<_, RejectVpcPeeringConnectionResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReleaseAddressRequest {
    /// <p>[EC2-VPC] The allocation ID. Required for EC2-VPC.</p>
    pub allocation_id: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>[EC2-Classic] The Elastic IP address. Required for EC2-Classic.</p>
    pub public_ip: Option<String>,
}

/// Serialize `ReleaseAddressRequest` contents to a `SignedRequest`.
struct ReleaseAddressRequestSerializer;
impl ReleaseAddressRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ReleaseAddressRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.allocation_id {
            params.put(&format!("{}{}", prefix, "AllocationId"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.public_ip {
            params.put(&format!("{}{}", prefix, "PublicIp"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReleaseHostsRequest {
    /// <p>The IDs of the Dedicated Hosts to release.</p>
    pub host_ids: Vec<String>,
}

/// Serialize `ReleaseHostsRequest` contents to a `SignedRequest`.
struct ReleaseHostsRequestSerializer;
impl ReleaseHostsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ReleaseHostsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        RequestHostIdListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "HostId"),
            &obj.host_ids,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReleaseHostsResult {
    /// <p>The IDs of the Dedicated Hosts that were successfully released.</p>
    pub successful: Option<Vec<String>>,
    /// <p>The IDs of the Dedicated Hosts that could not be released, including an error message.</p>
    pub unsuccessful: Option<Vec<UnsuccessfulItem>>,
}

struct ReleaseHostsResultDeserializer;
impl ReleaseHostsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ReleaseHostsResult, XmlParseError> {
        deserialize_elements::<_, ReleaseHostsResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "successful" => {
                    obj.successful.get_or_insert(vec![]).extend(
                        ResponseHostIdListDeserializer::deserialize("successful", stack)?,
                    );
                }
                "unsuccessful" => {
                    obj.unsuccessful.get_or_insert(vec![]).extend(
                        UnsuccessfulItemListDeserializer::deserialize("unsuccessful", stack)?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReplaceIamInstanceProfileAssociationRequest {
    /// <p>The ID of the existing IAM instance profile association.</p>
    pub association_id: String,
    /// <p>The IAM instance profile.</p>
    pub iam_instance_profile: IamInstanceProfileSpecification,
}

/// Serialize `ReplaceIamInstanceProfileAssociationRequest` contents to a `SignedRequest`.
struct ReplaceIamInstanceProfileAssociationRequestSerializer;
impl ReplaceIamInstanceProfileAssociationRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &ReplaceIamInstanceProfileAssociationRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "AssociationId"),
            &obj.association_id,
        );
        IamInstanceProfileSpecificationSerializer::serialize(
            params,
            &format!("{}{}", prefix, "IamInstanceProfile"),
            &obj.iam_instance_profile,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReplaceIamInstanceProfileAssociationResult {
    /// <p>Information about the IAM instance profile association.</p>
    pub iam_instance_profile_association: Option<IamInstanceProfileAssociation>,
}

struct ReplaceIamInstanceProfileAssociationResultDeserializer;
impl ReplaceIamInstanceProfileAssociationResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ReplaceIamInstanceProfileAssociationResult, XmlParseError> {
        deserialize_elements::<_, ReplaceIamInstanceProfileAssociationResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "iamInstanceProfileAssociation" => {
                        obj.iam_instance_profile_association =
                            Some(IamInstanceProfileAssociationDeserializer::deserialize(
                                "iamInstanceProfileAssociation",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReplaceNetworkAclAssociationRequest {
    /// <p>The ID of the current association between the original network ACL and the subnet.</p>
    pub association_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the new network ACL to associate with the subnet.</p>
    pub network_acl_id: String,
}

/// Serialize `ReplaceNetworkAclAssociationRequest` contents to a `SignedRequest`.
struct ReplaceNetworkAclAssociationRequestSerializer;
impl ReplaceNetworkAclAssociationRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ReplaceNetworkAclAssociationRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "AssociationId"),
            &obj.association_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "NetworkAclId"),
            &obj.network_acl_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReplaceNetworkAclAssociationResult {
    /// <p>The ID of the new association.</p>
    pub new_association_id: Option<String>,
}

struct ReplaceNetworkAclAssociationResultDeserializer;
impl ReplaceNetworkAclAssociationResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ReplaceNetworkAclAssociationResult, XmlParseError> {
        deserialize_elements::<_, ReplaceNetworkAclAssociationResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "newAssociationId" => {
                        obj.new_association_id =
                            Some(StringDeserializer::deserialize("newAssociationId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReplaceNetworkAclEntryRequest {
    /// <p>The IPv4 network range to allow or deny, in CIDR notation (for example <code>172.16.0.0/24</code>).</p>
    pub cidr_block: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Indicates whether to replace the egress rule.</p> <p>Default: If no value is specified, we replace the ingress rule.</p>
    pub egress: bool,
    /// <p>ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.</p>
    pub icmp_type_code: Option<IcmpTypeCode>,
    /// <p>The IPv6 network range to allow or deny, in CIDR notation (for example <code>2001:bd8:1234:1a00::/64</code>).</p>
    pub ipv_6_cidr_block: Option<String>,
    /// <p>The ID of the ACL.</p>
    pub network_acl_id: String,
    /// <p>TCP or UDP protocols: The range of ports the rule applies to. Required if specifying protocol 6 (TCP) or 17 (UDP).</p>
    pub port_range: Option<PortRange>,
    /// <p>The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code.</p>
    pub protocol: String,
    /// <p>Indicates whether to allow or deny the traffic that matches the rule.</p>
    pub rule_action: String,
    /// <p>The rule number of the entry to replace.</p>
    pub rule_number: i64,
}

/// Serialize `ReplaceNetworkAclEntryRequest` contents to a `SignedRequest`.
struct ReplaceNetworkAclEntryRequestSerializer;
impl ReplaceNetworkAclEntryRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ReplaceNetworkAclEntryRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.cidr_block {
            params.put(&format!("{}{}", prefix, "CidrBlock"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "Egress"), &obj.egress);
        if let Some(ref field_value) = obj.icmp_type_code {
            IcmpTypeCodeSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Icmp"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.ipv_6_cidr_block {
            params.put(&format!("{}{}", prefix, "Ipv6CidrBlock"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "NetworkAclId"),
            &obj.network_acl_id,
        );
        if let Some(ref field_value) = obj.port_range {
            PortRangeSerializer::serialize(
                params,
                &format!("{}{}", prefix, "PortRange"),
                field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "Protocol"), &obj.protocol);
        params.put(&format!("{}{}", prefix, "RuleAction"), &obj.rule_action);
        params.put(&format!("{}{}", prefix, "RuleNumber"), &obj.rule_number);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReplaceRouteRequest {
    /// <p>The IPv4 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.</p>
    pub destination_cidr_block: Option<String>,
    /// <p>The IPv6 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.</p>
    pub destination_ipv_6_cidr_block: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>[IPv6 traffic only] The ID of an egress-only internet gateway.</p>
    pub egress_only_internet_gateway_id: Option<String>,
    /// <p>The ID of an internet gateway or virtual private gateway.</p>
    pub gateway_id: Option<String>,
    /// <p>The ID of a NAT instance in your VPC.</p>
    pub instance_id: Option<String>,
    /// <p>[IPv4 traffic only] The ID of a NAT gateway.</p>
    pub nat_gateway_id: Option<String>,
    /// <p>The ID of a network interface.</p>
    pub network_interface_id: Option<String>,
    /// <p>The ID of the route table.</p>
    pub route_table_id: String,
    /// <p>The ID of a transit gateway.</p>
    pub transit_gateway_id: Option<String>,
    /// <p>The ID of a VPC peering connection.</p>
    pub vpc_peering_connection_id: Option<String>,
}

/// Serialize `ReplaceRouteRequest` contents to a `SignedRequest`.
struct ReplaceRouteRequestSerializer;
impl ReplaceRouteRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ReplaceRouteRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.destination_cidr_block {
            params.put(
                &format!("{}{}", prefix, "DestinationCidrBlock"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.destination_ipv_6_cidr_block {
            params.put(
                &format!("{}{}", prefix, "DestinationIpv6CidrBlock"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.egress_only_internet_gateway_id {
            params.put(
                &format!("{}{}", prefix, "EgressOnlyInternetGatewayId"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.gateway_id {
            params.put(&format!("{}{}", prefix, "GatewayId"), &field_value);
        }
        if let Some(ref field_value) = obj.instance_id {
            params.put(&format!("{}{}", prefix, "InstanceId"), &field_value);
        }
        if let Some(ref field_value) = obj.nat_gateway_id {
            params.put(&format!("{}{}", prefix, "NatGatewayId"), &field_value);
        }
        if let Some(ref field_value) = obj.network_interface_id {
            params.put(&format!("{}{}", prefix, "NetworkInterfaceId"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "RouteTableId"),
            &obj.route_table_id,
        );
        if let Some(ref field_value) = obj.transit_gateway_id {
            params.put(&format!("{}{}", prefix, "TransitGatewayId"), &field_value);
        }
        if let Some(ref field_value) = obj.vpc_peering_connection_id {
            params.put(
                &format!("{}{}", prefix, "VpcPeeringConnectionId"),
                &field_value,
            );
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReplaceRouteTableAssociationRequest {
    /// <p>The association ID.</p>
    pub association_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the new route table to associate with the subnet.</p>
    pub route_table_id: String,
}

/// Serialize `ReplaceRouteTableAssociationRequest` contents to a `SignedRequest`.
struct ReplaceRouteTableAssociationRequestSerializer;
impl ReplaceRouteTableAssociationRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ReplaceRouteTableAssociationRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "AssociationId"),
            &obj.association_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "RouteTableId"),
            &obj.route_table_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReplaceRouteTableAssociationResult {
    /// <p>The ID of the new association.</p>
    pub new_association_id: Option<String>,
}

struct ReplaceRouteTableAssociationResultDeserializer;
impl ReplaceRouteTableAssociationResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ReplaceRouteTableAssociationResult, XmlParseError> {
        deserialize_elements::<_, ReplaceRouteTableAssociationResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "newAssociationId" => {
                        obj.new_association_id =
                            Some(StringDeserializer::deserialize("newAssociationId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReplaceTransitGatewayRouteRequest {
    /// <p>Indicates whether traffic matching this route is to be dropped.</p>
    pub blackhole: Option<bool>,
    /// <p>The CIDR range used for the destination match. Routing decisions are based on the most specific match.</p>
    pub destination_cidr_block: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the attachment.</p>
    pub transit_gateway_attachment_id: Option<String>,
    /// <p>The ID of the route table.</p>
    pub transit_gateway_route_table_id: String,
}

/// Serialize `ReplaceTransitGatewayRouteRequest` contents to a `SignedRequest`.
struct ReplaceTransitGatewayRouteRequestSerializer;
impl ReplaceTransitGatewayRouteRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ReplaceTransitGatewayRouteRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.blackhole {
            params.put(&format!("{}{}", prefix, "Blackhole"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "DestinationCidrBlock"),
            &obj.destination_cidr_block,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.transit_gateway_attachment_id {
            params.put(
                &format!("{}{}", prefix, "TransitGatewayAttachmentId"),
                &field_value,
            );
        }
        params.put(
            &format!("{}{}", prefix, "TransitGatewayRouteTableId"),
            &obj.transit_gateway_route_table_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReplaceTransitGatewayRouteResult {
    /// <p>Information about the modified route.</p>
    pub route: Option<TransitGatewayRoute>,
}

struct ReplaceTransitGatewayRouteResultDeserializer;
impl ReplaceTransitGatewayRouteResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ReplaceTransitGatewayRouteResult, XmlParseError> {
        deserialize_elements::<_, ReplaceTransitGatewayRouteResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "route" => {
                        obj.route = Some(TransitGatewayRouteDeserializer::deserialize(
                            "route", stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReportInstanceStatusRequest {
    /// <p>Descriptive text about the health state of your instance.</p>
    pub description: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The time at which the reported instance health state ended.</p>
    pub end_time: Option<String>,
    /// <p>The instances.</p>
    pub instances: Vec<String>,
    /// <p><p>The reason codes that describe the health state of your instance.</p> <ul> <li> <p> <code>instance-stuck-in-state</code>: My instance is stuck in a state.</p> </li> <li> <p> <code>unresponsive</code>: My instance is unresponsive.</p> </li> <li> <p> <code>not-accepting-credentials</code>: My instance is not accepting my credentials.</p> </li> <li> <p> <code>password-not-available</code>: A password is not available for my instance.</p> </li> <li> <p> <code>performance-network</code>: My instance is experiencing performance problems that I believe are network related.</p> </li> <li> <p> <code>performance-instance-store</code>: My instance is experiencing performance problems that I believe are related to the instance stores.</p> </li> <li> <p> <code>performance-ebs-volume</code>: My instance is experiencing performance problems that I believe are related to an EBS volume.</p> </li> <li> <p> <code>performance-other</code>: My instance is experiencing performance problems.</p> </li> <li> <p> <code>other</code>: [explain using the description parameter]</p> </li> </ul></p>
    pub reason_codes: Vec<String>,
    /// <p>The time at which the reported instance health state began.</p>
    pub start_time: Option<String>,
    /// <p>The status of all instances listed.</p>
    pub status: String,
}

/// Serialize `ReportInstanceStatusRequest` contents to a `SignedRequest`.
struct ReportInstanceStatusRequestSerializer;
impl ReportInstanceStatusRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ReportInstanceStatusRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.end_time {
            params.put(&format!("{}{}", prefix, "EndTime"), &field_value);
        }
        InstanceIdStringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "InstanceId"),
            &obj.instances,
        );
        ReasonCodesListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "ReasonCode"),
            &obj.reason_codes,
        );
        if let Some(ref field_value) = obj.start_time {
            params.put(&format!("{}{}", prefix, "StartTime"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "Status"), &obj.status);
    }
}

/// Serialize `RequestHostIdList` contents to a `SignedRequest`.
struct RequestHostIdListSerializer;
impl RequestHostIdListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// Serialize `RequestHostIdSet` contents to a `SignedRequest`.
struct RequestHostIdSetSerializer;
impl RequestHostIdSetSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>The information to include in the launch template.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct RequestLaunchTemplateData {
    /// <p><p>The block device mapping.</p> <important> <p>Supplying both a snapshot ID and an encryption value as arguments for block-device mapping results in an error. This is because only blank volumes can be encrypted on start, and these are not created from a snapshot. If a snapshot is the basis for the volume, it contains data by definition and its encryption status cannot be changed using this action.</p> </important></p>
    pub block_device_mappings: Option<Vec<LaunchTemplateBlockDeviceMappingRequest>>,
    /// <p>The Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to <code>open</code>, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p>
    pub capacity_reservation_specification:
        Option<LaunchTemplateCapacityReservationSpecificationRequest>,
    /// <p>The CPU options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html">Optimizing CPU Options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub cpu_options: Option<LaunchTemplateCpuOptionsRequest>,
    /// <p>The credit option for CPU usage of the instance. Valid for T2 or T3 instances only.</p>
    pub credit_specification: Option<CreditSpecificationRequest>,
    /// <p>If you set this parameter to <code>true</code>, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html">ModifyInstanceAttribute</a>. Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code> to <code>terminate</code>, you can terminate the instance by running the shutdown command from the instance.</p>
    pub disable_api_termination: Option<bool>,
    /// <p>Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p>
    pub ebs_optimized: Option<bool>,
    /// <p>An elastic GPU to associate with the instance.</p>
    pub elastic_gpu_specifications: Option<Vec<ElasticGpuSpecification>>,
    /// <p> The elastic inference accelerator for the instance. </p>
    pub elastic_inference_accelerators: Option<Vec<LaunchTemplateElasticInferenceAccelerator>>,
    /// <p>Indicates whether an instance is enabled for hibernation. This parameter is valid only if the instance meets the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites">hibernation prerequisites</a>. Hibernation is currently supported only for Amazon Linux. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub hibernation_options: Option<LaunchTemplateHibernationOptionsRequest>,
    /// <p>The IAM instance profile.</p>
    pub iam_instance_profile: Option<LaunchTemplateIamInstanceProfileSpecificationRequest>,
    /// <p>The ID of the AMI.</p>
    pub image_id: Option<String>,
    /// <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p> <p>Default: <code>stop</code> </p>
    pub instance_initiated_shutdown_behavior: Option<String>,
    /// <p>The market (purchasing) option for the instances.</p>
    pub instance_market_options: Option<LaunchTemplateInstanceMarketOptionsRequest>,
    /// <p>The instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub instance_type: Option<String>,
    /// <p><p>The ID of the kernel.</p> <important> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">User Provided Kernels</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </important></p>
    pub kernel_id: Option<String>,
    /// <p><p>The name of the key pair. You can create a key pair using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html">CreateKeyPair</a> or <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html">ImportKeyPair</a>.</p> <important> <p>If you do not specify a key pair, you can&#39;t connect to the instance unless you choose an AMI that is configured to allow users another way to log in.</p> </important></p>
    pub key_name: Option<String>,
    /// <p>The license configurations.</p>
    pub license_specifications: Option<Vec<LaunchTemplateLicenseConfigurationRequest>>,
    /// <p>The monitoring for the instance.</p>
    pub monitoring: Option<LaunchTemplatesMonitoringRequest>,
    /// <p>One or more network interfaces. If you specify a network interface, you must specify any security groups as part of the network interface.</p>
    pub network_interfaces: Option<Vec<LaunchTemplateInstanceNetworkInterfaceSpecificationRequest>>,
    /// <p>The placement for the instance.</p>
    pub placement: Option<LaunchTemplatePlacementRequest>,
    /// <p><p>The ID of the RAM disk.</p> <important> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html">User Provided Kernels</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </important></p>
    pub ram_disk_id: Option<String>,
    /// <p>One or more security group IDs. You can create a security group using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html">CreateSecurityGroup</a>. You cannot specify both a security group ID and security name in the same request.</p>
    pub security_group_ids: Option<Vec<String>>,
    /// <p>[EC2-Classic, default VPC] One or more security group names. For a nondefault VPC, you must use security group IDs instead. You cannot specify both a security group ID and security name in the same request.</p>
    pub security_groups: Option<Vec<String>>,
    /// <p>The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>.</p>
    pub tag_specifications: Option<Vec<LaunchTemplateTagSpecificationRequest>>,
    /// <p>The Base64-encoded user data to make available to the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html">Running Commands on Your Linux Instance at Launch</a> (Linux) and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html#instancedata-add-user-data">Adding User Data</a> (Windows).</p>
    pub user_data: Option<String>,
}

/// Serialize `RequestLaunchTemplateData` contents to a `SignedRequest`.
struct RequestLaunchTemplateDataSerializer;
impl RequestLaunchTemplateDataSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RequestLaunchTemplateData) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.block_device_mappings {
            LaunchTemplateBlockDeviceMappingRequestListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "BlockDeviceMapping"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.capacity_reservation_specification {
            LaunchTemplateCapacityReservationSpecificationRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "CapacityReservationSpecification"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.cpu_options {
            LaunchTemplateCpuOptionsRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "CpuOptions"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.credit_specification {
            CreditSpecificationRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "CreditSpecification"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.disable_api_termination {
            params.put(
                &format!("{}{}", prefix, "DisableApiTermination"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.ebs_optimized {
            params.put(&format!("{}{}", prefix, "EbsOptimized"), &field_value);
        }
        if let Some(ref field_value) = obj.elastic_gpu_specifications {
            ElasticGpuSpecificationListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ElasticGpuSpecification"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.elastic_inference_accelerators {
            LaunchTemplateElasticInferenceAcceleratorListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ElasticInferenceAccelerator"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.hibernation_options {
            LaunchTemplateHibernationOptionsRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "HibernationOptions"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.iam_instance_profile {
            LaunchTemplateIamInstanceProfileSpecificationRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "IamInstanceProfile"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.image_id {
            params.put(&format!("{}{}", prefix, "ImageId"), &field_value);
        }
        if let Some(ref field_value) = obj.instance_initiated_shutdown_behavior {
            params.put(
                &format!("{}{}", prefix, "InstanceInitiatedShutdownBehavior"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.instance_market_options {
            LaunchTemplateInstanceMarketOptionsRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "InstanceMarketOptions"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.instance_type {
            params.put(&format!("{}{}", prefix, "InstanceType"), &field_value);
        }
        if let Some(ref field_value) = obj.kernel_id {
            params.put(&format!("{}{}", prefix, "KernelId"), &field_value);
        }
        if let Some(ref field_value) = obj.key_name {
            params.put(&format!("{}{}", prefix, "KeyName"), &field_value);
        }
        if let Some(ref field_value) = obj.license_specifications {
            LaunchTemplateLicenseSpecificationListRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "LicenseSpecification"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.monitoring {
            LaunchTemplatesMonitoringRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Monitoring"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.network_interfaces {
            LaunchTemplateInstanceNetworkInterfaceSpecificationRequestListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "NetworkInterface"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.placement {
            LaunchTemplatePlacementRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Placement"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.ram_disk_id {
            params.put(&format!("{}{}", prefix, "RamDiskId"), &field_value);
        }
        if let Some(ref field_value) = obj.security_group_ids {
            SecurityGroupIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SecurityGroupId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.security_groups {
            SecurityGroupStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SecurityGroup"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.tag_specifications {
            LaunchTemplateTagSpecificationRequestListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "TagSpecification"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.user_data {
            params.put(&format!("{}{}", prefix, "UserData"), &field_value);
        }
    }
}

/// <p>Contains the parameters for RequestSpotFleet.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct RequestSpotFleetRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The configuration for the Spot Fleet request.</p>
    pub spot_fleet_request_config: SpotFleetRequestConfigData,
}

/// Serialize `RequestSpotFleetRequest` contents to a `SignedRequest`.
struct RequestSpotFleetRequestSerializer;
impl RequestSpotFleetRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RequestSpotFleetRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        SpotFleetRequestConfigDataSerializer::serialize(
            params,
            &format!("{}{}", prefix, "SpotFleetRequestConfig"),
            &obj.spot_fleet_request_config,
        );
    }
}

/// <p>Contains the output of RequestSpotFleet.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct RequestSpotFleetResponse {
    /// <p>The ID of the Spot Fleet request.</p>
    pub spot_fleet_request_id: Option<String>,
}

struct RequestSpotFleetResponseDeserializer;
impl RequestSpotFleetResponseDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RequestSpotFleetResponse, XmlParseError> {
        deserialize_elements::<_, RequestSpotFleetResponse, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "spotFleetRequestId" => {
                        obj.spot_fleet_request_id = Some(StringDeserializer::deserialize(
                            "spotFleetRequestId",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for RequestSpotInstances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct RequestSpotInstancesRequest {
    /// <p>The user-specified name for a logical grouping of requests.</p> <p>When you specify an Availability Zone group in a Spot Instance request, all Spot Instances in the request are launched in the same Availability Zone. Instance proximity is maintained with this parameter, but the choice of Availability Zone is not. The group applies only to requests for Spot Instances of the same instance type. Any additional Spot Instance requests that are specified with the same Availability Zone group name are launched in that same Availability Zone, as long as at least one instance from the group is still active.</p> <p>If there is no active instance running in the Availability Zone group that you specify for a new Spot Instance request (all instances are terminated, the request is expired, or the maximum price you specified falls below current Spot price), then Amazon EC2 launches the instance in any Availability Zone where the constraint can be met. Consequently, the subsequent set of Spot Instances could be placed in a different zone from the original request, even if you specified the same Availability Zone group.</p> <p>Default: Instances are launched in any available Availability Zone.</p>
    pub availability_zone_group: Option<String>,
    /// <p>The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).</p> <p>The duration period starts as soon as your Spot Instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot Instance for termination and provides a Spot Instance termination notice, which gives the instance a two-minute warning before it terminates.</p> <p>You can't specify an Availability Zone group or a launch group if you specify a duration.</p>
    pub block_duration_minutes: Option<i64>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html">How to Ensure Idempotency</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    pub client_token: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The maximum number of Spot Instances to launch.</p> <p>Default: 1</p>
    pub instance_count: Option<i64>,
    /// <p>The behavior when a Spot Instance is interrupted. The default is <code>terminate</code>.</p>
    pub instance_interruption_behavior: Option<String>,
    /// <p>The instance launch group. Launch groups are Spot Instances that launch together and terminate together.</p> <p>Default: Instances are launched and terminated individually</p>
    pub launch_group: Option<String>,
    /// <p>The launch specification.</p>
    pub launch_specification: Option<RequestSpotLaunchSpecification>,
    /// <p>The maximum price per hour that you are willing to pay for a Spot Instance. The default is the On-Demand price.</p>
    pub spot_price: Option<String>,
    /// <p>The Spot Instance request type.</p> <p>Default: <code>one-time</code> </p>
    pub type_: Option<String>,
    /// <p>The start date of the request. If this is a one-time request, the request becomes active at this date and time and remains active until all instances launch, the request expires, or the request is canceled. If the request is persistent, the request becomes active at this date and time and remains active until it expires or is canceled.</p>
    pub valid_from: Option<String>,
    /// <p>The end date of the request. If this is a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date is reached. The default end date is 7 days from the current date.</p>
    pub valid_until: Option<String>,
}

/// Serialize `RequestSpotInstancesRequest` contents to a `SignedRequest`.
struct RequestSpotInstancesRequestSerializer;
impl RequestSpotInstancesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RequestSpotInstancesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.availability_zone_group {
            params.put(
                &format!("{}{}", prefix, "AvailabilityZoneGroup"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.block_duration_minutes {
            params.put(
                &format!("{}{}", prefix, "BlockDurationMinutes"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.instance_count {
            params.put(&format!("{}{}", prefix, "InstanceCount"), &field_value);
        }
        if let Some(ref field_value) = obj.instance_interruption_behavior {
            params.put(
                &format!("{}{}", prefix, "InstanceInterruptionBehavior"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.launch_group {
            params.put(&format!("{}{}", prefix, "LaunchGroup"), &field_value);
        }
        if let Some(ref field_value) = obj.launch_specification {
            RequestSpotLaunchSpecificationSerializer::serialize(
                params,
                &format!("{}{}", prefix, "LaunchSpecification"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.spot_price {
            params.put(&format!("{}{}", prefix, "SpotPrice"), &field_value);
        }
        if let Some(ref field_value) = obj.type_ {
            params.put(&format!("{}{}", prefix, "Type"), &field_value);
        }
        if let Some(ref field_value) = obj.valid_from {
            params.put(&format!("{}{}", prefix, "ValidFrom"), &field_value);
        }
        if let Some(ref field_value) = obj.valid_until {
            params.put(&format!("{}{}", prefix, "ValidUntil"), &field_value);
        }
    }
}

/// <p>Contains the output of RequestSpotInstances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct RequestSpotInstancesResult {
    /// <p>One or more Spot Instance requests.</p>
    pub spot_instance_requests: Option<Vec<SpotInstanceRequest>>,
}

struct RequestSpotInstancesResultDeserializer;
impl RequestSpotInstancesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RequestSpotInstancesResult, XmlParseError> {
        deserialize_elements::<_, RequestSpotInstancesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "spotInstanceRequestSet" => {
                        obj.spot_instance_requests.get_or_insert(vec![]).extend(
                            SpotInstanceRequestListDeserializer::deserialize(
                                "spotInstanceRequestSet",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes the launch specification for an instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct RequestSpotLaunchSpecification {
    /// <p>Deprecated.</p>
    pub addressing_type: Option<String>,
    /// <p>One or more block device mapping entries. You can't specify both a snapshot ID and an encryption value. This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its encryption status is used for the volume encryption status.</p>
    pub block_device_mappings: Option<Vec<BlockDeviceMapping>>,
    /// <p>Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.</p> <p>Default: <code>false</code> </p>
    pub ebs_optimized: Option<bool>,
    /// <p>The IAM instance profile.</p>
    pub iam_instance_profile: Option<IamInstanceProfileSpecification>,
    /// <p>The ID of the AMI.</p>
    pub image_id: Option<String>,
    /// <p>The instance type.</p>
    pub instance_type: Option<String>,
    /// <p>The ID of the kernel.</p>
    pub kernel_id: Option<String>,
    /// <p>The name of the key pair.</p>
    pub key_name: Option<String>,
    /// <p>Indicates whether basic or detailed monitoring is enabled for the instance.</p> <p>Default: Disabled</p>
    pub monitoring: Option<RunInstancesMonitoringEnabled>,
    /// <p>One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.</p>
    pub network_interfaces: Option<Vec<InstanceNetworkInterfaceSpecification>>,
    /// <p>The placement information for the instance.</p>
    pub placement: Option<SpotPlacement>,
    /// <p>The ID of the RAM disk.</p>
    pub ramdisk_id: Option<String>,
    /// <p>One or more security group IDs.</p>
    pub security_group_ids: Option<Vec<String>>,
    /// <p>One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.</p>
    pub security_groups: Option<Vec<String>>,
    /// <p>The ID of the subnet in which to launch the instance.</p>
    pub subnet_id: Option<String>,
    /// <p>The Base64-encoded user data for the instance. User data is limited to 16 KB.</p>
    pub user_data: Option<String>,
}

/// Serialize `RequestSpotLaunchSpecification` contents to a `SignedRequest`.
struct RequestSpotLaunchSpecificationSerializer;
impl RequestSpotLaunchSpecificationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RequestSpotLaunchSpecification) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.addressing_type {
            params.put(&format!("{}{}", prefix, "AddressingType"), &field_value);
        }
        if let Some(ref field_value) = obj.block_device_mappings {
            BlockDeviceMappingListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "BlockDeviceMapping"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.ebs_optimized {
            params.put(&format!("{}{}", prefix, "EbsOptimized"), &field_value);
        }
        if let Some(ref field_value) = obj.iam_instance_profile {
            IamInstanceProfileSpecificationSerializer::serialize(
                params,
                &format!("{}{}", prefix, "IamInstanceProfile"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.image_id {
            params.put(&format!("{}{}", prefix, "ImageId"), &field_value);
        }
        if let Some(ref field_value) = obj.instance_type {
            params.put(&format!("{}{}", prefix, "InstanceType"), &field_value);
        }
        if let Some(ref field_value) = obj.kernel_id {
            params.put(&format!("{}{}", prefix, "KernelId"), &field_value);
        }
        if let Some(ref field_value) = obj.key_name {
            params.put(&format!("{}{}", prefix, "KeyName"), &field_value);
        }
        if let Some(ref field_value) = obj.monitoring {
            RunInstancesMonitoringEnabledSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Monitoring"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.network_interfaces {
            InstanceNetworkInterfaceSpecificationListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "NetworkInterface"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.placement {
            SpotPlacementSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Placement"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.ramdisk_id {
            params.put(&format!("{}{}", prefix, "RamdiskId"), &field_value);
        }
        if let Some(ref field_value) = obj.security_group_ids {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SecurityGroupId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.security_groups {
            ValueStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SecurityGroup"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.subnet_id {
            params.put(&format!("{}{}", prefix, "SubnetId"), &field_value);
        }
        if let Some(ref field_value) = obj.user_data {
            params.put(&format!("{}{}", prefix, "UserData"), &field_value);
        }
    }
}

/// <p>Describes a reservation.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct Reservation {
    /// <p>[EC2-Classic only] The security groups.</p>
    pub groups: Option<Vec<GroupIdentifier>>,
    /// <p>The instances.</p>
    pub instances: Option<Vec<Instance>>,
    /// <p>The ID of the AWS account that owns the reservation.</p>
    pub owner_id: Option<String>,
    /// <p>The ID of the requester that launched the instances on your behalf (for example, AWS Management Console or Auto Scaling).</p>
    pub requester_id: Option<String>,
    /// <p>The ID of the reservation.</p>
    pub reservation_id: Option<String>,
}

struct ReservationDeserializer;
impl ReservationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Reservation, XmlParseError> {
        deserialize_elements::<_, Reservation, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "groupSet" => {
                    obj.groups.get_or_insert(vec![]).extend(
                        GroupIdentifierListDeserializer::deserialize("groupSet", stack)?,
                    );
                }
                "instancesSet" => {
                    obj.instances.get_or_insert(vec![]).extend(
                        InstanceListDeserializer::deserialize("instancesSet", stack)?,
                    );
                }
                "ownerId" => {
                    obj.owner_id = Some(StringDeserializer::deserialize("ownerId", stack)?);
                }
                "requesterId" => {
                    obj.requester_id = Some(StringDeserializer::deserialize("requesterId", stack)?);
                }
                "reservationId" => {
                    obj.reservation_id =
                        Some(StringDeserializer::deserialize("reservationId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct ReservationListDeserializer;
impl ReservationListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<Reservation>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ReservationDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct ReservationStateDeserializer;
impl ReservationStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>The cost associated with the Reserved Instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReservationValue {
    /// <p>The hourly rate of the reservation.</p>
    pub hourly_price: Option<String>,
    /// <p>The balance of the total value (the sum of remainingUpfrontValue + hourlyPrice * number of hours remaining).</p>
    pub remaining_total_value: Option<String>,
    /// <p>The remaining upfront cost of the reservation.</p>
    pub remaining_upfront_value: Option<String>,
}

struct ReservationValueDeserializer;
impl ReservationValueDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ReservationValue, XmlParseError> {
        deserialize_elements::<_, ReservationValue, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "hourlyPrice" => {
                    obj.hourly_price = Some(StringDeserializer::deserialize("hourlyPrice", stack)?);
                }
                "remainingTotalValue" => {
                    obj.remaining_total_value = Some(StringDeserializer::deserialize(
                        "remainingTotalValue",
                        stack,
                    )?);
                }
                "remainingUpfrontValue" => {
                    obj.remaining_upfront_value = Some(StringDeserializer::deserialize(
                        "remainingUpfrontValue",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `ReservedInstanceIdSet` contents to a `SignedRequest`.
struct ReservedInstanceIdSetSerializer;
impl ReservedInstanceIdSetSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Describes the limit price of a Reserved Instance offering.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReservedInstanceLimitPrice {
    /// <p>Used for Reserved Instance Marketplace offerings. Specifies the limit price on the total order (instanceCount * price).</p>
    pub amount: Option<f64>,
    /// <p>The currency in which the <code>limitPrice</code> amount is specified. At this time, the only supported currency is <code>USD</code>.</p>
    pub currency_code: Option<String>,
}

/// Serialize `ReservedInstanceLimitPrice` contents to a `SignedRequest`.
struct ReservedInstanceLimitPriceSerializer;
impl ReservedInstanceLimitPriceSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ReservedInstanceLimitPrice) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.amount {
            params.put(&format!("{}{}", prefix, "Amount"), &field_value);
        }
        if let Some(ref field_value) = obj.currency_code {
            params.put(&format!("{}{}", prefix, "CurrencyCode"), &field_value);
        }
    }
}

/// <p>The total value of the Convertible Reserved Instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReservedInstanceReservationValue {
    /// <p>The total value of the Convertible Reserved Instance that you are exchanging.</p>
    pub reservation_value: Option<ReservationValue>,
    /// <p>The ID of the Convertible Reserved Instance that you are exchanging.</p>
    pub reserved_instance_id: Option<String>,
}

struct ReservedInstanceReservationValueDeserializer;
impl ReservedInstanceReservationValueDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ReservedInstanceReservationValue, XmlParseError> {
        deserialize_elements::<_, ReservedInstanceReservationValue, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "reservationValue" => {
                        obj.reservation_value = Some(ReservationValueDeserializer::deserialize(
                            "reservationValue",
                            stack,
                        )?);
                    }
                    "reservedInstanceId" => {
                        obj.reserved_instance_id = Some(StringDeserializer::deserialize(
                            "reservedInstanceId",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct ReservedInstanceReservationValueSetDeserializer;
impl ReservedInstanceReservationValueSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ReservedInstanceReservationValue>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ReservedInstanceReservationValueDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct ReservedInstanceStateDeserializer;
impl ReservedInstanceStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a Reserved Instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReservedInstances {
    /// <p>The Availability Zone in which the Reserved Instance can be used.</p>
    pub availability_zone: Option<String>,
    /// <p>The currency of the Reserved Instance. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is <code>USD</code>.</p>
    pub currency_code: Option<String>,
    /// <p>The duration of the Reserved Instance, in seconds.</p>
    pub duration: Option<i64>,
    /// <p>The time when the Reserved Instance expires.</p>
    pub end: Option<String>,
    /// <p>The purchase price of the Reserved Instance.</p>
    pub fixed_price: Option<f32>,
    /// <p>The number of reservations purchased.</p>
    pub instance_count: Option<i64>,
    /// <p>The tenancy of the instance.</p>
    pub instance_tenancy: Option<String>,
    /// <p>The instance type on which the Reserved Instance can be used.</p>
    pub instance_type: Option<String>,
    /// <p>The offering class of the Reserved Instance.</p>
    pub offering_class: Option<String>,
    /// <p>The Reserved Instance offering type.</p>
    pub offering_type: Option<String>,
    /// <p>The Reserved Instance product platform description.</p>
    pub product_description: Option<String>,
    /// <p>The recurring charge tag assigned to the resource.</p>
    pub recurring_charges: Option<Vec<RecurringCharge>>,
    /// <p>The ID of the Reserved Instance.</p>
    pub reserved_instances_id: Option<String>,
    /// <p>The scope of the Reserved Instance.</p>
    pub scope: Option<String>,
    /// <p>The date and time the Reserved Instance started.</p>
    pub start: Option<String>,
    /// <p>The state of the Reserved Instance purchase.</p>
    pub state: Option<String>,
    /// <p>Any tags assigned to the resource.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The usage price of the Reserved Instance, per hour.</p>
    pub usage_price: Option<f32>,
}

struct ReservedInstancesDeserializer;
impl ReservedInstancesDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ReservedInstances, XmlParseError> {
        deserialize_elements::<_, ReservedInstances, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "availabilityZone" => {
                    obj.availability_zone =
                        Some(StringDeserializer::deserialize("availabilityZone", stack)?);
                }
                "currencyCode" => {
                    obj.currency_code = Some(CurrencyCodeValuesDeserializer::deserialize(
                        "currencyCode",
                        stack,
                    )?);
                }
                "duration" => {
                    obj.duration = Some(LongDeserializer::deserialize("duration", stack)?);
                }
                "end" => {
                    obj.end = Some(DateTimeDeserializer::deserialize("end", stack)?);
                }
                "fixedPrice" => {
                    obj.fixed_price = Some(FloatDeserializer::deserialize("fixedPrice", stack)?);
                }
                "instanceCount" => {
                    obj.instance_count =
                        Some(IntegerDeserializer::deserialize("instanceCount", stack)?);
                }
                "instanceTenancy" => {
                    obj.instance_tenancy =
                        Some(TenancyDeserializer::deserialize("instanceTenancy", stack)?);
                }
                "instanceType" => {
                    obj.instance_type = Some(InstanceTypeDeserializer::deserialize(
                        "instanceType",
                        stack,
                    )?);
                }
                "offeringClass" => {
                    obj.offering_class = Some(OfferingClassTypeDeserializer::deserialize(
                        "offeringClass",
                        stack,
                    )?);
                }
                "offeringType" => {
                    obj.offering_type = Some(OfferingTypeValuesDeserializer::deserialize(
                        "offeringType",
                        stack,
                    )?);
                }
                "productDescription" => {
                    obj.product_description = Some(RIProductDescriptionDeserializer::deserialize(
                        "productDescription",
                        stack,
                    )?);
                }
                "recurringCharges" => {
                    obj.recurring_charges.get_or_insert(vec![]).extend(
                        RecurringChargesListDeserializer::deserialize("recurringCharges", stack)?,
                    );
                }
                "reservedInstancesId" => {
                    obj.reserved_instances_id = Some(StringDeserializer::deserialize(
                        "reservedInstancesId",
                        stack,
                    )?);
                }
                "scope" => {
                    obj.scope = Some(ScopeDeserializer::deserialize("scope", stack)?);
                }
                "start" => {
                    obj.start = Some(DateTimeDeserializer::deserialize("start", stack)?);
                }
                "state" => {
                    obj.state = Some(ReservedInstanceStateDeserializer::deserialize(
                        "state", stack,
                    )?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "usagePrice" => {
                    obj.usage_price = Some(FloatDeserializer::deserialize("usagePrice", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes the configuration settings for the modified Reserved Instances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReservedInstancesConfiguration {
    /// <p>The Availability Zone for the modified Reserved Instances.</p>
    pub availability_zone: Option<String>,
    /// <p><p>The number of modified Reserved Instances.</p> <note> <p>This is a required field for a request.</p> </note></p>
    pub instance_count: Option<i64>,
    /// <p>The instance type for the modified Reserved Instances.</p>
    pub instance_type: Option<String>,
    /// <p>The network platform of the modified Reserved Instances, which is either EC2-Classic or EC2-VPC.</p>
    pub platform: Option<String>,
    /// <p>Whether the Reserved Instance is applied to instances in a Region or instances in a specific Availability Zone.</p>
    pub scope: Option<String>,
}

struct ReservedInstancesConfigurationDeserializer;
impl ReservedInstancesConfigurationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ReservedInstancesConfiguration, XmlParseError> {
        deserialize_elements::<_, ReservedInstancesConfiguration, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "availabilityZone" => {
                        obj.availability_zone =
                            Some(StringDeserializer::deserialize("availabilityZone", stack)?);
                    }
                    "instanceCount" => {
                        obj.instance_count =
                            Some(IntegerDeserializer::deserialize("instanceCount", stack)?);
                    }
                    "instanceType" => {
                        obj.instance_type = Some(InstanceTypeDeserializer::deserialize(
                            "instanceType",
                            stack,
                        )?);
                    }
                    "platform" => {
                        obj.platform = Some(StringDeserializer::deserialize("platform", stack)?);
                    }
                    "scope" => {
                        obj.scope = Some(ScopeDeserializer::deserialize("scope", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}

/// Serialize `ReservedInstancesConfiguration` contents to a `SignedRequest`.
struct ReservedInstancesConfigurationSerializer;
impl ReservedInstancesConfigurationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ReservedInstancesConfiguration) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.availability_zone {
            params.put(&format!("{}{}", prefix, "AvailabilityZone"), &field_value);
        }
        if let Some(ref field_value) = obj.instance_count {
            params.put(&format!("{}{}", prefix, "InstanceCount"), &field_value);
        }
        if let Some(ref field_value) = obj.instance_type {
            params.put(&format!("{}{}", prefix, "InstanceType"), &field_value);
        }
        if let Some(ref field_value) = obj.platform {
            params.put(&format!("{}{}", prefix, "Platform"), &field_value);
        }
        if let Some(ref field_value) = obj.scope {
            params.put(&format!("{}{}", prefix, "Scope"), &field_value);
        }
    }
}

/// Serialize `ReservedInstancesConfigurationList` contents to a `SignedRequest`.
struct ReservedInstancesConfigurationListSerializer;
impl ReservedInstancesConfigurationListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<ReservedInstancesConfiguration>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            ReservedInstancesConfigurationSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes the ID of a Reserved Instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReservedInstancesId {
    /// <p>The ID of the Reserved Instance.</p>
    pub reserved_instances_id: Option<String>,
}

struct ReservedInstancesIdDeserializer;
impl ReservedInstancesIdDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ReservedInstancesId, XmlParseError> {
        deserialize_elements::<_, ReservedInstancesId, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "reservedInstancesId" => {
                    obj.reserved_instances_id = Some(StringDeserializer::deserialize(
                        "reservedInstancesId",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `ReservedInstancesIdStringList` contents to a `SignedRequest`.
struct ReservedInstancesIdStringListSerializer;
impl ReservedInstancesIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct ReservedInstancesListDeserializer;
impl ReservedInstancesListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ReservedInstances>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ReservedInstancesDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a Reserved Instance listing.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReservedInstancesListing {
    /// <p>A unique, case-sensitive key supplied by the client to ensure that the request is idempotent. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p>The time the listing was created.</p>
    pub create_date: Option<String>,
    /// <p>The number of instances in this state.</p>
    pub instance_counts: Option<Vec<InstanceCount>>,
    /// <p>The price of the Reserved Instance listing.</p>
    pub price_schedules: Option<Vec<PriceSchedule>>,
    /// <p>The ID of the Reserved Instance.</p>
    pub reserved_instances_id: Option<String>,
    /// <p>The ID of the Reserved Instance listing.</p>
    pub reserved_instances_listing_id: Option<String>,
    /// <p>The status of the Reserved Instance listing.</p>
    pub status: Option<String>,
    /// <p>The reason for the current status of the Reserved Instance listing. The response can be blank.</p>
    pub status_message: Option<String>,
    /// <p>Any tags assigned to the resource.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The last modified timestamp of the listing.</p>
    pub update_date: Option<String>,
}

struct ReservedInstancesListingDeserializer;
impl ReservedInstancesListingDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ReservedInstancesListing, XmlParseError> {
        deserialize_elements::<_, ReservedInstancesListing, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "clientToken" => {
                        obj.client_token =
                            Some(StringDeserializer::deserialize("clientToken", stack)?);
                    }
                    "createDate" => {
                        obj.create_date =
                            Some(DateTimeDeserializer::deserialize("createDate", stack)?);
                    }
                    "instanceCounts" => {
                        obj.instance_counts.get_or_insert(vec![]).extend(
                            InstanceCountListDeserializer::deserialize("instanceCounts", stack)?,
                        );
                    }
                    "priceSchedules" => {
                        obj.price_schedules.get_or_insert(vec![]).extend(
                            PriceScheduleListDeserializer::deserialize("priceSchedules", stack)?,
                        );
                    }
                    "reservedInstancesId" => {
                        obj.reserved_instances_id = Some(StringDeserializer::deserialize(
                            "reservedInstancesId",
                            stack,
                        )?);
                    }
                    "reservedInstancesListingId" => {
                        obj.reserved_instances_listing_id = Some(StringDeserializer::deserialize(
                            "reservedInstancesListingId",
                            stack,
                        )?);
                    }
                    "status" => {
                        obj.status = Some(ListingStatusDeserializer::deserialize("status", stack)?);
                    }
                    "statusMessage" => {
                        obj.status_message =
                            Some(StringDeserializer::deserialize("statusMessage", stack)?);
                    }
                    "tagSet" => {
                        obj.tags
                            .get_or_insert(vec![])
                            .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                    }
                    "updateDate" => {
                        obj.update_date =
                            Some(DateTimeDeserializer::deserialize("updateDate", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct ReservedInstancesListingListDeserializer;
impl ReservedInstancesListingListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ReservedInstancesListing>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ReservedInstancesListingDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a Reserved Instance modification.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReservedInstancesModification {
    /// <p>A unique, case-sensitive key supplied by the client to ensure that the request is idempotent. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p>The time when the modification request was created.</p>
    pub create_date: Option<String>,
    /// <p>The time for the modification to become effective.</p>
    pub effective_date: Option<String>,
    /// <p>Contains target configurations along with their corresponding new Reserved Instance IDs.</p>
    pub modification_results: Option<Vec<ReservedInstancesModificationResult>>,
    /// <p>The IDs of one or more Reserved Instances.</p>
    pub reserved_instances_ids: Option<Vec<ReservedInstancesId>>,
    /// <p>A unique ID for the Reserved Instance modification.</p>
    pub reserved_instances_modification_id: Option<String>,
    /// <p>The status of the Reserved Instances modification request.</p>
    pub status: Option<String>,
    /// <p>The reason for the status.</p>
    pub status_message: Option<String>,
    /// <p>The time when the modification request was last updated.</p>
    pub update_date: Option<String>,
}

struct ReservedInstancesModificationDeserializer;
impl ReservedInstancesModificationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ReservedInstancesModification, XmlParseError> {
        deserialize_elements::<_, ReservedInstancesModification, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "clientToken" => {
                        obj.client_token =
                            Some(StringDeserializer::deserialize("clientToken", stack)?);
                    }
                    "createDate" => {
                        obj.create_date =
                            Some(DateTimeDeserializer::deserialize("createDate", stack)?);
                    }
                    "effectiveDate" => {
                        obj.effective_date =
                            Some(DateTimeDeserializer::deserialize("effectiveDate", stack)?);
                    }
                    "modificationResultSet" => {
                        obj.modification_results.get_or_insert(vec![]).extend(
                            ReservedInstancesModificationResultListDeserializer::deserialize(
                                "modificationResultSet",
                                stack,
                            )?,
                        );
                    }
                    "reservedInstancesSet" => {
                        obj.reserved_instances_ids.get_or_insert(vec![]).extend(
                            ReservedIntancesIdsDeserializer::deserialize(
                                "reservedInstancesSet",
                                stack,
                            )?,
                        );
                    }
                    "reservedInstancesModificationId" => {
                        obj.reserved_instances_modification_id =
                            Some(StringDeserializer::deserialize(
                                "reservedInstancesModificationId",
                                stack,
                            )?);
                    }
                    "status" => {
                        obj.status = Some(StringDeserializer::deserialize("status", stack)?);
                    }
                    "statusMessage" => {
                        obj.status_message =
                            Some(StringDeserializer::deserialize("statusMessage", stack)?);
                    }
                    "updateDate" => {
                        obj.update_date =
                            Some(DateTimeDeserializer::deserialize("updateDate", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}

/// Serialize `ReservedInstancesModificationIdStringList` contents to a `SignedRequest`.
struct ReservedInstancesModificationIdStringListSerializer;
impl ReservedInstancesModificationIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct ReservedInstancesModificationListDeserializer;
impl ReservedInstancesModificationListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ReservedInstancesModification>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ReservedInstancesModificationDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the modification request/s.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReservedInstancesModificationResult {
    /// <p>The ID for the Reserved Instances that were created as part of the modification request. This field is only available when the modification is fulfilled.</p>
    pub reserved_instances_id: Option<String>,
    /// <p>The target Reserved Instances configurations supplied as part of the modification request.</p>
    pub target_configuration: Option<ReservedInstancesConfiguration>,
}

struct ReservedInstancesModificationResultDeserializer;
impl ReservedInstancesModificationResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ReservedInstancesModificationResult, XmlParseError> {
        deserialize_elements::<_, ReservedInstancesModificationResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "reservedInstancesId" => {
                        obj.reserved_instances_id = Some(StringDeserializer::deserialize(
                            "reservedInstancesId",
                            stack,
                        )?);
                    }
                    "targetConfiguration" => {
                        obj.target_configuration =
                            Some(ReservedInstancesConfigurationDeserializer::deserialize(
                                "targetConfiguration",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct ReservedInstancesModificationResultListDeserializer;
impl ReservedInstancesModificationResultListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ReservedInstancesModificationResult>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(
                    ReservedInstancesModificationResultDeserializer::deserialize("item", stack)?,
                );
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a Reserved Instance offering.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ReservedInstancesOffering {
    /// <p>The Availability Zone in which the Reserved Instance can be used.</p>
    pub availability_zone: Option<String>,
    /// <p>The currency of the Reserved Instance offering you are purchasing. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is <code>USD</code>.</p>
    pub currency_code: Option<String>,
    /// <p>The duration of the Reserved Instance, in seconds.</p>
    pub duration: Option<i64>,
    /// <p>The purchase price of the Reserved Instance.</p>
    pub fixed_price: Option<f32>,
    /// <p>The tenancy of the instance.</p>
    pub instance_tenancy: Option<String>,
    /// <p>The instance type on which the Reserved Instance can be used.</p>
    pub instance_type: Option<String>,
    /// <p>Indicates whether the offering is available through the Reserved Instance Marketplace (resale) or AWS. If it's a Reserved Instance Marketplace offering, this is <code>true</code>.</p>
    pub marketplace: Option<bool>,
    /// <p>If <code>convertible</code> it can be exchanged for Reserved Instances of the same or higher monetary value, with different configurations. If <code>standard</code>, it is not possible to perform an exchange.</p>
    pub offering_class: Option<String>,
    /// <p>The Reserved Instance offering type.</p>
    pub offering_type: Option<String>,
    /// <p>The pricing details of the Reserved Instance offering.</p>
    pub pricing_details: Option<Vec<PricingDetail>>,
    /// <p>The Reserved Instance product platform description.</p>
    pub product_description: Option<String>,
    /// <p>The recurring charge tag assigned to the resource.</p>
    pub recurring_charges: Option<Vec<RecurringCharge>>,
    /// <p>The ID of the Reserved Instance offering. This is the offering ID used in <a>GetReservedInstancesExchangeQuote</a> to confirm that an exchange can be made.</p>
    pub reserved_instances_offering_id: Option<String>,
    /// <p>Whether the Reserved Instance is applied to instances in a Region or an Availability Zone.</p>
    pub scope: Option<String>,
    /// <p>The usage price of the Reserved Instance, per hour.</p>
    pub usage_price: Option<f32>,
}

struct ReservedInstancesOfferingDeserializer;
impl ReservedInstancesOfferingDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ReservedInstancesOffering, XmlParseError> {
        deserialize_elements::<_, ReservedInstancesOffering, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "availabilityZone" => {
                        obj.availability_zone =
                            Some(StringDeserializer::deserialize("availabilityZone", stack)?);
                    }
                    "currencyCode" => {
                        obj.currency_code = Some(CurrencyCodeValuesDeserializer::deserialize(
                            "currencyCode",
                            stack,
                        )?);
                    }
                    "duration" => {
                        obj.duration = Some(LongDeserializer::deserialize("duration", stack)?);
                    }
                    "fixedPrice" => {
                        obj.fixed_price =
                            Some(FloatDeserializer::deserialize("fixedPrice", stack)?);
                    }
                    "instanceTenancy" => {
                        obj.instance_tenancy =
                            Some(TenancyDeserializer::deserialize("instanceTenancy", stack)?);
                    }
                    "instanceType" => {
                        obj.instance_type = Some(InstanceTypeDeserializer::deserialize(
                            "instanceType",
                            stack,
                        )?);
                    }
                    "marketplace" => {
                        obj.marketplace =
                            Some(BooleanDeserializer::deserialize("marketplace", stack)?);
                    }
                    "offeringClass" => {
                        obj.offering_class = Some(OfferingClassTypeDeserializer::deserialize(
                            "offeringClass",
                            stack,
                        )?);
                    }
                    "offeringType" => {
                        obj.offering_type = Some(OfferingTypeValuesDeserializer::deserialize(
                            "offeringType",
                            stack,
                        )?);
                    }
                    "pricingDetailsSet" => {
                        obj.pricing_details.get_or_insert(vec![]).extend(
                            PricingDetailsListDeserializer::deserialize(
                                "pricingDetailsSet",
                                stack,
                            )?,
                        );
                    }
                    "productDescription" => {
                        obj.product_description =
                            Some(RIProductDescriptionDeserializer::deserialize(
                                "productDescription",
                                stack,
                            )?);
                    }
                    "recurringCharges" => {
                        obj.recurring_charges.get_or_insert(vec![]).extend(
                            RecurringChargesListDeserializer::deserialize(
                                "recurringCharges",
                                stack,
                            )?,
                        );
                    }
                    "reservedInstancesOfferingId" => {
                        obj.reserved_instances_offering_id = Some(StringDeserializer::deserialize(
                            "reservedInstancesOfferingId",
                            stack,
                        )?);
                    }
                    "scope" => {
                        obj.scope = Some(ScopeDeserializer::deserialize("scope", stack)?);
                    }
                    "usagePrice" => {
                        obj.usage_price =
                            Some(FloatDeserializer::deserialize("usagePrice", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}

/// Serialize `ReservedInstancesOfferingIdStringList` contents to a `SignedRequest`.
struct ReservedInstancesOfferingIdStringListSerializer;
impl ReservedInstancesOfferingIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct ReservedInstancesOfferingListDeserializer;
impl ReservedInstancesOfferingListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ReservedInstancesOffering>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ReservedInstancesOfferingDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct ReservedIntancesIdsDeserializer;
impl ReservedIntancesIdsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ReservedInstancesId>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ReservedInstancesIdDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ResetEbsDefaultKmsKeyIdRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `ResetEbsDefaultKmsKeyIdRequest` contents to a `SignedRequest`.
struct ResetEbsDefaultKmsKeyIdRequestSerializer;
impl ResetEbsDefaultKmsKeyIdRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ResetEbsDefaultKmsKeyIdRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ResetEbsDefaultKmsKeyIdResult {
    /// <p>The full ARN of the default CMK that your account uses to encrypt an EBS volume when no CMK is specified in the API call that creates the volume.</p>
    pub kms_key_id: Option<String>,
}

struct ResetEbsDefaultKmsKeyIdResultDeserializer;
impl ResetEbsDefaultKmsKeyIdResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ResetEbsDefaultKmsKeyIdResult, XmlParseError> {
        deserialize_elements::<_, ResetEbsDefaultKmsKeyIdResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "kmsKeyId" => {
                        obj.kms_key_id = Some(StringDeserializer::deserialize("kmsKeyId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ResetFpgaImageAttributeRequest {
    /// <p>The attribute.</p>
    pub attribute: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the AFI.</p>
    pub fpga_image_id: String,
}

/// Serialize `ResetFpgaImageAttributeRequest` contents to a `SignedRequest`.
struct ResetFpgaImageAttributeRequestSerializer;
impl ResetFpgaImageAttributeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ResetFpgaImageAttributeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.attribute {
            params.put(&format!("{}{}", prefix, "Attribute"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "FpgaImageId"), &obj.fpga_image_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ResetFpgaImageAttributeResult {
    /// <p>Is <code>true</code> if the request succeeds, and an error otherwise.</p>
    pub return_: Option<bool>,
}

struct ResetFpgaImageAttributeResultDeserializer;
impl ResetFpgaImageAttributeResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ResetFpgaImageAttributeResult, XmlParseError> {
        deserialize_elements::<_, ResetFpgaImageAttributeResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for ResetImageAttribute.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ResetImageAttributeRequest {
    /// <p>The attribute to reset (currently you can only reset the launch permission attribute).</p>
    pub attribute: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the AMI.</p>
    pub image_id: String,
}

/// Serialize `ResetImageAttributeRequest` contents to a `SignedRequest`.
struct ResetImageAttributeRequestSerializer;
impl ResetImageAttributeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ResetImageAttributeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Attribute"), &obj.attribute);
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "ImageId"), &obj.image_id);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct ResetInstanceAttributeRequest {
    /// <p><p>The attribute to reset.</p> <important> <p>You can only reset the following attributes: <code>kernel</code> | <code>ramdisk</code> | <code>sourceDestCheck</code>. To change an instance attribute, use <a>ModifyInstanceAttribute</a>.</p> </important></p>
    pub attribute: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the instance.</p>
    pub instance_id: String,
}

/// Serialize `ResetInstanceAttributeRequest` contents to a `SignedRequest`.
struct ResetInstanceAttributeRequestSerializer;
impl ResetInstanceAttributeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ResetInstanceAttributeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Attribute"), &obj.attribute);
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "InstanceId"), &obj.instance_id);
    }
}

/// <p>Contains the parameters for ResetNetworkInterfaceAttribute.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ResetNetworkInterfaceAttributeRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: String,
    /// <p>The source/destination checking attribute. Resets the value to <code>true</code>.</p>
    pub source_dest_check: Option<String>,
}

/// Serialize `ResetNetworkInterfaceAttributeRequest` contents to a `SignedRequest`.
struct ResetNetworkInterfaceAttributeRequestSerializer;
impl ResetNetworkInterfaceAttributeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ResetNetworkInterfaceAttributeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "NetworkInterfaceId"),
            &obj.network_interface_id,
        );
        if let Some(ref field_value) = obj.source_dest_check {
            params.put(&format!("{}{}", prefix, "SourceDestCheck"), &field_value);
        }
    }
}

/// <p>Contains the parameters for ResetSnapshotAttribute.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ResetSnapshotAttributeRequest {
    /// <p>The attribute to reset. Currently, only the attribute for permission to create volumes can be reset.</p>
    pub attribute: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the snapshot.</p>
    pub snapshot_id: String,
}

/// Serialize `ResetSnapshotAttributeRequest` contents to a `SignedRequest`.
struct ResetSnapshotAttributeRequestSerializer;
impl ResetSnapshotAttributeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ResetSnapshotAttributeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Attribute"), &obj.attribute);
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "SnapshotId"), &obj.snapshot_id);
    }
}

/// Serialize `ResourceIdList` contents to a `SignedRequest`.
struct ResourceIdListSerializer;
impl ResourceIdListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// Serialize `ResourceList` contents to a `SignedRequest`.
struct ResourceListSerializer;
impl ResourceListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct ResourceTypeDeserializer;
impl ResourceTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes the error that's returned when you cannot delete a launch template version.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ResponseError {
    /// <p>The error code.</p>
    pub code: Option<String>,
    /// <p>The error message, if applicable.</p>
    pub message: Option<String>,
}

struct ResponseErrorDeserializer;
impl ResponseErrorDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ResponseError, XmlParseError> {
        deserialize_elements::<_, ResponseError, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "code" => {
                    obj.code = Some(LaunchTemplateErrorCodeDeserializer::deserialize(
                        "code", stack,
                    )?);
                }
                "message" => {
                    obj.message = Some(StringDeserializer::deserialize("message", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct ResponseHostIdListDeserializer;
impl ResponseHostIdListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(StringDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct ResponseHostIdSetDeserializer;
impl ResponseHostIdSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(StringDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>The information for a launch template. </p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ResponseLaunchTemplateData {
    /// <p>The block device mappings.</p>
    pub block_device_mappings: Option<Vec<LaunchTemplateBlockDeviceMapping>>,
    /// <p>Information about the Capacity Reservation targeting option.</p>
    pub capacity_reservation_specification:
        Option<LaunchTemplateCapacityReservationSpecificationResponse>,
    /// <p>The CPU options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html">Optimizing CPU Options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub cpu_options: Option<LaunchTemplateCpuOptions>,
    /// <p>The credit option for CPU usage of the instance.</p>
    pub credit_specification: Option<CreditSpecification>,
    /// <p>If set to <code>true</code>, indicates that the instance cannot be terminated using the Amazon EC2 console, command line tool, or API.</p>
    pub disable_api_termination: Option<bool>,
    /// <p>Indicates whether the instance is optimized for Amazon EBS I/O. </p>
    pub ebs_optimized: Option<bool>,
    /// <p>The elastic GPU specification.</p>
    pub elastic_gpu_specifications: Option<Vec<ElasticGpuSpecificationResponse>>,
    /// <p> The elastic inference accelerator for the instance. </p>
    pub elastic_inference_accelerators:
        Option<Vec<LaunchTemplateElasticInferenceAcceleratorResponse>>,
    /// <p>Indicates whether an instance is configured for hibernation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub hibernation_options: Option<LaunchTemplateHibernationOptions>,
    /// <p>The IAM instance profile.</p>
    pub iam_instance_profile: Option<LaunchTemplateIamInstanceProfileSpecification>,
    /// <p>The ID of the AMI that was used to launch the instance.</p>
    pub image_id: Option<String>,
    /// <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p>
    pub instance_initiated_shutdown_behavior: Option<String>,
    /// <p>The market (purchasing) option for the instances.</p>
    pub instance_market_options: Option<LaunchTemplateInstanceMarketOptions>,
    /// <p>The instance type.</p>
    pub instance_type: Option<String>,
    /// <p>The ID of the kernel, if applicable.</p>
    pub kernel_id: Option<String>,
    /// <p>The name of the key pair.</p>
    pub key_name: Option<String>,
    /// <p>The license configurations.</p>
    pub license_specifications: Option<Vec<LaunchTemplateLicenseConfiguration>>,
    /// <p>The monitoring for the instance.</p>
    pub monitoring: Option<LaunchTemplatesMonitoring>,
    /// <p>The network interfaces.</p>
    pub network_interfaces: Option<Vec<LaunchTemplateInstanceNetworkInterfaceSpecification>>,
    /// <p>The placement of the instance.</p>
    pub placement: Option<LaunchTemplatePlacement>,
    /// <p>The ID of the RAM disk, if applicable.</p>
    pub ram_disk_id: Option<String>,
    /// <p>The security group IDs.</p>
    pub security_group_ids: Option<Vec<String>>,
    /// <p>The security group names.</p>
    pub security_groups: Option<Vec<String>>,
    /// <p>The tags.</p>
    pub tag_specifications: Option<Vec<LaunchTemplateTagSpecification>>,
    /// <p>The user data for the instance. </p>
    pub user_data: Option<String>,
}

struct ResponseLaunchTemplateDataDeserializer;
impl ResponseLaunchTemplateDataDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ResponseLaunchTemplateData, XmlParseError> {
        deserialize_elements::<_, ResponseLaunchTemplateData, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "blockDeviceMappingSet" => {
                        obj.block_device_mappings.get_or_insert(vec![]).extend(
                            LaunchTemplateBlockDeviceMappingListDeserializer::deserialize(
                                "blockDeviceMappingSet",
                                stack,
                            )?,
                        );
                    }
                    "capacityReservationSpecification" => {
                        obj.capacity_reservation_specification = Some(LaunchTemplateCapacityReservationSpecificationResponseDeserializer::deserialize("capacityReservationSpecification", stack)?);
                    }
                    "cpuOptions" => {
                        obj.cpu_options = Some(LaunchTemplateCpuOptionsDeserializer::deserialize(
                            "cpuOptions",
                            stack,
                        )?);
                    }
                    "creditSpecification" => {
                        obj.credit_specification =
                            Some(CreditSpecificationDeserializer::deserialize(
                                "creditSpecification",
                                stack,
                            )?);
                    }
                    "disableApiTermination" => {
                        obj.disable_api_termination = Some(BooleanDeserializer::deserialize(
                            "disableApiTermination",
                            stack,
                        )?);
                    }
                    "ebsOptimized" => {
                        obj.ebs_optimized =
                            Some(BooleanDeserializer::deserialize("ebsOptimized", stack)?);
                    }
                    "elasticGpuSpecificationSet" => {
                        obj.elastic_gpu_specifications.get_or_insert(vec![]).extend(
                            ElasticGpuSpecificationResponseListDeserializer::deserialize(
                                "elasticGpuSpecificationSet",
                                stack,
                            )?,
                        );
                    }
                    "elasticInferenceAcceleratorSet" => {
                        obj.elastic_inference_accelerators
                                .get_or_insert(vec![])
                                .extend(LaunchTemplateElasticInferenceAcceleratorResponseListDeserializer::deserialize("elasticInferenceAcceleratorSet", stack)?);
                    }
                    "hibernationOptions" => {
                        obj.hibernation_options =
                            Some(LaunchTemplateHibernationOptionsDeserializer::deserialize(
                                "hibernationOptions",
                                stack,
                            )?);
                    }
                    "iamInstanceProfile" => {
                        obj.iam_instance_profile = Some(
                            LaunchTemplateIamInstanceProfileSpecificationDeserializer::deserialize(
                                "iamInstanceProfile",
                                stack,
                            )?,
                        );
                    }
                    "imageId" => {
                        obj.image_id = Some(StringDeserializer::deserialize("imageId", stack)?);
                    }
                    "instanceInitiatedShutdownBehavior" => {
                        obj.instance_initiated_shutdown_behavior =
                            Some(ShutdownBehaviorDeserializer::deserialize(
                                "instanceInitiatedShutdownBehavior",
                                stack,
                            )?);
                    }
                    "instanceMarketOptions" => {
                        obj.instance_market_options = Some(
                            LaunchTemplateInstanceMarketOptionsDeserializer::deserialize(
                                "instanceMarketOptions",
                                stack,
                            )?,
                        );
                    }
                    "instanceType" => {
                        obj.instance_type = Some(InstanceTypeDeserializer::deserialize(
                            "instanceType",
                            stack,
                        )?);
                    }
                    "kernelId" => {
                        obj.kernel_id = Some(StringDeserializer::deserialize("kernelId", stack)?);
                    }
                    "keyName" => {
                        obj.key_name = Some(StringDeserializer::deserialize("keyName", stack)?);
                    }
                    "licenseSet" => {
                        obj.license_specifications.get_or_insert(vec![]).extend(
                            LaunchTemplateLicenseListDeserializer::deserialize(
                                "licenseSet",
                                stack,
                            )?,
                        );
                    }
                    "monitoring" => {
                        obj.monitoring = Some(LaunchTemplatesMonitoringDeserializer::deserialize(
                            "monitoring",
                            stack,
                        )?);
                    }
                    "networkInterfaceSet" => {
                        obj.network_interfaces
                                .get_or_insert(vec![])
                                .extend(LaunchTemplateInstanceNetworkInterfaceSpecificationListDeserializer::deserialize("networkInterfaceSet", stack)?);
                    }
                    "placement" => {
                        obj.placement = Some(LaunchTemplatePlacementDeserializer::deserialize(
                            "placement",
                            stack,
                        )?);
                    }
                    "ramDiskId" => {
                        obj.ram_disk_id =
                            Some(StringDeserializer::deserialize("ramDiskId", stack)?);
                    }
                    "securityGroupIdSet" => {
                        obj.security_group_ids.get_or_insert(vec![]).extend(
                            ValueStringListDeserializer::deserialize("securityGroupIdSet", stack)?,
                        );
                    }
                    "securityGroupSet" => {
                        obj.security_groups.get_or_insert(vec![]).extend(
                            ValueStringListDeserializer::deserialize("securityGroupSet", stack)?,
                        );
                    }
                    "tagSpecificationSet" => {
                        obj.tag_specifications.get_or_insert(vec![]).extend(
                            LaunchTemplateTagSpecificationListDeserializer::deserialize(
                                "tagSpecificationSet",
                                stack,
                            )?,
                        );
                    }
                    "userData" => {
                        obj.user_data = Some(StringDeserializer::deserialize("userData", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}

/// Serialize `RestorableByStringList` contents to a `SignedRequest`.
struct RestorableByStringListSerializer;
impl RestorableByStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct RestoreAddressToClassicRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The Elastic IP address.</p>
    pub public_ip: String,
}

/// Serialize `RestoreAddressToClassicRequest` contents to a `SignedRequest`.
struct RestoreAddressToClassicRequestSerializer;
impl RestoreAddressToClassicRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RestoreAddressToClassicRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "PublicIp"), &obj.public_ip);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct RestoreAddressToClassicResult {
    /// <p>The Elastic IP address.</p>
    pub public_ip: Option<String>,
    /// <p>The move status for the IP address.</p>
    pub status: Option<String>,
}

struct RestoreAddressToClassicResultDeserializer;
impl RestoreAddressToClassicResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RestoreAddressToClassicResult, XmlParseError> {
        deserialize_elements::<_, RestoreAddressToClassicResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "publicIp" => {
                        obj.public_ip = Some(StringDeserializer::deserialize("publicIp", stack)?);
                    }
                    "status" => {
                        obj.status = Some(StatusDeserializer::deserialize("status", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct RevokeClientVpnIngressRequest {
    /// <p>The ID of the Active Directory group for which to revoke access. </p>
    pub access_group_id: Option<String>,
    /// <p>The ID of the Client VPN endpoint with which the authorization rule is associated.</p>
    pub client_vpn_endpoint_id: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Indicates whether access should be revoked for all clients.</p>
    pub revoke_all_groups: Option<bool>,
    /// <p>The IPv4 address range, in CIDR notation, of the network for which access is being removed.</p>
    pub target_network_cidr: String,
}

/// Serialize `RevokeClientVpnIngressRequest` contents to a `SignedRequest`.
struct RevokeClientVpnIngressRequestSerializer;
impl RevokeClientVpnIngressRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RevokeClientVpnIngressRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.access_group_id {
            params.put(&format!("{}{}", prefix, "AccessGroupId"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "ClientVpnEndpointId"),
            &obj.client_vpn_endpoint_id,
        );
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.revoke_all_groups {
            params.put(&format!("{}{}", prefix, "RevokeAllGroups"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TargetNetworkCidr"),
            &obj.target_network_cidr,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct RevokeClientVpnIngressResult {
    /// <p>The current state of the authorization rule.</p>
    pub status: Option<ClientVpnAuthorizationRuleStatus>,
}

struct RevokeClientVpnIngressResultDeserializer;
impl RevokeClientVpnIngressResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RevokeClientVpnIngressResult, XmlParseError> {
        deserialize_elements::<_, RevokeClientVpnIngressResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "status" => {
                        obj.status =
                            Some(ClientVpnAuthorizationRuleStatusDeserializer::deserialize(
                                "status", stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct RevokeSecurityGroupEgressRequest {
    /// <p>Not supported. Use a set of IP permissions to specify the CIDR.</p>
    pub cidr_ip: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Not supported. Use a set of IP permissions to specify the port.</p>
    pub from_port: Option<i64>,
    /// <p>The ID of the security group.</p>
    pub group_id: String,
    /// <p>The sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.</p>
    pub ip_permissions: Option<Vec<IpPermission>>,
    /// <p>Not supported. Use a set of IP permissions to specify the protocol name or number.</p>
    pub ip_protocol: Option<String>,
    /// <p>Not supported. Use a set of IP permissions to specify a destination security group.</p>
    pub source_security_group_name: Option<String>,
    /// <p>Not supported. Use a set of IP permissions to specify a destination security group.</p>
    pub source_security_group_owner_id: Option<String>,
    /// <p>Not supported. Use a set of IP permissions to specify the port.</p>
    pub to_port: Option<i64>,
}

/// Serialize `RevokeSecurityGroupEgressRequest` contents to a `SignedRequest`.
struct RevokeSecurityGroupEgressRequestSerializer;
impl RevokeSecurityGroupEgressRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RevokeSecurityGroupEgressRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.cidr_ip {
            params.put(&format!("{}{}", prefix, "CidrIp"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.from_port {
            params.put(&format!("{}{}", prefix, "FromPort"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "GroupId"), &obj.group_id);
        if let Some(ref field_value) = obj.ip_permissions {
            IpPermissionListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "IpPermissions"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.ip_protocol {
            params.put(&format!("{}{}", prefix, "IpProtocol"), &field_value);
        }
        if let Some(ref field_value) = obj.source_security_group_name {
            params.put(
                &format!("{}{}", prefix, "SourceSecurityGroupName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.source_security_group_owner_id {
            params.put(
                &format!("{}{}", prefix, "SourceSecurityGroupOwnerId"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.to_port {
            params.put(&format!("{}{}", prefix, "ToPort"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct RevokeSecurityGroupIngressRequest {
    /// <p>The CIDR IP address range. You can't specify this parameter when specifying a source security group.</p>
    pub cidr_ip: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number, use <code>-1</code> to specify all ICMP types.</p>
    pub from_port: Option<i64>,
    /// <p>The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.</p>
    pub group_id: Option<String>,
    /// <p>[EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.</p>
    pub group_name: Option<String>,
    /// <p>The sets of IP permissions. You can't specify a source security group and a CIDR IP address range in the same set of permissions.</p>
    pub ip_permissions: Option<Vec<IpPermission>>,
    /// <p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>) or number (see <a href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers</a>). Use <code>-1</code> to specify all.</p>
    pub ip_protocol: Option<String>,
    /// <p>[EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. For EC2-VPC, the source security group must be in the same VPC. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.</p>
    pub source_security_group_name: Option<String>,
    /// <p>[EC2-Classic] The AWS account ID of the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.</p>
    pub source_security_group_owner_id: Option<String>,
    /// <p>The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number, use <code>-1</code> to specify all ICMP codes for the ICMP type.</p>
    pub to_port: Option<i64>,
}

/// Serialize `RevokeSecurityGroupIngressRequest` contents to a `SignedRequest`.
struct RevokeSecurityGroupIngressRequestSerializer;
impl RevokeSecurityGroupIngressRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RevokeSecurityGroupIngressRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.cidr_ip {
            params.put(&format!("{}{}", prefix, "CidrIp"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.from_port {
            params.put(&format!("{}{}", prefix, "FromPort"), &field_value);
        }
        if let Some(ref field_value) = obj.group_id {
            params.put(&format!("{}{}", prefix, "GroupId"), &field_value);
        }
        if let Some(ref field_value) = obj.group_name {
            params.put(&format!("{}{}", prefix, "GroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.ip_permissions {
            IpPermissionListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "IpPermissions"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.ip_protocol {
            params.put(&format!("{}{}", prefix, "IpProtocol"), &field_value);
        }
        if let Some(ref field_value) = obj.source_security_group_name {
            params.put(
                &format!("{}{}", prefix, "SourceSecurityGroupName"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.source_security_group_owner_id {
            params.put(
                &format!("{}{}", prefix, "SourceSecurityGroupOwnerId"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.to_port {
            params.put(&format!("{}{}", prefix, "ToPort"), &field_value);
        }
    }
}

/// <p>Describes a route in a route table.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct Route {
    /// <p>The IPv4 CIDR block used for the destination match.</p>
    pub destination_cidr_block: Option<String>,
    /// <p>The IPv6 CIDR block used for the destination match.</p>
    pub destination_ipv_6_cidr_block: Option<String>,
    /// <p>The prefix of the AWS service.</p>
    pub destination_prefix_list_id: Option<String>,
    /// <p>The ID of the egress-only internet gateway.</p>
    pub egress_only_internet_gateway_id: Option<String>,
    /// <p>The ID of a gateway attached to your VPC.</p>
    pub gateway_id: Option<String>,
    /// <p>The ID of a NAT instance in your VPC.</p>
    pub instance_id: Option<String>,
    /// <p>The AWS account ID of the owner of the instance.</p>
    pub instance_owner_id: Option<String>,
    /// <p>The ID of a NAT gateway.</p>
    pub nat_gateway_id: Option<String>,
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: Option<String>,
    /// <p><p>Describes how the route was created.</p> <ul> <li> <p> <code>CreateRouteTable</code> - The route was automatically created when the route table was created.</p> </li> <li> <p> <code>CreateRoute</code> - The route was manually added to the route table.</p> </li> <li> <p> <code>EnableVgwRoutePropagation</code> - The route was propagated by route propagation.</p> </li> </ul></p>
    pub origin: Option<String>,
    /// <p>The state of the route. The <code>blackhole</code> state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, or the specified NAT instance has been terminated).</p>
    pub state: Option<String>,
    /// <p>The ID of a transit gateway.</p>
    pub transit_gateway_id: Option<String>,
    /// <p>The ID of a VPC peering connection.</p>
    pub vpc_peering_connection_id: Option<String>,
}

struct RouteDeserializer;
impl RouteDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<Route, XmlParseError> {
        deserialize_elements::<_, Route, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "destinationCidrBlock" => {
                    obj.destination_cidr_block = Some(StringDeserializer::deserialize(
                        "destinationCidrBlock",
                        stack,
                    )?);
                }
                "destinationIpv6CidrBlock" => {
                    obj.destination_ipv_6_cidr_block = Some(StringDeserializer::deserialize(
                        "destinationIpv6CidrBlock",
                        stack,
                    )?);
                }
                "destinationPrefixListId" => {
                    obj.destination_prefix_list_id = Some(StringDeserializer::deserialize(
                        "destinationPrefixListId",
                        stack,
                    )?);
                }
                "egressOnlyInternetGatewayId" => {
                    obj.egress_only_internet_gateway_id = Some(StringDeserializer::deserialize(
                        "egressOnlyInternetGatewayId",
                        stack,
                    )?);
                }
                "gatewayId" => {
                    obj.gateway_id = Some(StringDeserializer::deserialize("gatewayId", stack)?);
                }
                "instanceId" => {
                    obj.instance_id = Some(StringDeserializer::deserialize("instanceId", stack)?);
                }
                "instanceOwnerId" => {
                    obj.instance_owner_id =
                        Some(StringDeserializer::deserialize("instanceOwnerId", stack)?);
                }
                "natGatewayId" => {
                    obj.nat_gateway_id =
                        Some(StringDeserializer::deserialize("natGatewayId", stack)?);
                }
                "networkInterfaceId" => {
                    obj.network_interface_id = Some(StringDeserializer::deserialize(
                        "networkInterfaceId",
                        stack,
                    )?);
                }
                "origin" => {
                    obj.origin = Some(RouteOriginDeserializer::deserialize("origin", stack)?);
                }
                "state" => {
                    obj.state = Some(RouteStateDeserializer::deserialize("state", stack)?);
                }
                "transitGatewayId" => {
                    obj.transit_gateway_id =
                        Some(StringDeserializer::deserialize("transitGatewayId", stack)?);
                }
                "vpcPeeringConnectionId" => {
                    obj.vpc_peering_connection_id = Some(StringDeserializer::deserialize(
                        "vpcPeeringConnectionId",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct RouteListDeserializer;
impl RouteListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<Route>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(RouteDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct RouteOriginDeserializer;
impl RouteOriginDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct RouteStateDeserializer;
impl RouteStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a route table.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct RouteTable {
    /// <p>The associations between the route table and one or more subnets.</p>
    pub associations: Option<Vec<RouteTableAssociation>>,
    /// <p>The ID of the AWS account that owns the route table.</p>
    pub owner_id: Option<String>,
    /// <p>Any virtual private gateway (VGW) propagating routes.</p>
    pub propagating_vgws: Option<Vec<PropagatingVgw>>,
    /// <p>The ID of the route table.</p>
    pub route_table_id: Option<String>,
    /// <p>The routes in the route table.</p>
    pub routes: Option<Vec<Route>>,
    /// <p>Any tags assigned to the route table.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: Option<String>,
}

struct RouteTableDeserializer;
impl RouteTableDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RouteTable, XmlParseError> {
        deserialize_elements::<_, RouteTable, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "associationSet" => {
                    obj.associations.get_or_insert(vec![]).extend(
                        RouteTableAssociationListDeserializer::deserialize(
                            "associationSet",
                            stack,
                        )?,
                    );
                }
                "ownerId" => {
                    obj.owner_id = Some(StringDeserializer::deserialize("ownerId", stack)?);
                }
                "propagatingVgwSet" => {
                    obj.propagating_vgws.get_or_insert(vec![]).extend(
                        PropagatingVgwListDeserializer::deserialize("propagatingVgwSet", stack)?,
                    );
                }
                "routeTableId" => {
                    obj.route_table_id =
                        Some(StringDeserializer::deserialize("routeTableId", stack)?);
                }
                "routeSet" => {
                    obj.routes
                        .get_or_insert(vec![])
                        .extend(RouteListDeserializer::deserialize("routeSet", stack)?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "vpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes an association between a route table and a subnet.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct RouteTableAssociation {
    /// <p>Indicates whether this is the main route table.</p>
    pub main: Option<bool>,
    /// <p>The ID of the association between a route table and a subnet.</p>
    pub route_table_association_id: Option<String>,
    /// <p>The ID of the route table.</p>
    pub route_table_id: Option<String>,
    /// <p>The ID of the subnet. A subnet ID is not returned for an implicit association.</p>
    pub subnet_id: Option<String>,
}

struct RouteTableAssociationDeserializer;
impl RouteTableAssociationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RouteTableAssociation, XmlParseError> {
        deserialize_elements::<_, RouteTableAssociation, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "main" => {
                    obj.main = Some(BooleanDeserializer::deserialize("main", stack)?);
                }
                "routeTableAssociationId" => {
                    obj.route_table_association_id = Some(StringDeserializer::deserialize(
                        "routeTableAssociationId",
                        stack,
                    )?);
                }
                "routeTableId" => {
                    obj.route_table_id =
                        Some(StringDeserializer::deserialize("routeTableId", stack)?);
                }
                "subnetId" => {
                    obj.subnet_id = Some(StringDeserializer::deserialize("subnetId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct RouteTableAssociationListDeserializer;
impl RouteTableAssociationListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<RouteTableAssociation>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(RouteTableAssociationDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct RouteTableListDeserializer;
impl RouteTableListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<RouteTable>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(RouteTableDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct RuleActionDeserializer;
impl RuleActionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes the monitoring of an instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct RunInstancesMonitoringEnabled {
    /// <p>Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.</p>
    pub enabled: bool,
}

struct RunInstancesMonitoringEnabledDeserializer;
impl RunInstancesMonitoringEnabledDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RunInstancesMonitoringEnabled, XmlParseError> {
        deserialize_elements::<_, RunInstancesMonitoringEnabled, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "enabled" => {
                        obj.enabled = BooleanDeserializer::deserialize("enabled", stack)?;
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}

/// Serialize `RunInstancesMonitoringEnabled` contents to a `SignedRequest`.
struct RunInstancesMonitoringEnabledSerializer;
impl RunInstancesMonitoringEnabledSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RunInstancesMonitoringEnabled) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Enabled"), &obj.enabled);
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct RunInstancesRequest {
    /// <p>Reserved.</p>
    pub additional_info: Option<String>,
    /// <p>The block device mapping entries.</p>
    pub block_device_mappings: Option<Vec<BlockDeviceMapping>>,
    /// <p>Information about the Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to <code>open</code>, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p>
    pub capacity_reservation_specification: Option<CapacityReservationSpecification>,
    /// <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p> <p>Constraints: Maximum 64 ASCII characters</p>
    pub client_token: Option<String>,
    /// <p>The CPU options for the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html">Optimizing CPU Options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub cpu_options: Option<CpuOptionsRequest>,
    /// <p>The credit option for CPU usage of the T2 or T3 instance. Valid values are <code>standard</code> and <code>unlimited</code>. To change this attribute after launch, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceCreditSpecification.html"> ModifyInstanceCreditSpecification</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable Performance Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Default: <code>standard</code> (T2 instances) or <code>unlimited</code> (T3 instances)</p>
    pub credit_specification: Option<CreditSpecificationRequest>,
    /// <p>If you set this parameter to <code>true</code>, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html">ModifyInstanceAttribute</a>. Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code> to <code>terminate</code>, you can terminate the instance by running the shutdown command from the instance.</p> <p>Default: <code>false</code> </p>
    pub disable_api_termination: Option<bool>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p> <p>Default: <code>false</code> </p>
    pub ebs_optimized: Option<bool>,
    /// <p>An elastic GPU to associate with the instance. An Elastic GPU is a GPU resource that you can attach to your Windows instance to accelerate the graphics performance of your applications. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html"> Amazon EC2 Elastic GPUs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub elastic_gpu_specification: Option<Vec<ElasticGpuSpecification>>,
    /// <p>An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads.</p>
    pub elastic_inference_accelerators: Option<Vec<ElasticInferenceAccelerator>>,
    /// <p>Indicates whether an instance is enabled for hibernation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    pub hibernation_options: Option<HibernationOptionsRequest>,
    /// <p>The IAM instance profile.</p>
    pub iam_instance_profile: Option<IamInstanceProfileSpecification>,
    /// <p>The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.</p>
    pub image_id: Option<String>,
    /// <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p> <p>Default: <code>stop</code> </p>
    pub instance_initiated_shutdown_behavior: Option<String>,
    /// <p>The market (purchasing) option for the instances.</p> <p>For <a>RunInstances</a>, persistent Spot Instance requests are only supported when <b>InstanceInterruptionBehavior</b> is set to either <code>hibernate</code> or <code>stop</code>.</p>
    pub instance_market_options: Option<InstanceMarketOptionsRequest>,
    /// <p>The instance type. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Default: <code>m1.small</code> </p>
    pub instance_type: Option<String>,
    /// <p>[EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.</p> <p>You cannot specify this option and the network interfaces option in the same request.</p>
    pub ipv_6_address_count: Option<i64>,
    /// <p>[EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.</p> <p>You cannot specify this option and the network interfaces option in the same request.</p>
    pub ipv_6_addresses: Option<Vec<InstanceIpv6Address>>,
    /// <p><p>The ID of the kernel.</p> <important> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html"> PV-GRUB</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </important></p>
    pub kernel_id: Option<String>,
    /// <p><p>The name of the key pair. You can create a key pair using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html">CreateKeyPair</a> or <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html">ImportKeyPair</a>.</p> <important> <p>If you do not specify a key pair, you can&#39;t connect to the instance unless you choose an AMI that is configured to allow users another way to log in.</p> </important></p>
    pub key_name: Option<String>,
    /// <p>The launch template to use to launch the instances. Any parameters that you specify in <a>RunInstances</a> override the same parameters in the launch template. You can specify either the name or ID of a launch template, but not both.</p>
    pub launch_template: Option<LaunchTemplateSpecification>,
    /// <p>The license configurations.</p>
    pub license_specifications: Option<Vec<LicenseConfigurationRequest>>,
    /// <p>The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above <code>MinCount</code>.</p> <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I run in Amazon EC2</a> in the Amazon EC2 FAQ.</p>
    pub max_count: i64,
    /// <p>The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances.</p> <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href="http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2">How many instances can I run in Amazon EC2</a> in the Amazon EC2 General FAQ.</p>
    pub min_count: i64,
    /// <p>Specifies whether detailed monitoring is enabled for the instance.</p>
    pub monitoring: Option<RunInstancesMonitoringEnabled>,
    /// <p>The network interfaces to associate with the instance. If you specify a network interface, you must specify any security groups as part of the network interface.</p>
    pub network_interfaces: Option<Vec<InstanceNetworkInterfaceSpecification>>,
    /// <p>The placement for the instance.</p>
    pub placement: Option<Placement>,
    /// <p>[EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet.</p> <p>Only one private IP address can be designated as primary. You can't specify this option if you've specified the option to designate a private IP address as the primary IP address in a network interface specification. You cannot specify this option if you're launching more than one instance in the request.</p> <p>You cannot specify this option and the network interfaces option in the same request.</p>
    pub private_ip_address: Option<String>,
    /// <p><p>The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, go to the AWS Resource Center and search for the kernel ID.</p> <important> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html"> PV-GRUB</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </important></p>
    pub ramdisk_id: Option<String>,
    /// <p>The IDs of the security groups. You can create a security group using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html">CreateSecurityGroup</a>.</p> <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p>
    pub security_group_ids: Option<Vec<String>>,
    /// <p>[EC2-Classic, default VPC] The names of the security groups. For a nondefault VPC, you must use security group IDs instead.</p> <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p> <p>Default: Amazon EC2 uses the default security group.</p>
    pub security_groups: Option<Vec<String>>,
    /// <p>[EC2-VPC] The ID of the subnet to launch the instance into.</p> <p>You cannot specify this option and the network interfaces option in the same request.</p>
    pub subnet_id: Option<String>,
    /// <p>The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html">CreateTags</a>.</p>
    pub tag_specifications: Option<Vec<TagSpecification>>,
    /// <p>The user data to make available to the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html">Running Commands on Your Linux Instance at Launch</a> (Linux) and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html#instancedata-add-user-data">Adding User Data</a> (Windows). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.</p>
    pub user_data: Option<String>,
}

/// Serialize `RunInstancesRequest` contents to a `SignedRequest`.
struct RunInstancesRequestSerializer;
impl RunInstancesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RunInstancesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.additional_info {
            params.put(&format!("{}{}", prefix, "AdditionalInfo"), &field_value);
        }
        if let Some(ref field_value) = obj.block_device_mappings {
            BlockDeviceMappingRequestListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "BlockDeviceMapping"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.capacity_reservation_specification {
            CapacityReservationSpecificationSerializer::serialize(
                params,
                &format!("{}{}", prefix, "CapacityReservationSpecification"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        if let Some(ref field_value) = obj.cpu_options {
            CpuOptionsRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "CpuOptions"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.credit_specification {
            CreditSpecificationRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "CreditSpecification"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.disable_api_termination {
            params.put(
                &format!("{}{}", prefix, "DisableApiTermination"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.ebs_optimized {
            params.put(&format!("{}{}", prefix, "EbsOptimized"), &field_value);
        }
        if let Some(ref field_value) = obj.elastic_gpu_specification {
            ElasticGpuSpecificationsSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ElasticGpuSpecification"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.elastic_inference_accelerators {
            ElasticInferenceAcceleratorsSerializer::serialize(
                params,
                &format!("{}{}", prefix, "ElasticInferenceAccelerator"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.hibernation_options {
            HibernationOptionsRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "HibernationOptions"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.iam_instance_profile {
            IamInstanceProfileSpecificationSerializer::serialize(
                params,
                &format!("{}{}", prefix, "IamInstanceProfile"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.image_id {
            params.put(&format!("{}{}", prefix, "ImageId"), &field_value);
        }
        if let Some(ref field_value) = obj.instance_initiated_shutdown_behavior {
            params.put(
                &format!("{}{}", prefix, "InstanceInitiatedShutdownBehavior"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.instance_market_options {
            InstanceMarketOptionsRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "InstanceMarketOptions"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.instance_type {
            params.put(&format!("{}{}", prefix, "InstanceType"), &field_value);
        }
        if let Some(ref field_value) = obj.ipv_6_address_count {
            params.put(&format!("{}{}", prefix, "Ipv6AddressCount"), &field_value);
        }
        if let Some(ref field_value) = obj.ipv_6_addresses {
            InstanceIpv6AddressListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Ipv6Address"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.kernel_id {
            params.put(&format!("{}{}", prefix, "KernelId"), &field_value);
        }
        if let Some(ref field_value) = obj.key_name {
            params.put(&format!("{}{}", prefix, "KeyName"), &field_value);
        }
        if let Some(ref field_value) = obj.launch_template {
            LaunchTemplateSpecificationSerializer::serialize(
                params,
                &format!("{}{}", prefix, "LaunchTemplate"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.license_specifications {
            LicenseSpecificationListRequestSerializer::serialize(
                params,
                &format!("{}{}", prefix, "LicenseSpecification"),
                field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "MaxCount"), &obj.max_count);
        params.put(&format!("{}{}", prefix, "MinCount"), &obj.min_count);
        if let Some(ref field_value) = obj.monitoring {
            RunInstancesMonitoringEnabledSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Monitoring"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.network_interfaces {
            InstanceNetworkInterfaceSpecificationListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "NetworkInterface"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.placement {
            PlacementSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Placement"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.private_ip_address {
            params.put(&format!("{}{}", prefix, "PrivateIpAddress"), &field_value);
        }
        if let Some(ref field_value) = obj.ramdisk_id {
            params.put(&format!("{}{}", prefix, "RamdiskId"), &field_value);
        }
        if let Some(ref field_value) = obj.security_group_ids {
            SecurityGroupIdStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SecurityGroupId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.security_groups {
            SecurityGroupStringListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SecurityGroup"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.subnet_id {
            params.put(&format!("{}{}", prefix, "SubnetId"), &field_value);
        }
        if let Some(ref field_value) = obj.tag_specifications {
            TagSpecificationListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "TagSpecification"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.user_data {
            params.put(&format!("{}{}", prefix, "UserData"), &field_value);
        }
    }
}

/// <p>Contains the parameters for RunScheduledInstances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct RunScheduledInstancesRequest {
    /// <p>Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The number of instances.</p> <p>Default: 1</p>
    pub instance_count: Option<i64>,
    /// <p>The launch specification. You must match the instance type, Availability Zone, network, and platform of the schedule that you purchased.</p>
    pub launch_specification: ScheduledInstancesLaunchSpecification,
    /// <p>The Scheduled Instance ID.</p>
    pub scheduled_instance_id: String,
}

/// Serialize `RunScheduledInstancesRequest` contents to a `SignedRequest`.
struct RunScheduledInstancesRequestSerializer;
impl RunScheduledInstancesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &RunScheduledInstancesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.instance_count {
            params.put(&format!("{}{}", prefix, "InstanceCount"), &field_value);
        }
        ScheduledInstancesLaunchSpecificationSerializer::serialize(
            params,
            &format!("{}{}", prefix, "LaunchSpecification"),
            &obj.launch_specification,
        );
        params.put(
            &format!("{}{}", prefix, "ScheduledInstanceId"),
            &obj.scheduled_instance_id,
        );
    }
}

/// <p>Contains the output of RunScheduledInstances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct RunScheduledInstancesResult {
    /// <p>The IDs of the newly launched instances.</p>
    pub instance_id_set: Option<Vec<String>>,
}

struct RunScheduledInstancesResultDeserializer;
impl RunScheduledInstancesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<RunScheduledInstancesResult, XmlParseError> {
        deserialize_elements::<_, RunScheduledInstancesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "instanceIdSet" => {
                        obj.instance_id_set.get_or_insert(vec![]).extend(
                            InstanceIdSetDeserializer::deserialize("instanceIdSet", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes the storage parameters for S3 and S3 buckets for an instance store-backed AMI.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct S3Storage {
    /// <p>The access key ID of the owner of the bucket. Before you specify a value for your access key ID, review and follow the guidance in <a href="https://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html">Best Practices for Managing AWS Access Keys</a>.</p>
    pub aws_access_key_id: Option<String>,
    /// <p>The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.</p>
    pub bucket: Option<String>,
    /// <p>The beginning of the file name of the AMI.</p>
    pub prefix: Option<String>,
    /// <p>An Amazon S3 upload policy that gives Amazon EC2 permission to upload items into Amazon S3 on your behalf.</p>
    pub upload_policy: Option<bytes::Bytes>,
    /// <p>The signature of the JSON document.</p>
    pub upload_policy_signature: Option<String>,
}

struct S3StorageDeserializer;
impl S3StorageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<S3Storage, XmlParseError> {
        deserialize_elements::<_, S3Storage, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "AWSAccessKeyId" => {
                    obj.aws_access_key_id =
                        Some(StringDeserializer::deserialize("AWSAccessKeyId", stack)?);
                }
                "bucket" => {
                    obj.bucket = Some(StringDeserializer::deserialize("bucket", stack)?);
                }
                "prefix" => {
                    obj.prefix = Some(StringDeserializer::deserialize("prefix", stack)?);
                }
                "uploadPolicy" => {
                    obj.upload_policy = Some(BlobDeserializer::deserialize("uploadPolicy", stack)?);
                }
                "uploadPolicySignature" => {
                    obj.upload_policy_signature = Some(StringDeserializer::deserialize(
                        "uploadPolicySignature",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `S3Storage` contents to a `SignedRequest`.
struct S3StorageSerializer;
impl S3StorageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &S3Storage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.aws_access_key_id {
            params.put(&format!("{}{}", prefix, "AWSAccessKeyId"), &field_value);
        }
        if let Some(ref field_value) = obj.bucket {
            params.put(&format!("{}{}", prefix, "Bucket"), &field_value);
        }
        if let Some(ref field_value) = obj.prefix {
            params.put(&format!("{}{}", prefix, "Prefix"), &field_value);
        }
        if let Some(ref field_value) = obj.upload_policy {
            params.put(
                &format!("{}{}", prefix, "UploadPolicy"),
                ::std::str::from_utf8(&field_value).unwrap(),
            );
        }
        if let Some(ref field_value) = obj.upload_policy_signature {
            params.put(
                &format!("{}{}", prefix, "UploadPolicySignature"),
                &field_value,
            );
        }
    }
}

/// <p>Describes a Scheduled Instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ScheduledInstance {
    /// <p>The Availability Zone.</p>
    pub availability_zone: Option<String>,
    /// <p>The date when the Scheduled Instance was purchased.</p>
    pub create_date: Option<String>,
    /// <p>The hourly price for a single instance.</p>
    pub hourly_price: Option<String>,
    /// <p>The number of instances.</p>
    pub instance_count: Option<i64>,
    /// <p>The instance type.</p>
    pub instance_type: Option<String>,
    /// <p>The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p>
    pub network_platform: Option<String>,
    /// <p>The time for the next schedule to start.</p>
    pub next_slot_start_time: Option<String>,
    /// <p>The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p>
    pub platform: Option<String>,
    /// <p>The time that the previous schedule ended or will end.</p>
    pub previous_slot_end_time: Option<String>,
    /// <p>The schedule recurrence.</p>
    pub recurrence: Option<ScheduledInstanceRecurrence>,
    /// <p>The Scheduled Instance ID.</p>
    pub scheduled_instance_id: Option<String>,
    /// <p>The number of hours in the schedule.</p>
    pub slot_duration_in_hours: Option<i64>,
    /// <p>The end date for the Scheduled Instance.</p>
    pub term_end_date: Option<String>,
    /// <p>The start date for the Scheduled Instance.</p>
    pub term_start_date: Option<String>,
    /// <p>The total number of hours for a single instance for the entire term.</p>
    pub total_scheduled_instance_hours: Option<i64>,
}

struct ScheduledInstanceDeserializer;
impl ScheduledInstanceDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ScheduledInstance, XmlParseError> {
        deserialize_elements::<_, ScheduledInstance, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "availabilityZone" => {
                    obj.availability_zone =
                        Some(StringDeserializer::deserialize("availabilityZone", stack)?);
                }
                "createDate" => {
                    obj.create_date = Some(DateTimeDeserializer::deserialize("createDate", stack)?);
                }
                "hourlyPrice" => {
                    obj.hourly_price = Some(StringDeserializer::deserialize("hourlyPrice", stack)?);
                }
                "instanceCount" => {
                    obj.instance_count =
                        Some(IntegerDeserializer::deserialize("instanceCount", stack)?);
                }
                "instanceType" => {
                    obj.instance_type =
                        Some(StringDeserializer::deserialize("instanceType", stack)?);
                }
                "networkPlatform" => {
                    obj.network_platform =
                        Some(StringDeserializer::deserialize("networkPlatform", stack)?);
                }
                "nextSlotStartTime" => {
                    obj.next_slot_start_time = Some(DateTimeDeserializer::deserialize(
                        "nextSlotStartTime",
                        stack,
                    )?);
                }
                "platform" => {
                    obj.platform = Some(StringDeserializer::deserialize("platform", stack)?);
                }
                "previousSlotEndTime" => {
                    obj.previous_slot_end_time = Some(DateTimeDeserializer::deserialize(
                        "previousSlotEndTime",
                        stack,
                    )?);
                }
                "recurrence" => {
                    obj.recurrence = Some(ScheduledInstanceRecurrenceDeserializer::deserialize(
                        "recurrence",
                        stack,
                    )?);
                }
                "scheduledInstanceId" => {
                    obj.scheduled_instance_id = Some(StringDeserializer::deserialize(
                        "scheduledInstanceId",
                        stack,
                    )?);
                }
                "slotDurationInHours" => {
                    obj.slot_duration_in_hours = Some(IntegerDeserializer::deserialize(
                        "slotDurationInHours",
                        stack,
                    )?);
                }
                "termEndDate" => {
                    obj.term_end_date =
                        Some(DateTimeDeserializer::deserialize("termEndDate", stack)?);
                }
                "termStartDate" => {
                    obj.term_start_date =
                        Some(DateTimeDeserializer::deserialize("termStartDate", stack)?);
                }
                "totalScheduledInstanceHours" => {
                    obj.total_scheduled_instance_hours = Some(IntegerDeserializer::deserialize(
                        "totalScheduledInstanceHours",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes a schedule that is available for your Scheduled Instances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ScheduledInstanceAvailability {
    /// <p>The Availability Zone.</p>
    pub availability_zone: Option<String>,
    /// <p>The number of available instances.</p>
    pub available_instance_count: Option<i64>,
    /// <p>The time period for the first schedule to start.</p>
    pub first_slot_start_time: Option<String>,
    /// <p>The hourly price for a single instance.</p>
    pub hourly_price: Option<String>,
    /// <p>The instance type. You can specify one of the C3, C4, M4, or R3 instance types.</p>
    pub instance_type: Option<String>,
    /// <p>The maximum term. The only possible value is 365 days.</p>
    pub max_term_duration_in_days: Option<i64>,
    /// <p>The minimum term. The only possible value is 365 days.</p>
    pub min_term_duration_in_days: Option<i64>,
    /// <p>The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p>
    pub network_platform: Option<String>,
    /// <p>The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p>
    pub platform: Option<String>,
    /// <p>The purchase token. This token expires in two hours.</p>
    pub purchase_token: Option<String>,
    /// <p>The schedule recurrence.</p>
    pub recurrence: Option<ScheduledInstanceRecurrence>,
    /// <p>The number of hours in the schedule.</p>
    pub slot_duration_in_hours: Option<i64>,
    /// <p>The total number of hours for a single instance for the entire term.</p>
    pub total_scheduled_instance_hours: Option<i64>,
}

struct ScheduledInstanceAvailabilityDeserializer;
impl ScheduledInstanceAvailabilityDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ScheduledInstanceAvailability, XmlParseError> {
        deserialize_elements::<_, ScheduledInstanceAvailability, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "availabilityZone" => {
                        obj.availability_zone =
                            Some(StringDeserializer::deserialize("availabilityZone", stack)?);
                    }
                    "availableInstanceCount" => {
                        obj.available_instance_count = Some(IntegerDeserializer::deserialize(
                            "availableInstanceCount",
                            stack,
                        )?);
                    }
                    "firstSlotStartTime" => {
                        obj.first_slot_start_time = Some(DateTimeDeserializer::deserialize(
                            "firstSlotStartTime",
                            stack,
                        )?);
                    }
                    "hourlyPrice" => {
                        obj.hourly_price =
                            Some(StringDeserializer::deserialize("hourlyPrice", stack)?);
                    }
                    "instanceType" => {
                        obj.instance_type =
                            Some(StringDeserializer::deserialize("instanceType", stack)?);
                    }
                    "maxTermDurationInDays" => {
                        obj.max_term_duration_in_days = Some(IntegerDeserializer::deserialize(
                            "maxTermDurationInDays",
                            stack,
                        )?);
                    }
                    "minTermDurationInDays" => {
                        obj.min_term_duration_in_days = Some(IntegerDeserializer::deserialize(
                            "minTermDurationInDays",
                            stack,
                        )?);
                    }
                    "networkPlatform" => {
                        obj.network_platform =
                            Some(StringDeserializer::deserialize("networkPlatform", stack)?);
                    }
                    "platform" => {
                        obj.platform = Some(StringDeserializer::deserialize("platform", stack)?);
                    }
                    "purchaseToken" => {
                        obj.purchase_token =
                            Some(StringDeserializer::deserialize("purchaseToken", stack)?);
                    }
                    "recurrence" => {
                        obj.recurrence =
                            Some(ScheduledInstanceRecurrenceDeserializer::deserialize(
                                "recurrence",
                                stack,
                            )?);
                    }
                    "slotDurationInHours" => {
                        obj.slot_duration_in_hours = Some(IntegerDeserializer::deserialize(
                            "slotDurationInHours",
                            stack,
                        )?);
                    }
                    "totalScheduledInstanceHours" => {
                        obj.total_scheduled_instance_hours = Some(
                            IntegerDeserializer::deserialize("totalScheduledInstanceHours", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct ScheduledInstanceAvailabilitySetDeserializer;
impl ScheduledInstanceAvailabilitySetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ScheduledInstanceAvailability>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ScheduledInstanceAvailabilityDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `ScheduledInstanceIdRequestSet` contents to a `SignedRequest`.
struct ScheduledInstanceIdRequestSetSerializer;
impl ScheduledInstanceIdRequestSetSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Describes the recurring schedule for a Scheduled Instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ScheduledInstanceRecurrence {
    /// <p>The frequency (<code>Daily</code>, <code>Weekly</code>, or <code>Monthly</code>).</p>
    pub frequency: Option<String>,
    /// <p>The interval quantity. The interval unit depends on the value of <code>frequency</code>. For example, every 2 weeks or every 2 months.</p>
    pub interval: Option<i64>,
    /// <p>The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday).</p>
    pub occurrence_day_set: Option<Vec<i64>>,
    /// <p>Indicates whether the occurrence is relative to the end of the specified week or month.</p>
    pub occurrence_relative_to_end: Option<bool>,
    /// <p>The unit for <code>occurrenceDaySet</code> (<code>DayOfWeek</code> or <code>DayOfMonth</code>).</p>
    pub occurrence_unit: Option<String>,
}

struct ScheduledInstanceRecurrenceDeserializer;
impl ScheduledInstanceRecurrenceDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ScheduledInstanceRecurrence, XmlParseError> {
        deserialize_elements::<_, ScheduledInstanceRecurrence, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "frequency" => {
                        obj.frequency = Some(StringDeserializer::deserialize("frequency", stack)?);
                    }
                    "interval" => {
                        obj.interval = Some(IntegerDeserializer::deserialize("interval", stack)?);
                    }
                    "occurrenceDaySet" => {
                        obj.occurrence_day_set.get_or_insert(vec![]).extend(
                            OccurrenceDaySetDeserializer::deserialize("occurrenceDaySet", stack)?,
                        );
                    }
                    "occurrenceRelativeToEnd" => {
                        obj.occurrence_relative_to_end = Some(BooleanDeserializer::deserialize(
                            "occurrenceRelativeToEnd",
                            stack,
                        )?);
                    }
                    "occurrenceUnit" => {
                        obj.occurrence_unit =
                            Some(StringDeserializer::deserialize("occurrenceUnit", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes the recurring schedule for a Scheduled Instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ScheduledInstanceRecurrenceRequest {
    /// <p>The frequency (<code>Daily</code>, <code>Weekly</code>, or <code>Monthly</code>).</p>
    pub frequency: Option<String>,
    /// <p>The interval quantity. The interval unit depends on the value of <code>Frequency</code>. For example, every 2 weeks or every 2 months.</p>
    pub interval: Option<i64>,
    /// <p>The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday). You can't specify this value with a daily schedule. If the occurrence is relative to the end of the month, you can specify only a single day.</p>
    pub occurrence_days: Option<Vec<i64>>,
    /// <p>Indicates whether the occurrence is relative to the end of the specified week or month. You can't specify this value with a daily schedule.</p>
    pub occurrence_relative_to_end: Option<bool>,
    /// <p>The unit for <code>OccurrenceDays</code> (<code>DayOfWeek</code> or <code>DayOfMonth</code>). This value is required for a monthly schedule. You can't specify <code>DayOfWeek</code> with a weekly schedule. You can't specify this value with a daily schedule.</p>
    pub occurrence_unit: Option<String>,
}

/// Serialize `ScheduledInstanceRecurrenceRequest` contents to a `SignedRequest`.
struct ScheduledInstanceRecurrenceRequestSerializer;
impl ScheduledInstanceRecurrenceRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ScheduledInstanceRecurrenceRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.frequency {
            params.put(&format!("{}{}", prefix, "Frequency"), &field_value);
        }
        if let Some(ref field_value) = obj.interval {
            params.put(&format!("{}{}", prefix, "Interval"), &field_value);
        }
        if let Some(ref field_value) = obj.occurrence_days {
            OccurrenceDayRequestSetSerializer::serialize(
                params,
                &format!("{}{}", prefix, "OccurrenceDay"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.occurrence_relative_to_end {
            params.put(
                &format!("{}{}", prefix, "OccurrenceRelativeToEnd"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.occurrence_unit {
            params.put(&format!("{}{}", prefix, "OccurrenceUnit"), &field_value);
        }
    }
}

struct ScheduledInstanceSetDeserializer;
impl ScheduledInstanceSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ScheduledInstance>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ScheduledInstanceDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a block device mapping for a Scheduled Instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ScheduledInstancesBlockDeviceMapping {
    /// <p>The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p>
    pub device_name: Option<String>,
    /// <p>Parameters used to set up EBS volumes automatically when the instance is launched.</p>
    pub ebs: Option<ScheduledInstancesEbs>,
    /// <p>Suppresses the specified device included in the block device mapping of the AMI.</p>
    pub no_device: Option<String>,
    /// <p>The virtual device name (<code>ephemeral</code>N). Instance store volumes are numbered starting from 0. An instance type with two available instance store volumes can specify mappings for <code>ephemeral0</code> and <code>ephemeral1</code>. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume.</p> <p>Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.</p>
    pub virtual_name: Option<String>,
}

/// Serialize `ScheduledInstancesBlockDeviceMapping` contents to a `SignedRequest`.
struct ScheduledInstancesBlockDeviceMappingSerializer;
impl ScheduledInstancesBlockDeviceMappingSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ScheduledInstancesBlockDeviceMapping) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.device_name {
            params.put(&format!("{}{}", prefix, "DeviceName"), &field_value);
        }
        if let Some(ref field_value) = obj.ebs {
            ScheduledInstancesEbsSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Ebs"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.no_device {
            params.put(&format!("{}{}", prefix, "NoDevice"), &field_value);
        }
        if let Some(ref field_value) = obj.virtual_name {
            params.put(&format!("{}{}", prefix, "VirtualName"), &field_value);
        }
    }
}

/// Serialize `ScheduledInstancesBlockDeviceMappingSet` contents to a `SignedRequest`.
struct ScheduledInstancesBlockDeviceMappingSetSerializer;
impl ScheduledInstancesBlockDeviceMappingSetSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<ScheduledInstancesBlockDeviceMapping>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            ScheduledInstancesBlockDeviceMappingSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes an EBS volume for a Scheduled Instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ScheduledInstancesEbs {
    /// <p>Indicates whether the volume is deleted on instance termination.</p>
    pub delete_on_termination: Option<bool>,
    /// <p>Indicates whether the volume is encrypted. You can attached encrypted volumes only to instances that support them.</p>
    pub encrypted: Option<bool>,
    /// <p>The number of I/O operations per second (IOPS) that the volume supports. For io1 volumes, this represents the number of IOPS that are provisioned for the volume. For <code>gp2</code> volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information about <code>gp2</code> baseline performance, I/O credits, and bursting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS Volume Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Constraint: Range is 100-20000 IOPS for <code>io1</code> volumes and 100-10000 IOPS for <code>gp2</code> volumes.</p> <p>Condition: This parameter is required for requests to create <code>io1</code>volumes; it is not used in requests to create <code>gp2</code>, <code>st1</code>, <code>sc1</code>, or <code>standard</code> volumes.</p>
    pub iops: Option<i64>,
    /// <p>The ID of the snapshot.</p>
    pub snapshot_id: Option<String>,
    /// <p>The size of the volume, in GiB.</p> <p>Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.</p>
    pub volume_size: Option<i64>,
    /// <p>The volume type. <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, Throughput Optimized HDD for <code>st1</code>, Cold HDD for <code>sc1</code>, or <code>standard</code> for Magnetic.</p> <p>Default: <code>standard</code> </p>
    pub volume_type: Option<String>,
}

/// Serialize `ScheduledInstancesEbs` contents to a `SignedRequest`.
struct ScheduledInstancesEbsSerializer;
impl ScheduledInstancesEbsSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ScheduledInstancesEbs) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.delete_on_termination {
            params.put(
                &format!("{}{}", prefix, "DeleteOnTermination"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.encrypted {
            params.put(&format!("{}{}", prefix, "Encrypted"), &field_value);
        }
        if let Some(ref field_value) = obj.iops {
            params.put(&format!("{}{}", prefix, "Iops"), &field_value);
        }
        if let Some(ref field_value) = obj.snapshot_id {
            params.put(&format!("{}{}", prefix, "SnapshotId"), &field_value);
        }
        if let Some(ref field_value) = obj.volume_size {
            params.put(&format!("{}{}", prefix, "VolumeSize"), &field_value);
        }
        if let Some(ref field_value) = obj.volume_type {
            params.put(&format!("{}{}", prefix, "VolumeType"), &field_value);
        }
    }
}

/// <p>Describes an IAM instance profile for a Scheduled Instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ScheduledInstancesIamInstanceProfile {
    /// <p>The Amazon Resource Name (ARN).</p>
    pub arn: Option<String>,
    /// <p>The name.</p>
    pub name: Option<String>,
}

/// Serialize `ScheduledInstancesIamInstanceProfile` contents to a `SignedRequest`.
struct ScheduledInstancesIamInstanceProfileSerializer;
impl ScheduledInstancesIamInstanceProfileSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ScheduledInstancesIamInstanceProfile) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.arn {
            params.put(&format!("{}{}", prefix, "Arn"), &field_value);
        }
        if let Some(ref field_value) = obj.name {
            params.put(&format!("{}{}", prefix, "Name"), &field_value);
        }
    }
}

/// <p>Describes an IPv6 address.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ScheduledInstancesIpv6Address {
    /// <p>The IPv6 address.</p>
    pub ipv_6_address: Option<String>,
}

/// Serialize `ScheduledInstancesIpv6Address` contents to a `SignedRequest`.
struct ScheduledInstancesIpv6AddressSerializer;
impl ScheduledInstancesIpv6AddressSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ScheduledInstancesIpv6Address) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.ipv_6_address {
            params.put(&format!("{}{}", prefix, "Ipv6Address"), &field_value);
        }
    }
}

/// Serialize `ScheduledInstancesIpv6AddressList` contents to a `SignedRequest`.
struct ScheduledInstancesIpv6AddressListSerializer;
impl ScheduledInstancesIpv6AddressListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<ScheduledInstancesIpv6Address>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            ScheduledInstancesIpv6AddressSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ScheduledInstancesLaunchSpecification {
    /// <p>The block device mapping entries.</p>
    pub block_device_mappings: Option<Vec<ScheduledInstancesBlockDeviceMapping>>,
    /// <p>Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p> <p>Default: <code>false</code> </p>
    pub ebs_optimized: Option<bool>,
    /// <p>The IAM instance profile.</p>
    pub iam_instance_profile: Option<ScheduledInstancesIamInstanceProfile>,
    /// <p>The ID of the Amazon Machine Image (AMI).</p>
    pub image_id: String,
    /// <p>The instance type.</p>
    pub instance_type: Option<String>,
    /// <p>The ID of the kernel.</p>
    pub kernel_id: Option<String>,
    /// <p>The name of the key pair.</p>
    pub key_name: Option<String>,
    /// <p>Enable or disable monitoring for the instances.</p>
    pub monitoring: Option<ScheduledInstancesMonitoring>,
    /// <p>The network interfaces.</p>
    pub network_interfaces: Option<Vec<ScheduledInstancesNetworkInterface>>,
    /// <p>The placement information.</p>
    pub placement: Option<ScheduledInstancesPlacement>,
    /// <p>The ID of the RAM disk.</p>
    pub ramdisk_id: Option<String>,
    /// <p>The IDs of the security groups.</p>
    pub security_group_ids: Option<Vec<String>>,
    /// <p>The ID of the subnet in which to launch the instances.</p>
    pub subnet_id: Option<String>,
    /// <p>The base64-encoded MIME user data.</p>
    pub user_data: Option<String>,
}

/// Serialize `ScheduledInstancesLaunchSpecification` contents to a `SignedRequest`.
struct ScheduledInstancesLaunchSpecificationSerializer;
impl ScheduledInstancesLaunchSpecificationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ScheduledInstancesLaunchSpecification) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.block_device_mappings {
            ScheduledInstancesBlockDeviceMappingSetSerializer::serialize(
                params,
                &format!("{}{}", prefix, "BlockDeviceMapping"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.ebs_optimized {
            params.put(&format!("{}{}", prefix, "EbsOptimized"), &field_value);
        }
        if let Some(ref field_value) = obj.iam_instance_profile {
            ScheduledInstancesIamInstanceProfileSerializer::serialize(
                params,
                &format!("{}{}", prefix, "IamInstanceProfile"),
                field_value,
            );
        }
        params.put(&format!("{}{}", prefix, "ImageId"), &obj.image_id);
        if let Some(ref field_value) = obj.instance_type {
            params.put(&format!("{}{}", prefix, "InstanceType"), &field_value);
        }
        if let Some(ref field_value) = obj.kernel_id {
            params.put(&format!("{}{}", prefix, "KernelId"), &field_value);
        }
        if let Some(ref field_value) = obj.key_name {
            params.put(&format!("{}{}", prefix, "KeyName"), &field_value);
        }
        if let Some(ref field_value) = obj.monitoring {
            ScheduledInstancesMonitoringSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Monitoring"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.network_interfaces {
            ScheduledInstancesNetworkInterfaceSetSerializer::serialize(
                params,
                &format!("{}{}", prefix, "NetworkInterface"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.placement {
            ScheduledInstancesPlacementSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Placement"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.ramdisk_id {
            params.put(&format!("{}{}", prefix, "RamdiskId"), &field_value);
        }
        if let Some(ref field_value) = obj.security_group_ids {
            ScheduledInstancesSecurityGroupIdSetSerializer::serialize(
                params,
                &format!("{}{}", prefix, "SecurityGroupId"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.subnet_id {
            params.put(&format!("{}{}", prefix, "SubnetId"), &field_value);
        }
        if let Some(ref field_value) = obj.user_data {
            params.put(&format!("{}{}", prefix, "UserData"), &field_value);
        }
    }
}

/// <p>Describes whether monitoring is enabled for a Scheduled Instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ScheduledInstancesMonitoring {
    /// <p>Indicates whether monitoring is enabled.</p>
    pub enabled: Option<bool>,
}

/// Serialize `ScheduledInstancesMonitoring` contents to a `SignedRequest`.
struct ScheduledInstancesMonitoringSerializer;
impl ScheduledInstancesMonitoringSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ScheduledInstancesMonitoring) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.enabled {
            params.put(&format!("{}{}", prefix, "Enabled"), &field_value);
        }
    }
}

/// <p>Describes a network interface for a Scheduled Instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ScheduledInstancesNetworkInterface {
    /// <p>Indicates whether to assign a public IPv4 address to instances launched in a VPC. The public IPv4 address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is <code>true</code>.</p>
    pub associate_public_ip_address: Option<bool>,
    /// <p>Indicates whether to delete the interface when the instance is terminated.</p>
    pub delete_on_termination: Option<bool>,
    /// <p>The description.</p>
    pub description: Option<String>,
    /// <p>The index of the device for the network interface attachment.</p>
    pub device_index: Option<i64>,
    /// <p>The IDs of the security groups.</p>
    pub groups: Option<Vec<String>>,
    /// <p>The number of IPv6 addresses to assign to the network interface. The IPv6 addresses are automatically selected from the subnet range.</p>
    pub ipv_6_address_count: Option<i64>,
    /// <p>The specific IPv6 addresses from the subnet range.</p>
    pub ipv_6_addresses: Option<Vec<ScheduledInstancesIpv6Address>>,
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: Option<String>,
    /// <p>The IPv4 address of the network interface within the subnet.</p>
    pub private_ip_address: Option<String>,
    /// <p>The private IPv4 addresses.</p>
    pub private_ip_address_configs: Option<Vec<ScheduledInstancesPrivateIpAddressConfig>>,
    /// <p>The number of secondary private IPv4 addresses.</p>
    pub secondary_private_ip_address_count: Option<i64>,
    /// <p>The ID of the subnet.</p>
    pub subnet_id: Option<String>,
}

/// Serialize `ScheduledInstancesNetworkInterface` contents to a `SignedRequest`.
struct ScheduledInstancesNetworkInterfaceSerializer;
impl ScheduledInstancesNetworkInterfaceSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ScheduledInstancesNetworkInterface) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.associate_public_ip_address {
            params.put(
                &format!("{}{}", prefix, "AssociatePublicIpAddress"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.delete_on_termination {
            params.put(
                &format!("{}{}", prefix, "DeleteOnTermination"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.device_index {
            params.put(&format!("{}{}", prefix, "DeviceIndex"), &field_value);
        }
        if let Some(ref field_value) = obj.groups {
            ScheduledInstancesSecurityGroupIdSetSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Group"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.ipv_6_address_count {
            params.put(&format!("{}{}", prefix, "Ipv6AddressCount"), &field_value);
        }
        if let Some(ref field_value) = obj.ipv_6_addresses {
            ScheduledInstancesIpv6AddressListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Ipv6Address"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.network_interface_id {
            params.put(&format!("{}{}", prefix, "NetworkInterfaceId"), &field_value);
        }
        if let Some(ref field_value) = obj.private_ip_address {
            params.put(&format!("{}{}", prefix, "PrivateIpAddress"), &field_value);
        }
        if let Some(ref field_value) = obj.private_ip_address_configs {
            PrivateIpAddressConfigSetSerializer::serialize(
                params,
                &format!("{}{}", prefix, "PrivateIpAddressConfig"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.secondary_private_ip_address_count {
            params.put(
                &format!("{}{}", prefix, "SecondaryPrivateIpAddressCount"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.subnet_id {
            params.put(&format!("{}{}", prefix, "SubnetId"), &field_value);
        }
    }
}

/// Serialize `ScheduledInstancesNetworkInterfaceSet` contents to a `SignedRequest`.
struct ScheduledInstancesNetworkInterfaceSetSerializer;
impl ScheduledInstancesNetworkInterfaceSetSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<ScheduledInstancesNetworkInterface>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            ScheduledInstancesNetworkInterfaceSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes the placement for a Scheduled Instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ScheduledInstancesPlacement {
    /// <p>The Availability Zone.</p>
    pub availability_zone: Option<String>,
    /// <p>The name of the placement group.</p>
    pub group_name: Option<String>,
}

/// Serialize `ScheduledInstancesPlacement` contents to a `SignedRequest`.
struct ScheduledInstancesPlacementSerializer;
impl ScheduledInstancesPlacementSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ScheduledInstancesPlacement) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.availability_zone {
            params.put(&format!("{}{}", prefix, "AvailabilityZone"), &field_value);
        }
        if let Some(ref field_value) = obj.group_name {
            params.put(&format!("{}{}", prefix, "GroupName"), &field_value);
        }
    }
}

/// <p>Describes a private IPv4 address for a Scheduled Instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ScheduledInstancesPrivateIpAddressConfig {
    /// <p>Indicates whether this is a primary IPv4 address. Otherwise, this is a secondary IPv4 address.</p>
    pub primary: Option<bool>,
    /// <p>The IPv4 address.</p>
    pub private_ip_address: Option<String>,
}

/// Serialize `ScheduledInstancesPrivateIpAddressConfig` contents to a `SignedRequest`.
struct ScheduledInstancesPrivateIpAddressConfigSerializer;
impl ScheduledInstancesPrivateIpAddressConfigSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &ScheduledInstancesPrivateIpAddressConfig) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.primary {
            params.put(&format!("{}{}", prefix, "Primary"), &field_value);
        }
        if let Some(ref field_value) = obj.private_ip_address {
            params.put(&format!("{}{}", prefix, "PrivateIpAddress"), &field_value);
        }
    }
}

/// Serialize `ScheduledInstancesSecurityGroupIdSet` contents to a `SignedRequest`.
struct ScheduledInstancesSecurityGroupIdSetSerializer;
impl ScheduledInstancesSecurityGroupIdSetSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct ScopeDeserializer;
impl ScopeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SearchTransitGatewayRoutesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p><p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>attachment.transit-gateway-attachment-id</code>- The id of the transit gateway attachment.</p> </li> <li> <p> <code>attachment.resource-id</code> - The resource id of the transit gateway attachment.</p> </li> <li> <p> <code>attachment.resource-type</code> - The attachment resource type (<code>vpc</code> | <code>vpn</code>).</p> </li> <li> <p> <code>route-search.exact-match</code> - The exact match of the specified filter.</p> </li> <li> <p> <code>route-search.longest-prefix-match</code> - The longest prefix that matches the route.</p> </li> <li> <p> <code>route-search.subnet-of-match</code> - The routes with a subnet that match the specified CIDR filter.</p> </li> <li> <p> <code>route-search.supernet-of-match</code> - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.</p> </li> <li> <p> <code>state</code> - The state of the attachment (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p> </li> <li> <p> <code>type</code> - The type of roue (<code>active</code> | <code>blackhole</code>).</p> </li> </ul></p>
    pub filters: Vec<Filter>,
    /// <p>The maximum number of routes to return.</p>
    pub max_results: Option<i64>,
    /// <p>The ID of the transit gateway route table.</p>
    pub transit_gateway_route_table_id: String,
}

/// Serialize `SearchTransitGatewayRoutesRequest` contents to a `SignedRequest`.
struct SearchTransitGatewayRoutesRequestSerializer;
impl SearchTransitGatewayRoutesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &SearchTransitGatewayRoutesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        FilterListSerializer::serialize(params, &format!("{}{}", prefix, "Filter"), &obj.filters);
        if let Some(ref field_value) = obj.max_results {
            params.put(&format!("{}{}", prefix, "MaxResults"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TransitGatewayRouteTableId"),
            &obj.transit_gateway_route_table_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct SearchTransitGatewayRoutesResult {
    /// <p>Indicates whether there are additional routes available.</p>
    pub additional_routes_available: Option<bool>,
    /// <p>Information about the routes.</p>
    pub routes: Option<Vec<TransitGatewayRoute>>,
}

struct SearchTransitGatewayRoutesResultDeserializer;
impl SearchTransitGatewayRoutesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SearchTransitGatewayRoutesResult, XmlParseError> {
        deserialize_elements::<_, SearchTransitGatewayRoutesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "additionalRoutesAvailable" => {
                        obj.additional_routes_available = Some(BooleanDeserializer::deserialize(
                            "additionalRoutesAvailable",
                            stack,
                        )?);
                    }
                    "routeSet" => {
                        obj.routes.get_or_insert(vec![]).extend(
                            TransitGatewayRouteListDeserializer::deserialize("routeSet", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes a security group</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SecurityGroup {
    /// <p>A description of the security group.</p>
    pub description: Option<String>,
    /// <p>The ID of the security group.</p>
    pub group_id: Option<String>,
    /// <p>The name of the security group.</p>
    pub group_name: Option<String>,
    /// <p>The inbound rules associated with the security group.</p>
    pub ip_permissions: Option<Vec<IpPermission>>,
    /// <p>[VPC only] The outbound rules associated with the security group.</p>
    pub ip_permissions_egress: Option<Vec<IpPermission>>,
    /// <p>The AWS account ID of the owner of the security group.</p>
    pub owner_id: Option<String>,
    /// <p>Any tags assigned to the security group.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>[VPC only] The ID of the VPC for the security group.</p>
    pub vpc_id: Option<String>,
}

struct SecurityGroupDeserializer;
impl SecurityGroupDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SecurityGroup, XmlParseError> {
        deserialize_elements::<_, SecurityGroup, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "groupDescription" => {
                    obj.description =
                        Some(StringDeserializer::deserialize("groupDescription", stack)?);
                }
                "groupId" => {
                    obj.group_id = Some(StringDeserializer::deserialize("groupId", stack)?);
                }
                "groupName" => {
                    obj.group_name = Some(StringDeserializer::deserialize("groupName", stack)?);
                }
                "ipPermissions" => {
                    obj.ip_permissions.get_or_insert(vec![]).extend(
                        IpPermissionListDeserializer::deserialize("ipPermissions", stack)?,
                    );
                }
                "ipPermissionsEgress" => {
                    obj.ip_permissions_egress.get_or_insert(vec![]).extend(
                        IpPermissionListDeserializer::deserialize("ipPermissionsEgress", stack)?,
                    );
                }
                "ownerId" => {
                    obj.owner_id = Some(StringDeserializer::deserialize("ownerId", stack)?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "vpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct SecurityGroupIdStringListDeserializer;
impl SecurityGroupIdStringListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "SecurityGroupId" {
                obj.push(StringDeserializer::deserialize("SecurityGroupId", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `SecurityGroupIdStringList` contents to a `SignedRequest`.
struct SecurityGroupIdStringListSerializer;
impl SecurityGroupIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Describes a security group.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SecurityGroupIdentifier {
    /// <p>The ID of the security group.</p>
    pub group_id: Option<String>,
    /// <p>The name of the security group.</p>
    pub group_name: Option<String>,
}

struct SecurityGroupIdentifierDeserializer;
impl SecurityGroupIdentifierDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SecurityGroupIdentifier, XmlParseError> {
        deserialize_elements::<_, SecurityGroupIdentifier, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "groupId" => {
                        obj.group_id = Some(StringDeserializer::deserialize("groupId", stack)?);
                    }
                    "groupName" => {
                        obj.group_name = Some(StringDeserializer::deserialize("groupName", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct SecurityGroupListDeserializer;
impl SecurityGroupListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<SecurityGroup>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(SecurityGroupDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a VPC with a security group that references your security group.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SecurityGroupReference {
    /// <p>The ID of your security group.</p>
    pub group_id: Option<String>,
    /// <p>The ID of the VPC with the referencing security group.</p>
    pub referencing_vpc_id: Option<String>,
    /// <p>The ID of the VPC peering connection.</p>
    pub vpc_peering_connection_id: Option<String>,
}

struct SecurityGroupReferenceDeserializer;
impl SecurityGroupReferenceDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SecurityGroupReference, XmlParseError> {
        deserialize_elements::<_, SecurityGroupReference, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "groupId" => {
                    obj.group_id = Some(StringDeserializer::deserialize("groupId", stack)?);
                }
                "referencingVpcId" => {
                    obj.referencing_vpc_id =
                        Some(StringDeserializer::deserialize("referencingVpcId", stack)?);
                }
                "vpcPeeringConnectionId" => {
                    obj.vpc_peering_connection_id = Some(StringDeserializer::deserialize(
                        "vpcPeeringConnectionId",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct SecurityGroupReferencesDeserializer;
impl SecurityGroupReferencesDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<SecurityGroupReference>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(SecurityGroupReferenceDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `SecurityGroupStringList` contents to a `SignedRequest`.
struct SecurityGroupStringListSerializer;
impl SecurityGroupStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Describes a service configuration for a VPC endpoint service.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ServiceConfiguration {
    /// <p>Indicates whether requests from other AWS accounts to create an endpoint to the service must first be accepted.</p>
    pub acceptance_required: Option<bool>,
    /// <p>In the Availability Zones in which the service is available.</p>
    pub availability_zones: Option<Vec<String>>,
    /// <p>The DNS names for the service.</p>
    pub base_endpoint_dns_names: Option<Vec<String>>,
    /// <p>Indicates whether the service manages it's VPC endpoints. Management of the service VPC endpoints using the VPC endpoint API is restricted.</p>
    pub manages_vpc_endpoints: Option<bool>,
    /// <p>The Amazon Resource Names (ARNs) of the Network Load Balancers for the service.</p>
    pub network_load_balancer_arns: Option<Vec<String>>,
    /// <p>The private DNS name for the service.</p>
    pub private_dns_name: Option<String>,
    /// <p>The ID of the service.</p>
    pub service_id: Option<String>,
    /// <p>The name of the service.</p>
    pub service_name: Option<String>,
    /// <p>The service state.</p>
    pub service_state: Option<String>,
    /// <p>The type of service.</p>
    pub service_type: Option<Vec<ServiceTypeDetail>>,
    /// <p>Any tags assigned to the service.</p>
    pub tags: Option<Vec<Tag>>,
}

struct ServiceConfigurationDeserializer;
impl ServiceConfigurationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ServiceConfiguration, XmlParseError> {
        deserialize_elements::<_, ServiceConfiguration, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "acceptanceRequired" => {
                    obj.acceptance_required = Some(BooleanDeserializer::deserialize(
                        "acceptanceRequired",
                        stack,
                    )?);
                }
                "availabilityZoneSet" => {
                    obj.availability_zones.get_or_insert(vec![]).extend(
                        ValueStringListDeserializer::deserialize("availabilityZoneSet", stack)?,
                    );
                }
                "baseEndpointDnsNameSet" => {
                    obj.base_endpoint_dns_names.get_or_insert(vec![]).extend(
                        ValueStringListDeserializer::deserialize("baseEndpointDnsNameSet", stack)?,
                    );
                }
                "managesVpcEndpoints" => {
                    obj.manages_vpc_endpoints = Some(BooleanDeserializer::deserialize(
                        "managesVpcEndpoints",
                        stack,
                    )?);
                }
                "networkLoadBalancerArnSet" => {
                    obj.network_load_balancer_arns.get_or_insert(vec![]).extend(
                        ValueStringListDeserializer::deserialize(
                            "networkLoadBalancerArnSet",
                            stack,
                        )?,
                    );
                }
                "privateDnsName" => {
                    obj.private_dns_name =
                        Some(StringDeserializer::deserialize("privateDnsName", stack)?);
                }
                "serviceId" => {
                    obj.service_id = Some(StringDeserializer::deserialize("serviceId", stack)?);
                }
                "serviceName" => {
                    obj.service_name = Some(StringDeserializer::deserialize("serviceName", stack)?);
                }
                "serviceState" => {
                    obj.service_state = Some(ServiceStateDeserializer::deserialize(
                        "serviceState",
                        stack,
                    )?);
                }
                "serviceType" => {
                    obj.service_type.get_or_insert(vec![]).extend(
                        ServiceTypeDetailSetDeserializer::deserialize("serviceType", stack)?,
                    );
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct ServiceConfigurationSetDeserializer;
impl ServiceConfigurationSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ServiceConfiguration>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ServiceConfigurationDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a VPC endpoint service.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ServiceDetail {
    /// <p>Indicates whether VPC endpoint connection requests to the service must be accepted by the service owner.</p>
    pub acceptance_required: Option<bool>,
    /// <p>The Availability Zones in which the service is available.</p>
    pub availability_zones: Option<Vec<String>>,
    /// <p>The DNS names for the service.</p>
    pub base_endpoint_dns_names: Option<Vec<String>>,
    /// <p>Indicates whether the service manages it's VPC endpoints. Management of the service VPC endpoints using the VPC endpoint API is restricted.</p>
    pub manages_vpc_endpoints: Option<bool>,
    /// <p>The AWS account ID of the service owner.</p>
    pub owner: Option<String>,
    /// <p>The private DNS name for the service.</p>
    pub private_dns_name: Option<String>,
    /// <p>The ID of the endpoint service.</p>
    pub service_id: Option<String>,
    /// <p>The Amazon Resource Name (ARN) of the service.</p>
    pub service_name: Option<String>,
    /// <p>The type of service.</p>
    pub service_type: Option<Vec<ServiceTypeDetail>>,
    /// <p>Any tags assigned to the service.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>Indicates whether the service supports endpoint policies.</p>
    pub vpc_endpoint_policy_supported: Option<bool>,
}

struct ServiceDetailDeserializer;
impl ServiceDetailDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ServiceDetail, XmlParseError> {
        deserialize_elements::<_, ServiceDetail, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "acceptanceRequired" => {
                    obj.acceptance_required = Some(BooleanDeserializer::deserialize(
                        "acceptanceRequired",
                        stack,
                    )?);
                }
                "availabilityZoneSet" => {
                    obj.availability_zones.get_or_insert(vec![]).extend(
                        ValueStringListDeserializer::deserialize("availabilityZoneSet", stack)?,
                    );
                }
                "baseEndpointDnsNameSet" => {
                    obj.base_endpoint_dns_names.get_or_insert(vec![]).extend(
                        ValueStringListDeserializer::deserialize("baseEndpointDnsNameSet", stack)?,
                    );
                }
                "managesVpcEndpoints" => {
                    obj.manages_vpc_endpoints = Some(BooleanDeserializer::deserialize(
                        "managesVpcEndpoints",
                        stack,
                    )?);
                }
                "owner" => {
                    obj.owner = Some(StringDeserializer::deserialize("owner", stack)?);
                }
                "privateDnsName" => {
                    obj.private_dns_name =
                        Some(StringDeserializer::deserialize("privateDnsName", stack)?);
                }
                "serviceId" => {
                    obj.service_id = Some(StringDeserializer::deserialize("serviceId", stack)?);
                }
                "serviceName" => {
                    obj.service_name = Some(StringDeserializer::deserialize("serviceName", stack)?);
                }
                "serviceType" => {
                    obj.service_type.get_or_insert(vec![]).extend(
                        ServiceTypeDetailSetDeserializer::deserialize("serviceType", stack)?,
                    );
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "vpcEndpointPolicySupported" => {
                    obj.vpc_endpoint_policy_supported = Some(BooleanDeserializer::deserialize(
                        "vpcEndpointPolicySupported",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct ServiceDetailSetDeserializer;
impl ServiceDetailSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ServiceDetail>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ServiceDetailDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct ServiceStateDeserializer;
impl ServiceStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct ServiceTypeDeserializer;
impl ServiceTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes the type of service for a VPC endpoint.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct ServiceTypeDetail {
    /// <p>The type of service.</p>
    pub service_type: Option<String>,
}

struct ServiceTypeDetailDeserializer;
impl ServiceTypeDetailDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<ServiceTypeDetail, XmlParseError> {
        deserialize_elements::<_, ServiceTypeDetail, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "serviceType" => {
                    obj.service_type =
                        Some(ServiceTypeDeserializer::deserialize("serviceType", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct ServiceTypeDetailSetDeserializer;
impl ServiceTypeDetailSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<ServiceTypeDetail>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(ServiceTypeDetailDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct ShutdownBehaviorDeserializer;
impl ShutdownBehaviorDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes the time period for a Scheduled Instance to start its first schedule. The time period must span less than one day.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SlotDateTimeRangeRequest {
    /// <p>The earliest date and time, in UTC, for the Scheduled Instance to start.</p>
    pub earliest_time: String,
    /// <p>The latest date and time, in UTC, for the Scheduled Instance to start. This value must be later than or equal to the earliest date and at most three months in the future.</p>
    pub latest_time: String,
}

/// Serialize `SlotDateTimeRangeRequest` contents to a `SignedRequest`.
struct SlotDateTimeRangeRequestSerializer;
impl SlotDateTimeRangeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &SlotDateTimeRangeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "EarliestTime"), &obj.earliest_time);
        params.put(&format!("{}{}", prefix, "LatestTime"), &obj.latest_time);
    }
}

/// <p>Describes the time period for a Scheduled Instance to start its first schedule.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SlotStartTimeRangeRequest {
    /// <p>The earliest date and time, in UTC, for the Scheduled Instance to start.</p>
    pub earliest_time: Option<String>,
    /// <p>The latest date and time, in UTC, for the Scheduled Instance to start.</p>
    pub latest_time: Option<String>,
}

/// Serialize `SlotStartTimeRangeRequest` contents to a `SignedRequest`.
struct SlotStartTimeRangeRequestSerializer;
impl SlotStartTimeRangeRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &SlotStartTimeRangeRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.earliest_time {
            params.put(&format!("{}{}", prefix, "EarliestTime"), &field_value);
        }
        if let Some(ref field_value) = obj.latest_time {
            params.put(&format!("{}{}", prefix, "LatestTime"), &field_value);
        }
    }
}

/// <p>Describes a snapshot.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct Snapshot {
    /// <p>The data encryption key identifier for the snapshot. This value is a unique identifier that corresponds to the data encryption key that was used to encrypt the original volume or snapshot copy. Because data encryption keys are inherited by volumes created from snapshots, and vice versa, if snapshots share the same data encryption key identifier, then they belong to the same volume/snapshot lineage. This parameter is only returned by the <a>DescribeSnapshots</a> API operation.</p>
    pub data_encryption_key_id: Option<String>,
    /// <p>The description for the snapshot.</p>
    pub description: Option<String>,
    /// <p>Indicates whether the snapshot is encrypted.</p>
    pub encrypted: Option<bool>,
    /// <p>The full ARN of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the parent volume.</p>
    pub kms_key_id: Option<String>,
    /// <p> Value from an Amazon-maintained list (<code>amazon</code> | <code>self</code> | <code>all</code> | <code>aws-marketplace</code> | <code>microsoft</code>) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console. </p>
    pub owner_alias: Option<String>,
    /// <p>The AWS account ID of the EBS snapshot owner.</p>
    pub owner_id: Option<String>,
    /// <p>The progress of the snapshot, as a percentage.</p>
    pub progress: Option<String>,
    /// <p>The ID of the snapshot. Each snapshot receives a unique identifier when it is created.</p>
    pub snapshot_id: Option<String>,
    /// <p>The time stamp when the snapshot was initiated.</p>
    pub start_time: Option<String>,
    /// <p>The snapshot state.</p>
    pub state: Option<String>,
    /// <p>Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails (for example, if the proper AWS Key Management Service (AWS KMS) permissions are not obtained) this field displays error state details to help you diagnose why the error occurred. This parameter is only returned by the <a>DescribeSnapshots</a> API operation.</p>
    pub state_message: Option<String>,
    /// <p>Any tags assigned to the snapshot.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The ID of the volume that was used to create the snapshot. Snapshots created by the <a>CopySnapshot</a> action have an arbitrary volume ID that should not be used for any purpose.</p>
    pub volume_id: Option<String>,
    /// <p>The size of the volume, in GiB.</p>
    pub volume_size: Option<i64>,
}

struct SnapshotDeserializer;
impl SnapshotDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Snapshot, XmlParseError> {
        deserialize_elements::<_, Snapshot, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "dataEncryptionKeyId" => {
                    obj.data_encryption_key_id = Some(StringDeserializer::deserialize(
                        "dataEncryptionKeyId",
                        stack,
                    )?);
                }
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "encrypted" => {
                    obj.encrypted = Some(BooleanDeserializer::deserialize("encrypted", stack)?);
                }
                "kmsKeyId" => {
                    obj.kms_key_id = Some(StringDeserializer::deserialize("kmsKeyId", stack)?);
                }
                "ownerAlias" => {
                    obj.owner_alias = Some(StringDeserializer::deserialize("ownerAlias", stack)?);
                }
                "ownerId" => {
                    obj.owner_id = Some(StringDeserializer::deserialize("ownerId", stack)?);
                }
                "progress" => {
                    obj.progress = Some(StringDeserializer::deserialize("progress", stack)?);
                }
                "snapshotId" => {
                    obj.snapshot_id = Some(StringDeserializer::deserialize("snapshotId", stack)?);
                }
                "startTime" => {
                    obj.start_time = Some(DateTimeDeserializer::deserialize("startTime", stack)?);
                }
                "status" => {
                    obj.state = Some(SnapshotStateDeserializer::deserialize("status", stack)?);
                }
                "statusMessage" => {
                    obj.state_message =
                        Some(StringDeserializer::deserialize("statusMessage", stack)?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "volumeId" => {
                    obj.volume_id = Some(StringDeserializer::deserialize("volumeId", stack)?);
                }
                "volumeSize" => {
                    obj.volume_size = Some(IntegerDeserializer::deserialize("volumeSize", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes the snapshot created from the imported disk.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SnapshotDetail {
    /// <p>A description for the snapshot.</p>
    pub description: Option<String>,
    /// <p>The block device mapping for the snapshot.</p>
    pub device_name: Option<String>,
    /// <p>The size of the disk in the snapshot, in GiB.</p>
    pub disk_image_size: Option<f64>,
    /// <p>The format of the disk image from which the snapshot is created.</p>
    pub format: Option<String>,
    /// <p>The percentage of progress for the task.</p>
    pub progress: Option<String>,
    /// <p>The snapshot ID of the disk being imported.</p>
    pub snapshot_id: Option<String>,
    /// <p>A brief status of the snapshot creation.</p>
    pub status: Option<String>,
    /// <p>A detailed status message for the snapshot creation.</p>
    pub status_message: Option<String>,
    /// <p>The URL used to access the disk image.</p>
    pub url: Option<String>,
    /// <p>The S3 bucket for the disk image.</p>
    pub user_bucket: Option<UserBucketDetails>,
}

struct SnapshotDetailDeserializer;
impl SnapshotDetailDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SnapshotDetail, XmlParseError> {
        deserialize_elements::<_, SnapshotDetail, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "deviceName" => {
                    obj.device_name = Some(StringDeserializer::deserialize("deviceName", stack)?);
                }
                "diskImageSize" => {
                    obj.disk_image_size =
                        Some(DoubleDeserializer::deserialize("diskImageSize", stack)?);
                }
                "format" => {
                    obj.format = Some(StringDeserializer::deserialize("format", stack)?);
                }
                "progress" => {
                    obj.progress = Some(StringDeserializer::deserialize("progress", stack)?);
                }
                "snapshotId" => {
                    obj.snapshot_id = Some(StringDeserializer::deserialize("snapshotId", stack)?);
                }
                "status" => {
                    obj.status = Some(StringDeserializer::deserialize("status", stack)?);
                }
                "statusMessage" => {
                    obj.status_message =
                        Some(StringDeserializer::deserialize("statusMessage", stack)?);
                }
                "url" => {
                    obj.url = Some(StringDeserializer::deserialize("url", stack)?);
                }
                "userBucket" => {
                    obj.user_bucket = Some(UserBucketDetailsDeserializer::deserialize(
                        "userBucket",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct SnapshotDetailListDeserializer;
impl SnapshotDetailListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<SnapshotDetail>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(SnapshotDetailDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>The disk container object for the import snapshot request.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SnapshotDiskContainer {
    /// <p>The description of the disk image being imported.</p>
    pub description: Option<String>,
    /// <p>The format of the disk image being imported.</p> <p>Valid values: <code>VHD</code> | <code>VMDK</code> </p>
    pub format: Option<String>,
    /// <p>The URL to the Amazon S3-based disk image being imported. It can either be a https URL (https://..) or an Amazon S3 URL (s3://..).</p>
    pub url: Option<String>,
    /// <p>The S3 bucket for the disk image.</p>
    pub user_bucket: Option<UserBucket>,
}

/// Serialize `SnapshotDiskContainer` contents to a `SignedRequest`.
struct SnapshotDiskContainerSerializer;
impl SnapshotDiskContainerSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &SnapshotDiskContainer) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.format {
            params.put(&format!("{}{}", prefix, "Format"), &field_value);
        }
        if let Some(ref field_value) = obj.url {
            params.put(&format!("{}{}", prefix, "Url"), &field_value);
        }
        if let Some(ref field_value) = obj.user_bucket {
            UserBucketSerializer::serialize(
                params,
                &format!("{}{}", prefix, "UserBucket"),
                field_value,
            );
        }
    }
}

/// Serialize `SnapshotIdStringList` contents to a `SignedRequest`.
struct SnapshotIdStringListSerializer;
impl SnapshotIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Object that contains information about a snapshot.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SnapshotInfo {
    /// <p>Description specified by the CreateSnapshotRequest that has been applied to all snapshots.</p>
    pub description: Option<String>,
    /// <p>Boolean that specifies whether or not this snapshot is encrypted.</p>
    pub encrypted: Option<bool>,
    /// <p>Account id used when creating this snapshot.</p>
    pub owner_id: Option<String>,
    /// <p>Progress this snapshot has made towards completing.</p>
    pub progress: Option<String>,
    /// <p>Snapshot id that can be used to describe this snapshot.</p>
    pub snapshot_id: Option<String>,
    /// <p>Time this snapshot was started. This is the same for all snapshots initiated by the same request.</p>
    pub start_time: Option<String>,
    /// <p>Current state of the snapshot.</p>
    pub state: Option<String>,
    /// <p>Tags associated with this snapshot.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>Source volume from which this snapshot was created.</p>
    pub volume_id: Option<String>,
    /// <p>Size of the volume from which this snapshot was created.</p>
    pub volume_size: Option<i64>,
}

struct SnapshotInfoDeserializer;
impl SnapshotInfoDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SnapshotInfo, XmlParseError> {
        deserialize_elements::<_, SnapshotInfo, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "encrypted" => {
                    obj.encrypted = Some(BooleanDeserializer::deserialize("encrypted", stack)?);
                }
                "ownerId" => {
                    obj.owner_id = Some(StringDeserializer::deserialize("ownerId", stack)?);
                }
                "progress" => {
                    obj.progress = Some(StringDeserializer::deserialize("progress", stack)?);
                }
                "snapshotId" => {
                    obj.snapshot_id = Some(StringDeserializer::deserialize("snapshotId", stack)?);
                }
                "startTime" => {
                    obj.start_time = Some(MillisecondDateTimeDeserializer::deserialize(
                        "startTime",
                        stack,
                    )?);
                }
                "state" => {
                    obj.state = Some(SnapshotStateDeserializer::deserialize("state", stack)?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "volumeId" => {
                    obj.volume_id = Some(StringDeserializer::deserialize("volumeId", stack)?);
                }
                "volumeSize" => {
                    obj.volume_size = Some(IntegerDeserializer::deserialize("volumeSize", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct SnapshotListDeserializer;
impl SnapshotListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<Snapshot>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(SnapshotDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct SnapshotSetDeserializer;
impl SnapshotSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<SnapshotInfo>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(SnapshotInfoDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct SnapshotStateDeserializer;
impl SnapshotStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Details about the import snapshot task.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SnapshotTaskDetail {
    /// <p>The description of the snapshot.</p>
    pub description: Option<String>,
    /// <p>The size of the disk in the snapshot, in GiB.</p>
    pub disk_image_size: Option<f64>,
    /// <p>Indicates whether the snapshot is encrypted.</p>
    pub encrypted: Option<bool>,
    /// <p>The format of the disk image from which the snapshot is created.</p>
    pub format: Option<String>,
    /// <p>The identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to create the encrypted snapshot.</p>
    pub kms_key_id: Option<String>,
    /// <p>The percentage of completion for the import snapshot task.</p>
    pub progress: Option<String>,
    /// <p>The snapshot ID of the disk being imported.</p>
    pub snapshot_id: Option<String>,
    /// <p>A brief status for the import snapshot task.</p>
    pub status: Option<String>,
    /// <p>A detailed status message for the import snapshot task.</p>
    pub status_message: Option<String>,
    /// <p>The URL of the disk image from which the snapshot is created.</p>
    pub url: Option<String>,
    /// <p>The S3 bucket for the disk image.</p>
    pub user_bucket: Option<UserBucketDetails>,
}

struct SnapshotTaskDetailDeserializer;
impl SnapshotTaskDetailDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SnapshotTaskDetail, XmlParseError> {
        deserialize_elements::<_, SnapshotTaskDetail, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "diskImageSize" => {
                    obj.disk_image_size =
                        Some(DoubleDeserializer::deserialize("diskImageSize", stack)?);
                }
                "encrypted" => {
                    obj.encrypted = Some(BooleanDeserializer::deserialize("encrypted", stack)?);
                }
                "format" => {
                    obj.format = Some(StringDeserializer::deserialize("format", stack)?);
                }
                "kmsKeyId" => {
                    obj.kms_key_id = Some(StringDeserializer::deserialize("kmsKeyId", stack)?);
                }
                "progress" => {
                    obj.progress = Some(StringDeserializer::deserialize("progress", stack)?);
                }
                "snapshotId" => {
                    obj.snapshot_id = Some(StringDeserializer::deserialize("snapshotId", stack)?);
                }
                "status" => {
                    obj.status = Some(StringDeserializer::deserialize("status", stack)?);
                }
                "statusMessage" => {
                    obj.status_message =
                        Some(StringDeserializer::deserialize("statusMessage", stack)?);
                }
                "url" => {
                    obj.url = Some(StringDeserializer::deserialize("url", stack)?);
                }
                "userBucket" => {
                    obj.user_bucket = Some(UserBucketDetailsDeserializer::deserialize(
                        "userBucket",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct SpotAllocationStrategyDeserializer;
impl SpotAllocationStrategyDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes the data feed for a Spot Instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SpotDatafeedSubscription {
    /// <p>The Amazon S3 bucket where the Spot Instance data feed is located.</p>
    pub bucket: Option<String>,
    /// <p>The fault codes for the Spot Instance request, if any.</p>
    pub fault: Option<SpotInstanceStateFault>,
    /// <p>The AWS account ID of the account.</p>
    pub owner_id: Option<String>,
    /// <p>The prefix that is prepended to data feed files.</p>
    pub prefix: Option<String>,
    /// <p>The state of the Spot Instance data feed subscription.</p>
    pub state: Option<String>,
}

struct SpotDatafeedSubscriptionDeserializer;
impl SpotDatafeedSubscriptionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SpotDatafeedSubscription, XmlParseError> {
        deserialize_elements::<_, SpotDatafeedSubscription, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "bucket" => {
                        obj.bucket = Some(StringDeserializer::deserialize("bucket", stack)?);
                    }
                    "fault" => {
                        obj.fault = Some(SpotInstanceStateFaultDeserializer::deserialize(
                            "fault", stack,
                        )?);
                    }
                    "ownerId" => {
                        obj.owner_id = Some(StringDeserializer::deserialize("ownerId", stack)?);
                    }
                    "prefix" => {
                        obj.prefix = Some(StringDeserializer::deserialize("prefix", stack)?);
                    }
                    "state" => {
                        obj.state = Some(DatafeedSubscriptionStateDeserializer::deserialize(
                            "state", stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes the launch specification for one or more Spot Instances. If you include On-Demand capacity in your fleet request, you can't use <code>SpotFleetLaunchSpecification</code>; you must use <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_LaunchTemplateConfig.html">LaunchTemplateConfig</a>.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SpotFleetLaunchSpecification {
    /// <p>Deprecated.</p>
    pub addressing_type: Option<String>,
    /// <p>One or more block devices that are mapped to the Spot instances. You can't specify both a snapshot ID and an encryption value. This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its encryption status is used for the volume encryption status.</p>
    pub block_device_mappings: Option<Vec<BlockDeviceMapping>>,
    /// <p>Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.</p> <p>Default: <code>false</code> </p>
    pub ebs_optimized: Option<bool>,
    /// <p>The IAM instance profile.</p>
    pub iam_instance_profile: Option<IamInstanceProfileSpecification>,
    /// <p>The ID of the AMI.</p>
    pub image_id: Option<String>,
    /// <p>The instance type.</p>
    pub instance_type: Option<String>,
    /// <p>The ID of the kernel.</p>
    pub kernel_id: Option<String>,
    /// <p>The name of the key pair.</p>
    pub key_name: Option<String>,
    /// <p>Enable or disable monitoring for the instances.</p>
    pub monitoring: Option<SpotFleetMonitoring>,
    /// <p>One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.</p>
    pub network_interfaces: Option<Vec<InstanceNetworkInterfaceSpecification>>,
    /// <p>The placement information.</p>
    pub placement: Option<SpotPlacement>,
    /// <p>The ID of the RAM disk. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, refer to the AWS Resource Center and search for the kernel ID.</p>
    pub ramdisk_id: Option<String>,
    /// <p>One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.</p>
    pub security_groups: Option<Vec<GroupIdentifier>>,
    /// <p>The maximum price per unit hour that you are willing to pay for a Spot Instance. If this value is not specified, the default is the Spot price specified for the fleet. To determine the Spot price per unit hour, divide the Spot price by the value of <code>WeightedCapacity</code>.</p>
    pub spot_price: Option<String>,
    /// <p>The ID of the subnet in which to launch the instances. To specify multiple subnets, separate them using commas; for example, "subnet-a61dafcf, subnet-65ea5f08".</p>
    pub subnet_id: Option<String>,
    /// <p>The tags to apply during creation.</p>
    pub tag_specifications: Option<Vec<SpotFleetTagSpecification>>,
    /// <p>The Base64-encoded user data that instances use when starting up.</p>
    pub user_data: Option<String>,
    /// <p>The number of units provided by the specified instance type. These are the same units that you chose to set the target capacity in terms of instances, or a performance characteristic such as vCPUs, memory, or I/O.</p> <p>If the target capacity divided by this value is not a whole number, Amazon EC2 rounds the number of instances to the next whole number. If this value is not specified, the default is 1.</p>
    pub weighted_capacity: Option<f64>,
}

struct SpotFleetLaunchSpecificationDeserializer;
impl SpotFleetLaunchSpecificationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SpotFleetLaunchSpecification, XmlParseError> {
        deserialize_elements::<_, SpotFleetLaunchSpecification, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "addressingType" => {
                        obj.addressing_type =
                            Some(StringDeserializer::deserialize("addressingType", stack)?);
                    }
                    "blockDeviceMapping" => {
                        obj.block_device_mappings.get_or_insert(vec![]).extend(
                            BlockDeviceMappingListDeserializer::deserialize(
                                "blockDeviceMapping",
                                stack,
                            )?,
                        );
                    }
                    "ebsOptimized" => {
                        obj.ebs_optimized =
                            Some(BooleanDeserializer::deserialize("ebsOptimized", stack)?);
                    }
                    "iamInstanceProfile" => {
                        obj.iam_instance_profile =
                            Some(IamInstanceProfileSpecificationDeserializer::deserialize(
                                "iamInstanceProfile",
                                stack,
                            )?);
                    }
                    "imageId" => {
                        obj.image_id = Some(StringDeserializer::deserialize("imageId", stack)?);
                    }
                    "instanceType" => {
                        obj.instance_type = Some(InstanceTypeDeserializer::deserialize(
                            "instanceType",
                            stack,
                        )?);
                    }
                    "kernelId" => {
                        obj.kernel_id = Some(StringDeserializer::deserialize("kernelId", stack)?);
                    }
                    "keyName" => {
                        obj.key_name = Some(StringDeserializer::deserialize("keyName", stack)?);
                    }
                    "monitoring" => {
                        obj.monitoring = Some(SpotFleetMonitoringDeserializer::deserialize(
                            "monitoring",
                            stack,
                        )?);
                    }
                    "networkInterfaceSet" => {
                        obj.network_interfaces.get_or_insert(vec![]).extend(
                            InstanceNetworkInterfaceSpecificationListDeserializer::deserialize(
                                "networkInterfaceSet",
                                stack,
                            )?,
                        );
                    }
                    "placement" => {
                        obj.placement =
                            Some(SpotPlacementDeserializer::deserialize("placement", stack)?);
                    }
                    "ramdiskId" => {
                        obj.ramdisk_id = Some(StringDeserializer::deserialize("ramdiskId", stack)?);
                    }
                    "groupSet" => {
                        obj.security_groups.get_or_insert(vec![]).extend(
                            GroupIdentifierListDeserializer::deserialize("groupSet", stack)?,
                        );
                    }
                    "spotPrice" => {
                        obj.spot_price = Some(StringDeserializer::deserialize("spotPrice", stack)?);
                    }
                    "subnetId" => {
                        obj.subnet_id = Some(StringDeserializer::deserialize("subnetId", stack)?);
                    }
                    "tagSpecificationSet" => {
                        obj.tag_specifications.get_or_insert(vec![]).extend(
                            SpotFleetTagSpecificationListDeserializer::deserialize(
                                "tagSpecificationSet",
                                stack,
                            )?,
                        );
                    }
                    "userData" => {
                        obj.user_data = Some(StringDeserializer::deserialize("userData", stack)?);
                    }
                    "weightedCapacity" => {
                        obj.weighted_capacity =
                            Some(DoubleDeserializer::deserialize("weightedCapacity", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}

/// Serialize `SpotFleetLaunchSpecification` contents to a `SignedRequest`.
struct SpotFleetLaunchSpecificationSerializer;
impl SpotFleetLaunchSpecificationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &SpotFleetLaunchSpecification) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.addressing_type {
            params.put(&format!("{}{}", prefix, "AddressingType"), &field_value);
        }
        if let Some(ref field_value) = obj.block_device_mappings {
            BlockDeviceMappingListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "BlockDeviceMapping"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.ebs_optimized {
            params.put(&format!("{}{}", prefix, "EbsOptimized"), &field_value);
        }
        if let Some(ref field_value) = obj.iam_instance_profile {
            IamInstanceProfileSpecificationSerializer::serialize(
                params,
                &format!("{}{}", prefix, "IamInstanceProfile"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.image_id {
            params.put(&format!("{}{}", prefix, "ImageId"), &field_value);
        }
        if let Some(ref field_value) = obj.instance_type {
            params.put(&format!("{}{}", prefix, "InstanceType"), &field_value);
        }
        if let Some(ref field_value) = obj.kernel_id {
            params.put(&format!("{}{}", prefix, "KernelId"), &field_value);
        }
        if let Some(ref field_value) = obj.key_name {
            params.put(&format!("{}{}", prefix, "KeyName"), &field_value);
        }
        if let Some(ref field_value) = obj.monitoring {
            SpotFleetMonitoringSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Monitoring"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.network_interfaces {
            InstanceNetworkInterfaceSpecificationListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "NetworkInterfaceSet"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.placement {
            SpotPlacementSerializer::serialize(
                params,
                &format!("{}{}", prefix, "Placement"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.ramdisk_id {
            params.put(&format!("{}{}", prefix, "RamdiskId"), &field_value);
        }
        if let Some(ref field_value) = obj.security_groups {
            GroupIdentifierListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "GroupSet"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.spot_price {
            params.put(&format!("{}{}", prefix, "SpotPrice"), &field_value);
        }
        if let Some(ref field_value) = obj.subnet_id {
            params.put(&format!("{}{}", prefix, "SubnetId"), &field_value);
        }
        if let Some(ref field_value) = obj.tag_specifications {
            SpotFleetTagSpecificationListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "TagSpecificationSet"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.user_data {
            params.put(&format!("{}{}", prefix, "UserData"), &field_value);
        }
        if let Some(ref field_value) = obj.weighted_capacity {
            params.put(&format!("{}{}", prefix, "WeightedCapacity"), &field_value);
        }
    }
}

/// <p>Describes whether monitoring is enabled.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SpotFleetMonitoring {
    /// <p>Enables monitoring for the instance.</p> <p>Default: <code>false</code> </p>
    pub enabled: Option<bool>,
}

struct SpotFleetMonitoringDeserializer;
impl SpotFleetMonitoringDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SpotFleetMonitoring, XmlParseError> {
        deserialize_elements::<_, SpotFleetMonitoring, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "enabled" => {
                    obj.enabled = Some(BooleanDeserializer::deserialize("enabled", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `SpotFleetMonitoring` contents to a `SignedRequest`.
struct SpotFleetMonitoringSerializer;
impl SpotFleetMonitoringSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &SpotFleetMonitoring) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.enabled {
            params.put(&format!("{}{}", prefix, "Enabled"), &field_value);
        }
    }
}

/// <p>Describes a Spot Fleet request.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SpotFleetRequestConfig {
    /// <p>The progress of the Spot Fleet request. If there is an error, the status is <code>error</code>. After all requests are placed, the status is <code>pending_fulfillment</code>. If the size of the fleet is equal to or greater than its target capacity, the status is <code>fulfilled</code>. If the size of the fleet is decreased, the status is <code>pending_termination</code> while Spot Instances are terminating.</p>
    pub activity_status: Option<String>,
    /// <p>The creation date and time of the request.</p>
    pub create_time: Option<String>,
    /// <p>The configuration of the Spot Fleet request.</p>
    pub spot_fleet_request_config: Option<SpotFleetRequestConfigData>,
    /// <p>The ID of the Spot Fleet request.</p>
    pub spot_fleet_request_id: Option<String>,
    /// <p>The state of the Spot Fleet request.</p>
    pub spot_fleet_request_state: Option<String>,
}

struct SpotFleetRequestConfigDeserializer;
impl SpotFleetRequestConfigDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SpotFleetRequestConfig, XmlParseError> {
        deserialize_elements::<_, SpotFleetRequestConfig, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "activityStatus" => {
                    obj.activity_status = Some(ActivityStatusDeserializer::deserialize(
                        "activityStatus",
                        stack,
                    )?);
                }
                "createTime" => {
                    obj.create_time = Some(DateTimeDeserializer::deserialize("createTime", stack)?);
                }
                "spotFleetRequestConfig" => {
                    obj.spot_fleet_request_config =
                        Some(SpotFleetRequestConfigDataDeserializer::deserialize(
                            "spotFleetRequestConfig",
                            stack,
                        )?);
                }
                "spotFleetRequestId" => {
                    obj.spot_fleet_request_id = Some(StringDeserializer::deserialize(
                        "spotFleetRequestId",
                        stack,
                    )?);
                }
                "spotFleetRequestState" => {
                    obj.spot_fleet_request_state = Some(BatchStateDeserializer::deserialize(
                        "spotFleetRequestState",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes the configuration of a Spot Fleet request.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SpotFleetRequestConfigData {
    /// <p>Indicates how to allocate the target capacity across the Spot pools specified by the Spot Fleet request. The default is <code>lowestPrice</code>.</p>
    pub allocation_strategy: Option<String>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of your listings. This helps to avoid duplicate listings. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring Idempotency</a>.</p>
    pub client_token: Option<String>,
    /// <p>Indicates whether running Spot Instances should be terminated if you decrease the target capacity of the Spot Fleet request below the current size of the Spot Fleet.</p>
    pub excess_capacity_termination_policy: Option<String>,
    /// <p>The number of units fulfilled by this request compared to the set target capacity. You cannot set this value.</p>
    pub fulfilled_capacity: Option<f64>,
    /// <p>The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants the Spot Fleet the permission to request, launch, terminate, and tag instances on your behalf. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html#spot-fleet-prerequisites">Spot Fleet Prerequisites</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>. Spot Fleet can terminate Spot Instances on your behalf when you cancel its Spot Fleet request using <a>CancelSpotFleetRequests</a> or when the Spot Fleet request expires, if you set <code>TerminateInstancesWithExpiration</code>.</p>
    pub iam_fleet_role: String,
    /// <p>The behavior when a Spot Instance is interrupted. The default is <code>terminate</code>.</p>
    pub instance_interruption_behavior: Option<String>,
    /// <p>The number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot <b>AllocationStrategy</b> is set to <code>lowest-price</code>. Spot Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.</p>
    pub instance_pools_to_use_count: Option<i64>,
    /// <p>The launch specifications for the Spot Fleet request. If you specify <code>LaunchSpecifications</code>, you can't specify <code>LaunchTemplateConfigs</code>. If you include On-Demand capacity in your request, you must use <code>LaunchTemplateConfigs</code>.</p>
    pub launch_specifications: Option<Vec<SpotFleetLaunchSpecification>>,
    /// <p>The launch template and overrides. If you specify <code>LaunchTemplateConfigs</code>, you can't specify <code>LaunchSpecifications</code>. If you include On-Demand capacity in your request, you must use <code>LaunchTemplateConfigs</code>.</p>
    pub launch_template_configs: Option<Vec<LaunchTemplateConfig>>,
    /// <p>One or more Classic Load Balancers and target groups to attach to the Spot Fleet request. Spot Fleet registers the running Spot Instances with the specified Classic Load Balancers and target groups.</p> <p>With Network Load Balancers, Spot Fleet cannot register instances that have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1.</p>
    pub load_balancers_config: Option<LoadBalancersConfig>,
    /// <p>The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify <code>lowestPrice</code>, Spot Fleet uses price to determine the order, launching the lowest price first. If you specify <code>prioritized</code>, Spot Fleet uses the priority that you assign to each Spot Fleet launch template override, launching the highest priority first. If you do not specify a value, Spot Fleet defaults to <code>lowestPrice</code>.</p>
    pub on_demand_allocation_strategy: Option<String>,
    /// <p>The number of On-Demand units fulfilled by this request compared to the set target On-Demand capacity.</p>
    pub on_demand_fulfilled_capacity: Option<f64>,
    /// <p>The number of On-Demand units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p>
    pub on_demand_target_capacity: Option<i64>,
    /// <p>Indicates whether Spot Fleet should replace unhealthy instances.</p>
    pub replace_unhealthy_instances: Option<bool>,
    /// <p>The maximum price per unit hour that you are willing to pay for a Spot Instance. The default is the On-Demand price.</p>
    pub spot_price: Option<String>,
    /// <p>The number of units to request for the Spot Fleet. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p>
    pub target_capacity: i64,
    /// <p>Indicates whether running Spot Instances are terminated when the Spot Fleet request expires.</p>
    pub terminate_instances_with_expiration: Option<bool>,
    /// <p>The type of request. Indicates whether the Spot Fleet only requests the target capacity or also attempts to maintain it. When this value is <code>request</code>, the Spot Fleet only places the required requests. It does not attempt to replenish Spot Instances if capacity is diminished, nor does it submit requests in alternative Spot pools if capacity is not available. When this value is <code>maintain</code>, the Spot Fleet maintains the target capacity. The Spot Fleet places the required requests to meet capacity and automatically replenishes any interrupted instances. Default: <code>maintain</code>. <code>instant</code> is listed but is not used by Spot Fleet.</p>
    pub type_: Option<String>,
    /// <p>The start date and time of the request, in UTC format (<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). By default, Amazon EC2 starts fulfilling the request immediately.</p>
    pub valid_from: Option<String>,
    /// <p>The end date and time of the request, in UTC format (<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). After the end date and time, no new Spot Instance requests are placed or able to fulfill the request. If no value is specified, the Spot Fleet request remains until you cancel it.</p>
    pub valid_until: Option<String>,
}

struct SpotFleetRequestConfigDataDeserializer;
impl SpotFleetRequestConfigDataDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SpotFleetRequestConfigData, XmlParseError> {
        deserialize_elements::<_, SpotFleetRequestConfigData, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "allocationStrategy" => {
                        obj.allocation_strategy =
                            Some(AllocationStrategyDeserializer::deserialize(
                                "allocationStrategy",
                                stack,
                            )?);
                    }
                    "clientToken" => {
                        obj.client_token =
                            Some(StringDeserializer::deserialize("clientToken", stack)?);
                    }
                    "excessCapacityTerminationPolicy" => {
                        obj.excess_capacity_termination_policy =
                            Some(ExcessCapacityTerminationPolicyDeserializer::deserialize(
                                "excessCapacityTerminationPolicy",
                                stack,
                            )?);
                    }
                    "fulfilledCapacity" => {
                        obj.fulfilled_capacity =
                            Some(DoubleDeserializer::deserialize("fulfilledCapacity", stack)?);
                    }
                    "iamFleetRole" => {
                        obj.iam_fleet_role =
                            StringDeserializer::deserialize("iamFleetRole", stack)?;
                    }
                    "instanceInterruptionBehavior" => {
                        obj.instance_interruption_behavior =
                            Some(InstanceInterruptionBehaviorDeserializer::deserialize(
                                "instanceInterruptionBehavior",
                                stack,
                            )?);
                    }
                    "instancePoolsToUseCount" => {
                        obj.instance_pools_to_use_count = Some(IntegerDeserializer::deserialize(
                            "instancePoolsToUseCount",
                            stack,
                        )?);
                    }
                    "launchSpecifications" => {
                        obj.launch_specifications.get_or_insert(vec![]).extend(
                            LaunchSpecsListDeserializer::deserialize(
                                "launchSpecifications",
                                stack,
                            )?,
                        );
                    }
                    "launchTemplateConfigs" => {
                        obj.launch_template_configs.get_or_insert(vec![]).extend(
                            LaunchTemplateConfigListDeserializer::deserialize(
                                "launchTemplateConfigs",
                                stack,
                            )?,
                        );
                    }
                    "loadBalancersConfig" => {
                        obj.load_balancers_config =
                            Some(LoadBalancersConfigDeserializer::deserialize(
                                "loadBalancersConfig",
                                stack,
                            )?);
                    }
                    "onDemandAllocationStrategy" => {
                        obj.on_demand_allocation_strategy =
                            Some(OnDemandAllocationStrategyDeserializer::deserialize(
                                "onDemandAllocationStrategy",
                                stack,
                            )?);
                    }
                    "onDemandFulfilledCapacity" => {
                        obj.on_demand_fulfilled_capacity = Some(DoubleDeserializer::deserialize(
                            "onDemandFulfilledCapacity",
                            stack,
                        )?);
                    }
                    "onDemandTargetCapacity" => {
                        obj.on_demand_target_capacity = Some(IntegerDeserializer::deserialize(
                            "onDemandTargetCapacity",
                            stack,
                        )?);
                    }
                    "replaceUnhealthyInstances" => {
                        obj.replace_unhealthy_instances = Some(BooleanDeserializer::deserialize(
                            "replaceUnhealthyInstances",
                            stack,
                        )?);
                    }
                    "spotPrice" => {
                        obj.spot_price = Some(StringDeserializer::deserialize("spotPrice", stack)?);
                    }
                    "targetCapacity" => {
                        obj.target_capacity =
                            IntegerDeserializer::deserialize("targetCapacity", stack)?;
                    }
                    "terminateInstancesWithExpiration" => {
                        obj.terminate_instances_with_expiration =
                            Some(BooleanDeserializer::deserialize(
                                "terminateInstancesWithExpiration",
                                stack,
                            )?);
                    }
                    "type" => {
                        obj.type_ = Some(FleetTypeDeserializer::deserialize("type", stack)?);
                    }
                    "validFrom" => {
                        obj.valid_from =
                            Some(DateTimeDeserializer::deserialize("validFrom", stack)?);
                    }
                    "validUntil" => {
                        obj.valid_until =
                            Some(DateTimeDeserializer::deserialize("validUntil", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}

/// Serialize `SpotFleetRequestConfigData` contents to a `SignedRequest`.
struct SpotFleetRequestConfigDataSerializer;
impl SpotFleetRequestConfigDataSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &SpotFleetRequestConfigData) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.allocation_strategy {
            params.put(&format!("{}{}", prefix, "AllocationStrategy"), &field_value);
        }
        if let Some(ref field_value) = obj.client_token {
            params.put(&format!("{}{}", prefix, "ClientToken"), &field_value);
        }
        if let Some(ref field_value) = obj.excess_capacity_termination_policy {
            params.put(
                &format!("{}{}", prefix, "ExcessCapacityTerminationPolicy"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.fulfilled_capacity {
            params.put(&format!("{}{}", prefix, "FulfilledCapacity"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "IamFleetRole"),
            &obj.iam_fleet_role,
        );
        if let Some(ref field_value) = obj.instance_interruption_behavior {
            params.put(
                &format!("{}{}", prefix, "InstanceInterruptionBehavior"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.instance_pools_to_use_count {
            params.put(
                &format!("{}{}", prefix, "InstancePoolsToUseCount"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.launch_specifications {
            LaunchSpecsListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "LaunchSpecifications"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.launch_template_configs {
            LaunchTemplateConfigListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "LaunchTemplateConfigs"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.load_balancers_config {
            LoadBalancersConfigSerializer::serialize(
                params,
                &format!("{}{}", prefix, "LoadBalancersConfig"),
                field_value,
            );
        }
        if let Some(ref field_value) = obj.on_demand_allocation_strategy {
            params.put(
                &format!("{}{}", prefix, "OnDemandAllocationStrategy"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.on_demand_fulfilled_capacity {
            params.put(
                &format!("{}{}", prefix, "OnDemandFulfilledCapacity"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.on_demand_target_capacity {
            params.put(
                &format!("{}{}", prefix, "OnDemandTargetCapacity"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.replace_unhealthy_instances {
            params.put(
                &format!("{}{}", prefix, "ReplaceUnhealthyInstances"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.spot_price {
            params.put(&format!("{}{}", prefix, "SpotPrice"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TargetCapacity"),
            &obj.target_capacity,
        );
        if let Some(ref field_value) = obj.terminate_instances_with_expiration {
            params.put(
                &format!("{}{}", prefix, "TerminateInstancesWithExpiration"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.type_ {
            params.put(&format!("{}{}", prefix, "Type"), &field_value);
        }
        if let Some(ref field_value) = obj.valid_from {
            params.put(&format!("{}{}", prefix, "ValidFrom"), &field_value);
        }
        if let Some(ref field_value) = obj.valid_until {
            params.put(&format!("{}{}", prefix, "ValidUntil"), &field_value);
        }
    }
}

struct SpotFleetRequestConfigSetDeserializer;
impl SpotFleetRequestConfigSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<SpotFleetRequestConfig>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(SpotFleetRequestConfigDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>The tags for a Spot Fleet resource.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SpotFleetTagSpecification {
    /// <p>The type of resource. Currently, the only resource type that is supported is <code>instance</code>.</p>
    pub resource_type: Option<String>,
    /// <p>The tags.</p>
    pub tags: Option<Vec<Tag>>,
}

struct SpotFleetTagSpecificationDeserializer;
impl SpotFleetTagSpecificationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SpotFleetTagSpecification, XmlParseError> {
        deserialize_elements::<_, SpotFleetTagSpecification, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "resourceType" => {
                        obj.resource_type = Some(ResourceTypeDeserializer::deserialize(
                            "resourceType",
                            stack,
                        )?);
                    }
                    "tag" => {
                        obj.tags
                            .get_or_insert(vec![])
                            .extend(TagListDeserializer::deserialize("tag", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}

/// Serialize `SpotFleetTagSpecification` contents to a `SignedRequest`.
struct SpotFleetTagSpecificationSerializer;
impl SpotFleetTagSpecificationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &SpotFleetTagSpecification) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.resource_type {
            params.put(&format!("{}{}", prefix, "ResourceType"), &field_value);
        }
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
    }
}

struct SpotFleetTagSpecificationListDeserializer;
impl SpotFleetTagSpecificationListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<SpotFleetTagSpecification>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(SpotFleetTagSpecificationDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `SpotFleetTagSpecificationList` contents to a `SignedRequest`.
struct SpotFleetTagSpecificationListSerializer;
impl SpotFleetTagSpecificationListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<SpotFleetTagSpecification>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            SpotFleetTagSpecificationSerializer::serialize(params, &key, obj);
        }
    }
}

struct SpotInstanceInterruptionBehaviorDeserializer;
impl SpotInstanceInterruptionBehaviorDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a Spot Instance request.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SpotInstanceRequest {
    /// <p>If you specified a duration and your Spot Instance request was fulfilled, this is the fixed hourly price in effect for the Spot Instance while it runs.</p>
    pub actual_block_hourly_price: Option<String>,
    /// <p>The Availability Zone group. If you specify the same Availability Zone group for all Spot Instance requests, all Spot Instances are launched in the same Availability Zone.</p>
    pub availability_zone_group: Option<String>,
    /// <p>The duration for the Spot Instance, in minutes.</p>
    pub block_duration_minutes: Option<i64>,
    /// <p>The date and time when the Spot Instance request was created, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub create_time: Option<String>,
    /// <p>The fault codes for the Spot Instance request, if any.</p>
    pub fault: Option<SpotInstanceStateFault>,
    /// <p>The instance ID, if an instance has been launched to fulfill the Spot Instance request.</p>
    pub instance_id: Option<String>,
    /// <p>The behavior when a Spot Instance is interrupted.</p>
    pub instance_interruption_behavior: Option<String>,
    /// <p>The instance launch group. Launch groups are Spot Instances that launch together and terminate together.</p>
    pub launch_group: Option<String>,
    /// <p>Additional information for launching instances.</p>
    pub launch_specification: Option<LaunchSpecification>,
    /// <p>The Availability Zone in which the request is launched.</p>
    pub launched_availability_zone: Option<String>,
    /// <p>The product description associated with the Spot Instance.</p>
    pub product_description: Option<String>,
    /// <p>The ID of the Spot Instance request.</p>
    pub spot_instance_request_id: Option<String>,
    /// <p>The maximum price per hour that you are willing to pay for a Spot Instance.</p>
    pub spot_price: Option<String>,
    /// <p>The state of the Spot Instance request. Spot status information helps track your Spot Instance requests. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html">Spot Status</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    pub state: Option<String>,
    /// <p>The status code and status message describing the Spot Instance request.</p>
    pub status: Option<SpotInstanceStatus>,
    /// <p>Any tags assigned to the resource.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The Spot Instance request type.</p>
    pub type_: Option<String>,
    /// <p>The start date of the request, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). The request becomes active at this date and time.</p>
    pub valid_from: Option<String>,
    /// <p>The end date of the request, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). If this is a one-time request, it remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date is reached. The default end date is 7 days from the current date.</p>
    pub valid_until: Option<String>,
}

struct SpotInstanceRequestDeserializer;
impl SpotInstanceRequestDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SpotInstanceRequest, XmlParseError> {
        deserialize_elements::<_, SpotInstanceRequest, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "actualBlockHourlyPrice" => {
                    obj.actual_block_hourly_price = Some(StringDeserializer::deserialize(
                        "actualBlockHourlyPrice",
                        stack,
                    )?);
                }
                "availabilityZoneGroup" => {
                    obj.availability_zone_group = Some(StringDeserializer::deserialize(
                        "availabilityZoneGroup",
                        stack,
                    )?);
                }
                "blockDurationMinutes" => {
                    obj.block_duration_minutes = Some(IntegerDeserializer::deserialize(
                        "blockDurationMinutes",
                        stack,
                    )?);
                }
                "createTime" => {
                    obj.create_time = Some(DateTimeDeserializer::deserialize("createTime", stack)?);
                }
                "fault" => {
                    obj.fault = Some(SpotInstanceStateFaultDeserializer::deserialize(
                        "fault", stack,
                    )?);
                }
                "instanceId" => {
                    obj.instance_id = Some(StringDeserializer::deserialize("instanceId", stack)?);
                }
                "instanceInterruptionBehavior" => {
                    obj.instance_interruption_behavior =
                        Some(InstanceInterruptionBehaviorDeserializer::deserialize(
                            "instanceInterruptionBehavior",
                            stack,
                        )?);
                }
                "launchGroup" => {
                    obj.launch_group = Some(StringDeserializer::deserialize("launchGroup", stack)?);
                }
                "launchSpecification" => {
                    obj.launch_specification = Some(LaunchSpecificationDeserializer::deserialize(
                        "launchSpecification",
                        stack,
                    )?);
                }
                "launchedAvailabilityZone" => {
                    obj.launched_availability_zone = Some(StringDeserializer::deserialize(
                        "launchedAvailabilityZone",
                        stack,
                    )?);
                }
                "productDescription" => {
                    obj.product_description = Some(RIProductDescriptionDeserializer::deserialize(
                        "productDescription",
                        stack,
                    )?);
                }
                "spotInstanceRequestId" => {
                    obj.spot_instance_request_id = Some(StringDeserializer::deserialize(
                        "spotInstanceRequestId",
                        stack,
                    )?);
                }
                "spotPrice" => {
                    obj.spot_price = Some(StringDeserializer::deserialize("spotPrice", stack)?);
                }
                "state" => {
                    obj.state = Some(SpotInstanceStateDeserializer::deserialize("state", stack)?);
                }
                "status" => {
                    obj.status = Some(SpotInstanceStatusDeserializer::deserialize(
                        "status", stack,
                    )?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "type" => {
                    obj.type_ = Some(SpotInstanceTypeDeserializer::deserialize("type", stack)?);
                }
                "validFrom" => {
                    obj.valid_from = Some(DateTimeDeserializer::deserialize("validFrom", stack)?);
                }
                "validUntil" => {
                    obj.valid_until = Some(DateTimeDeserializer::deserialize("validUntil", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `SpotInstanceRequestIdList` contents to a `SignedRequest`.
struct SpotInstanceRequestIdListSerializer;
impl SpotInstanceRequestIdListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct SpotInstanceRequestListDeserializer;
impl SpotInstanceRequestListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<SpotInstanceRequest>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(SpotInstanceRequestDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct SpotInstanceStateDeserializer;
impl SpotInstanceStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a Spot Instance state change.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SpotInstanceStateFault {
    /// <p>The reason code for the Spot Instance state change.</p>
    pub code: Option<String>,
    /// <p>The message for the Spot Instance state change.</p>
    pub message: Option<String>,
}

struct SpotInstanceStateFaultDeserializer;
impl SpotInstanceStateFaultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SpotInstanceStateFault, XmlParseError> {
        deserialize_elements::<_, SpotInstanceStateFault, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "code" => {
                    obj.code = Some(StringDeserializer::deserialize("code", stack)?);
                }
                "message" => {
                    obj.message = Some(StringDeserializer::deserialize("message", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes the status of a Spot Instance request.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SpotInstanceStatus {
    /// <p>The status code. For a list of status codes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html#spot-instance-bid-status-understand">Spot Status Codes</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    pub code: Option<String>,
    /// <p>The description for the status code.</p>
    pub message: Option<String>,
    /// <p>The date and time of the most recent status update, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub update_time: Option<String>,
}

struct SpotInstanceStatusDeserializer;
impl SpotInstanceStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SpotInstanceStatus, XmlParseError> {
        deserialize_elements::<_, SpotInstanceStatus, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "code" => {
                    obj.code = Some(StringDeserializer::deserialize("code", stack)?);
                }
                "message" => {
                    obj.message = Some(StringDeserializer::deserialize("message", stack)?);
                }
                "updateTime" => {
                    obj.update_time = Some(DateTimeDeserializer::deserialize("updateTime", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct SpotInstanceTypeDeserializer;
impl SpotInstanceTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>The options for Spot Instances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SpotMarketOptions {
    /// <p>The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).</p>
    pub block_duration_minutes: Option<i64>,
    /// <p>The behavior when a Spot Instance is interrupted. The default is <code>terminate</code>.</p>
    pub instance_interruption_behavior: Option<String>,
    /// <p>The maximum hourly price you're willing to pay for the Spot Instances. The default is the On-Demand price.</p>
    pub max_price: Option<String>,
    /// <p>The Spot Instance request type. For <a>RunInstances</a>, persistent Spot Instance requests are only supported when <b>InstanceInterruptionBehavior</b> is set to either <code>hibernate</code> or <code>stop</code>.</p>
    pub spot_instance_type: Option<String>,
    /// <p>The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached. The default end date is 7 days from the current date.</p>
    pub valid_until: Option<String>,
}

/// Serialize `SpotMarketOptions` contents to a `SignedRequest`.
struct SpotMarketOptionsSerializer;
impl SpotMarketOptionsSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &SpotMarketOptions) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.block_duration_minutes {
            params.put(
                &format!("{}{}", prefix, "BlockDurationMinutes"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.instance_interruption_behavior {
            params.put(
                &format!("{}{}", prefix, "InstanceInterruptionBehavior"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.max_price {
            params.put(&format!("{}{}", prefix, "MaxPrice"), &field_value);
        }
        if let Some(ref field_value) = obj.spot_instance_type {
            params.put(&format!("{}{}", prefix, "SpotInstanceType"), &field_value);
        }
        if let Some(ref field_value) = obj.valid_until {
            params.put(&format!("{}{}", prefix, "ValidUntil"), &field_value);
        }
    }
}

/// <p>Describes the configuration of Spot Instances in an EC2 Fleet.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SpotOptions {
    /// <p>Indicates how to allocate the target capacity across the Spot pools specified by the Spot Fleet request. The default is <code>lowest-price</code>.</p>
    pub allocation_strategy: Option<String>,
    /// <p>The behavior when a Spot Instance is interrupted. The default is <code>terminate</code>.</p>
    pub instance_interruption_behavior: Option<String>,
    /// <p>The number of Spot pools across which to allocate your target Spot capacity. Valid only when <b>AllocationStrategy</b> is set to <code>lowestPrice</code>. EC2 Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.</p>
    pub instance_pools_to_use_count: Option<i64>,
    /// <p>The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.</p>
    pub min_target_capacity: Option<i64>,
    /// <p>Indicates that the fleet launches all Spot Instances into a single Availability Zone.</p>
    pub single_availability_zone: Option<bool>,
    /// <p>Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet.</p>
    pub single_instance_type: Option<bool>,
}

struct SpotOptionsDeserializer;
impl SpotOptionsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SpotOptions, XmlParseError> {
        deserialize_elements::<_, SpotOptions, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "allocationStrategy" => {
                    obj.allocation_strategy =
                        Some(SpotAllocationStrategyDeserializer::deserialize(
                            "allocationStrategy",
                            stack,
                        )?);
                }
                "instanceInterruptionBehavior" => {
                    obj.instance_interruption_behavior =
                        Some(SpotInstanceInterruptionBehaviorDeserializer::deserialize(
                            "instanceInterruptionBehavior",
                            stack,
                        )?);
                }
                "instancePoolsToUseCount" => {
                    obj.instance_pools_to_use_count = Some(IntegerDeserializer::deserialize(
                        "instancePoolsToUseCount",
                        stack,
                    )?);
                }
                "minTargetCapacity" => {
                    obj.min_target_capacity = Some(IntegerDeserializer::deserialize(
                        "minTargetCapacity",
                        stack,
                    )?);
                }
                "singleAvailabilityZone" => {
                    obj.single_availability_zone = Some(BooleanDeserializer::deserialize(
                        "singleAvailabilityZone",
                        stack,
                    )?);
                }
                "singleInstanceType" => {
                    obj.single_instance_type = Some(BooleanDeserializer::deserialize(
                        "singleInstanceType",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes the configuration of Spot Instances in an EC2 Fleet request.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SpotOptionsRequest {
    /// <p>Indicates how to allocate the target capacity across the Spot pools specified by the Spot Fleet request. The default is <code>lowestPrice</code>.</p>
    pub allocation_strategy: Option<String>,
    /// <p>The behavior when a Spot Instance is interrupted. The default is <code>terminate</code>.</p>
    pub instance_interruption_behavior: Option<String>,
    /// <p>The number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot <b>AllocationStrategy</b> is set to <code>lowest-price</code>. EC2 Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.</p>
    pub instance_pools_to_use_count: Option<i64>,
    /// <p>The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.</p>
    pub min_target_capacity: Option<i64>,
    /// <p>Indicates that the fleet launches all Spot Instances into a single Availability Zone.</p>
    pub single_availability_zone: Option<bool>,
    /// <p>Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet.</p>
    pub single_instance_type: Option<bool>,
}

/// Serialize `SpotOptionsRequest` contents to a `SignedRequest`.
struct SpotOptionsRequestSerializer;
impl SpotOptionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &SpotOptionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.allocation_strategy {
            params.put(&format!("{}{}", prefix, "AllocationStrategy"), &field_value);
        }
        if let Some(ref field_value) = obj.instance_interruption_behavior {
            params.put(
                &format!("{}{}", prefix, "InstanceInterruptionBehavior"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.instance_pools_to_use_count {
            params.put(
                &format!("{}{}", prefix, "InstancePoolsToUseCount"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.min_target_capacity {
            params.put(&format!("{}{}", prefix, "MinTargetCapacity"), &field_value);
        }
        if let Some(ref field_value) = obj.single_availability_zone {
            params.put(
                &format!("{}{}", prefix, "SingleAvailabilityZone"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.single_instance_type {
            params.put(&format!("{}{}", prefix, "SingleInstanceType"), &field_value);
        }
    }
}

/// <p>Describes Spot Instance placement.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SpotPlacement {
    /// <p>The Availability Zone.</p> <p>[Spot Fleet only] To specify multiple Availability Zones, separate them using commas; for example, "us-west-2a, us-west-2b".</p>
    pub availability_zone: Option<String>,
    /// <p>The name of the placement group.</p>
    pub group_name: Option<String>,
    /// <p>The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of <code>dedicated</code> runs on single-tenant hardware. The <code>host</code> tenancy is not supported for Spot Instances.</p>
    pub tenancy: Option<String>,
}

struct SpotPlacementDeserializer;
impl SpotPlacementDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SpotPlacement, XmlParseError> {
        deserialize_elements::<_, SpotPlacement, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "availabilityZone" => {
                    obj.availability_zone =
                        Some(StringDeserializer::deserialize("availabilityZone", stack)?);
                }
                "groupName" => {
                    obj.group_name = Some(StringDeserializer::deserialize("groupName", stack)?);
                }
                "tenancy" => {
                    obj.tenancy = Some(TenancyDeserializer::deserialize("tenancy", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `SpotPlacement` contents to a `SignedRequest`.
struct SpotPlacementSerializer;
impl SpotPlacementSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &SpotPlacement) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.availability_zone {
            params.put(&format!("{}{}", prefix, "AvailabilityZone"), &field_value);
        }
        if let Some(ref field_value) = obj.group_name {
            params.put(&format!("{}{}", prefix, "GroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.tenancy {
            params.put(&format!("{}{}", prefix, "Tenancy"), &field_value);
        }
    }
}

/// <p>Describes the maximum price per hour that you are willing to pay for a Spot Instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SpotPrice {
    /// <p>The Availability Zone.</p>
    pub availability_zone: Option<String>,
    /// <p>The instance type.</p>
    pub instance_type: Option<String>,
    /// <p>A general description of the AMI.</p>
    pub product_description: Option<String>,
    /// <p>The maximum price per hour that you are willing to pay for a Spot Instance.</p>
    pub spot_price: Option<String>,
    /// <p>The date and time the request was created, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).</p>
    pub timestamp: Option<String>,
}

struct SpotPriceDeserializer;
impl SpotPriceDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SpotPrice, XmlParseError> {
        deserialize_elements::<_, SpotPrice, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "availabilityZone" => {
                    obj.availability_zone =
                        Some(StringDeserializer::deserialize("availabilityZone", stack)?);
                }
                "instanceType" => {
                    obj.instance_type = Some(InstanceTypeDeserializer::deserialize(
                        "instanceType",
                        stack,
                    )?);
                }
                "productDescription" => {
                    obj.product_description = Some(RIProductDescriptionDeserializer::deserialize(
                        "productDescription",
                        stack,
                    )?);
                }
                "spotPrice" => {
                    obj.spot_price = Some(StringDeserializer::deserialize("spotPrice", stack)?);
                }
                "timestamp" => {
                    obj.timestamp = Some(DateTimeDeserializer::deserialize("timestamp", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct SpotPriceHistoryListDeserializer;
impl SpotPriceHistoryListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<SpotPrice>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(SpotPriceDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a stale rule in a security group.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct StaleIpPermission {
    /// <p>The start of the port range for the TCP and UDP protocols, or an ICMP type number. A value of <code>-1</code> indicates all ICMP types. </p>
    pub from_port: Option<i64>,
    /// <p>The IP protocol name (for <code>tcp</code>, <code>udp</code>, and <code>icmp</code>) or number (see <a href="http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers)</a>.</p>
    pub ip_protocol: Option<String>,
    /// <p>The IP ranges. Not applicable for stale security group rules.</p>
    pub ip_ranges: Option<Vec<String>>,
    /// <p>The prefix list IDs for an AWS service. Not applicable for stale security group rules.</p>
    pub prefix_list_ids: Option<Vec<String>>,
    /// <p>The end of the port range for the TCP and UDP protocols, or an ICMP type number. A value of <code>-1</code> indicates all ICMP types. </p>
    pub to_port: Option<i64>,
    /// <p>The security group pairs. Returns the ID of the referenced security group and VPC, and the ID and status of the VPC peering connection.</p>
    pub user_id_group_pairs: Option<Vec<UserIdGroupPair>>,
}

struct StaleIpPermissionDeserializer;
impl StaleIpPermissionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<StaleIpPermission, XmlParseError> {
        deserialize_elements::<_, StaleIpPermission, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "fromPort" => {
                    obj.from_port = Some(IntegerDeserializer::deserialize("fromPort", stack)?);
                }
                "ipProtocol" => {
                    obj.ip_protocol = Some(StringDeserializer::deserialize("ipProtocol", stack)?);
                }
                "ipRanges" => {
                    obj.ip_ranges
                        .get_or_insert(vec![])
                        .extend(IpRangesDeserializer::deserialize("ipRanges", stack)?);
                }
                "prefixListIds" => {
                    obj.prefix_list_ids.get_or_insert(vec![]).extend(
                        PrefixListIdSetDeserializer::deserialize("prefixListIds", stack)?,
                    );
                }
                "toPort" => {
                    obj.to_port = Some(IntegerDeserializer::deserialize("toPort", stack)?);
                }
                "groups" => {
                    obj.user_id_group_pairs.get_or_insert(vec![]).extend(
                        UserIdGroupPairSetDeserializer::deserialize("groups", stack)?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct StaleIpPermissionSetDeserializer;
impl StaleIpPermissionSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<StaleIpPermission>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(StaleIpPermissionDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a stale security group (a security group that contains stale rules).</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct StaleSecurityGroup {
    /// <p>The description of the security group.</p>
    pub description: Option<String>,
    /// <p>The ID of the security group.</p>
    pub group_id: Option<String>,
    /// <p>The name of the security group.</p>
    pub group_name: Option<String>,
    /// <p>Information about the stale inbound rules in the security group.</p>
    pub stale_ip_permissions: Option<Vec<StaleIpPermission>>,
    /// <p>Information about the stale outbound rules in the security group.</p>
    pub stale_ip_permissions_egress: Option<Vec<StaleIpPermission>>,
    /// <p>The ID of the VPC for the security group.</p>
    pub vpc_id: Option<String>,
}

struct StaleSecurityGroupDeserializer;
impl StaleSecurityGroupDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<StaleSecurityGroup, XmlParseError> {
        deserialize_elements::<_, StaleSecurityGroup, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "groupId" => {
                    obj.group_id = Some(StringDeserializer::deserialize("groupId", stack)?);
                }
                "groupName" => {
                    obj.group_name = Some(StringDeserializer::deserialize("groupName", stack)?);
                }
                "staleIpPermissions" => {
                    obj.stale_ip_permissions.get_or_insert(vec![]).extend(
                        StaleIpPermissionSetDeserializer::deserialize("staleIpPermissions", stack)?,
                    );
                }
                "staleIpPermissionsEgress" => {
                    obj.stale_ip_permissions_egress
                        .get_or_insert(vec![])
                        .extend(StaleIpPermissionSetDeserializer::deserialize(
                            "staleIpPermissionsEgress",
                            stack,
                        )?);
                }
                "vpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct StaleSecurityGroupSetDeserializer;
impl StaleSecurityGroupSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<StaleSecurityGroup>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(StaleSecurityGroupDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct StartInstancesRequest {
    /// <p>Reserved.</p>
    pub additional_info: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The IDs of the instances.</p>
    pub instance_ids: Vec<String>,
}

/// Serialize `StartInstancesRequest` contents to a `SignedRequest`.
struct StartInstancesRequestSerializer;
impl StartInstancesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &StartInstancesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.additional_info {
            params.put(&format!("{}{}", prefix, "AdditionalInfo"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        InstanceIdStringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "InstanceId"),
            &obj.instance_ids,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct StartInstancesResult {
    /// <p>Information about the started instances.</p>
    pub starting_instances: Option<Vec<InstanceStateChange>>,
}

struct StartInstancesResultDeserializer;
impl StartInstancesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<StartInstancesResult, XmlParseError> {
        deserialize_elements::<_, StartInstancesResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "instancesSet" => {
                    obj.starting_instances.get_or_insert(vec![]).extend(
                        InstanceStateChangeListDeserializer::deserialize("instancesSet", stack)?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct StateDeserializer;
impl StateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a state change.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct StateReason {
    /// <p>The reason code for the state change.</p>
    pub code: Option<String>,
    /// <p><p>The message for the state change.</p> <ul> <li> <p> <code>Server.InsufficientInstanceCapacity</code>: There was insufficient capacity available to satisfy the launch request.</p> </li> <li> <p> <code>Server.InternalError</code>: An internal error caused the instance to terminate during launch.</p> </li> <li> <p> <code>Server.ScheduledStop</code>: The instance was stopped due to a scheduled retirement.</p> </li> <li> <p> <code>Server.SpotInstanceShutdown</code>: The instance was stopped because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase in the Spot price.</p> </li> <li> <p> <code>Server.SpotInstanceTermination</code>: The instance was terminated because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase in the Spot price.</p> </li> <li> <p> <code>Client.InstanceInitiatedShutdown</code>: The instance was shut down using the <code>shutdown -h</code> command from the instance.</p> </li> <li> <p> <code>Client.InstanceTerminated</code>: The instance was terminated or rebooted during AMI creation.</p> </li> <li> <p> <code>Client.InternalError</code>: A client error caused the instance to terminate during launch.</p> </li> <li> <p> <code>Client.InvalidSnapshot.NotFound</code>: The specified snapshot was not found.</p> </li> <li> <p> <code>Client.UserInitiatedHibernate</code>: Hibernation was initiated on the instance.</p> </li> <li> <p> <code>Client.UserInitiatedShutdown</code>: The instance was shut down using the Amazon EC2 API.</p> </li> <li> <p> <code>Client.VolumeLimitExceeded</code>: The limit on the number of EBS volumes or total storage was exceeded. Decrease usage or request an increase in your account limits.</p> </li> </ul></p>
    pub message: Option<String>,
}

struct StateReasonDeserializer;
impl StateReasonDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<StateReason, XmlParseError> {
        deserialize_elements::<_, StateReason, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "code" => {
                    obj.code = Some(StringDeserializer::deserialize("code", stack)?);
                }
                "message" => {
                    obj.message = Some(StringDeserializer::deserialize("message", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct StatusDeserializer;
impl StatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct StatusNameDeserializer;
impl StatusNameDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct StatusTypeDeserializer;
impl StatusTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct StopInstancesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>Forces the instances to stop. The instances do not have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures. This option is not recommended for Windows instances.</p> <p>Default: <code>false</code> </p>
    pub force: Option<bool>,
    /// <p>Hibernates the instance if the instance was enabled for hibernation at launch. If the instance cannot hibernate successfully, a normal shutdown occurs. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p> Default: <code>false</code> </p>
    pub hibernate: Option<bool>,
    /// <p>The IDs of the instances.</p>
    pub instance_ids: Vec<String>,
}

/// Serialize `StopInstancesRequest` contents to a `SignedRequest`.
struct StopInstancesRequestSerializer;
impl StopInstancesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &StopInstancesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.force {
            params.put(&format!("{}{}", prefix, "Force"), &field_value);
        }
        if let Some(ref field_value) = obj.hibernate {
            params.put(&format!("{}{}", prefix, "Hibernate"), &field_value);
        }
        InstanceIdStringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "InstanceId"),
            &obj.instance_ids,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct StopInstancesResult {
    /// <p>Information about the stopped instances.</p>
    pub stopping_instances: Option<Vec<InstanceStateChange>>,
}

struct StopInstancesResultDeserializer;
impl StopInstancesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<StopInstancesResult, XmlParseError> {
        deserialize_elements::<_, StopInstancesResult, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "instancesSet" => {
                    obj.stopping_instances.get_or_insert(vec![]).extend(
                        InstanceStateChangeListDeserializer::deserialize("instancesSet", stack)?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes the storage location for an instance store-backed AMI.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct Storage {
    /// <p>An Amazon S3 storage location.</p>
    pub s3: Option<S3Storage>,
}

struct StorageDeserializer;
impl StorageDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Storage, XmlParseError> {
        deserialize_elements::<_, Storage, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "S3" => {
                    obj.s3 = Some(S3StorageDeserializer::deserialize("S3", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `Storage` contents to a `SignedRequest`.
struct StorageSerializer;
impl StorageSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Storage) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.s3 {
            S3StorageSerializer::serialize(params, &format!("{}{}", prefix, "S3"), field_value);
        }
    }
}

/// <p>Describes a storage location in Amazon S3.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct StorageLocation {
    /// <p>The name of the S3 bucket.</p>
    pub bucket: Option<String>,
    /// <p>The key.</p>
    pub key: Option<String>,
}

/// Serialize `StorageLocation` contents to a `SignedRequest`.
struct StorageLocationSerializer;
impl StorageLocationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &StorageLocation) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.bucket {
            params.put(&format!("{}{}", prefix, "Bucket"), &field_value);
        }
        if let Some(ref field_value) = obj.key {
            params.put(&format!("{}{}", prefix, "Key"), &field_value);
        }
    }
}

struct StringDeserializer;
impl StringDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a subnet.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct Subnet {
    /// <p>Indicates whether a network interface created in this subnet (including a network interface created by <a>RunInstances</a>) receives an IPv6 address.</p>
    pub assign_ipv_6_address_on_creation: Option<bool>,
    /// <p>The Availability Zone of the subnet.</p>
    pub availability_zone: Option<String>,
    /// <p>The AZ ID of the subnet.</p>
    pub availability_zone_id: Option<String>,
    /// <p>The number of unused private IPv4 addresses in the subnet. The IPv4 addresses for any stopped instances are considered unavailable.</p>
    pub available_ip_address_count: Option<i64>,
    /// <p>The IPv4 CIDR block assigned to the subnet.</p>
    pub cidr_block: Option<String>,
    /// <p>Indicates whether this is the default subnet for the Availability Zone.</p>
    pub default_for_az: Option<bool>,
    /// <p>Information about the IPv6 CIDR blocks associated with the subnet.</p>
    pub ipv_6_cidr_block_association_set: Option<Vec<SubnetIpv6CidrBlockAssociation>>,
    /// <p>Indicates whether instances launched in this subnet receive a public IPv4 address.</p>
    pub map_public_ip_on_launch: Option<bool>,
    /// <p>The ID of the AWS account that owns the subnet.</p>
    pub owner_id: Option<String>,
    /// <p>The current state of the subnet.</p>
    pub state: Option<String>,
    /// <p>The Amazon Resource Name (ARN) of the subnet.</p>
    pub subnet_arn: Option<String>,
    /// <p>The ID of the subnet.</p>
    pub subnet_id: Option<String>,
    /// <p>Any tags assigned to the subnet.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The ID of the VPC the subnet is in.</p>
    pub vpc_id: Option<String>,
}

struct SubnetDeserializer;
impl SubnetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<Subnet, XmlParseError> {
        deserialize_elements::<_, Subnet, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "assignIpv6AddressOnCreation" => {
                    obj.assign_ipv_6_address_on_creation = Some(BooleanDeserializer::deserialize(
                        "assignIpv6AddressOnCreation",
                        stack,
                    )?);
                }
                "availabilityZone" => {
                    obj.availability_zone =
                        Some(StringDeserializer::deserialize("availabilityZone", stack)?);
                }
                "availabilityZoneId" => {
                    obj.availability_zone_id = Some(StringDeserializer::deserialize(
                        "availabilityZoneId",
                        stack,
                    )?);
                }
                "availableIpAddressCount" => {
                    obj.available_ip_address_count = Some(IntegerDeserializer::deserialize(
                        "availableIpAddressCount",
                        stack,
                    )?);
                }
                "cidrBlock" => {
                    obj.cidr_block = Some(StringDeserializer::deserialize("cidrBlock", stack)?);
                }
                "defaultForAz" => {
                    obj.default_for_az =
                        Some(BooleanDeserializer::deserialize("defaultForAz", stack)?);
                }
                "ipv6CidrBlockAssociationSet" => {
                    obj.ipv_6_cidr_block_association_set
                        .get_or_insert(vec![])
                        .extend(SubnetIpv6CidrBlockAssociationSetDeserializer::deserialize(
                            "ipv6CidrBlockAssociationSet",
                            stack,
                        )?);
                }
                "mapPublicIpOnLaunch" => {
                    obj.map_public_ip_on_launch = Some(BooleanDeserializer::deserialize(
                        "mapPublicIpOnLaunch",
                        stack,
                    )?);
                }
                "ownerId" => {
                    obj.owner_id = Some(StringDeserializer::deserialize("ownerId", stack)?);
                }
                "state" => {
                    obj.state = Some(SubnetStateDeserializer::deserialize("state", stack)?);
                }
                "subnetArn" => {
                    obj.subnet_arn = Some(StringDeserializer::deserialize("subnetArn", stack)?);
                }
                "subnetId" => {
                    obj.subnet_id = Some(StringDeserializer::deserialize("subnetId", stack)?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "vpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes the state of a CIDR block.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SubnetCidrBlockState {
    /// <p>The state of a CIDR block.</p>
    pub state: Option<String>,
    /// <p>A message about the status of the CIDR block, if applicable.</p>
    pub status_message: Option<String>,
}

struct SubnetCidrBlockStateDeserializer;
impl SubnetCidrBlockStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SubnetCidrBlockState, XmlParseError> {
        deserialize_elements::<_, SubnetCidrBlockState, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "state" => {
                    obj.state = Some(SubnetCidrBlockStateCodeDeserializer::deserialize(
                        "state", stack,
                    )?);
                }
                "statusMessage" => {
                    obj.status_message =
                        Some(StringDeserializer::deserialize("statusMessage", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct SubnetCidrBlockStateCodeDeserializer;
impl SubnetCidrBlockStateCodeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}

/// Serialize `SubnetIdStringList` contents to a `SignedRequest`.
struct SubnetIdStringListSerializer;
impl SubnetIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Describes an IPv6 CIDR block associated with a subnet.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SubnetIpv6CidrBlockAssociation {
    /// <p>The association ID for the CIDR block.</p>
    pub association_id: Option<String>,
    /// <p>The IPv6 CIDR block.</p>
    pub ipv_6_cidr_block: Option<String>,
    /// <p>Information about the state of the CIDR block.</p>
    pub ipv_6_cidr_block_state: Option<SubnetCidrBlockState>,
}

struct SubnetIpv6CidrBlockAssociationDeserializer;
impl SubnetIpv6CidrBlockAssociationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SubnetIpv6CidrBlockAssociation, XmlParseError> {
        deserialize_elements::<_, SubnetIpv6CidrBlockAssociation, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "associationId" => {
                        obj.association_id =
                            Some(StringDeserializer::deserialize("associationId", stack)?);
                    }
                    "ipv6CidrBlock" => {
                        obj.ipv_6_cidr_block =
                            Some(StringDeserializer::deserialize("ipv6CidrBlock", stack)?);
                    }
                    "ipv6CidrBlockState" => {
                        obj.ipv_6_cidr_block_state =
                            Some(SubnetCidrBlockStateDeserializer::deserialize(
                                "ipv6CidrBlockState",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct SubnetIpv6CidrBlockAssociationSetDeserializer;
impl SubnetIpv6CidrBlockAssociationSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<SubnetIpv6CidrBlockAssociation>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(SubnetIpv6CidrBlockAssociationDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct SubnetListDeserializer;
impl SubnetListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<Subnet>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(SubnetDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct SubnetStateDeserializer;
impl SubnetStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes the T2 or T3 instance whose credit option for CPU usage was successfully modified.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct SuccessfulInstanceCreditSpecificationItem {
    /// <p>The ID of the instance.</p>
    pub instance_id: Option<String>,
}

struct SuccessfulInstanceCreditSpecificationItemDeserializer;
impl SuccessfulInstanceCreditSpecificationItemDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<SuccessfulInstanceCreditSpecificationItem, XmlParseError> {
        deserialize_elements::<_, SuccessfulInstanceCreditSpecificationItem, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "instanceId" => {
                        obj.instance_id =
                            Some(StringDeserializer::deserialize("instanceId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct SuccessfulInstanceCreditSpecificationSetDeserializer;
impl SuccessfulInstanceCreditSpecificationSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<SuccessfulInstanceCreditSpecificationItem>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(
                    SuccessfulInstanceCreditSpecificationItemDeserializer::deserialize(
                        "item", stack,
                    )?,
                );
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct SummaryStatusDeserializer;
impl SummaryStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a tag.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct Tag {
    /// <p>The key of the tag.</p> <p>Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters. May not begin with <code>aws:</code>.</p>
    pub key: Option<String>,
    /// <p>The value of the tag.</p> <p>Constraints: Tag values are case-sensitive and accept a maximum of 255 Unicode characters.</p>
    pub value: Option<String>,
}

struct TagDeserializer;
impl TagDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<Tag, XmlParseError> {
        deserialize_elements::<_, Tag, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "key" => {
                    obj.key = Some(StringDeserializer::deserialize("key", stack)?);
                }
                "value" => {
                    obj.value = Some(StringDeserializer::deserialize("value", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `Tag` contents to a `SignedRequest`.
struct TagSerializer;
impl TagSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Tag) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.key {
            params.put(&format!("{}{}", prefix, "Key"), &field_value);
        }
        if let Some(ref field_value) = obj.value {
            params.put(&format!("{}{}", prefix, "Value"), &field_value);
        }
    }
}

/// <p>Describes a tag.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TagDescription {
    /// <p>The tag key.</p>
    pub key: Option<String>,
    /// <p>The ID of the resource.</p>
    pub resource_id: Option<String>,
    /// <p>The resource type.</p>
    pub resource_type: Option<String>,
    /// <p>The tag value.</p>
    pub value: Option<String>,
}

struct TagDescriptionDeserializer;
impl TagDescriptionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TagDescription, XmlParseError> {
        deserialize_elements::<_, TagDescription, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "key" => {
                    obj.key = Some(StringDeserializer::deserialize("key", stack)?);
                }
                "resourceId" => {
                    obj.resource_id = Some(StringDeserializer::deserialize("resourceId", stack)?);
                }
                "resourceType" => {
                    obj.resource_type = Some(ResourceTypeDeserializer::deserialize(
                        "resourceType",
                        stack,
                    )?);
                }
                "value" => {
                    obj.value = Some(StringDeserializer::deserialize("value", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct TagDescriptionListDeserializer;
impl TagDescriptionListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<TagDescription>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(TagDescriptionDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct TagListDeserializer;
impl TagListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<Tag>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(TagDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `TagList` contents to a `SignedRequest`.
struct TagListSerializer;
impl TagListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<Tag>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            TagSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>The tags to apply to a resource when the resource is being created.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TagSpecification {
    /// <p>The type of resource to tag. Currently, the resource types that support tagging on creation are <code>fleet</code>, <code>dedicated-host</code>, <code>instance</code>, <code>snapshot</code>, and <code>volume</code>. To tag a resource after it has been created, see <a>CreateTags</a>.</p>
    pub resource_type: Option<String>,
    /// <p>The tags to apply to the resource.</p>
    pub tags: Option<Vec<Tag>>,
}

/// Serialize `TagSpecification` contents to a `SignedRequest`.
struct TagSpecificationSerializer;
impl TagSpecificationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &TagSpecification) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.resource_type {
            params.put(&format!("{}{}", prefix, "ResourceType"), &field_value);
        }
        if let Some(ref field_value) = obj.tags {
            TagListSerializer::serialize(params, &format!("{}{}", prefix, "Tag"), field_value);
        }
    }
}

/// Serialize `TagSpecificationList` contents to a `SignedRequest`.
struct TagSpecificationListSerializer;
impl TagSpecificationListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<TagSpecification>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            TagSpecificationSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>The number of units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TargetCapacitySpecification {
    /// <p>The default <code>TotalTargetCapacity</code>, which is either <code>Spot</code> or <code>On-Demand</code>.</p>
    pub default_target_capacity_type: Option<String>,
    /// <p>The number of On-Demand units to request.</p>
    pub on_demand_target_capacity: Option<i64>,
    /// <p>The maximum number of Spot units to launch.</p>
    pub spot_target_capacity: Option<i64>,
    /// <p>The number of units to request, filled using <code>DefaultTargetCapacityType</code>.</p>
    pub total_target_capacity: Option<i64>,
}

struct TargetCapacitySpecificationDeserializer;
impl TargetCapacitySpecificationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TargetCapacitySpecification, XmlParseError> {
        deserialize_elements::<_, TargetCapacitySpecification, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "defaultTargetCapacityType" => {
                        obj.default_target_capacity_type =
                            Some(DefaultTargetCapacityTypeDeserializer::deserialize(
                                "defaultTargetCapacityType",
                                stack,
                            )?);
                    }
                    "onDemandTargetCapacity" => {
                        obj.on_demand_target_capacity = Some(IntegerDeserializer::deserialize(
                            "onDemandTargetCapacity",
                            stack,
                        )?);
                    }
                    "spotTargetCapacity" => {
                        obj.spot_target_capacity = Some(IntegerDeserializer::deserialize(
                            "spotTargetCapacity",
                            stack,
                        )?);
                    }
                    "totalTargetCapacity" => {
                        obj.total_target_capacity = Some(IntegerDeserializer::deserialize(
                            "totalTargetCapacity",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>The number of units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TargetCapacitySpecificationRequest {
    /// <p>The default <code>TotalTargetCapacity</code>, which is either <code>Spot</code> or <code>On-Demand</code>.</p>
    pub default_target_capacity_type: Option<String>,
    /// <p>The number of On-Demand units to request.</p>
    pub on_demand_target_capacity: Option<i64>,
    /// <p>The number of Spot units to request.</p>
    pub spot_target_capacity: Option<i64>,
    /// <p>The number of units to request, filled using <code>DefaultTargetCapacityType</code>.</p>
    pub total_target_capacity: i64,
}

/// Serialize `TargetCapacitySpecificationRequest` contents to a `SignedRequest`.
struct TargetCapacitySpecificationRequestSerializer;
impl TargetCapacitySpecificationRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &TargetCapacitySpecificationRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.default_target_capacity_type {
            params.put(
                &format!("{}{}", prefix, "DefaultTargetCapacityType"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.on_demand_target_capacity {
            params.put(
                &format!("{}{}", prefix, "OnDemandTargetCapacity"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.spot_target_capacity {
            params.put(&format!("{}{}", prefix, "SpotTargetCapacity"), &field_value);
        }
        params.put(
            &format!("{}{}", prefix, "TotalTargetCapacity"),
            &obj.total_target_capacity,
        );
    }
}

/// <p>Information about the Convertible Reserved Instance offering.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TargetConfiguration {
    /// <p>The number of instances the Convertible Reserved Instance offering can be applied to. This parameter is reserved and cannot be specified in a request</p>
    pub instance_count: Option<i64>,
    /// <p>The ID of the Convertible Reserved Instance offering.</p>
    pub offering_id: Option<String>,
}

struct TargetConfigurationDeserializer;
impl TargetConfigurationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TargetConfiguration, XmlParseError> {
        deserialize_elements::<_, TargetConfiguration, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "instanceCount" => {
                    obj.instance_count =
                        Some(IntegerDeserializer::deserialize("instanceCount", stack)?);
                }
                "offeringId" => {
                    obj.offering_id = Some(StringDeserializer::deserialize("offeringId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Details about the target configuration.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TargetConfigurationRequest {
    /// <p>The number of instances the Covertible Reserved Instance offering can be applied to. This parameter is reserved and cannot be specified in a request</p>
    pub instance_count: Option<i64>,
    /// <p>The Convertible Reserved Instance offering ID.</p>
    pub offering_id: String,
}

/// Serialize `TargetConfigurationRequest` contents to a `SignedRequest`.
struct TargetConfigurationRequestSerializer;
impl TargetConfigurationRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &TargetConfigurationRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.instance_count {
            params.put(&format!("{}{}", prefix, "InstanceCount"), &field_value);
        }
        params.put(&format!("{}{}", prefix, "OfferingId"), &obj.offering_id);
    }
}

/// Serialize `TargetConfigurationRequestSet` contents to a `SignedRequest`.
struct TargetConfigurationRequestSetSerializer;
impl TargetConfigurationRequestSetSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<TargetConfigurationRequest>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            TargetConfigurationRequestSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes a load balancer target group.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TargetGroup {
    /// <p>The Amazon Resource Name (ARN) of the target group.</p>
    pub arn: Option<String>,
}

struct TargetGroupDeserializer;
impl TargetGroupDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TargetGroup, XmlParseError> {
        deserialize_elements::<_, TargetGroup, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "arn" => {
                    obj.arn = Some(StringDeserializer::deserialize("arn", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `TargetGroup` contents to a `SignedRequest`.
struct TargetGroupSerializer;
impl TargetGroupSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &TargetGroup) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.arn {
            params.put(&format!("{}{}", prefix, "Arn"), &field_value);
        }
    }
}

struct TargetGroupsDeserializer;
impl TargetGroupsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<TargetGroup>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(TargetGroupDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `TargetGroups` contents to a `SignedRequest`.
struct TargetGroupsSerializer;
impl TargetGroupsSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<TargetGroup>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            TargetGroupSerializer::serialize(params, &key, obj);
        }
    }
}

/// <p>Describes the target groups to attach to a Spot Fleet. Spot Fleet registers the running Spot Instances with these target groups.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TargetGroupsConfig {
    /// <p>One or more target groups.</p>
    pub target_groups: Option<Vec<TargetGroup>>,
}

struct TargetGroupsConfigDeserializer;
impl TargetGroupsConfigDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TargetGroupsConfig, XmlParseError> {
        deserialize_elements::<_, TargetGroupsConfig, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "targetGroups" => {
                    obj.target_groups.get_or_insert(vec![]).extend(
                        TargetGroupsDeserializer::deserialize("targetGroups", stack)?,
                    );
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `TargetGroupsConfig` contents to a `SignedRequest`.
struct TargetGroupsConfigSerializer;
impl TargetGroupsConfigSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &TargetGroupsConfig) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.target_groups {
            TargetGroupsSerializer::serialize(
                params,
                &format!("{}{}", prefix, "TargetGroups"),
                field_value,
            );
        }
    }
}

/// <p>Describes a target network associated with a Client VPN endpoint.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TargetNetwork {
    /// <p>The ID of the association.</p>
    pub association_id: Option<String>,
    /// <p>The ID of the Client VPN endpoint with which the target network is associated.</p>
    pub client_vpn_endpoint_id: Option<String>,
    /// <p>The IDs of the security groups applied to the target network association.</p>
    pub security_groups: Option<Vec<String>>,
    /// <p>The current state of the target network association.</p>
    pub status: Option<AssociationStatus>,
    /// <p>The ID of the subnet specified as the target network.</p>
    pub target_network_id: Option<String>,
    /// <p>The ID of the VPC in which the target network (subnet) is located.</p>
    pub vpc_id: Option<String>,
}

struct TargetNetworkDeserializer;
impl TargetNetworkDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TargetNetwork, XmlParseError> {
        deserialize_elements::<_, TargetNetwork, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "associationId" => {
                    obj.association_id =
                        Some(StringDeserializer::deserialize("associationId", stack)?);
                }
                "clientVpnEndpointId" => {
                    obj.client_vpn_endpoint_id = Some(StringDeserializer::deserialize(
                        "clientVpnEndpointId",
                        stack,
                    )?);
                }
                "securityGroups" => {
                    obj.security_groups.get_or_insert(vec![]).extend(
                        ValueStringListDeserializer::deserialize("securityGroups", stack)?,
                    );
                }
                "status" => {
                    obj.status = Some(AssociationStatusDeserializer::deserialize("status", stack)?);
                }
                "targetNetworkId" => {
                    obj.target_network_id =
                        Some(StringDeserializer::deserialize("targetNetworkId", stack)?);
                }
                "vpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct TargetNetworkSetDeserializer;
impl TargetNetworkSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<TargetNetwork>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(TargetNetworkDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>The total value of the new Convertible Reserved Instances.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TargetReservationValue {
    /// <p>The total value of the Convertible Reserved Instances that make up the exchange. This is the sum of the list value, remaining upfront price, and additional upfront cost of the exchange.</p>
    pub reservation_value: Option<ReservationValue>,
    /// <p>The configuration of the Convertible Reserved Instances that make up the exchange.</p>
    pub target_configuration: Option<TargetConfiguration>,
}

struct TargetReservationValueDeserializer;
impl TargetReservationValueDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TargetReservationValue, XmlParseError> {
        deserialize_elements::<_, TargetReservationValue, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "reservationValue" => {
                    obj.reservation_value = Some(ReservationValueDeserializer::deserialize(
                        "reservationValue",
                        stack,
                    )?);
                }
                "targetConfiguration" => {
                    obj.target_configuration = Some(TargetConfigurationDeserializer::deserialize(
                        "targetConfiguration",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct TargetReservationValueSetDeserializer;
impl TargetReservationValueSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<TargetReservationValue>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(TargetReservationValueDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct TelemetryStatusDeserializer;
impl TelemetryStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct TenancyDeserializer;
impl TenancyDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TerminateClientVpnConnectionsRequest {
    /// <p>The ID of the Client VPN endpoint to which the client is connected.</p>
    pub client_vpn_endpoint_id: String,
    /// <p>The ID of the client connection to be terminated.</p>
    pub connection_id: Option<String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The name of the user who initiated the connection. Use this option to terminate all active connections for the specified user. This option can only be used if the user has established up to five connections.</p>
    pub username: Option<String>,
}

/// Serialize `TerminateClientVpnConnectionsRequest` contents to a `SignedRequest`.
struct TerminateClientVpnConnectionsRequestSerializer;
impl TerminateClientVpnConnectionsRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &TerminateClientVpnConnectionsRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "ClientVpnEndpointId"),
            &obj.client_vpn_endpoint_id,
        );
        if let Some(ref field_value) = obj.connection_id {
            params.put(&format!("{}{}", prefix, "ConnectionId"), &field_value);
        }
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.username {
            params.put(&format!("{}{}", prefix, "Username"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct TerminateClientVpnConnectionsResult {
    /// <p>The ID of the Client VPN endpoint.</p>
    pub client_vpn_endpoint_id: Option<String>,
    /// <p>The current state of the client connections.</p>
    pub connection_statuses: Option<Vec<TerminateConnectionStatus>>,
    /// <p>The user who established the terminated client connections.</p>
    pub username: Option<String>,
}

struct TerminateClientVpnConnectionsResultDeserializer;
impl TerminateClientVpnConnectionsResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TerminateClientVpnConnectionsResult, XmlParseError> {
        deserialize_elements::<_, TerminateClientVpnConnectionsResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "clientVpnEndpointId" => {
                        obj.client_vpn_endpoint_id = Some(StringDeserializer::deserialize(
                            "clientVpnEndpointId",
                            stack,
                        )?);
                    }
                    "connectionStatuses" => {
                        obj.connection_statuses.get_or_insert(vec![]).extend(
                            TerminateConnectionStatusSetDeserializer::deserialize(
                                "connectionStatuses",
                                stack,
                            )?,
                        );
                    }
                    "username" => {
                        obj.username = Some(StringDeserializer::deserialize("username", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Information about a terminated Client VPN endpoint client connection.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TerminateConnectionStatus {
    /// <p>The ID of the client connection.</p>
    pub connection_id: Option<String>,
    /// <p>A message about the status of the client connection, if applicable.</p>
    pub current_status: Option<ClientVpnConnectionStatus>,
    /// <p>The state of the client connection.</p>
    pub previous_status: Option<ClientVpnConnectionStatus>,
}

struct TerminateConnectionStatusDeserializer;
impl TerminateConnectionStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TerminateConnectionStatus, XmlParseError> {
        deserialize_elements::<_, TerminateConnectionStatus, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "connectionId" => {
                        obj.connection_id =
                            Some(StringDeserializer::deserialize("connectionId", stack)?);
                    }
                    "currentStatus" => {
                        obj.current_status =
                            Some(ClientVpnConnectionStatusDeserializer::deserialize(
                                "currentStatus",
                                stack,
                            )?);
                    }
                    "previousStatus" => {
                        obj.previous_status =
                            Some(ClientVpnConnectionStatusDeserializer::deserialize(
                                "previousStatus",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct TerminateConnectionStatusSetDeserializer;
impl TerminateConnectionStatusSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<TerminateConnectionStatus>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(TerminateConnectionStatusDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TerminateInstancesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The IDs of the instances.</p> <p>Constraints: Up to 1000 instance IDs. We recommend breaking up this request into smaller batches.</p>
    pub instance_ids: Vec<String>,
}

/// Serialize `TerminateInstancesRequest` contents to a `SignedRequest`.
struct TerminateInstancesRequestSerializer;
impl TerminateInstancesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &TerminateInstancesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        InstanceIdStringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "InstanceId"),
            &obj.instance_ids,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct TerminateInstancesResult {
    /// <p>Information about the terminated instances.</p>
    pub terminating_instances: Option<Vec<InstanceStateChange>>,
}

struct TerminateInstancesResultDeserializer;
impl TerminateInstancesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TerminateInstancesResult, XmlParseError> {
        deserialize_elements::<_, TerminateInstancesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "instancesSet" => {
                        obj.terminating_instances.get_or_insert(vec![]).extend(
                            InstanceStateChangeListDeserializer::deserialize(
                                "instancesSet",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct TrafficTypeDeserializer;
impl TrafficTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a transit gateway.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TransitGateway {
    /// <p>The creation time.</p>
    pub creation_time: Option<String>,
    /// <p>The description of the transit gateway.</p>
    pub description: Option<String>,
    /// <p>The transit gateway options.</p>
    pub options: Option<TransitGatewayOptions>,
    /// <p>The ID of the AWS account ID that owns the transit gateway.</p>
    pub owner_id: Option<String>,
    /// <p>The state of the transit gateway.</p>
    pub state: Option<String>,
    /// <p>The tags for the transit gateway.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The Amazon Resource Name (ARN) of the transit gateway.</p>
    pub transit_gateway_arn: Option<String>,
    /// <p>The ID of the transit gateway.</p>
    pub transit_gateway_id: Option<String>,
}

struct TransitGatewayDeserializer;
impl TransitGatewayDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TransitGateway, XmlParseError> {
        deserialize_elements::<_, TransitGateway, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "creationTime" => {
                    obj.creation_time =
                        Some(DateTimeDeserializer::deserialize("creationTime", stack)?);
                }
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "options" => {
                    obj.options = Some(TransitGatewayOptionsDeserializer::deserialize(
                        "options", stack,
                    )?);
                }
                "ownerId" => {
                    obj.owner_id = Some(StringDeserializer::deserialize("ownerId", stack)?);
                }
                "state" => {
                    obj.state = Some(TransitGatewayStateDeserializer::deserialize(
                        "state", stack,
                    )?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "transitGatewayArn" => {
                    obj.transit_gateway_arn =
                        Some(StringDeserializer::deserialize("transitGatewayArn", stack)?);
                }
                "transitGatewayId" => {
                    obj.transit_gateway_id =
                        Some(StringDeserializer::deserialize("transitGatewayId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes an association between a resource attachment and a transit gateway route table.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TransitGatewayAssociation {
    /// <p>The ID of the resource.</p>
    pub resource_id: Option<String>,
    /// <p>The resource type.</p>
    pub resource_type: Option<String>,
    /// <p>The state of the association.</p>
    pub state: Option<String>,
    /// <p>The ID of the attachment.</p>
    pub transit_gateway_attachment_id: Option<String>,
    /// <p>The ID of the transit gateway route table.</p>
    pub transit_gateway_route_table_id: Option<String>,
}

struct TransitGatewayAssociationDeserializer;
impl TransitGatewayAssociationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TransitGatewayAssociation, XmlParseError> {
        deserialize_elements::<_, TransitGatewayAssociation, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "resourceId" => {
                        obj.resource_id =
                            Some(StringDeserializer::deserialize("resourceId", stack)?);
                    }
                    "resourceType" => {
                        obj.resource_type = Some(
                            TransitGatewayAttachmentResourceTypeDeserializer::deserialize(
                                "resourceType",
                                stack,
                            )?,
                        );
                    }
                    "state" => {
                        obj.state = Some(TransitGatewayAssociationStateDeserializer::deserialize(
                            "state", stack,
                        )?);
                    }
                    "transitGatewayAttachmentId" => {
                        obj.transit_gateway_attachment_id = Some(StringDeserializer::deserialize(
                            "transitGatewayAttachmentId",
                            stack,
                        )?);
                    }
                    "transitGatewayRouteTableId" => {
                        obj.transit_gateway_route_table_id = Some(StringDeserializer::deserialize(
                            "transitGatewayRouteTableId",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct TransitGatewayAssociationStateDeserializer;
impl TransitGatewayAssociationStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes an attachment between a resource and a transit gateway.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TransitGatewayAttachment {
    /// <p>The association.</p>
    pub association: Option<TransitGatewayAttachmentAssociation>,
    /// <p>The creation time.</p>
    pub creation_time: Option<String>,
    /// <p>The ID of the resource.</p>
    pub resource_id: Option<String>,
    /// <p>The ID of the AWS account that owns the resource.</p>
    pub resource_owner_id: Option<String>,
    /// <p>The resource type.</p>
    pub resource_type: Option<String>,
    /// <p>The attachment state.</p>
    pub state: Option<String>,
    /// <p>The tags for the attachment.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The ID of the attachment.</p>
    pub transit_gateway_attachment_id: Option<String>,
    /// <p>The ID of the transit gateway.</p>
    pub transit_gateway_id: Option<String>,
    /// <p>The ID of the AWS account that owns the transit gateway.</p>
    pub transit_gateway_owner_id: Option<String>,
}

struct TransitGatewayAttachmentDeserializer;
impl TransitGatewayAttachmentDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TransitGatewayAttachment, XmlParseError> {
        deserialize_elements::<_, TransitGatewayAttachment, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "association" => {
                        obj.association = Some(
                            TransitGatewayAttachmentAssociationDeserializer::deserialize(
                                "association",
                                stack,
                            )?,
                        );
                    }
                    "creationTime" => {
                        obj.creation_time =
                            Some(DateTimeDeserializer::deserialize("creationTime", stack)?);
                    }
                    "resourceId" => {
                        obj.resource_id =
                            Some(StringDeserializer::deserialize("resourceId", stack)?);
                    }
                    "resourceOwnerId" => {
                        obj.resource_owner_id =
                            Some(StringDeserializer::deserialize("resourceOwnerId", stack)?);
                    }
                    "resourceType" => {
                        obj.resource_type = Some(
                            TransitGatewayAttachmentResourceTypeDeserializer::deserialize(
                                "resourceType",
                                stack,
                            )?,
                        );
                    }
                    "state" => {
                        obj.state = Some(TransitGatewayAttachmentStateDeserializer::deserialize(
                            "state", stack,
                        )?);
                    }
                    "tagSet" => {
                        obj.tags
                            .get_or_insert(vec![])
                            .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                    }
                    "transitGatewayAttachmentId" => {
                        obj.transit_gateway_attachment_id = Some(StringDeserializer::deserialize(
                            "transitGatewayAttachmentId",
                            stack,
                        )?);
                    }
                    "transitGatewayId" => {
                        obj.transit_gateway_id =
                            Some(StringDeserializer::deserialize("transitGatewayId", stack)?);
                    }
                    "transitGatewayOwnerId" => {
                        obj.transit_gateway_owner_id = Some(StringDeserializer::deserialize(
                            "transitGatewayOwnerId",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes an association.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TransitGatewayAttachmentAssociation {
    /// <p>The state of the association.</p>
    pub state: Option<String>,
    /// <p>The ID of the route table for the transit gateway.</p>
    pub transit_gateway_route_table_id: Option<String>,
}

struct TransitGatewayAttachmentAssociationDeserializer;
impl TransitGatewayAttachmentAssociationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TransitGatewayAttachmentAssociation, XmlParseError> {
        deserialize_elements::<_, TransitGatewayAttachmentAssociation, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "state" => {
                        obj.state = Some(TransitGatewayAssociationStateDeserializer::deserialize(
                            "state", stack,
                        )?);
                    }
                    "transitGatewayRouteTableId" => {
                        obj.transit_gateway_route_table_id = Some(StringDeserializer::deserialize(
                            "transitGatewayRouteTableId",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}

/// Serialize `TransitGatewayAttachmentIdStringList` contents to a `SignedRequest`.
struct TransitGatewayAttachmentIdStringListSerializer;
impl TransitGatewayAttachmentIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct TransitGatewayAttachmentListDeserializer;
impl TransitGatewayAttachmentListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<TransitGatewayAttachment>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(TransitGatewayAttachmentDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a propagation route table.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TransitGatewayAttachmentPropagation {
    /// <p>The state of the propagation route table.</p>
    pub state: Option<String>,
    /// <p>The ID of the propagation route table.</p>
    pub transit_gateway_route_table_id: Option<String>,
}

struct TransitGatewayAttachmentPropagationDeserializer;
impl TransitGatewayAttachmentPropagationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TransitGatewayAttachmentPropagation, XmlParseError> {
        deserialize_elements::<_, TransitGatewayAttachmentPropagation, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "state" => {
                        obj.state = Some(TransitGatewayPropagationStateDeserializer::deserialize(
                            "state", stack,
                        )?);
                    }
                    "transitGatewayRouteTableId" => {
                        obj.transit_gateway_route_table_id = Some(StringDeserializer::deserialize(
                            "transitGatewayRouteTableId",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct TransitGatewayAttachmentPropagationListDeserializer;
impl TransitGatewayAttachmentPropagationListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<TransitGatewayAttachmentPropagation>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(
                    TransitGatewayAttachmentPropagationDeserializer::deserialize("item", stack)?,
                );
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct TransitGatewayAttachmentResourceTypeDeserializer;
impl TransitGatewayAttachmentResourceTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct TransitGatewayAttachmentStateDeserializer;
impl TransitGatewayAttachmentStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}

/// Serialize `TransitGatewayIdStringList` contents to a `SignedRequest`.
struct TransitGatewayIdStringListSerializer;
impl TransitGatewayIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct TransitGatewayListDeserializer;
impl TransitGatewayListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<TransitGateway>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(TransitGatewayDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the options for a transit gateway.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TransitGatewayOptions {
    /// <p>A private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs.</p>
    pub amazon_side_asn: Option<i64>,
    /// <p>The ID of the default association route table.</p>
    pub association_default_route_table_id: Option<String>,
    /// <p>Indicates whether attachment requests are automatically accepted.</p>
    pub auto_accept_shared_attachments: Option<String>,
    /// <p>Indicates whether resource attachments are automatically associated with the default association route table.</p>
    pub default_route_table_association: Option<String>,
    /// <p>Indicates whether resource attachments automatically propagate routes to the default propagation route table.</p>
    pub default_route_table_propagation: Option<String>,
    /// <p>Indicates whether DNS support is enabled.</p>
    pub dns_support: Option<String>,
    /// <p>The ID of the default propagation route table.</p>
    pub propagation_default_route_table_id: Option<String>,
    /// <p>Indicates whether Equal Cost Multipath Protocol support is enabled.</p>
    pub vpn_ecmp_support: Option<String>,
}

struct TransitGatewayOptionsDeserializer;
impl TransitGatewayOptionsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TransitGatewayOptions, XmlParseError> {
        deserialize_elements::<_, TransitGatewayOptions, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "amazonSideAsn" => {
                    obj.amazon_side_asn =
                        Some(LongDeserializer::deserialize("amazonSideAsn", stack)?);
                }
                "associationDefaultRouteTableId" => {
                    obj.association_default_route_table_id = Some(StringDeserializer::deserialize(
                        "associationDefaultRouteTableId",
                        stack,
                    )?);
                }
                "autoAcceptSharedAttachments" => {
                    obj.auto_accept_shared_attachments =
                        Some(AutoAcceptSharedAttachmentsValueDeserializer::deserialize(
                            "autoAcceptSharedAttachments",
                            stack,
                        )?);
                }
                "defaultRouteTableAssociation" => {
                    obj.default_route_table_association =
                        Some(DefaultRouteTableAssociationValueDeserializer::deserialize(
                            "defaultRouteTableAssociation",
                            stack,
                        )?);
                }
                "defaultRouteTablePropagation" => {
                    obj.default_route_table_propagation =
                        Some(DefaultRouteTablePropagationValueDeserializer::deserialize(
                            "defaultRouteTablePropagation",
                            stack,
                        )?);
                }
                "dnsSupport" => {
                    obj.dns_support = Some(DnsSupportValueDeserializer::deserialize(
                        "dnsSupport",
                        stack,
                    )?);
                }
                "propagationDefaultRouteTableId" => {
                    obj.propagation_default_route_table_id = Some(StringDeserializer::deserialize(
                        "propagationDefaultRouteTableId",
                        stack,
                    )?);
                }
                "vpnEcmpSupport" => {
                    obj.vpn_ecmp_support = Some(VpnEcmpSupportValueDeserializer::deserialize(
                        "vpnEcmpSupport",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes route propagation.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TransitGatewayPropagation {
    /// <p>The ID of the resource.</p>
    pub resource_id: Option<String>,
    /// <p>The resource type.</p>
    pub resource_type: Option<String>,
    /// <p>The state.</p>
    pub state: Option<String>,
    /// <p>The ID of the attachment.</p>
    pub transit_gateway_attachment_id: Option<String>,
    /// <p>The ID of the transit gateway route table.</p>
    pub transit_gateway_route_table_id: Option<String>,
}

struct TransitGatewayPropagationDeserializer;
impl TransitGatewayPropagationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TransitGatewayPropagation, XmlParseError> {
        deserialize_elements::<_, TransitGatewayPropagation, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "resourceId" => {
                        obj.resource_id =
                            Some(StringDeserializer::deserialize("resourceId", stack)?);
                    }
                    "resourceType" => {
                        obj.resource_type = Some(
                            TransitGatewayAttachmentResourceTypeDeserializer::deserialize(
                                "resourceType",
                                stack,
                            )?,
                        );
                    }
                    "state" => {
                        obj.state = Some(TransitGatewayPropagationStateDeserializer::deserialize(
                            "state", stack,
                        )?);
                    }
                    "transitGatewayAttachmentId" => {
                        obj.transit_gateway_attachment_id = Some(StringDeserializer::deserialize(
                            "transitGatewayAttachmentId",
                            stack,
                        )?);
                    }
                    "transitGatewayRouteTableId" => {
                        obj.transit_gateway_route_table_id = Some(StringDeserializer::deserialize(
                            "transitGatewayRouteTableId",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct TransitGatewayPropagationStateDeserializer;
impl TransitGatewayPropagationStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes the options for a transit gateway.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TransitGatewayRequestOptions {
    /// <p>A private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs.</p>
    pub amazon_side_asn: Option<i64>,
    /// <p>Enable or disable automatic acceptance of attachment requests. The default is <code>disable</code>.</p>
    pub auto_accept_shared_attachments: Option<String>,
    /// <p>Enable or disable automatic association with the default association route table. The default is <code>enable</code>.</p>
    pub default_route_table_association: Option<String>,
    /// <p>Enable or disable automatic propagation of routes to the default propagation route table. The default is <code>enable</code>.</p>
    pub default_route_table_propagation: Option<String>,
    /// <p>Enable or disable DNS support.</p>
    pub dns_support: Option<String>,
    /// <p>Enable or disable Equal Cost Multipath Protocol support.</p>
    pub vpn_ecmp_support: Option<String>,
}

/// Serialize `TransitGatewayRequestOptions` contents to a `SignedRequest`.
struct TransitGatewayRequestOptionsSerializer;
impl TransitGatewayRequestOptionsSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &TransitGatewayRequestOptions) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.amazon_side_asn {
            params.put(&format!("{}{}", prefix, "AmazonSideAsn"), &field_value);
        }
        if let Some(ref field_value) = obj.auto_accept_shared_attachments {
            params.put(
                &format!("{}{}", prefix, "AutoAcceptSharedAttachments"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.default_route_table_association {
            params.put(
                &format!("{}{}", prefix, "DefaultRouteTableAssociation"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.default_route_table_propagation {
            params.put(
                &format!("{}{}", prefix, "DefaultRouteTablePropagation"),
                &field_value,
            );
        }
        if let Some(ref field_value) = obj.dns_support {
            params.put(&format!("{}{}", prefix, "DnsSupport"), &field_value);
        }
        if let Some(ref field_value) = obj.vpn_ecmp_support {
            params.put(&format!("{}{}", prefix, "VpnEcmpSupport"), &field_value);
        }
    }
}

/// <p>Describes a route for a transit gateway route table.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TransitGatewayRoute {
    /// <p>The CIDR block used for destination matches.</p>
    pub destination_cidr_block: Option<String>,
    /// <p>The state of the route.</p>
    pub state: Option<String>,
    /// <p>The attachments.</p>
    pub transit_gateway_attachments: Option<Vec<TransitGatewayRouteAttachment>>,
    /// <p>The route type.</p>
    pub type_: Option<String>,
}

struct TransitGatewayRouteDeserializer;
impl TransitGatewayRouteDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TransitGatewayRoute, XmlParseError> {
        deserialize_elements::<_, TransitGatewayRoute, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "destinationCidrBlock" => {
                    obj.destination_cidr_block = Some(StringDeserializer::deserialize(
                        "destinationCidrBlock",
                        stack,
                    )?);
                }
                "state" => {
                    obj.state = Some(TransitGatewayRouteStateDeserializer::deserialize(
                        "state", stack,
                    )?);
                }
                "transitGatewayAttachments" => {
                    obj.transit_gateway_attachments
                        .get_or_insert(vec![])
                        .extend(TransitGatewayRouteAttachmentListDeserializer::deserialize(
                            "transitGatewayAttachments",
                            stack,
                        )?);
                }
                "type" => {
                    obj.type_ = Some(TransitGatewayRouteTypeDeserializer::deserialize(
                        "type", stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes a route attachment.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TransitGatewayRouteAttachment {
    /// <p>The ID of the resource.</p>
    pub resource_id: Option<String>,
    /// <p>The resource type.</p>
    pub resource_type: Option<String>,
    /// <p>The ID of the attachment.</p>
    pub transit_gateway_attachment_id: Option<String>,
}

struct TransitGatewayRouteAttachmentDeserializer;
impl TransitGatewayRouteAttachmentDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TransitGatewayRouteAttachment, XmlParseError> {
        deserialize_elements::<_, TransitGatewayRouteAttachment, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "resourceId" => {
                        obj.resource_id =
                            Some(StringDeserializer::deserialize("resourceId", stack)?);
                    }
                    "resourceType" => {
                        obj.resource_type = Some(
                            TransitGatewayAttachmentResourceTypeDeserializer::deserialize(
                                "resourceType",
                                stack,
                            )?,
                        );
                    }
                    "transitGatewayAttachmentId" => {
                        obj.transit_gateway_attachment_id = Some(StringDeserializer::deserialize(
                            "transitGatewayAttachmentId",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct TransitGatewayRouteAttachmentListDeserializer;
impl TransitGatewayRouteAttachmentListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<TransitGatewayRouteAttachment>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(TransitGatewayRouteAttachmentDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct TransitGatewayRouteListDeserializer;
impl TransitGatewayRouteListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<TransitGatewayRoute>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(TransitGatewayRouteDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct TransitGatewayRouteStateDeserializer;
impl TransitGatewayRouteStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a transit gateway route table.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TransitGatewayRouteTable {
    /// <p>The creation time.</p>
    pub creation_time: Option<String>,
    /// <p>Indicates whether this is the default association route table for the transit gateway.</p>
    pub default_association_route_table: Option<bool>,
    /// <p>Indicates whether this is the default propagation route table for the transit gateway.</p>
    pub default_propagation_route_table: Option<bool>,
    /// <p>The state of the transit gateway route table.</p>
    pub state: Option<String>,
    /// <p>Any tags assigned to the route table.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The ID of the transit gateway.</p>
    pub transit_gateway_id: Option<String>,
    /// <p>The ID of the transit gateway route table.</p>
    pub transit_gateway_route_table_id: Option<String>,
}

struct TransitGatewayRouteTableDeserializer;
impl TransitGatewayRouteTableDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TransitGatewayRouteTable, XmlParseError> {
        deserialize_elements::<_, TransitGatewayRouteTable, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "creationTime" => {
                        obj.creation_time =
                            Some(DateTimeDeserializer::deserialize("creationTime", stack)?);
                    }
                    "defaultAssociationRouteTable" => {
                        obj.default_association_route_table =
                            Some(BooleanDeserializer::deserialize(
                                "defaultAssociationRouteTable",
                                stack,
                            )?);
                    }
                    "defaultPropagationRouteTable" => {
                        obj.default_propagation_route_table =
                            Some(BooleanDeserializer::deserialize(
                                "defaultPropagationRouteTable",
                                stack,
                            )?);
                    }
                    "state" => {
                        obj.state = Some(TransitGatewayRouteTableStateDeserializer::deserialize(
                            "state", stack,
                        )?);
                    }
                    "tagSet" => {
                        obj.tags
                            .get_or_insert(vec![])
                            .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                    }
                    "transitGatewayId" => {
                        obj.transit_gateway_id =
                            Some(StringDeserializer::deserialize("transitGatewayId", stack)?);
                    }
                    "transitGatewayRouteTableId" => {
                        obj.transit_gateway_route_table_id = Some(StringDeserializer::deserialize(
                            "transitGatewayRouteTableId",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes an association between a route table and a resource attachment.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TransitGatewayRouteTableAssociation {
    /// <p>The ID of the resource.</p>
    pub resource_id: Option<String>,
    /// <p>The resource type.</p>
    pub resource_type: Option<String>,
    /// <p>The state of the association.</p>
    pub state: Option<String>,
    /// <p>The ID of the attachment.</p>
    pub transit_gateway_attachment_id: Option<String>,
}

struct TransitGatewayRouteTableAssociationDeserializer;
impl TransitGatewayRouteTableAssociationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TransitGatewayRouteTableAssociation, XmlParseError> {
        deserialize_elements::<_, TransitGatewayRouteTableAssociation, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "resourceId" => {
                        obj.resource_id =
                            Some(StringDeserializer::deserialize("resourceId", stack)?);
                    }
                    "resourceType" => {
                        obj.resource_type = Some(
                            TransitGatewayAttachmentResourceTypeDeserializer::deserialize(
                                "resourceType",
                                stack,
                            )?,
                        );
                    }
                    "state" => {
                        obj.state = Some(TransitGatewayAssociationStateDeserializer::deserialize(
                            "state", stack,
                        )?);
                    }
                    "transitGatewayAttachmentId" => {
                        obj.transit_gateway_attachment_id = Some(StringDeserializer::deserialize(
                            "transitGatewayAttachmentId",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct TransitGatewayRouteTableAssociationListDeserializer;
impl TransitGatewayRouteTableAssociationListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<TransitGatewayRouteTableAssociation>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(
                    TransitGatewayRouteTableAssociationDeserializer::deserialize("item", stack)?,
                );
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `TransitGatewayRouteTableIdStringList` contents to a `SignedRequest`.
struct TransitGatewayRouteTableIdStringListSerializer;
impl TransitGatewayRouteTableIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct TransitGatewayRouteTableListDeserializer;
impl TransitGatewayRouteTableListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<TransitGatewayRouteTable>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(TransitGatewayRouteTableDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a route table propagation.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TransitGatewayRouteTablePropagation {
    /// <p>The ID of the resource.</p>
    pub resource_id: Option<String>,
    /// <p>The type of resource.</p>
    pub resource_type: Option<String>,
    /// <p>The state of the resource.</p>
    pub state: Option<String>,
    /// <p>The ID of the attachment.</p>
    pub transit_gateway_attachment_id: Option<String>,
}

struct TransitGatewayRouteTablePropagationDeserializer;
impl TransitGatewayRouteTablePropagationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TransitGatewayRouteTablePropagation, XmlParseError> {
        deserialize_elements::<_, TransitGatewayRouteTablePropagation, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "resourceId" => {
                        obj.resource_id =
                            Some(StringDeserializer::deserialize("resourceId", stack)?);
                    }
                    "resourceType" => {
                        obj.resource_type = Some(
                            TransitGatewayAttachmentResourceTypeDeserializer::deserialize(
                                "resourceType",
                                stack,
                            )?,
                        );
                    }
                    "state" => {
                        obj.state = Some(TransitGatewayPropagationStateDeserializer::deserialize(
                            "state", stack,
                        )?);
                    }
                    "transitGatewayAttachmentId" => {
                        obj.transit_gateway_attachment_id = Some(StringDeserializer::deserialize(
                            "transitGatewayAttachmentId",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct TransitGatewayRouteTablePropagationListDeserializer;
impl TransitGatewayRouteTablePropagationListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<TransitGatewayRouteTablePropagation>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(
                    TransitGatewayRouteTablePropagationDeserializer::deserialize("item", stack)?,
                );
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct TransitGatewayRouteTableStateDeserializer;
impl TransitGatewayRouteTableStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct TransitGatewayRouteTypeDeserializer;
impl TransitGatewayRouteTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct TransitGatewayStateDeserializer;
impl TransitGatewayStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a VPC attachment.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TransitGatewayVpcAttachment {
    /// <p>The creation time.</p>
    pub creation_time: Option<String>,
    /// <p>The VPC attachment options.</p>
    pub options: Option<TransitGatewayVpcAttachmentOptions>,
    /// <p>The state of the VPC attachment.</p>
    pub state: Option<String>,
    /// <p>The IDs of the subnets.</p>
    pub subnet_ids: Option<Vec<String>>,
    /// <p>The tags for the VPC attachment.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The ID of the attachment.</p>
    pub transit_gateway_attachment_id: Option<String>,
    /// <p>The ID of the transit gateway.</p>
    pub transit_gateway_id: Option<String>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: Option<String>,
    /// <p>The ID of the AWS account that owns the VPC.</p>
    pub vpc_owner_id: Option<String>,
}

struct TransitGatewayVpcAttachmentDeserializer;
impl TransitGatewayVpcAttachmentDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TransitGatewayVpcAttachment, XmlParseError> {
        deserialize_elements::<_, TransitGatewayVpcAttachment, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "creationTime" => {
                        obj.creation_time =
                            Some(DateTimeDeserializer::deserialize("creationTime", stack)?);
                    }
                    "options" => {
                        obj.options =
                            Some(TransitGatewayVpcAttachmentOptionsDeserializer::deserialize(
                                "options", stack,
                            )?);
                    }
                    "state" => {
                        obj.state = Some(TransitGatewayAttachmentStateDeserializer::deserialize(
                            "state", stack,
                        )?);
                    }
                    "subnetIds" => {
                        obj.subnet_ids.get_or_insert(vec![]).extend(
                            ValueStringListDeserializer::deserialize("subnetIds", stack)?,
                        );
                    }
                    "tagSet" => {
                        obj.tags
                            .get_or_insert(vec![])
                            .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                    }
                    "transitGatewayAttachmentId" => {
                        obj.transit_gateway_attachment_id = Some(StringDeserializer::deserialize(
                            "transitGatewayAttachmentId",
                            stack,
                        )?);
                    }
                    "transitGatewayId" => {
                        obj.transit_gateway_id =
                            Some(StringDeserializer::deserialize("transitGatewayId", stack)?);
                    }
                    "vpcId" => {
                        obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                    }
                    "vpcOwnerId" => {
                        obj.vpc_owner_id =
                            Some(StringDeserializer::deserialize("vpcOwnerId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct TransitGatewayVpcAttachmentListDeserializer;
impl TransitGatewayVpcAttachmentListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<TransitGatewayVpcAttachment>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(TransitGatewayVpcAttachmentDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the VPC attachment options.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct TransitGatewayVpcAttachmentOptions {
    /// <p>Indicates whether DNS support is enabled.</p>
    pub dns_support: Option<String>,
    /// <p>Indicates whether IPv6 support is enabled.</p>
    pub ipv_6_support: Option<String>,
}

struct TransitGatewayVpcAttachmentOptionsDeserializer;
impl TransitGatewayVpcAttachmentOptionsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<TransitGatewayVpcAttachmentOptions, XmlParseError> {
        deserialize_elements::<_, TransitGatewayVpcAttachmentOptions, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "dnsSupport" => {
                        obj.dns_support = Some(DnsSupportValueDeserializer::deserialize(
                            "dnsSupport",
                            stack,
                        )?);
                    }
                    "ipv6Support" => {
                        obj.ipv_6_support = Some(Ipv6SupportValueDeserializer::deserialize(
                            "ipv6Support",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct TransportProtocolDeserializer;
impl TransportProtocolDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}

/// Serialize `TunnelOptionsList` contents to a `SignedRequest`.
struct TunnelOptionsListSerializer;
impl TunnelOptionsListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<VpnTunnelOptionsSpecification>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            VpnTunnelOptionsSpecificationSerializer::serialize(params, &key, obj);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct UnassignIpv6AddressesRequest {
    /// <p>The IPv6 addresses to unassign from the network interface.</p>
    pub ipv_6_addresses: Vec<String>,
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: String,
}

/// Serialize `UnassignIpv6AddressesRequest` contents to a `SignedRequest`.
struct UnassignIpv6AddressesRequestSerializer;
impl UnassignIpv6AddressesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &UnassignIpv6AddressesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        Ipv6AddressListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "Ipv6Addresses"),
            &obj.ipv_6_addresses,
        );
        params.put(
            &format!("{}{}", prefix, "NetworkInterfaceId"),
            &obj.network_interface_id,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct UnassignIpv6AddressesResult {
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: Option<String>,
    /// <p>The IPv6 addresses that have been unassigned from the network interface.</p>
    pub unassigned_ipv_6_addresses: Option<Vec<String>>,
}

struct UnassignIpv6AddressesResultDeserializer;
impl UnassignIpv6AddressesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<UnassignIpv6AddressesResult, XmlParseError> {
        deserialize_elements::<_, UnassignIpv6AddressesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "networkInterfaceId" => {
                        obj.network_interface_id = Some(StringDeserializer::deserialize(
                            "networkInterfaceId",
                            stack,
                        )?);
                    }
                    "unassignedIpv6Addresses" => {
                        obj.unassigned_ipv_6_addresses.get_or_insert(vec![]).extend(
                            Ipv6AddressListDeserializer::deserialize(
                                "unassignedIpv6Addresses",
                                stack,
                            )?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Contains the parameters for UnassignPrivateIpAddresses.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct UnassignPrivateIpAddressesRequest {
    /// <p>The ID of the network interface.</p>
    pub network_interface_id: String,
    /// <p>The secondary private IP addresses to unassign from the network interface. You can specify this option multiple times to unassign more than one IP address.</p>
    pub private_ip_addresses: Vec<String>,
}

/// Serialize `UnassignPrivateIpAddressesRequest` contents to a `SignedRequest`.
struct UnassignPrivateIpAddressesRequestSerializer;
impl UnassignPrivateIpAddressesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &UnassignPrivateIpAddressesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(
            &format!("{}{}", prefix, "NetworkInterfaceId"),
            &obj.network_interface_id,
        );
        PrivateIpAddressStringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "PrivateIpAddress"),
            &obj.private_ip_addresses,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct UnmonitorInstancesRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The IDs of the instances.</p>
    pub instance_ids: Vec<String>,
}

/// Serialize `UnmonitorInstancesRequest` contents to a `SignedRequest`.
struct UnmonitorInstancesRequestSerializer;
impl UnmonitorInstancesRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &UnmonitorInstancesRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        InstanceIdStringListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "InstanceId"),
            &obj.instance_ids,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct UnmonitorInstancesResult {
    /// <p>The monitoring information.</p>
    pub instance_monitorings: Option<Vec<InstanceMonitoring>>,
}

struct UnmonitorInstancesResultDeserializer;
impl UnmonitorInstancesResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<UnmonitorInstancesResult, XmlParseError> {
        deserialize_elements::<_, UnmonitorInstancesResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "instancesSet" => {
                        obj.instance_monitorings.get_or_insert(vec![]).extend(
                            InstanceMonitoringListDeserializer::deserialize("instancesSet", stack)?,
                        );
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct UnsuccessfulInstanceCreditSpecificationErrorCodeDeserializer;
impl UnsuccessfulInstanceCreditSpecificationErrorCodeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes the T2 or T3 instance whose credit option for CPU usage was not modified.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct UnsuccessfulInstanceCreditSpecificationItem {
    /// <p>The applicable error for the T2 or T3 instance whose credit option for CPU usage was not modified.</p>
    pub error: Option<UnsuccessfulInstanceCreditSpecificationItemError>,
    /// <p>The ID of the instance.</p>
    pub instance_id: Option<String>,
}

struct UnsuccessfulInstanceCreditSpecificationItemDeserializer;
impl UnsuccessfulInstanceCreditSpecificationItemDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<UnsuccessfulInstanceCreditSpecificationItem, XmlParseError> {
        deserialize_elements::<_, UnsuccessfulInstanceCreditSpecificationItem, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "error" => {
                        obj.error = Some(UnsuccessfulInstanceCreditSpecificationItemErrorDeserializer::deserialize("error", stack)?);
                    }
                    "instanceId" => {
                        obj.instance_id =
                            Some(StringDeserializer::deserialize("instanceId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Information about the error for the T2 or T3 instance whose credit option for CPU usage was not modified.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct UnsuccessfulInstanceCreditSpecificationItemError {
    /// <p>The error code.</p>
    pub code: Option<String>,
    /// <p>The applicable error message.</p>
    pub message: Option<String>,
}

struct UnsuccessfulInstanceCreditSpecificationItemErrorDeserializer;
impl UnsuccessfulInstanceCreditSpecificationItemErrorDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<UnsuccessfulInstanceCreditSpecificationItemError, XmlParseError> {
        deserialize_elements::<_, UnsuccessfulInstanceCreditSpecificationItemError, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "code" => {
                        obj.code = Some(UnsuccessfulInstanceCreditSpecificationErrorCodeDeserializer::deserialize("code", stack)?);
                    }
                    "message" => {
                        obj.message = Some(StringDeserializer::deserialize("message", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct UnsuccessfulInstanceCreditSpecificationSetDeserializer;
impl UnsuccessfulInstanceCreditSpecificationSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<UnsuccessfulInstanceCreditSpecificationItem>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(
                    UnsuccessfulInstanceCreditSpecificationItemDeserializer::deserialize(
                        "item", stack,
                    )?,
                );
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Information about items that were not successfully processed in a batch call.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct UnsuccessfulItem {
    /// <p>Information about the error.</p>
    pub error: Option<UnsuccessfulItemError>,
    /// <p>The ID of the resource.</p>
    pub resource_id: Option<String>,
}

struct UnsuccessfulItemDeserializer;
impl UnsuccessfulItemDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<UnsuccessfulItem, XmlParseError> {
        deserialize_elements::<_, UnsuccessfulItem, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "error" => {
                    obj.error = Some(UnsuccessfulItemErrorDeserializer::deserialize(
                        "error", stack,
                    )?);
                }
                "resourceId" => {
                    obj.resource_id = Some(StringDeserializer::deserialize("resourceId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Information about the error that occurred. For more information about errors, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html">Error Codes</a>.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct UnsuccessfulItemError {
    /// <p>The error code.</p>
    pub code: Option<String>,
    /// <p>The error message accompanying the error code.</p>
    pub message: Option<String>,
}

struct UnsuccessfulItemErrorDeserializer;
impl UnsuccessfulItemErrorDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<UnsuccessfulItemError, XmlParseError> {
        deserialize_elements::<_, UnsuccessfulItemError, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "code" => {
                    obj.code = Some(StringDeserializer::deserialize("code", stack)?);
                }
                "message" => {
                    obj.message = Some(StringDeserializer::deserialize("message", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct UnsuccessfulItemListDeserializer;
impl UnsuccessfulItemListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<UnsuccessfulItem>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(UnsuccessfulItemDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct UnsuccessfulItemSetDeserializer;
impl UnsuccessfulItemSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<UnsuccessfulItem>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(UnsuccessfulItemDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct UpdateSecurityGroupRuleDescriptionsEgressRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.</p>
    pub group_id: Option<String>,
    /// <p>[Default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.</p>
    pub group_name: Option<String>,
    /// <p>The IP permissions for the security group rule.</p>
    pub ip_permissions: Vec<IpPermission>,
}

/// Serialize `UpdateSecurityGroupRuleDescriptionsEgressRequest` contents to a `SignedRequest`.
struct UpdateSecurityGroupRuleDescriptionsEgressRequestSerializer;
impl UpdateSecurityGroupRuleDescriptionsEgressRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &UpdateSecurityGroupRuleDescriptionsEgressRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.group_id {
            params.put(&format!("{}{}", prefix, "GroupId"), &field_value);
        }
        if let Some(ref field_value) = obj.group_name {
            params.put(&format!("{}{}", prefix, "GroupName"), &field_value);
        }
        IpPermissionListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "IpPermissions"),
            &obj.ip_permissions,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct UpdateSecurityGroupRuleDescriptionsEgressResult {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    pub return_: Option<bool>,
}

struct UpdateSecurityGroupRuleDescriptionsEgressResultDeserializer;
impl UpdateSecurityGroupRuleDescriptionsEgressResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<UpdateSecurityGroupRuleDescriptionsEgressResult, XmlParseError> {
        deserialize_elements::<_, UpdateSecurityGroupRuleDescriptionsEgressResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
#[derive(Default, Debug, Clone, PartialEq)]
pub struct UpdateSecurityGroupRuleDescriptionsIngressRequest {
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
    /// <p>The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.</p>
    pub group_id: Option<String>,
    /// <p>[EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.</p>
    pub group_name: Option<String>,
    /// <p>The IP permissions for the security group rule. </p>
    pub ip_permissions: Vec<IpPermission>,
}

/// Serialize `UpdateSecurityGroupRuleDescriptionsIngressRequest` contents to a `SignedRequest`.
struct UpdateSecurityGroupRuleDescriptionsIngressRequestSerializer;
impl UpdateSecurityGroupRuleDescriptionsIngressRequestSerializer {
    fn serialize(
        params: &mut Params,
        name: &str,
        obj: &UpdateSecurityGroupRuleDescriptionsIngressRequest,
    ) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
        if let Some(ref field_value) = obj.group_id {
            params.put(&format!("{}{}", prefix, "GroupId"), &field_value);
        }
        if let Some(ref field_value) = obj.group_name {
            params.put(&format!("{}{}", prefix, "GroupName"), &field_value);
        }
        IpPermissionListSerializer::serialize(
            params,
            &format!("{}{}", prefix, "IpPermissions"),
            &obj.ip_permissions,
        );
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct UpdateSecurityGroupRuleDescriptionsIngressResult {
    /// <p>Returns <code>true</code> if the request succeeds; otherwise, returns an error.</p>
    pub return_: Option<bool>,
}

struct UpdateSecurityGroupRuleDescriptionsIngressResultDeserializer;
impl UpdateSecurityGroupRuleDescriptionsIngressResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<UpdateSecurityGroupRuleDescriptionsIngressResult, XmlParseError> {
        deserialize_elements::<_, UpdateSecurityGroupRuleDescriptionsIngressResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "return" => {
                        obj.return_ = Some(BooleanDeserializer::deserialize("return", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes the S3 bucket for the disk image.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct UserBucket {
    /// <p>The name of the S3 bucket where the disk image is located.</p>
    pub s3_bucket: Option<String>,
    /// <p>The file name of the disk image.</p>
    pub s3_key: Option<String>,
}

/// Serialize `UserBucket` contents to a `SignedRequest`.
struct UserBucketSerializer;
impl UserBucketSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &UserBucket) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.s3_bucket {
            params.put(&format!("{}{}", prefix, "S3Bucket"), &field_value);
        }
        if let Some(ref field_value) = obj.s3_key {
            params.put(&format!("{}{}", prefix, "S3Key"), &field_value);
        }
    }
}

/// <p>Describes the S3 bucket for the disk image.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct UserBucketDetails {
    /// <p>The S3 bucket from which the disk image was created.</p>
    pub s3_bucket: Option<String>,
    /// <p>The file name of the disk image.</p>
    pub s3_key: Option<String>,
}

struct UserBucketDetailsDeserializer;
impl UserBucketDetailsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<UserBucketDetails, XmlParseError> {
        deserialize_elements::<_, UserBucketDetails, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "s3Bucket" => {
                    obj.s3_bucket = Some(StringDeserializer::deserialize("s3Bucket", stack)?);
                }
                "s3Key" => {
                    obj.s3_key = Some(StringDeserializer::deserialize("s3Key", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes the user data for an instance.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct UserData {
    /// <p>The user data. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.</p>
    pub data: Option<String>,
}

/// Serialize `UserData` contents to a `SignedRequest`.
struct UserDataSerializer;
impl UserDataSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &UserData) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.data {
            params.put(&format!("{}{}", prefix, "Data"), &field_value);
        }
    }
}

/// Serialize `UserGroupStringList` contents to a `SignedRequest`.
struct UserGroupStringListSerializer;
impl UserGroupStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Describes a security group and AWS account ID pair.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct UserIdGroupPair {
    /// <p>A description for the security group rule that references this user ID group pair.</p> <p>Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*</p>
    pub description: Option<String>,
    /// <p>The ID of the security group.</p>
    pub group_id: Option<String>,
    /// <p>The name of the security group. In a request, use this parameter for a security group in EC2-Classic or a default VPC only. For a security group in a nondefault VPC, use the security group ID. </p> <p>For a referenced security group in another VPC, this value is not returned if the referenced security group is deleted.</p>
    pub group_name: Option<String>,
    /// <p>The status of a VPC peering connection, if applicable.</p>
    pub peering_status: Option<String>,
    /// <p>The ID of an AWS account.</p> <p>For a referenced security group in another VPC, the account ID of the referenced security group is returned in the response. If the referenced security group is deleted, this value is not returned.</p> <p>[EC2-Classic] Required when adding or removing rules that reference a security group in another AWS account.</p>
    pub user_id: Option<String>,
    /// <p>The ID of the VPC for the referenced security group, if applicable.</p>
    pub vpc_id: Option<String>,
    /// <p>The ID of the VPC peering connection, if applicable.</p>
    pub vpc_peering_connection_id: Option<String>,
}

struct UserIdGroupPairDeserializer;
impl UserIdGroupPairDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<UserIdGroupPair, XmlParseError> {
        deserialize_elements::<_, UserIdGroupPair, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "groupId" => {
                    obj.group_id = Some(StringDeserializer::deserialize("groupId", stack)?);
                }
                "groupName" => {
                    obj.group_name = Some(StringDeserializer::deserialize("groupName", stack)?);
                }
                "peeringStatus" => {
                    obj.peering_status =
                        Some(StringDeserializer::deserialize("peeringStatus", stack)?);
                }
                "userId" => {
                    obj.user_id = Some(StringDeserializer::deserialize("userId", stack)?);
                }
                "vpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                }
                "vpcPeeringConnectionId" => {
                    obj.vpc_peering_connection_id = Some(StringDeserializer::deserialize(
                        "vpcPeeringConnectionId",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `UserIdGroupPair` contents to a `SignedRequest`.
struct UserIdGroupPairSerializer;
impl UserIdGroupPairSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &UserIdGroupPair) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.description {
            params.put(&format!("{}{}", prefix, "Description"), &field_value);
        }
        if let Some(ref field_value) = obj.group_id {
            params.put(&format!("{}{}", prefix, "GroupId"), &field_value);
        }
        if let Some(ref field_value) = obj.group_name {
            params.put(&format!("{}{}", prefix, "GroupName"), &field_value);
        }
        if let Some(ref field_value) = obj.peering_status {
            params.put(&format!("{}{}", prefix, "PeeringStatus"), &field_value);
        }
        if let Some(ref field_value) = obj.user_id {
            params.put(&format!("{}{}", prefix, "UserId"), &field_value);
        }
        if let Some(ref field_value) = obj.vpc_id {
            params.put(&format!("{}{}", prefix, "VpcId"), &field_value);
        }
        if let Some(ref field_value) = obj.vpc_peering_connection_id {
            params.put(
                &format!("{}{}", prefix, "VpcPeeringConnectionId"),
                &field_value,
            );
        }
    }
}

struct UserIdGroupPairListDeserializer;
impl UserIdGroupPairListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<UserIdGroupPair>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(UserIdGroupPairDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `UserIdGroupPairList` contents to a `SignedRequest`.
struct UserIdGroupPairListSerializer;
impl UserIdGroupPairListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<UserIdGroupPair>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            UserIdGroupPairSerializer::serialize(params, &key, obj);
        }
    }
}

struct UserIdGroupPairSetDeserializer;
impl UserIdGroupPairSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<UserIdGroupPair>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(UserIdGroupPairDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `UserIdStringList` contents to a `SignedRequest`.
struct UserIdStringListSerializer;
impl UserIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct ValueStringListDeserializer;
impl ValueStringListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<String>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(StringDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}

/// Serialize `ValueStringList` contents to a `SignedRequest`.
struct ValueStringListSerializer;
impl ValueStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct VersionDescriptionDeserializer;
impl VersionDescriptionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}

/// Serialize `VersionStringList` contents to a `SignedRequest`.
struct VersionStringListSerializer;
impl VersionStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Describes telemetry for a VPN tunnel.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VgwTelemetry {
    /// <p>The number of accepted routes.</p>
    pub accepted_route_count: Option<i64>,
    /// <p>The date and time of the last change in status.</p>
    pub last_status_change: Option<String>,
    /// <p>The Internet-routable IP address of the virtual private gateway's outside interface.</p>
    pub outside_ip_address: Option<String>,
    /// <p>The status of the VPN tunnel.</p>
    pub status: Option<String>,
    /// <p>If an error occurs, a description of the error.</p>
    pub status_message: Option<String>,
}

struct VgwTelemetryDeserializer;
impl VgwTelemetryDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VgwTelemetry, XmlParseError> {
        deserialize_elements::<_, VgwTelemetry, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "acceptedRouteCount" => {
                    obj.accepted_route_count = Some(IntegerDeserializer::deserialize(
                        "acceptedRouteCount",
                        stack,
                    )?);
                }
                "lastStatusChange" => {
                    obj.last_status_change = Some(DateTimeDeserializer::deserialize(
                        "lastStatusChange",
                        stack,
                    )?);
                }
                "outsideIpAddress" => {
                    obj.outside_ip_address =
                        Some(StringDeserializer::deserialize("outsideIpAddress", stack)?);
                }
                "status" => {
                    obj.status = Some(TelemetryStatusDeserializer::deserialize("status", stack)?);
                }
                "statusMessage" => {
                    obj.status_message =
                        Some(StringDeserializer::deserialize("statusMessage", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct VgwTelemetryListDeserializer;
impl VgwTelemetryListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<VgwTelemetry>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(VgwTelemetryDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct VirtualizationTypeDeserializer;
impl VirtualizationTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a volume.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct Volume {
    /// <p>Information about the volume attachments.</p>
    pub attachments: Option<Vec<VolumeAttachment>>,
    /// <p>The Availability Zone for the volume.</p>
    pub availability_zone: Option<String>,
    /// <p>The time stamp when volume creation was initiated.</p>
    pub create_time: Option<String>,
    /// <p>Indicates whether the volume will be encrypted.</p>
    pub encrypted: Option<bool>,
    /// <p>The number of I/O operations per second (IOPS) that the volume supports. For Provisioned IOPS SSD volumes, this represents the number of IOPS that are provisioned for the volume. For General Purpose SSD volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">Amazon EBS Volume Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Constraints: Range is 100-16,000 IOPS for <code>gp2</code> volumes and 100 to 64,000IOPS for <code>io1</code> volumes, in most Regions. The maximum IOPS for <code>io1</code> of 64,000 is guaranteed only on <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Nitro-based instances</a>. Other instance families guarantee performance up to 32,000 IOPS.</p> <p>Condition: This parameter is required for requests to create <code>io1</code> volumes; it is not used in requests to create <code>gp2</code>, <code>st1</code>, <code>sc1</code>, or <code>standard</code> volumes.</p>
    pub iops: Option<i64>,
    /// <p>The full ARN of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the volume.</p>
    pub kms_key_id: Option<String>,
    /// <p>The size of the volume, in GiBs.</p>
    pub size: Option<i64>,
    /// <p>The snapshot from which the volume was created, if applicable.</p>
    pub snapshot_id: Option<String>,
    /// <p>The volume state.</p>
    pub state: Option<String>,
    /// <p>Any tags assigned to the volume.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The ID of the volume.</p>
    pub volume_id: Option<String>,
    /// <p>The volume type. This can be <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic volumes.</p>
    pub volume_type: Option<String>,
}

struct VolumeDeserializer;
impl VolumeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<Volume, XmlParseError> {
        deserialize_elements::<_, Volume, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "attachmentSet" => {
                    obj.attachments.get_or_insert(vec![]).extend(
                        VolumeAttachmentListDeserializer::deserialize("attachmentSet", stack)?,
                    );
                }
                "availabilityZone" => {
                    obj.availability_zone =
                        Some(StringDeserializer::deserialize("availabilityZone", stack)?);
                }
                "createTime" => {
                    obj.create_time = Some(DateTimeDeserializer::deserialize("createTime", stack)?);
                }
                "encrypted" => {
                    obj.encrypted = Some(BooleanDeserializer::deserialize("encrypted", stack)?);
                }
                "iops" => {
                    obj.iops = Some(IntegerDeserializer::deserialize("iops", stack)?);
                }
                "kmsKeyId" => {
                    obj.kms_key_id = Some(StringDeserializer::deserialize("kmsKeyId", stack)?);
                }
                "size" => {
                    obj.size = Some(IntegerDeserializer::deserialize("size", stack)?);
                }
                "snapshotId" => {
                    obj.snapshot_id = Some(StringDeserializer::deserialize("snapshotId", stack)?);
                }
                "status" => {
                    obj.state = Some(VolumeStateDeserializer::deserialize("status", stack)?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "volumeId" => {
                    obj.volume_id = Some(StringDeserializer::deserialize("volumeId", stack)?);
                }
                "volumeType" => {
                    obj.volume_type =
                        Some(VolumeTypeDeserializer::deserialize("volumeType", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes volume attachment details.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VolumeAttachment {
    /// <p>The time stamp when the attachment initiated.</p>
    pub attach_time: Option<String>,
    /// <p>Indicates whether the EBS volume is deleted on instance termination.</p>
    pub delete_on_termination: Option<bool>,
    /// <p>The device name.</p>
    pub device: Option<String>,
    /// <p>The ID of the instance.</p>
    pub instance_id: Option<String>,
    /// <p>The attachment state of the volume.</p>
    pub state: Option<String>,
    /// <p>The ID of the volume.</p>
    pub volume_id: Option<String>,
}

struct VolumeAttachmentDeserializer;
impl VolumeAttachmentDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VolumeAttachment, XmlParseError> {
        deserialize_elements::<_, VolumeAttachment, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "attachTime" => {
                    obj.attach_time = Some(DateTimeDeserializer::deserialize("attachTime", stack)?);
                }
                "deleteOnTermination" => {
                    obj.delete_on_termination = Some(BooleanDeserializer::deserialize(
                        "deleteOnTermination",
                        stack,
                    )?);
                }
                "device" => {
                    obj.device = Some(StringDeserializer::deserialize("device", stack)?);
                }
                "instanceId" => {
                    obj.instance_id = Some(StringDeserializer::deserialize("instanceId", stack)?);
                }
                "status" => {
                    obj.state = Some(VolumeAttachmentStateDeserializer::deserialize(
                        "status", stack,
                    )?);
                }
                "volumeId" => {
                    obj.volume_id = Some(StringDeserializer::deserialize("volumeId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct VolumeAttachmentListDeserializer;
impl VolumeAttachmentListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<VolumeAttachment>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(VolumeAttachmentDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct VolumeAttachmentStateDeserializer;
impl VolumeAttachmentStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes an EBS volume.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VolumeDetail {
    /// <p>The size of the volume, in GiB.</p>
    pub size: i64,
}

/// Serialize `VolumeDetail` contents to a `SignedRequest`.
struct VolumeDetailSerializer;
impl VolumeDetailSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &VolumeDetail) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Size"), &obj.size);
    }
}

/// Serialize `VolumeIdStringList` contents to a `SignedRequest`.
struct VolumeIdStringListSerializer;
impl VolumeIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct VolumeListDeserializer;
impl VolumeListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<Volume>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(VolumeDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the modification status of an EBS volume.</p> <p>If the volume has never been modified, some element values will be null.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VolumeModification {
    /// <p>The modification completion or failure time.</p>
    pub end_time: Option<String>,
    /// <p>The current modification state. The modification state is null for unmodified volumes.</p>
    pub modification_state: Option<String>,
    /// <p>The original IOPS rate of the volume.</p>
    pub original_iops: Option<i64>,
    /// <p>The original size of the volume.</p>
    pub original_size: Option<i64>,
    /// <p>The original EBS volume type of the volume.</p>
    pub original_volume_type: Option<String>,
    /// <p>The modification progress, from 0 to 100 percent complete.</p>
    pub progress: Option<i64>,
    /// <p>The modification start time.</p>
    pub start_time: Option<String>,
    /// <p>A status message about the modification progress or failure.</p>
    pub status_message: Option<String>,
    /// <p>The target IOPS rate of the volume.</p>
    pub target_iops: Option<i64>,
    /// <p>The target size of the volume, in GiB.</p>
    pub target_size: Option<i64>,
    /// <p>The target EBS volume type of the volume.</p>
    pub target_volume_type: Option<String>,
    /// <p>The ID of the volume.</p>
    pub volume_id: Option<String>,
}

struct VolumeModificationDeserializer;
impl VolumeModificationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VolumeModification, XmlParseError> {
        deserialize_elements::<_, VolumeModification, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "endTime" => {
                    obj.end_time = Some(DateTimeDeserializer::deserialize("endTime", stack)?);
                }
                "modificationState" => {
                    obj.modification_state =
                        Some(VolumeModificationStateDeserializer::deserialize(
                            "modificationState",
                            stack,
                        )?);
                }
                "originalIops" => {
                    obj.original_iops =
                        Some(IntegerDeserializer::deserialize("originalIops", stack)?);
                }
                "originalSize" => {
                    obj.original_size =
                        Some(IntegerDeserializer::deserialize("originalSize", stack)?);
                }
                "originalVolumeType" => {
                    obj.original_volume_type = Some(VolumeTypeDeserializer::deserialize(
                        "originalVolumeType",
                        stack,
                    )?);
                }
                "progress" => {
                    obj.progress = Some(LongDeserializer::deserialize("progress", stack)?);
                }
                "startTime" => {
                    obj.start_time = Some(DateTimeDeserializer::deserialize("startTime", stack)?);
                }
                "statusMessage" => {
                    obj.status_message =
                        Some(StringDeserializer::deserialize("statusMessage", stack)?);
                }
                "targetIops" => {
                    obj.target_iops = Some(IntegerDeserializer::deserialize("targetIops", stack)?);
                }
                "targetSize" => {
                    obj.target_size = Some(IntegerDeserializer::deserialize("targetSize", stack)?);
                }
                "targetVolumeType" => {
                    obj.target_volume_type = Some(VolumeTypeDeserializer::deserialize(
                        "targetVolumeType",
                        stack,
                    )?);
                }
                "volumeId" => {
                    obj.volume_id = Some(StringDeserializer::deserialize("volumeId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct VolumeModificationListDeserializer;
impl VolumeModificationListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<VolumeModification>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(VolumeModificationDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct VolumeModificationStateDeserializer;
impl VolumeModificationStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct VolumeStateDeserializer;
impl VolumeStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a volume status operation code.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VolumeStatusAction {
    /// <p>The code identifying the operation, for example, <code>enable-volume-io</code>.</p>
    pub code: Option<String>,
    /// <p>A description of the operation.</p>
    pub description: Option<String>,
    /// <p>The ID of the event associated with this operation.</p>
    pub event_id: Option<String>,
    /// <p>The event type associated with this operation.</p>
    pub event_type: Option<String>,
}

struct VolumeStatusActionDeserializer;
impl VolumeStatusActionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VolumeStatusAction, XmlParseError> {
        deserialize_elements::<_, VolumeStatusAction, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "code" => {
                    obj.code = Some(StringDeserializer::deserialize("code", stack)?);
                }
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "eventId" => {
                    obj.event_id = Some(StringDeserializer::deserialize("eventId", stack)?);
                }
                "eventType" => {
                    obj.event_type = Some(StringDeserializer::deserialize("eventType", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct VolumeStatusActionsListDeserializer;
impl VolumeStatusActionsListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<VolumeStatusAction>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(VolumeStatusActionDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a volume status.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VolumeStatusDetails {
    /// <p>The name of the volume status.</p>
    pub name: Option<String>,
    /// <p>The intended status of the volume status.</p>
    pub status: Option<String>,
}

struct VolumeStatusDetailsDeserializer;
impl VolumeStatusDetailsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VolumeStatusDetails, XmlParseError> {
        deserialize_elements::<_, VolumeStatusDetails, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "name" => {
                    obj.name = Some(VolumeStatusNameDeserializer::deserialize("name", stack)?);
                }
                "status" => {
                    obj.status = Some(StringDeserializer::deserialize("status", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct VolumeStatusDetailsListDeserializer;
impl VolumeStatusDetailsListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<VolumeStatusDetails>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(VolumeStatusDetailsDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a volume status event.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VolumeStatusEvent {
    /// <p>A description of the event.</p>
    pub description: Option<String>,
    /// <p>The ID of this event.</p>
    pub event_id: Option<String>,
    /// <p>The type of this event.</p>
    pub event_type: Option<String>,
    /// <p>The latest end time of the event.</p>
    pub not_after: Option<String>,
    /// <p>The earliest start time of the event.</p>
    pub not_before: Option<String>,
}

struct VolumeStatusEventDeserializer;
impl VolumeStatusEventDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VolumeStatusEvent, XmlParseError> {
        deserialize_elements::<_, VolumeStatusEvent, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "description" => {
                    obj.description = Some(StringDeserializer::deserialize("description", stack)?);
                }
                "eventId" => {
                    obj.event_id = Some(StringDeserializer::deserialize("eventId", stack)?);
                }
                "eventType" => {
                    obj.event_type = Some(StringDeserializer::deserialize("eventType", stack)?);
                }
                "notAfter" => {
                    obj.not_after = Some(DateTimeDeserializer::deserialize("notAfter", stack)?);
                }
                "notBefore" => {
                    obj.not_before = Some(DateTimeDeserializer::deserialize("notBefore", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct VolumeStatusEventsListDeserializer;
impl VolumeStatusEventsListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<VolumeStatusEvent>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(VolumeStatusEventDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the status of a volume.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VolumeStatusInfo {
    /// <p>The details of the volume status.</p>
    pub details: Option<Vec<VolumeStatusDetails>>,
    /// <p>The status of the volume.</p>
    pub status: Option<String>,
}

struct VolumeStatusInfoDeserializer;
impl VolumeStatusInfoDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VolumeStatusInfo, XmlParseError> {
        deserialize_elements::<_, VolumeStatusInfo, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "details" => {
                    obj.details.get_or_insert(vec![]).extend(
                        VolumeStatusDetailsListDeserializer::deserialize("details", stack)?,
                    );
                }
                "status" => {
                    obj.status = Some(VolumeStatusInfoStatusDeserializer::deserialize(
                        "status", stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct VolumeStatusInfoStatusDeserializer;
impl VolumeStatusInfoStatusDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes the volume status.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VolumeStatusItem {
    /// <p>The details of the operation.</p>
    pub actions: Option<Vec<VolumeStatusAction>>,
    /// <p>The Availability Zone of the volume.</p>
    pub availability_zone: Option<String>,
    /// <p>A list of events associated with the volume.</p>
    pub events: Option<Vec<VolumeStatusEvent>>,
    /// <p>The volume ID.</p>
    pub volume_id: Option<String>,
    /// <p>The volume status.</p>
    pub volume_status: Option<VolumeStatusInfo>,
}

struct VolumeStatusItemDeserializer;
impl VolumeStatusItemDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VolumeStatusItem, XmlParseError> {
        deserialize_elements::<_, VolumeStatusItem, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "actionsSet" => {
                    obj.actions.get_or_insert(vec![]).extend(
                        VolumeStatusActionsListDeserializer::deserialize("actionsSet", stack)?,
                    );
                }
                "availabilityZone" => {
                    obj.availability_zone =
                        Some(StringDeserializer::deserialize("availabilityZone", stack)?);
                }
                "eventsSet" => {
                    obj.events.get_or_insert(vec![]).extend(
                        VolumeStatusEventsListDeserializer::deserialize("eventsSet", stack)?,
                    );
                }
                "volumeId" => {
                    obj.volume_id = Some(StringDeserializer::deserialize("volumeId", stack)?);
                }
                "volumeStatus" => {
                    obj.volume_status = Some(VolumeStatusInfoDeserializer::deserialize(
                        "volumeStatus",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct VolumeStatusListDeserializer;
impl VolumeStatusListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<VolumeStatusItem>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(VolumeStatusItemDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct VolumeStatusNameDeserializer;
impl VolumeStatusNameDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct VolumeTypeDeserializer;
impl VolumeTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a VPC.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct Vpc {
    /// <p>The primary IPv4 CIDR block for the VPC.</p>
    pub cidr_block: Option<String>,
    /// <p>Information about the IPv4 CIDR blocks associated with the VPC.</p>
    pub cidr_block_association_set: Option<Vec<VpcCidrBlockAssociation>>,
    /// <p>The ID of the set of DHCP options you've associated with the VPC (or <code>default</code> if the default options are associated with the VPC).</p>
    pub dhcp_options_id: Option<String>,
    /// <p>The allowed tenancy of instances launched into the VPC.</p>
    pub instance_tenancy: Option<String>,
    /// <p>Information about the IPv6 CIDR blocks associated with the VPC.</p>
    pub ipv_6_cidr_block_association_set: Option<Vec<VpcIpv6CidrBlockAssociation>>,
    /// <p>Indicates whether the VPC is the default VPC.</p>
    pub is_default: Option<bool>,
    /// <p>The ID of the AWS account that owns the VPC.</p>
    pub owner_id: Option<String>,
    /// <p>The current state of the VPC.</p>
    pub state: Option<String>,
    /// <p>Any tags assigned to the VPC.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: Option<String>,
}

struct VpcDeserializer;
impl VpcDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<Vpc, XmlParseError> {
        deserialize_elements::<_, Vpc, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "cidrBlock" => {
                    obj.cidr_block = Some(StringDeserializer::deserialize("cidrBlock", stack)?);
                }
                "cidrBlockAssociationSet" => {
                    obj.cidr_block_association_set.get_or_insert(vec![]).extend(
                        VpcCidrBlockAssociationSetDeserializer::deserialize(
                            "cidrBlockAssociationSet",
                            stack,
                        )?,
                    );
                }
                "dhcpOptionsId" => {
                    obj.dhcp_options_id =
                        Some(StringDeserializer::deserialize("dhcpOptionsId", stack)?);
                }
                "instanceTenancy" => {
                    obj.instance_tenancy =
                        Some(TenancyDeserializer::deserialize("instanceTenancy", stack)?);
                }
                "ipv6CidrBlockAssociationSet" => {
                    obj.ipv_6_cidr_block_association_set
                        .get_or_insert(vec![])
                        .extend(VpcIpv6CidrBlockAssociationSetDeserializer::deserialize(
                            "ipv6CidrBlockAssociationSet",
                            stack,
                        )?);
                }
                "isDefault" => {
                    obj.is_default = Some(BooleanDeserializer::deserialize("isDefault", stack)?);
                }
                "ownerId" => {
                    obj.owner_id = Some(StringDeserializer::deserialize("ownerId", stack)?);
                }
                "state" => {
                    obj.state = Some(VpcStateDeserializer::deserialize("state", stack)?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "vpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes an attachment between a virtual private gateway and a VPC.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VpcAttachment {
    /// <p>The current state of the attachment.</p>
    pub state: Option<String>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: Option<String>,
}

struct VpcAttachmentDeserializer;
impl VpcAttachmentDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VpcAttachment, XmlParseError> {
        deserialize_elements::<_, VpcAttachment, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "state" => {
                    obj.state = Some(AttachmentStatusDeserializer::deserialize("state", stack)?);
                }
                "vpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct VpcAttachmentListDeserializer;
impl VpcAttachmentListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<VpcAttachment>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(VpcAttachmentDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes an IPv4 CIDR block associated with a VPC.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VpcCidrBlockAssociation {
    /// <p>The association ID for the IPv4 CIDR block.</p>
    pub association_id: Option<String>,
    /// <p>The IPv4 CIDR block.</p>
    pub cidr_block: Option<String>,
    /// <p>Information about the state of the CIDR block.</p>
    pub cidr_block_state: Option<VpcCidrBlockState>,
}

struct VpcCidrBlockAssociationDeserializer;
impl VpcCidrBlockAssociationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VpcCidrBlockAssociation, XmlParseError> {
        deserialize_elements::<_, VpcCidrBlockAssociation, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "associationId" => {
                        obj.association_id =
                            Some(StringDeserializer::deserialize("associationId", stack)?);
                    }
                    "cidrBlock" => {
                        obj.cidr_block = Some(StringDeserializer::deserialize("cidrBlock", stack)?);
                    }
                    "cidrBlockState" => {
                        obj.cidr_block_state = Some(VpcCidrBlockStateDeserializer::deserialize(
                            "cidrBlockState",
                            stack,
                        )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct VpcCidrBlockAssociationSetDeserializer;
impl VpcCidrBlockAssociationSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<VpcCidrBlockAssociation>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(VpcCidrBlockAssociationDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the state of a CIDR block.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VpcCidrBlockState {
    /// <p>The state of the CIDR block.</p>
    pub state: Option<String>,
    /// <p>A message about the status of the CIDR block, if applicable.</p>
    pub status_message: Option<String>,
}

struct VpcCidrBlockStateDeserializer;
impl VpcCidrBlockStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VpcCidrBlockState, XmlParseError> {
        deserialize_elements::<_, VpcCidrBlockState, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "state" => {
                    obj.state = Some(VpcCidrBlockStateCodeDeserializer::deserialize(
                        "state", stack,
                    )?);
                }
                "statusMessage" => {
                    obj.status_message =
                        Some(StringDeserializer::deserialize("statusMessage", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct VpcCidrBlockStateCodeDeserializer;
impl VpcCidrBlockStateCodeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes whether a VPC is enabled for ClassicLink.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VpcClassicLink {
    /// <p>Indicates whether the VPC is enabled for ClassicLink.</p>
    pub classic_link_enabled: Option<bool>,
    /// <p>Any tags assigned to the VPC.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: Option<String>,
}

struct VpcClassicLinkDeserializer;
impl VpcClassicLinkDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VpcClassicLink, XmlParseError> {
        deserialize_elements::<_, VpcClassicLink, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "classicLinkEnabled" => {
                    obj.classic_link_enabled = Some(BooleanDeserializer::deserialize(
                        "classicLinkEnabled",
                        stack,
                    )?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "vpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `VpcClassicLinkIdList` contents to a `SignedRequest`.
struct VpcClassicLinkIdListSerializer;
impl VpcClassicLinkIdListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct VpcClassicLinkListDeserializer;
impl VpcClassicLinkListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<VpcClassicLink>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(VpcClassicLinkDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a VPC endpoint.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VpcEndpoint {
    /// <p>The date and time the VPC endpoint was created.</p>
    pub creation_timestamp: Option<String>,
    /// <p>(Interface endpoint) The DNS entries for the endpoint.</p>
    pub dns_entries: Option<Vec<DnsEntry>>,
    /// <p>(Interface endpoint) Information about the security groups associated with the network interface.</p>
    pub groups: Option<Vec<SecurityGroupIdentifier>>,
    /// <p>(Interface endpoint) One or more network interfaces for the endpoint.</p>
    pub network_interface_ids: Option<Vec<String>>,
    /// <p>The policy document associated with the endpoint, if applicable.</p>
    pub policy_document: Option<String>,
    /// <p>(Interface endpoint) Indicates whether the VPC is associated with a private hosted zone.</p>
    pub private_dns_enabled: Option<bool>,
    /// <p>Indicates whether the VPC endpoint is being managed by its service.</p>
    pub requester_managed: Option<bool>,
    /// <p>(Gateway endpoint) One or more route tables associated with the endpoint.</p>
    pub route_table_ids: Option<Vec<String>>,
    /// <p>The name of the service to which the endpoint is associated.</p>
    pub service_name: Option<String>,
    /// <p>The state of the VPC endpoint.</p>
    pub state: Option<String>,
    /// <p>(Interface endpoint) One or more subnets in which the endpoint is located.</p>
    pub subnet_ids: Option<Vec<String>>,
    /// <p>Any tags assigned to the VPC endpoint.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The ID of the VPC endpoint.</p>
    pub vpc_endpoint_id: Option<String>,
    /// <p>The type of endpoint.</p>
    pub vpc_endpoint_type: Option<String>,
    /// <p>The ID of the VPC to which the endpoint is associated.</p>
    pub vpc_id: Option<String>,
}

struct VpcEndpointDeserializer;
impl VpcEndpointDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VpcEndpoint, XmlParseError> {
        deserialize_elements::<_, VpcEndpoint, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "creationTimestamp" => {
                    obj.creation_timestamp = Some(MillisecondDateTimeDeserializer::deserialize(
                        "creationTimestamp",
                        stack,
                    )?);
                }
                "dnsEntrySet" => {
                    obj.dns_entries
                        .get_or_insert(vec![])
                        .extend(DnsEntrySetDeserializer::deserialize("dnsEntrySet", stack)?);
                }
                "groupSet" => {
                    obj.groups.get_or_insert(vec![]).extend(
                        GroupIdentifierSetDeserializer::deserialize("groupSet", stack)?,
                    );
                }
                "networkInterfaceIdSet" => {
                    obj.network_interface_ids.get_or_insert(vec![]).extend(
                        ValueStringListDeserializer::deserialize("networkInterfaceIdSet", stack)?,
                    );
                }
                "policyDocument" => {
                    obj.policy_document =
                        Some(StringDeserializer::deserialize("policyDocument", stack)?);
                }
                "privateDnsEnabled" => {
                    obj.private_dns_enabled = Some(BooleanDeserializer::deserialize(
                        "privateDnsEnabled",
                        stack,
                    )?);
                }
                "requesterManaged" => {
                    obj.requester_managed =
                        Some(BooleanDeserializer::deserialize("requesterManaged", stack)?);
                }
                "routeTableIdSet" => {
                    obj.route_table_ids.get_or_insert(vec![]).extend(
                        ValueStringListDeserializer::deserialize("routeTableIdSet", stack)?,
                    );
                }
                "serviceName" => {
                    obj.service_name = Some(StringDeserializer::deserialize("serviceName", stack)?);
                }
                "state" => {
                    obj.state = Some(StateDeserializer::deserialize("state", stack)?);
                }
                "subnetIdSet" => {
                    obj.subnet_ids.get_or_insert(vec![]).extend(
                        ValueStringListDeserializer::deserialize("subnetIdSet", stack)?,
                    );
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "vpcEndpointId" => {
                    obj.vpc_endpoint_id =
                        Some(StringDeserializer::deserialize("vpcEndpointId", stack)?);
                }
                "vpcEndpointType" => {
                    obj.vpc_endpoint_type = Some(VpcEndpointTypeDeserializer::deserialize(
                        "vpcEndpointType",
                        stack,
                    )?);
                }
                "vpcId" => {
                    obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes a VPC endpoint connection to a service.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VpcEndpointConnection {
    /// <p>The date and time the VPC endpoint was created.</p>
    pub creation_timestamp: Option<String>,
    /// <p>The ID of the service to which the endpoint is connected.</p>
    pub service_id: Option<String>,
    /// <p>The ID of the VPC endpoint.</p>
    pub vpc_endpoint_id: Option<String>,
    /// <p>The AWS account ID of the owner of the VPC endpoint.</p>
    pub vpc_endpoint_owner: Option<String>,
    /// <p>The state of the VPC endpoint.</p>
    pub vpc_endpoint_state: Option<String>,
}

struct VpcEndpointConnectionDeserializer;
impl VpcEndpointConnectionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VpcEndpointConnection, XmlParseError> {
        deserialize_elements::<_, VpcEndpointConnection, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "creationTimestamp" => {
                    obj.creation_timestamp = Some(MillisecondDateTimeDeserializer::deserialize(
                        "creationTimestamp",
                        stack,
                    )?);
                }
                "serviceId" => {
                    obj.service_id = Some(StringDeserializer::deserialize("serviceId", stack)?);
                }
                "vpcEndpointId" => {
                    obj.vpc_endpoint_id =
                        Some(StringDeserializer::deserialize("vpcEndpointId", stack)?);
                }
                "vpcEndpointOwner" => {
                    obj.vpc_endpoint_owner =
                        Some(StringDeserializer::deserialize("vpcEndpointOwner", stack)?);
                }
                "vpcEndpointState" => {
                    obj.vpc_endpoint_state =
                        Some(StateDeserializer::deserialize("vpcEndpointState", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct VpcEndpointConnectionSetDeserializer;
impl VpcEndpointConnectionSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<VpcEndpointConnection>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(VpcEndpointConnectionDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct VpcEndpointSetDeserializer;
impl VpcEndpointSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<VpcEndpoint>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(VpcEndpointDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct VpcEndpointTypeDeserializer;
impl VpcEndpointTypeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}

/// Serialize `VpcIdStringList` contents to a `SignedRequest`.
struct VpcIdStringListSerializer;
impl VpcIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// <p>Describes an IPv6 CIDR block associated with a VPC.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VpcIpv6CidrBlockAssociation {
    /// <p>The association ID for the IPv6 CIDR block.</p>
    pub association_id: Option<String>,
    /// <p>The IPv6 CIDR block.</p>
    pub ipv_6_cidr_block: Option<String>,
    /// <p>Information about the state of the CIDR block.</p>
    pub ipv_6_cidr_block_state: Option<VpcCidrBlockState>,
}

struct VpcIpv6CidrBlockAssociationDeserializer;
impl VpcIpv6CidrBlockAssociationDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VpcIpv6CidrBlockAssociation, XmlParseError> {
        deserialize_elements::<_, VpcIpv6CidrBlockAssociation, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "associationId" => {
                        obj.association_id =
                            Some(StringDeserializer::deserialize("associationId", stack)?);
                    }
                    "ipv6CidrBlock" => {
                        obj.ipv_6_cidr_block =
                            Some(StringDeserializer::deserialize("ipv6CidrBlock", stack)?);
                    }
                    "ipv6CidrBlockState" => {
                        obj.ipv_6_cidr_block_state =
                            Some(VpcCidrBlockStateDeserializer::deserialize(
                                "ipv6CidrBlockState",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct VpcIpv6CidrBlockAssociationSetDeserializer;
impl VpcIpv6CidrBlockAssociationSetDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<VpcIpv6CidrBlockAssociation>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(VpcIpv6CidrBlockAssociationDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct VpcListDeserializer;
impl VpcListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<Vpc>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(VpcDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes a VPC peering connection.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VpcPeeringConnection {
    /// <p>Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.</p>
    pub accepter_vpc_info: Option<VpcPeeringConnectionVpcInfo>,
    /// <p>The time that an unaccepted VPC peering connection will expire.</p>
    pub expiration_time: Option<String>,
    /// <p>Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.</p>
    pub requester_vpc_info: Option<VpcPeeringConnectionVpcInfo>,
    /// <p>The status of the VPC peering connection.</p>
    pub status: Option<VpcPeeringConnectionStateReason>,
    /// <p>Any tags assigned to the resource.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The ID of the VPC peering connection.</p>
    pub vpc_peering_connection_id: Option<String>,
}

struct VpcPeeringConnectionDeserializer;
impl VpcPeeringConnectionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VpcPeeringConnection, XmlParseError> {
        deserialize_elements::<_, VpcPeeringConnection, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "accepterVpcInfo" => {
                    obj.accepter_vpc_info =
                        Some(VpcPeeringConnectionVpcInfoDeserializer::deserialize(
                            "accepterVpcInfo",
                            stack,
                        )?);
                }
                "expirationTime" => {
                    obj.expiration_time =
                        Some(DateTimeDeserializer::deserialize("expirationTime", stack)?);
                }
                "requesterVpcInfo" => {
                    obj.requester_vpc_info =
                        Some(VpcPeeringConnectionVpcInfoDeserializer::deserialize(
                            "requesterVpcInfo",
                            stack,
                        )?);
                }
                "status" => {
                    obj.status = Some(VpcPeeringConnectionStateReasonDeserializer::deserialize(
                        "status", stack,
                    )?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "vpcPeeringConnectionId" => {
                    obj.vpc_peering_connection_id = Some(StringDeserializer::deserialize(
                        "vpcPeeringConnectionId",
                        stack,
                    )?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct VpcPeeringConnectionListDeserializer;
impl VpcPeeringConnectionListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<VpcPeeringConnection>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(VpcPeeringConnectionDeserializer::deserialize(
                    "item", stack,
                )?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes the VPC peering connection options.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VpcPeeringConnectionOptionsDescription {
    /// <p>Indicates whether a local VPC can resolve public DNS hostnames to private IP addresses when queried from instances in a peer VPC.</p>
    pub allow_dns_resolution_from_remote_vpc: Option<bool>,
    /// <p>Indicates whether a local ClassicLink connection can communicate with the peer VPC over the VPC peering connection.</p>
    pub allow_egress_from_local_classic_link_to_remote_vpc: Option<bool>,
    /// <p>Indicates whether a local VPC can communicate with a ClassicLink connection in the peer VPC over the VPC peering connection.</p>
    pub allow_egress_from_local_vpc_to_remote_classic_link: Option<bool>,
}

struct VpcPeeringConnectionOptionsDescriptionDeserializer;
impl VpcPeeringConnectionOptionsDescriptionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VpcPeeringConnectionOptionsDescription, XmlParseError> {
        deserialize_elements::<_, VpcPeeringConnectionOptionsDescription, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "allowDnsResolutionFromRemoteVpc" => {
                        obj.allow_dns_resolution_from_remote_vpc =
                            Some(BooleanDeserializer::deserialize(
                                "allowDnsResolutionFromRemoteVpc",
                                stack,
                            )?);
                    }
                    "allowEgressFromLocalClassicLinkToRemoteVpc" => {
                        obj.allow_egress_from_local_classic_link_to_remote_vpc =
                            Some(BooleanDeserializer::deserialize(
                                "allowEgressFromLocalClassicLinkToRemoteVpc",
                                stack,
                            )?);
                    }
                    "allowEgressFromLocalVpcToRemoteClassicLink" => {
                        obj.allow_egress_from_local_vpc_to_remote_classic_link =
                            Some(BooleanDeserializer::deserialize(
                                "allowEgressFromLocalVpcToRemoteClassicLink",
                                stack,
                            )?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
/// <p>Describes the status of a VPC peering connection.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VpcPeeringConnectionStateReason {
    /// <p>The status of the VPC peering connection.</p>
    pub code: Option<String>,
    /// <p>A message that provides more information about the status, if applicable.</p>
    pub message: Option<String>,
}

struct VpcPeeringConnectionStateReasonDeserializer;
impl VpcPeeringConnectionStateReasonDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VpcPeeringConnectionStateReason, XmlParseError> {
        deserialize_elements::<_, VpcPeeringConnectionStateReason, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "code" => {
                        obj.code = Some(
                            VpcPeeringConnectionStateReasonCodeDeserializer::deserialize(
                                "code", stack,
                            )?,
                        );
                    }
                    "message" => {
                        obj.message = Some(StringDeserializer::deserialize("message", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct VpcPeeringConnectionStateReasonCodeDeserializer;
impl VpcPeeringConnectionStateReasonCodeDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a VPC in a VPC peering connection.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VpcPeeringConnectionVpcInfo {
    /// <p>The IPv4 CIDR block for the VPC.</p>
    pub cidr_block: Option<String>,
    /// <p>Information about the IPv4 CIDR blocks for the VPC.</p>
    pub cidr_block_set: Option<Vec<CidrBlock>>,
    /// <p>The IPv6 CIDR block for the VPC.</p>
    pub ipv_6_cidr_block_set: Option<Vec<Ipv6CidrBlock>>,
    /// <p>The AWS account ID of the VPC owner.</p>
    pub owner_id: Option<String>,
    /// <p>Information about the VPC peering connection options for the accepter or requester VPC.</p>
    pub peering_options: Option<VpcPeeringConnectionOptionsDescription>,
    /// <p>The Region in which the VPC is located.</p>
    pub region: Option<String>,
    /// <p>The ID of the VPC.</p>
    pub vpc_id: Option<String>,
}

struct VpcPeeringConnectionVpcInfoDeserializer;
impl VpcPeeringConnectionVpcInfoDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VpcPeeringConnectionVpcInfo, XmlParseError> {
        deserialize_elements::<_, VpcPeeringConnectionVpcInfo, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "cidrBlock" => {
                        obj.cidr_block = Some(StringDeserializer::deserialize("cidrBlock", stack)?);
                    }
                    "cidrBlockSet" => {
                        obj.cidr_block_set.get_or_insert(vec![]).extend(
                            CidrBlockSetDeserializer::deserialize("cidrBlockSet", stack)?,
                        );
                    }
                    "ipv6CidrBlockSet" => {
                        obj.ipv_6_cidr_block_set.get_or_insert(vec![]).extend(
                            Ipv6CidrBlockSetDeserializer::deserialize("ipv6CidrBlockSet", stack)?,
                        );
                    }
                    "ownerId" => {
                        obj.owner_id = Some(StringDeserializer::deserialize("ownerId", stack)?);
                    }
                    "peeringOptions" => {
                        obj.peering_options = Some(
                            VpcPeeringConnectionOptionsDescriptionDeserializer::deserialize(
                                "peeringOptions",
                                stack,
                            )?,
                        );
                    }
                    "region" => {
                        obj.region = Some(StringDeserializer::deserialize("region", stack)?);
                    }
                    "vpcId" => {
                        obj.vpc_id = Some(StringDeserializer::deserialize("vpcId", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}
struct VpcStateDeserializer;
impl VpcStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a VPN connection.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VpnConnection {
    /// <p>The category of the VPN connection. A value of <code>VPN</code> indicates an AWS VPN connection. A value of <code>VPN-Classic</code> indicates an AWS Classic VPN connection.</p>
    pub category: Option<String>,
    /// <p>The configuration information for the VPN connection's customer gateway (in the native XML format). This element is always present in the <a>CreateVpnConnection</a> response; however, it's present in the <a>DescribeVpnConnections</a> response only if the VPN connection is in the <code>pending</code> or <code>available</code> state.</p>
    pub customer_gateway_configuration: Option<String>,
    /// <p>The ID of the customer gateway at your end of the VPN connection.</p>
    pub customer_gateway_id: Option<String>,
    /// <p>The VPN connection options.</p>
    pub options: Option<VpnConnectionOptions>,
    /// <p>The static routes associated with the VPN connection.</p>
    pub routes: Option<Vec<VpnStaticRoute>>,
    /// <p>The current state of the VPN connection.</p>
    pub state: Option<String>,
    /// <p>Any tags assigned to the VPN connection.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The ID of the transit gateway associated with the VPN connection.</p>
    pub transit_gateway_id: Option<String>,
    /// <p>The type of VPN connection.</p>
    pub type_: Option<String>,
    /// <p>Information about the VPN tunnel.</p>
    pub vgw_telemetry: Option<Vec<VgwTelemetry>>,
    /// <p>The ID of the VPN connection.</p>
    pub vpn_connection_id: Option<String>,
    /// <p>The ID of the virtual private gateway at the AWS side of the VPN connection.</p>
    pub vpn_gateway_id: Option<String>,
}

struct VpnConnectionDeserializer;
impl VpnConnectionDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VpnConnection, XmlParseError> {
        deserialize_elements::<_, VpnConnection, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "category" => {
                    obj.category = Some(StringDeserializer::deserialize("category", stack)?);
                }
                "customerGatewayConfiguration" => {
                    obj.customer_gateway_configuration = Some(StringDeserializer::deserialize(
                        "customerGatewayConfiguration",
                        stack,
                    )?);
                }
                "customerGatewayId" => {
                    obj.customer_gateway_id =
                        Some(StringDeserializer::deserialize("customerGatewayId", stack)?);
                }
                "options" => {
                    obj.options = Some(VpnConnectionOptionsDeserializer::deserialize(
                        "options", stack,
                    )?);
                }
                "routes" => {
                    obj.routes.get_or_insert(vec![]).extend(
                        VpnStaticRouteListDeserializer::deserialize("routes", stack)?,
                    );
                }
                "state" => {
                    obj.state = Some(VpnStateDeserializer::deserialize("state", stack)?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "transitGatewayId" => {
                    obj.transit_gateway_id =
                        Some(StringDeserializer::deserialize("transitGatewayId", stack)?);
                }
                "type" => {
                    obj.type_ = Some(GatewayTypeDeserializer::deserialize("type", stack)?);
                }
                "vgwTelemetry" => {
                    obj.vgw_telemetry.get_or_insert(vec![]).extend(
                        VgwTelemetryListDeserializer::deserialize("vgwTelemetry", stack)?,
                    );
                }
                "vpnConnectionId" => {
                    obj.vpn_connection_id =
                        Some(StringDeserializer::deserialize("vpnConnectionId", stack)?);
                }
                "vpnGatewayId" => {
                    obj.vpn_gateway_id =
                        Some(StringDeserializer::deserialize("vpnGatewayId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `VpnConnectionIdStringList` contents to a `SignedRequest`.
struct VpnConnectionIdStringListSerializer;
impl VpnConnectionIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct VpnConnectionListDeserializer;
impl VpnConnectionListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<VpnConnection>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(VpnConnectionDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
/// <p>Describes VPN connection options.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VpnConnectionOptions {
    /// <p>Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.</p>
    pub static_routes_only: Option<bool>,
}

struct VpnConnectionOptionsDeserializer;
impl VpnConnectionOptionsDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VpnConnectionOptions, XmlParseError> {
        deserialize_elements::<_, VpnConnectionOptions, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "staticRoutesOnly" => {
                    obj.static_routes_only =
                        Some(BooleanDeserializer::deserialize("staticRoutesOnly", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
/// <p>Describes VPN connection options.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VpnConnectionOptionsSpecification {
    /// <p>Indicate whether the VPN connection uses static routes only. If you are creating a VPN connection for a device that does not support BGP, you must specify <code>true</code>. Use <a>CreateVpnConnectionRoute</a> to create a static route.</p> <p>Default: <code>false</code> </p>
    pub static_routes_only: Option<bool>,
    /// <p>The tunnel options for the VPN connection.</p>
    pub tunnel_options: Option<Vec<VpnTunnelOptionsSpecification>>,
}

/// Serialize `VpnConnectionOptionsSpecification` contents to a `SignedRequest`.
struct VpnConnectionOptionsSpecificationSerializer;
impl VpnConnectionOptionsSpecificationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &VpnConnectionOptionsSpecification) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.static_routes_only {
            params.put(&format!("{}{}", prefix, "StaticRoutesOnly"), &field_value);
        }
        if let Some(ref field_value) = obj.tunnel_options {
            TunnelOptionsListSerializer::serialize(
                params,
                &format!("{}{}", prefix, "TunnelOptions"),
                field_value,
            );
        }
    }
}

struct VpnEcmpSupportValueDeserializer;
impl VpnEcmpSupportValueDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a virtual private gateway.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VpnGateway {
    /// <p>The private Autonomous System Number (ASN) for the Amazon side of a BGP session.</p>
    pub amazon_side_asn: Option<i64>,
    /// <p>The Availability Zone where the virtual private gateway was created, if applicable. This field may be empty or not returned.</p>
    pub availability_zone: Option<String>,
    /// <p>The current state of the virtual private gateway.</p>
    pub state: Option<String>,
    /// <p>Any tags assigned to the virtual private gateway.</p>
    pub tags: Option<Vec<Tag>>,
    /// <p>The type of VPN connection the virtual private gateway supports.</p>
    pub type_: Option<String>,
    /// <p>Any VPCs attached to the virtual private gateway.</p>
    pub vpc_attachments: Option<Vec<VpcAttachment>>,
    /// <p>The ID of the virtual private gateway.</p>
    pub vpn_gateway_id: Option<String>,
}

struct VpnGatewayDeserializer;
impl VpnGatewayDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VpnGateway, XmlParseError> {
        deserialize_elements::<_, VpnGateway, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "amazonSideAsn" => {
                    obj.amazon_side_asn =
                        Some(LongDeserializer::deserialize("amazonSideAsn", stack)?);
                }
                "availabilityZone" => {
                    obj.availability_zone =
                        Some(StringDeserializer::deserialize("availabilityZone", stack)?);
                }
                "state" => {
                    obj.state = Some(VpnStateDeserializer::deserialize("state", stack)?);
                }
                "tagSet" => {
                    obj.tags
                        .get_or_insert(vec![])
                        .extend(TagListDeserializer::deserialize("tagSet", stack)?);
                }
                "type" => {
                    obj.type_ = Some(GatewayTypeDeserializer::deserialize("type", stack)?);
                }
                "attachments" => {
                    obj.vpc_attachments.get_or_insert(vec![]).extend(
                        VpcAttachmentListDeserializer::deserialize("attachments", stack)?,
                    );
                }
                "vpnGatewayId" => {
                    obj.vpn_gateway_id =
                        Some(StringDeserializer::deserialize("vpnGatewayId", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}

/// Serialize `VpnGatewayIdStringList` contents to a `SignedRequest`.
struct VpnGatewayIdStringListSerializer;
impl VpnGatewayIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

struct VpnGatewayListDeserializer;
impl VpnGatewayListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<VpnGateway>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(VpnGatewayDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct VpnProtocolDeserializer;
impl VpnProtocolDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
struct VpnStateDeserializer;
impl VpnStateDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>Describes a static route for a VPN connection.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VpnStaticRoute {
    /// <p>The CIDR block associated with the local subnet of the customer data center.</p>
    pub destination_cidr_block: Option<String>,
    /// <p>Indicates how the routes were provided.</p>
    pub source: Option<String>,
    /// <p>The current state of the static route.</p>
    pub state: Option<String>,
}

struct VpnStaticRouteDeserializer;
impl VpnStaticRouteDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<VpnStaticRoute, XmlParseError> {
        deserialize_elements::<_, VpnStaticRoute, _>(tag_name, stack, |name, stack, obj| {
            match name {
                "destinationCidrBlock" => {
                    obj.destination_cidr_block = Some(StringDeserializer::deserialize(
                        "destinationCidrBlock",
                        stack,
                    )?);
                }
                "source" => {
                    obj.source = Some(VpnStaticRouteSourceDeserializer::deserialize(
                        "source", stack,
                    )?);
                }
                "state" => {
                    obj.state = Some(VpnStateDeserializer::deserialize("state", stack)?);
                }
                _ => skip_tree(stack),
            }
            Ok(())
        })
    }
}
struct VpnStaticRouteListDeserializer;
impl VpnStaticRouteListDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<Vec<VpnStaticRoute>, XmlParseError> {
        deserialize_elements::<_, Vec<_>, _>(tag_name, stack, |name, stack, obj| {
            if name == "item" {
                obj.push(VpnStaticRouteDeserializer::deserialize("item", stack)?);
            } else {
                skip_tree(stack);
            }
            Ok(())
        })
    }
}
struct VpnStaticRouteSourceDeserializer;
impl VpnStaticRouteSourceDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(tag_name: &str, stack: &mut T) -> Result<String, XmlParseError> {
        start_element(tag_name, stack)?;
        let obj = characters(stack)?;
        end_element(tag_name, stack)?;

        Ok(obj)
    }
}
/// <p>The tunnel options for a VPN connection.</p>
#[derive(Default, Debug, Clone, PartialEq)]
pub struct VpnTunnelOptionsSpecification {
    /// <p>The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and customer gateway.</p> <p>Constraints: Allowed characters are alphanumeric characters and ._. Must be between 8 and 64 characters in length and cannot start with zero (0).</p>
    pub pre_shared_key: Option<String>,
    /// <p><p>The range of inside IP addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway. </p> <p>Constraints: A size /30 CIDR block from the <code>169.254.0.0/16</code> range. The following CIDR blocks are reserved and cannot be used:</p> <ul> <li> <p> <code>169.254.0.0/30</code> </p> </li> <li> <p> <code>169.254.1.0/30</code> </p> </li> <li> <p> <code>169.254.2.0/30</code> </p> </li> <li> <p> <code>169.254.3.0/30</code> </p> </li> <li> <p> <code>169.254.4.0/30</code> </p> </li> <li> <p> <code>169.254.5.0/30</code> </p> </li> <li> <p> <code>169.254.169.252/30</code> </p> </li> </ul></p>
    pub tunnel_inside_cidr: Option<String>,
}

/// Serialize `VpnTunnelOptionsSpecification` contents to a `SignedRequest`.
struct VpnTunnelOptionsSpecificationSerializer;
impl VpnTunnelOptionsSpecificationSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &VpnTunnelOptionsSpecification) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        if let Some(ref field_value) = obj.pre_shared_key {
            params.put(&format!("{}{}", prefix, "PreSharedKey"), &field_value);
        }
        if let Some(ref field_value) = obj.tunnel_inside_cidr {
            params.put(&format!("{}{}", prefix, "TunnelInsideCidr"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct WithdrawByoipCidrRequest {
    /// <p>The public IPv4 address range, in CIDR notation.</p>
    pub cidr: String,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p>
    pub dry_run: Option<bool>,
}

/// Serialize `WithdrawByoipCidrRequest` contents to a `SignedRequest`.
struct WithdrawByoipCidrRequestSerializer;
impl WithdrawByoipCidrRequestSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &WithdrawByoipCidrRequest) {
        let mut prefix = name.to_string();
        if prefix != "" {
            prefix.push_str(".");
        }

        params.put(&format!("{}{}", prefix, "Cidr"), &obj.cidr);
        if let Some(ref field_value) = obj.dry_run {
            params.put(&format!("{}{}", prefix, "DryRun"), &field_value);
        }
    }
}

#[derive(Default, Debug, Clone, PartialEq)]
pub struct WithdrawByoipCidrResult {
    /// <p>Information about the address pool.</p>
    pub byoip_cidr: Option<ByoipCidr>,
}

struct WithdrawByoipCidrResultDeserializer;
impl WithdrawByoipCidrResultDeserializer {
    #[allow(unused_variables)]
    fn deserialize<T: Peek + Next>(
        tag_name: &str,
        stack: &mut T,
    ) -> Result<WithdrawByoipCidrResult, XmlParseError> {
        deserialize_elements::<_, WithdrawByoipCidrResult, _>(
            tag_name,
            stack,
            |name, stack, obj| {
                match name {
                    "byoipCidr" => {
                        obj.byoip_cidr =
                            Some(ByoipCidrDeserializer::deserialize("byoipCidr", stack)?);
                    }
                    _ => skip_tree(stack),
                }
                Ok(())
            },
        )
    }
}

/// Serialize `ZoneIdStringList` contents to a `SignedRequest`.
struct ZoneIdStringListSerializer;
impl ZoneIdStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// Serialize `ZoneNameStringList` contents to a `SignedRequest`.
struct ZoneNameStringListSerializer;
impl ZoneNameStringListSerializer {
    fn serialize(params: &mut Params, name: &str, obj: &Vec<String>) {
        for (index, obj) in obj.iter().enumerate() {
            let key = format!("{}.{}", name, index + 1);
            params.put(&key, &obj);
        }
    }
}

/// Errors returned by AcceptReservedInstancesExchangeQuote
#[derive(Debug, PartialEq)]
pub enum AcceptReservedInstancesExchangeQuoteError {}

impl AcceptReservedInstancesExchangeQuoteError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<AcceptReservedInstancesExchangeQuoteError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AcceptReservedInstancesExchangeQuoteError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AcceptReservedInstancesExchangeQuoteError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AcceptTransitGatewayVpcAttachment
#[derive(Debug, PartialEq)]
pub enum AcceptTransitGatewayVpcAttachmentError {}

impl AcceptTransitGatewayVpcAttachmentError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<AcceptTransitGatewayVpcAttachmentError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AcceptTransitGatewayVpcAttachmentError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AcceptTransitGatewayVpcAttachmentError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AcceptVpcEndpointConnections
#[derive(Debug, PartialEq)]
pub enum AcceptVpcEndpointConnectionsError {}

impl AcceptVpcEndpointConnectionsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<AcceptVpcEndpointConnectionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AcceptVpcEndpointConnectionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AcceptVpcEndpointConnectionsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AcceptVpcPeeringConnection
#[derive(Debug, PartialEq)]
pub enum AcceptVpcPeeringConnectionError {}

impl AcceptVpcPeeringConnectionError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<AcceptVpcPeeringConnectionError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AcceptVpcPeeringConnectionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AcceptVpcPeeringConnectionError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AdvertiseByoipCidr
#[derive(Debug, PartialEq)]
pub enum AdvertiseByoipCidrError {}

impl AdvertiseByoipCidrError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<AdvertiseByoipCidrError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AdvertiseByoipCidrError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AdvertiseByoipCidrError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AllocateAddress
#[derive(Debug, PartialEq)]
pub enum AllocateAddressError {}

impl AllocateAddressError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<AllocateAddressError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AllocateAddressError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AllocateAddressError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AllocateHosts
#[derive(Debug, PartialEq)]
pub enum AllocateHostsError {}

impl AllocateHostsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<AllocateHostsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AllocateHostsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AllocateHostsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ApplySecurityGroupsToClientVpnTargetNetwork
#[derive(Debug, PartialEq)]
pub enum ApplySecurityGroupsToClientVpnTargetNetworkError {}

impl ApplySecurityGroupsToClientVpnTargetNetworkError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ApplySecurityGroupsToClientVpnTargetNetworkError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ApplySecurityGroupsToClientVpnTargetNetworkError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ApplySecurityGroupsToClientVpnTargetNetworkError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AssignIpv6Addresses
#[derive(Debug, PartialEq)]
pub enum AssignIpv6AddressesError {}

impl AssignIpv6AddressesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<AssignIpv6AddressesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AssignIpv6AddressesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AssignIpv6AddressesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AssignPrivateIpAddresses
#[derive(Debug, PartialEq)]
pub enum AssignPrivateIpAddressesError {}

impl AssignPrivateIpAddressesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<AssignPrivateIpAddressesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AssignPrivateIpAddressesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AssignPrivateIpAddressesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AssociateAddress
#[derive(Debug, PartialEq)]
pub enum AssociateAddressError {}

impl AssociateAddressError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<AssociateAddressError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AssociateAddressError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AssociateAddressError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AssociateClientVpnTargetNetwork
#[derive(Debug, PartialEq)]
pub enum AssociateClientVpnTargetNetworkError {}

impl AssociateClientVpnTargetNetworkError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<AssociateClientVpnTargetNetworkError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AssociateClientVpnTargetNetworkError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AssociateClientVpnTargetNetworkError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AssociateDhcpOptions
#[derive(Debug, PartialEq)]
pub enum AssociateDhcpOptionsError {}

impl AssociateDhcpOptionsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<AssociateDhcpOptionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AssociateDhcpOptionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AssociateDhcpOptionsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AssociateIamInstanceProfile
#[derive(Debug, PartialEq)]
pub enum AssociateIamInstanceProfileError {}

impl AssociateIamInstanceProfileError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<AssociateIamInstanceProfileError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AssociateIamInstanceProfileError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AssociateIamInstanceProfileError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AssociateRouteTable
#[derive(Debug, PartialEq)]
pub enum AssociateRouteTableError {}

impl AssociateRouteTableError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<AssociateRouteTableError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AssociateRouteTableError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AssociateRouteTableError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AssociateSubnetCidrBlock
#[derive(Debug, PartialEq)]
pub enum AssociateSubnetCidrBlockError {}

impl AssociateSubnetCidrBlockError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<AssociateSubnetCidrBlockError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AssociateSubnetCidrBlockError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AssociateSubnetCidrBlockError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AssociateTransitGatewayRouteTable
#[derive(Debug, PartialEq)]
pub enum AssociateTransitGatewayRouteTableError {}

impl AssociateTransitGatewayRouteTableError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<AssociateTransitGatewayRouteTableError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AssociateTransitGatewayRouteTableError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AssociateTransitGatewayRouteTableError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AssociateVpcCidrBlock
#[derive(Debug, PartialEq)]
pub enum AssociateVpcCidrBlockError {}

impl AssociateVpcCidrBlockError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<AssociateVpcCidrBlockError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AssociateVpcCidrBlockError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AssociateVpcCidrBlockError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AttachClassicLinkVpc
#[derive(Debug, PartialEq)]
pub enum AttachClassicLinkVpcError {}

impl AttachClassicLinkVpcError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<AttachClassicLinkVpcError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AttachClassicLinkVpcError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AttachClassicLinkVpcError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AttachInternetGateway
#[derive(Debug, PartialEq)]
pub enum AttachInternetGatewayError {}

impl AttachInternetGatewayError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<AttachInternetGatewayError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AttachInternetGatewayError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AttachInternetGatewayError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AttachNetworkInterface
#[derive(Debug, PartialEq)]
pub enum AttachNetworkInterfaceError {}

impl AttachNetworkInterfaceError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<AttachNetworkInterfaceError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AttachNetworkInterfaceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AttachNetworkInterfaceError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AttachVolume
#[derive(Debug, PartialEq)]
pub enum AttachVolumeError {}

impl AttachVolumeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<AttachVolumeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AttachVolumeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AttachVolumeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AttachVpnGateway
#[derive(Debug, PartialEq)]
pub enum AttachVpnGatewayError {}

impl AttachVpnGatewayError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<AttachVpnGatewayError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AttachVpnGatewayError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AttachVpnGatewayError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AuthorizeClientVpnIngress
#[derive(Debug, PartialEq)]
pub enum AuthorizeClientVpnIngressError {}

impl AuthorizeClientVpnIngressError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<AuthorizeClientVpnIngressError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AuthorizeClientVpnIngressError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AuthorizeClientVpnIngressError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AuthorizeSecurityGroupEgress
#[derive(Debug, PartialEq)]
pub enum AuthorizeSecurityGroupEgressError {}

impl AuthorizeSecurityGroupEgressError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<AuthorizeSecurityGroupEgressError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AuthorizeSecurityGroupEgressError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AuthorizeSecurityGroupEgressError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by AuthorizeSecurityGroupIngress
#[derive(Debug, PartialEq)]
pub enum AuthorizeSecurityGroupIngressError {}

impl AuthorizeSecurityGroupIngressError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<AuthorizeSecurityGroupIngressError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for AuthorizeSecurityGroupIngressError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for AuthorizeSecurityGroupIngressError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by BundleInstance
#[derive(Debug, PartialEq)]
pub enum BundleInstanceError {}

impl BundleInstanceError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<BundleInstanceError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for BundleInstanceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for BundleInstanceError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CancelBundleTask
#[derive(Debug, PartialEq)]
pub enum CancelBundleTaskError {}

impl CancelBundleTaskError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CancelBundleTaskError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CancelBundleTaskError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CancelBundleTaskError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CancelCapacityReservation
#[derive(Debug, PartialEq)]
pub enum CancelCapacityReservationError {}

impl CancelCapacityReservationError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CancelCapacityReservationError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CancelCapacityReservationError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CancelCapacityReservationError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CancelConversionTask
#[derive(Debug, PartialEq)]
pub enum CancelConversionTaskError {}

impl CancelConversionTaskError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CancelConversionTaskError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CancelConversionTaskError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CancelConversionTaskError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CancelExportTask
#[derive(Debug, PartialEq)]
pub enum CancelExportTaskError {}

impl CancelExportTaskError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CancelExportTaskError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CancelExportTaskError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CancelExportTaskError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CancelImportTask
#[derive(Debug, PartialEq)]
pub enum CancelImportTaskError {}

impl CancelImportTaskError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CancelImportTaskError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CancelImportTaskError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CancelImportTaskError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CancelReservedInstancesListing
#[derive(Debug, PartialEq)]
pub enum CancelReservedInstancesListingError {}

impl CancelReservedInstancesListingError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<CancelReservedInstancesListingError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CancelReservedInstancesListingError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CancelReservedInstancesListingError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CancelSpotFleetRequests
#[derive(Debug, PartialEq)]
pub enum EC2CancelSpotFleetRequestsError {}

impl EC2CancelSpotFleetRequestsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<EC2CancelSpotFleetRequestsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for EC2CancelSpotFleetRequestsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for EC2CancelSpotFleetRequestsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CancelSpotInstanceRequests
#[derive(Debug, PartialEq)]
pub enum CancelSpotInstanceRequestsError {}

impl CancelSpotInstanceRequestsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<CancelSpotInstanceRequestsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CancelSpotInstanceRequestsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CancelSpotInstanceRequestsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ConfirmProductInstance
#[derive(Debug, PartialEq)]
pub enum ConfirmProductInstanceError {}

impl ConfirmProductInstanceError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ConfirmProductInstanceError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ConfirmProductInstanceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ConfirmProductInstanceError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CopyFpgaImage
#[derive(Debug, PartialEq)]
pub enum CopyFpgaImageError {}

impl CopyFpgaImageError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CopyFpgaImageError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CopyFpgaImageError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CopyFpgaImageError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CopyImage
#[derive(Debug, PartialEq)]
pub enum CopyImageError {}

impl CopyImageError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CopyImageError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CopyImageError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CopyImageError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CopySnapshot
#[derive(Debug, PartialEq)]
pub enum CopySnapshotError {}

impl CopySnapshotError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CopySnapshotError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CopySnapshotError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CopySnapshotError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateCapacityReservation
#[derive(Debug, PartialEq)]
pub enum CreateCapacityReservationError {}

impl CreateCapacityReservationError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateCapacityReservationError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateCapacityReservationError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateCapacityReservationError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateClientVpnEndpoint
#[derive(Debug, PartialEq)]
pub enum CreateClientVpnEndpointError {}

impl CreateClientVpnEndpointError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateClientVpnEndpointError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateClientVpnEndpointError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateClientVpnEndpointError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateClientVpnRoute
#[derive(Debug, PartialEq)]
pub enum CreateClientVpnRouteError {}

impl CreateClientVpnRouteError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateClientVpnRouteError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateClientVpnRouteError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateClientVpnRouteError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateCustomerGateway
#[derive(Debug, PartialEq)]
pub enum CreateCustomerGatewayError {}

impl CreateCustomerGatewayError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateCustomerGatewayError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateCustomerGatewayError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateCustomerGatewayError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateDefaultSubnet
#[derive(Debug, PartialEq)]
pub enum CreateDefaultSubnetError {}

impl CreateDefaultSubnetError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateDefaultSubnetError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateDefaultSubnetError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateDefaultSubnetError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateDefaultVpc
#[derive(Debug, PartialEq)]
pub enum CreateDefaultVpcError {}

impl CreateDefaultVpcError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateDefaultVpcError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateDefaultVpcError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateDefaultVpcError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateDhcpOptions
#[derive(Debug, PartialEq)]
pub enum CreateDhcpOptionsError {}

impl CreateDhcpOptionsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateDhcpOptionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateDhcpOptionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateDhcpOptionsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateEgressOnlyInternetGateway
#[derive(Debug, PartialEq)]
pub enum CreateEgressOnlyInternetGatewayError {}

impl CreateEgressOnlyInternetGatewayError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<CreateEgressOnlyInternetGatewayError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateEgressOnlyInternetGatewayError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateEgressOnlyInternetGatewayError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateFleet
#[derive(Debug, PartialEq)]
pub enum CreateFleetError {}

impl CreateFleetError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateFleetError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateFleetError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateFleetError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateFlowLogs
#[derive(Debug, PartialEq)]
pub enum CreateFlowLogsError {}

impl CreateFlowLogsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateFlowLogsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateFlowLogsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateFlowLogsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateFpgaImage
#[derive(Debug, PartialEq)]
pub enum CreateFpgaImageError {}

impl CreateFpgaImageError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateFpgaImageError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateFpgaImageError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateFpgaImageError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateImage
#[derive(Debug, PartialEq)]
pub enum CreateImageError {}

impl CreateImageError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateImageError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateImageError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateImageError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateInstanceExportTask
#[derive(Debug, PartialEq)]
pub enum CreateInstanceExportTaskError {}

impl CreateInstanceExportTaskError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateInstanceExportTaskError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateInstanceExportTaskError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateInstanceExportTaskError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateInternetGateway
#[derive(Debug, PartialEq)]
pub enum CreateInternetGatewayError {}

impl CreateInternetGatewayError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateInternetGatewayError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateInternetGatewayError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateInternetGatewayError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateKeyPair
#[derive(Debug, PartialEq)]
pub enum CreateKeyPairError {}

impl CreateKeyPairError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateKeyPairError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateKeyPairError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateKeyPairError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateLaunchTemplate
#[derive(Debug, PartialEq)]
pub enum CreateLaunchTemplateError {}

impl CreateLaunchTemplateError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateLaunchTemplateError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateLaunchTemplateError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateLaunchTemplateError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateLaunchTemplateVersion
#[derive(Debug, PartialEq)]
pub enum CreateLaunchTemplateVersionError {}

impl CreateLaunchTemplateVersionError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<CreateLaunchTemplateVersionError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateLaunchTemplateVersionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateLaunchTemplateVersionError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateNatGateway
#[derive(Debug, PartialEq)]
pub enum CreateNatGatewayError {}

impl CreateNatGatewayError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateNatGatewayError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateNatGatewayError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateNatGatewayError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateNetworkAcl
#[derive(Debug, PartialEq)]
pub enum CreateNetworkAclError {}

impl CreateNetworkAclError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateNetworkAclError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateNetworkAclError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateNetworkAclError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateNetworkAclEntry
#[derive(Debug, PartialEq)]
pub enum CreateNetworkAclEntryError {}

impl CreateNetworkAclEntryError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateNetworkAclEntryError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateNetworkAclEntryError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateNetworkAclEntryError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateNetworkInterface
#[derive(Debug, PartialEq)]
pub enum CreateNetworkInterfaceError {}

impl CreateNetworkInterfaceError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateNetworkInterfaceError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateNetworkInterfaceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateNetworkInterfaceError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateNetworkInterfacePermission
#[derive(Debug, PartialEq)]
pub enum CreateNetworkInterfacePermissionError {}

impl CreateNetworkInterfacePermissionError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<CreateNetworkInterfacePermissionError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateNetworkInterfacePermissionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateNetworkInterfacePermissionError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreatePlacementGroup
#[derive(Debug, PartialEq)]
pub enum CreatePlacementGroupError {}

impl CreatePlacementGroupError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreatePlacementGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreatePlacementGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreatePlacementGroupError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateReservedInstancesListing
#[derive(Debug, PartialEq)]
pub enum CreateReservedInstancesListingError {}

impl CreateReservedInstancesListingError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<CreateReservedInstancesListingError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateReservedInstancesListingError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateReservedInstancesListingError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateRoute
#[derive(Debug, PartialEq)]
pub enum CreateRouteError {}

impl CreateRouteError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateRouteError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateRouteError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateRouteError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateRouteTable
#[derive(Debug, PartialEq)]
pub enum CreateRouteTableError {}

impl CreateRouteTableError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateRouteTableError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateRouteTableError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateRouteTableError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateSecurityGroup
#[derive(Debug, PartialEq)]
pub enum CreateSecurityGroupError {}

impl CreateSecurityGroupError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateSecurityGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateSecurityGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateSecurityGroupError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateSnapshot
#[derive(Debug, PartialEq)]
pub enum CreateSnapshotError {}

impl CreateSnapshotError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateSnapshotError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateSnapshotError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateSnapshotError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateSnapshots
#[derive(Debug, PartialEq)]
pub enum CreateSnapshotsError {}

impl CreateSnapshotsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateSnapshotsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateSnapshotsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateSnapshotsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateSpotDatafeedSubscription
#[derive(Debug, PartialEq)]
pub enum CreateSpotDatafeedSubscriptionError {}

impl CreateSpotDatafeedSubscriptionError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<CreateSpotDatafeedSubscriptionError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateSpotDatafeedSubscriptionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateSpotDatafeedSubscriptionError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateSubnet
#[derive(Debug, PartialEq)]
pub enum CreateSubnetError {}

impl CreateSubnetError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateSubnetError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateSubnetError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateSubnetError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateTags
#[derive(Debug, PartialEq)]
pub enum CreateTagsError {}

impl CreateTagsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateTagsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateTagsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateTagsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateTransitGateway
#[derive(Debug, PartialEq)]
pub enum CreateTransitGatewayError {}

impl CreateTransitGatewayError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateTransitGatewayError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateTransitGatewayError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateTransitGatewayError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateTransitGatewayRoute
#[derive(Debug, PartialEq)]
pub enum CreateTransitGatewayRouteError {}

impl CreateTransitGatewayRouteError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateTransitGatewayRouteError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateTransitGatewayRouteError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateTransitGatewayRouteError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateTransitGatewayRouteTable
#[derive(Debug, PartialEq)]
pub enum CreateTransitGatewayRouteTableError {}

impl CreateTransitGatewayRouteTableError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<CreateTransitGatewayRouteTableError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateTransitGatewayRouteTableError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateTransitGatewayRouteTableError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateTransitGatewayVpcAttachment
#[derive(Debug, PartialEq)]
pub enum CreateTransitGatewayVpcAttachmentError {}

impl CreateTransitGatewayVpcAttachmentError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<CreateTransitGatewayVpcAttachmentError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateTransitGatewayVpcAttachmentError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateTransitGatewayVpcAttachmentError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateVolume
#[derive(Debug, PartialEq)]
pub enum CreateVolumeError {}

impl CreateVolumeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateVolumeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateVolumeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateVolumeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateVpc
#[derive(Debug, PartialEq)]
pub enum CreateVpcError {}

impl CreateVpcError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateVpcError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateVpcError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateVpcError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateVpcEndpoint
#[derive(Debug, PartialEq)]
pub enum CreateVpcEndpointError {}

impl CreateVpcEndpointError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateVpcEndpointError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateVpcEndpointError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateVpcEndpointError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateVpcEndpointConnectionNotification
#[derive(Debug, PartialEq)]
pub enum CreateVpcEndpointConnectionNotificationError {}

impl CreateVpcEndpointConnectionNotificationError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<CreateVpcEndpointConnectionNotificationError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateVpcEndpointConnectionNotificationError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateVpcEndpointConnectionNotificationError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateVpcEndpointServiceConfiguration
#[derive(Debug, PartialEq)]
pub enum CreateVpcEndpointServiceConfigurationError {}

impl CreateVpcEndpointServiceConfigurationError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<CreateVpcEndpointServiceConfigurationError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateVpcEndpointServiceConfigurationError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateVpcEndpointServiceConfigurationError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateVpcPeeringConnection
#[derive(Debug, PartialEq)]
pub enum CreateVpcPeeringConnectionError {}

impl CreateVpcPeeringConnectionError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<CreateVpcPeeringConnectionError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateVpcPeeringConnectionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateVpcPeeringConnectionError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateVpnConnection
#[derive(Debug, PartialEq)]
pub enum CreateVpnConnectionError {}

impl CreateVpnConnectionError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateVpnConnectionError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateVpnConnectionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateVpnConnectionError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateVpnConnectionRoute
#[derive(Debug, PartialEq)]
pub enum CreateVpnConnectionRouteError {}

impl CreateVpnConnectionRouteError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateVpnConnectionRouteError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateVpnConnectionRouteError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateVpnConnectionRouteError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by CreateVpnGateway
#[derive(Debug, PartialEq)]
pub enum CreateVpnGatewayError {}

impl CreateVpnGatewayError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<CreateVpnGatewayError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for CreateVpnGatewayError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for CreateVpnGatewayError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteClientVpnEndpoint
#[derive(Debug, PartialEq)]
pub enum DeleteClientVpnEndpointError {}

impl DeleteClientVpnEndpointError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteClientVpnEndpointError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteClientVpnEndpointError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteClientVpnEndpointError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteClientVpnRoute
#[derive(Debug, PartialEq)]
pub enum DeleteClientVpnRouteError {}

impl DeleteClientVpnRouteError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteClientVpnRouteError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteClientVpnRouteError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteClientVpnRouteError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteCustomerGateway
#[derive(Debug, PartialEq)]
pub enum DeleteCustomerGatewayError {}

impl DeleteCustomerGatewayError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteCustomerGatewayError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteCustomerGatewayError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteCustomerGatewayError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteDhcpOptions
#[derive(Debug, PartialEq)]
pub enum DeleteDhcpOptionsError {}

impl DeleteDhcpOptionsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteDhcpOptionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteDhcpOptionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteDhcpOptionsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteEgressOnlyInternetGateway
#[derive(Debug, PartialEq)]
pub enum DeleteEgressOnlyInternetGatewayError {}

impl DeleteEgressOnlyInternetGatewayError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DeleteEgressOnlyInternetGatewayError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteEgressOnlyInternetGatewayError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteEgressOnlyInternetGatewayError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteFleets
#[derive(Debug, PartialEq)]
pub enum DeleteFleetsError {}

impl DeleteFleetsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteFleetsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteFleetsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteFleetsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteFlowLogs
#[derive(Debug, PartialEq)]
pub enum DeleteFlowLogsError {}

impl DeleteFlowLogsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteFlowLogsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteFlowLogsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteFlowLogsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteFpgaImage
#[derive(Debug, PartialEq)]
pub enum DeleteFpgaImageError {}

impl DeleteFpgaImageError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteFpgaImageError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteFpgaImageError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteFpgaImageError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteInternetGateway
#[derive(Debug, PartialEq)]
pub enum DeleteInternetGatewayError {}

impl DeleteInternetGatewayError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteInternetGatewayError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteInternetGatewayError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteInternetGatewayError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteKeyPair
#[derive(Debug, PartialEq)]
pub enum DeleteKeyPairError {}

impl DeleteKeyPairError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteKeyPairError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteKeyPairError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteKeyPairError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteLaunchTemplate
#[derive(Debug, PartialEq)]
pub enum DeleteLaunchTemplateError {}

impl DeleteLaunchTemplateError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteLaunchTemplateError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteLaunchTemplateError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteLaunchTemplateError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteLaunchTemplateVersions
#[derive(Debug, PartialEq)]
pub enum DeleteLaunchTemplateVersionsError {}

impl DeleteLaunchTemplateVersionsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DeleteLaunchTemplateVersionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteLaunchTemplateVersionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteLaunchTemplateVersionsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteNatGateway
#[derive(Debug, PartialEq)]
pub enum DeleteNatGatewayError {}

impl DeleteNatGatewayError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteNatGatewayError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteNatGatewayError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteNatGatewayError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteNetworkAcl
#[derive(Debug, PartialEq)]
pub enum DeleteNetworkAclError {}

impl DeleteNetworkAclError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteNetworkAclError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteNetworkAclError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteNetworkAclError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteNetworkAclEntry
#[derive(Debug, PartialEq)]
pub enum DeleteNetworkAclEntryError {}

impl DeleteNetworkAclEntryError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteNetworkAclEntryError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteNetworkAclEntryError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteNetworkAclEntryError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteNetworkInterface
#[derive(Debug, PartialEq)]
pub enum DeleteNetworkInterfaceError {}

impl DeleteNetworkInterfaceError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteNetworkInterfaceError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteNetworkInterfaceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteNetworkInterfaceError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteNetworkInterfacePermission
#[derive(Debug, PartialEq)]
pub enum DeleteNetworkInterfacePermissionError {}

impl DeleteNetworkInterfacePermissionError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DeleteNetworkInterfacePermissionError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteNetworkInterfacePermissionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteNetworkInterfacePermissionError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeletePlacementGroup
#[derive(Debug, PartialEq)]
pub enum DeletePlacementGroupError {}

impl DeletePlacementGroupError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeletePlacementGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeletePlacementGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeletePlacementGroupError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteRoute
#[derive(Debug, PartialEq)]
pub enum DeleteRouteError {}

impl DeleteRouteError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteRouteError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteRouteError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteRouteError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteRouteTable
#[derive(Debug, PartialEq)]
pub enum DeleteRouteTableError {}

impl DeleteRouteTableError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteRouteTableError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteRouteTableError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteRouteTableError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteSecurityGroup
#[derive(Debug, PartialEq)]
pub enum DeleteSecurityGroupError {}

impl DeleteSecurityGroupError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteSecurityGroupError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteSecurityGroupError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteSecurityGroupError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteSnapshot
#[derive(Debug, PartialEq)]
pub enum DeleteSnapshotError {}

impl DeleteSnapshotError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteSnapshotError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteSnapshotError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteSnapshotError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteSpotDatafeedSubscription
#[derive(Debug, PartialEq)]
pub enum DeleteSpotDatafeedSubscriptionError {}

impl DeleteSpotDatafeedSubscriptionError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DeleteSpotDatafeedSubscriptionError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteSpotDatafeedSubscriptionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteSpotDatafeedSubscriptionError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteSubnet
#[derive(Debug, PartialEq)]
pub enum DeleteSubnetError {}

impl DeleteSubnetError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteSubnetError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteSubnetError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteSubnetError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteTags
#[derive(Debug, PartialEq)]
pub enum DeleteTagsError {}

impl DeleteTagsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteTagsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteTagsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteTagsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteTransitGateway
#[derive(Debug, PartialEq)]
pub enum DeleteTransitGatewayError {}

impl DeleteTransitGatewayError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteTransitGatewayError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteTransitGatewayError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteTransitGatewayError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteTransitGatewayRoute
#[derive(Debug, PartialEq)]
pub enum DeleteTransitGatewayRouteError {}

impl DeleteTransitGatewayRouteError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteTransitGatewayRouteError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteTransitGatewayRouteError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteTransitGatewayRouteError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteTransitGatewayRouteTable
#[derive(Debug, PartialEq)]
pub enum DeleteTransitGatewayRouteTableError {}

impl DeleteTransitGatewayRouteTableError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DeleteTransitGatewayRouteTableError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteTransitGatewayRouteTableError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteTransitGatewayRouteTableError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteTransitGatewayVpcAttachment
#[derive(Debug, PartialEq)]
pub enum DeleteTransitGatewayVpcAttachmentError {}

impl DeleteTransitGatewayVpcAttachmentError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DeleteTransitGatewayVpcAttachmentError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteTransitGatewayVpcAttachmentError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteTransitGatewayVpcAttachmentError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteVolume
#[derive(Debug, PartialEq)]
pub enum DeleteVolumeError {}

impl DeleteVolumeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteVolumeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteVolumeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteVolumeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteVpc
#[derive(Debug, PartialEq)]
pub enum DeleteVpcError {}

impl DeleteVpcError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteVpcError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteVpcError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteVpcError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteVpcEndpointConnectionNotifications
#[derive(Debug, PartialEq)]
pub enum DeleteVpcEndpointConnectionNotificationsError {}

impl DeleteVpcEndpointConnectionNotificationsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DeleteVpcEndpointConnectionNotificationsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteVpcEndpointConnectionNotificationsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteVpcEndpointConnectionNotificationsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteVpcEndpointServiceConfigurations
#[derive(Debug, PartialEq)]
pub enum DeleteVpcEndpointServiceConfigurationsError {}

impl DeleteVpcEndpointServiceConfigurationsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DeleteVpcEndpointServiceConfigurationsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteVpcEndpointServiceConfigurationsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteVpcEndpointServiceConfigurationsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteVpcEndpoints
#[derive(Debug, PartialEq)]
pub enum DeleteVpcEndpointsError {}

impl DeleteVpcEndpointsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteVpcEndpointsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteVpcEndpointsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteVpcEndpointsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteVpcPeeringConnection
#[derive(Debug, PartialEq)]
pub enum DeleteVpcPeeringConnectionError {}

impl DeleteVpcPeeringConnectionError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DeleteVpcPeeringConnectionError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteVpcPeeringConnectionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteVpcPeeringConnectionError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteVpnConnection
#[derive(Debug, PartialEq)]
pub enum DeleteVpnConnectionError {}

impl DeleteVpnConnectionError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteVpnConnectionError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteVpnConnectionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteVpnConnectionError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteVpnConnectionRoute
#[derive(Debug, PartialEq)]
pub enum DeleteVpnConnectionRouteError {}

impl DeleteVpnConnectionRouteError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteVpnConnectionRouteError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteVpnConnectionRouteError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteVpnConnectionRouteError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeleteVpnGateway
#[derive(Debug, PartialEq)]
pub enum DeleteVpnGatewayError {}

impl DeleteVpnGatewayError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeleteVpnGatewayError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeleteVpnGatewayError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeleteVpnGatewayError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeprovisionByoipCidr
#[derive(Debug, PartialEq)]
pub enum DeprovisionByoipCidrError {}

impl DeprovisionByoipCidrError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeprovisionByoipCidrError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeprovisionByoipCidrError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeprovisionByoipCidrError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DeregisterImage
#[derive(Debug, PartialEq)]
pub enum DeregisterImageError {}

impl DeregisterImageError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DeregisterImageError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DeregisterImageError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DeregisterImageError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeAccountAttributes
#[derive(Debug, PartialEq)]
pub enum DescribeAccountAttributesError {}

impl DescribeAccountAttributesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeAccountAttributesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeAccountAttributesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeAccountAttributesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeAddresses
#[derive(Debug, PartialEq)]
pub enum DescribeAddressesError {}

impl DescribeAddressesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeAddressesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeAddressesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeAddressesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeAggregateIdFormat
#[derive(Debug, PartialEq)]
pub enum DescribeAggregateIdFormatError {}

impl DescribeAggregateIdFormatError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeAggregateIdFormatError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeAggregateIdFormatError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeAggregateIdFormatError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeAvailabilityZones
#[derive(Debug, PartialEq)]
pub enum DescribeAvailabilityZonesError {}

impl DescribeAvailabilityZonesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeAvailabilityZonesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeAvailabilityZonesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeAvailabilityZonesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeBundleTasks
#[derive(Debug, PartialEq)]
pub enum DescribeBundleTasksError {}

impl DescribeBundleTasksError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeBundleTasksError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeBundleTasksError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeBundleTasksError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeByoipCidrs
#[derive(Debug, PartialEq)]
pub enum DescribeByoipCidrsError {}

impl DescribeByoipCidrsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeByoipCidrsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeByoipCidrsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeByoipCidrsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeCapacityReservations
#[derive(Debug, PartialEq)]
pub enum DescribeCapacityReservationsError {}

impl DescribeCapacityReservationsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeCapacityReservationsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeCapacityReservationsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeCapacityReservationsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeClassicLinkInstances
#[derive(Debug, PartialEq)]
pub enum DescribeClassicLinkInstancesError {}

impl DescribeClassicLinkInstancesError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeClassicLinkInstancesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeClassicLinkInstancesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeClassicLinkInstancesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeClientVpnAuthorizationRules
#[derive(Debug, PartialEq)]
pub enum DescribeClientVpnAuthorizationRulesError {}

impl DescribeClientVpnAuthorizationRulesError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeClientVpnAuthorizationRulesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeClientVpnAuthorizationRulesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeClientVpnAuthorizationRulesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeClientVpnConnections
#[derive(Debug, PartialEq)]
pub enum DescribeClientVpnConnectionsError {}

impl DescribeClientVpnConnectionsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeClientVpnConnectionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeClientVpnConnectionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeClientVpnConnectionsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeClientVpnEndpoints
#[derive(Debug, PartialEq)]
pub enum DescribeClientVpnEndpointsError {}

impl DescribeClientVpnEndpointsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeClientVpnEndpointsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeClientVpnEndpointsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeClientVpnEndpointsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeClientVpnRoutes
#[derive(Debug, PartialEq)]
pub enum DescribeClientVpnRoutesError {}

impl DescribeClientVpnRoutesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeClientVpnRoutesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeClientVpnRoutesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeClientVpnRoutesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeClientVpnTargetNetworks
#[derive(Debug, PartialEq)]
pub enum DescribeClientVpnTargetNetworksError {}

impl DescribeClientVpnTargetNetworksError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeClientVpnTargetNetworksError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeClientVpnTargetNetworksError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeClientVpnTargetNetworksError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeConversionTasks
#[derive(Debug, PartialEq)]
pub enum DescribeConversionTasksError {}

impl DescribeConversionTasksError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeConversionTasksError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeConversionTasksError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeConversionTasksError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeCustomerGateways
#[derive(Debug, PartialEq)]
pub enum DescribeCustomerGatewaysError {}

impl DescribeCustomerGatewaysError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeCustomerGatewaysError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeCustomerGatewaysError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeCustomerGatewaysError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeDhcpOptions
#[derive(Debug, PartialEq)]
pub enum DescribeDhcpOptionsError {}

impl DescribeDhcpOptionsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeDhcpOptionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeDhcpOptionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeDhcpOptionsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeEgressOnlyInternetGateways
#[derive(Debug, PartialEq)]
pub enum DescribeEgressOnlyInternetGatewaysError {}

impl DescribeEgressOnlyInternetGatewaysError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeEgressOnlyInternetGatewaysError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeEgressOnlyInternetGatewaysError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeEgressOnlyInternetGatewaysError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeElasticGpus
#[derive(Debug, PartialEq)]
pub enum DescribeElasticGpusError {}

impl DescribeElasticGpusError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeElasticGpusError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeElasticGpusError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeElasticGpusError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeExportTasks
#[derive(Debug, PartialEq)]
pub enum DescribeExportTasksError {}

impl DescribeExportTasksError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeExportTasksError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeExportTasksError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeExportTasksError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeFleetHistory
#[derive(Debug, PartialEq)]
pub enum DescribeFleetHistoryError {}

impl DescribeFleetHistoryError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeFleetHistoryError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeFleetHistoryError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeFleetHistoryError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeFleetInstances
#[derive(Debug, PartialEq)]
pub enum DescribeFleetInstancesError {}

impl DescribeFleetInstancesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeFleetInstancesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeFleetInstancesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeFleetInstancesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeFleets
#[derive(Debug, PartialEq)]
pub enum DescribeFleetsError {}

impl DescribeFleetsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeFleetsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeFleetsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeFleetsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeFlowLogs
#[derive(Debug, PartialEq)]
pub enum DescribeFlowLogsError {}

impl DescribeFlowLogsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeFlowLogsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeFlowLogsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeFlowLogsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeFpgaImageAttribute
#[derive(Debug, PartialEq)]
pub enum DescribeFpgaImageAttributeError {}

impl DescribeFpgaImageAttributeError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeFpgaImageAttributeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeFpgaImageAttributeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeFpgaImageAttributeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeFpgaImages
#[derive(Debug, PartialEq)]
pub enum DescribeFpgaImagesError {}

impl DescribeFpgaImagesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeFpgaImagesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeFpgaImagesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeFpgaImagesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeHostReservationOfferings
#[derive(Debug, PartialEq)]
pub enum DescribeHostReservationOfferingsError {}

impl DescribeHostReservationOfferingsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeHostReservationOfferingsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeHostReservationOfferingsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeHostReservationOfferingsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeHostReservations
#[derive(Debug, PartialEq)]
pub enum DescribeHostReservationsError {}

impl DescribeHostReservationsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeHostReservationsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeHostReservationsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeHostReservationsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeHosts
#[derive(Debug, PartialEq)]
pub enum DescribeHostsError {}

impl DescribeHostsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeHostsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeHostsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeHostsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeIamInstanceProfileAssociations
#[derive(Debug, PartialEq)]
pub enum DescribeIamInstanceProfileAssociationsError {}

impl DescribeIamInstanceProfileAssociationsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeIamInstanceProfileAssociationsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeIamInstanceProfileAssociationsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeIamInstanceProfileAssociationsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeIdFormat
#[derive(Debug, PartialEq)]
pub enum DescribeIdFormatError {}

impl DescribeIdFormatError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeIdFormatError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeIdFormatError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeIdFormatError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeIdentityIdFormat
#[derive(Debug, PartialEq)]
pub enum DescribeIdentityIdFormatError {}

impl DescribeIdentityIdFormatError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeIdentityIdFormatError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeIdentityIdFormatError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeIdentityIdFormatError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeImageAttribute
#[derive(Debug, PartialEq)]
pub enum DescribeImageAttributeError {}

impl DescribeImageAttributeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeImageAttributeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeImageAttributeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeImageAttributeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeImages
#[derive(Debug, PartialEq)]
pub enum DescribeImagesError {}

impl DescribeImagesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeImagesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeImagesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeImagesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeImportImageTasks
#[derive(Debug, PartialEq)]
pub enum DescribeImportImageTasksError {}

impl DescribeImportImageTasksError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeImportImageTasksError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeImportImageTasksError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeImportImageTasksError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeImportSnapshotTasks
#[derive(Debug, PartialEq)]
pub enum DescribeImportSnapshotTasksError {}

impl DescribeImportSnapshotTasksError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeImportSnapshotTasksError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeImportSnapshotTasksError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeImportSnapshotTasksError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeInstanceAttribute
#[derive(Debug, PartialEq)]
pub enum DescribeInstanceAttributeError {}

impl DescribeInstanceAttributeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeInstanceAttributeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeInstanceAttributeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeInstanceAttributeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeInstanceCreditSpecifications
#[derive(Debug, PartialEq)]
pub enum DescribeInstanceCreditSpecificationsError {}

impl DescribeInstanceCreditSpecificationsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeInstanceCreditSpecificationsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeInstanceCreditSpecificationsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeInstanceCreditSpecificationsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeInstanceStatus
#[derive(Debug, PartialEq)]
pub enum DescribeInstanceStatusError {}

impl DescribeInstanceStatusError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeInstanceStatusError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeInstanceStatusError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeInstanceStatusError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeInstances
#[derive(Debug, PartialEq)]
pub enum DescribeInstancesError {}

impl DescribeInstancesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeInstancesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeInstancesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeInstancesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeInternetGateways
#[derive(Debug, PartialEq)]
pub enum DescribeInternetGatewaysError {}

impl DescribeInternetGatewaysError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeInternetGatewaysError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeInternetGatewaysError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeInternetGatewaysError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeKeyPairs
#[derive(Debug, PartialEq)]
pub enum DescribeKeyPairsError {}

impl DescribeKeyPairsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeKeyPairsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeKeyPairsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeKeyPairsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeLaunchTemplateVersions
#[derive(Debug, PartialEq)]
pub enum DescribeLaunchTemplateVersionsError {}

impl DescribeLaunchTemplateVersionsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeLaunchTemplateVersionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeLaunchTemplateVersionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeLaunchTemplateVersionsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeLaunchTemplates
#[derive(Debug, PartialEq)]
pub enum DescribeLaunchTemplatesError {}

impl DescribeLaunchTemplatesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeLaunchTemplatesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeLaunchTemplatesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeLaunchTemplatesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeMovingAddresses
#[derive(Debug, PartialEq)]
pub enum DescribeMovingAddressesError {}

impl DescribeMovingAddressesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeMovingAddressesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeMovingAddressesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeMovingAddressesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeNatGateways
#[derive(Debug, PartialEq)]
pub enum DescribeNatGatewaysError {}

impl DescribeNatGatewaysError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeNatGatewaysError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeNatGatewaysError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeNatGatewaysError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeNetworkAcls
#[derive(Debug, PartialEq)]
pub enum DescribeNetworkAclsError {}

impl DescribeNetworkAclsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeNetworkAclsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeNetworkAclsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeNetworkAclsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeNetworkInterfaceAttribute
#[derive(Debug, PartialEq)]
pub enum DescribeNetworkInterfaceAttributeError {}

impl DescribeNetworkInterfaceAttributeError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeNetworkInterfaceAttributeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeNetworkInterfaceAttributeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeNetworkInterfaceAttributeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeNetworkInterfacePermissions
#[derive(Debug, PartialEq)]
pub enum DescribeNetworkInterfacePermissionsError {}

impl DescribeNetworkInterfacePermissionsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeNetworkInterfacePermissionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeNetworkInterfacePermissionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeNetworkInterfacePermissionsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeNetworkInterfaces
#[derive(Debug, PartialEq)]
pub enum DescribeNetworkInterfacesError {}

impl DescribeNetworkInterfacesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeNetworkInterfacesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeNetworkInterfacesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeNetworkInterfacesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribePlacementGroups
#[derive(Debug, PartialEq)]
pub enum DescribePlacementGroupsError {}

impl DescribePlacementGroupsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribePlacementGroupsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribePlacementGroupsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribePlacementGroupsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribePrefixLists
#[derive(Debug, PartialEq)]
pub enum DescribePrefixListsError {}

impl DescribePrefixListsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribePrefixListsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribePrefixListsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribePrefixListsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribePrincipalIdFormat
#[derive(Debug, PartialEq)]
pub enum DescribePrincipalIdFormatError {}

impl DescribePrincipalIdFormatError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribePrincipalIdFormatError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribePrincipalIdFormatError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribePrincipalIdFormatError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribePublicIpv4Pools
#[derive(Debug, PartialEq)]
pub enum DescribePublicIpv4PoolsError {}

impl DescribePublicIpv4PoolsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribePublicIpv4PoolsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribePublicIpv4PoolsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribePublicIpv4PoolsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeRegions
#[derive(Debug, PartialEq)]
pub enum DescribeRegionsError {}

impl DescribeRegionsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeRegionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeRegionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeRegionsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeReservedInstances
#[derive(Debug, PartialEq)]
pub enum DescribeReservedInstancesError {}

impl DescribeReservedInstancesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeReservedInstancesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeReservedInstancesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeReservedInstancesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeReservedInstancesListings
#[derive(Debug, PartialEq)]
pub enum DescribeReservedInstancesListingsError {}

impl DescribeReservedInstancesListingsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeReservedInstancesListingsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeReservedInstancesListingsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeReservedInstancesListingsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeReservedInstancesModifications
#[derive(Debug, PartialEq)]
pub enum DescribeReservedInstancesModificationsError {}

impl DescribeReservedInstancesModificationsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeReservedInstancesModificationsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeReservedInstancesModificationsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeReservedInstancesModificationsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeReservedInstancesOfferings
#[derive(Debug, PartialEq)]
pub enum DescribeReservedInstancesOfferingsError {}

impl DescribeReservedInstancesOfferingsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeReservedInstancesOfferingsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeReservedInstancesOfferingsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeReservedInstancesOfferingsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeRouteTables
#[derive(Debug, PartialEq)]
pub enum DescribeRouteTablesError {}

impl DescribeRouteTablesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeRouteTablesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeRouteTablesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeRouteTablesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeScheduledInstanceAvailability
#[derive(Debug, PartialEq)]
pub enum DescribeScheduledInstanceAvailabilityError {}

impl DescribeScheduledInstanceAvailabilityError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeScheduledInstanceAvailabilityError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeScheduledInstanceAvailabilityError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeScheduledInstanceAvailabilityError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeScheduledInstances
#[derive(Debug, PartialEq)]
pub enum DescribeScheduledInstancesError {}

impl DescribeScheduledInstancesError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeScheduledInstancesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeScheduledInstancesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeScheduledInstancesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeSecurityGroupReferences
#[derive(Debug, PartialEq)]
pub enum DescribeSecurityGroupReferencesError {}

impl DescribeSecurityGroupReferencesError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeSecurityGroupReferencesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeSecurityGroupReferencesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeSecurityGroupReferencesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeSecurityGroups
#[derive(Debug, PartialEq)]
pub enum DescribeSecurityGroupsError {}

impl DescribeSecurityGroupsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeSecurityGroupsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeSecurityGroupsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeSecurityGroupsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeSnapshotAttribute
#[derive(Debug, PartialEq)]
pub enum DescribeSnapshotAttributeError {}

impl DescribeSnapshotAttributeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeSnapshotAttributeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeSnapshotAttributeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeSnapshotAttributeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeSnapshots
#[derive(Debug, PartialEq)]
pub enum DescribeSnapshotsError {}

impl DescribeSnapshotsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeSnapshotsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeSnapshotsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeSnapshotsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeSpotDatafeedSubscription
#[derive(Debug, PartialEq)]
pub enum DescribeSpotDatafeedSubscriptionError {}

impl DescribeSpotDatafeedSubscriptionError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeSpotDatafeedSubscriptionError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeSpotDatafeedSubscriptionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeSpotDatafeedSubscriptionError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeSpotFleetInstances
#[derive(Debug, PartialEq)]
pub enum DescribeSpotFleetInstancesError {}

impl DescribeSpotFleetInstancesError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeSpotFleetInstancesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeSpotFleetInstancesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeSpotFleetInstancesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeSpotFleetRequestHistory
#[derive(Debug, PartialEq)]
pub enum DescribeSpotFleetRequestHistoryError {}

impl DescribeSpotFleetRequestHistoryError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeSpotFleetRequestHistoryError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeSpotFleetRequestHistoryError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeSpotFleetRequestHistoryError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeSpotFleetRequests
#[derive(Debug, PartialEq)]
pub enum DescribeSpotFleetRequestsError {}

impl DescribeSpotFleetRequestsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeSpotFleetRequestsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeSpotFleetRequestsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeSpotFleetRequestsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeSpotInstanceRequests
#[derive(Debug, PartialEq)]
pub enum DescribeSpotInstanceRequestsError {}

impl DescribeSpotInstanceRequestsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeSpotInstanceRequestsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeSpotInstanceRequestsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeSpotInstanceRequestsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeSpotPriceHistory
#[derive(Debug, PartialEq)]
pub enum DescribeSpotPriceHistoryError {}

impl DescribeSpotPriceHistoryError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeSpotPriceHistoryError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeSpotPriceHistoryError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeSpotPriceHistoryError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeStaleSecurityGroups
#[derive(Debug, PartialEq)]
pub enum DescribeStaleSecurityGroupsError {}

impl DescribeStaleSecurityGroupsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeStaleSecurityGroupsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeStaleSecurityGroupsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeStaleSecurityGroupsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeSubnets
#[derive(Debug, PartialEq)]
pub enum DescribeSubnetsError {}

impl DescribeSubnetsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeSubnetsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeSubnetsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeSubnetsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeTags
#[derive(Debug, PartialEq)]
pub enum DescribeTagsError {}

impl DescribeTagsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeTagsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeTagsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeTagsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeTransitGatewayAttachments
#[derive(Debug, PartialEq)]
pub enum DescribeTransitGatewayAttachmentsError {}

impl DescribeTransitGatewayAttachmentsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeTransitGatewayAttachmentsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeTransitGatewayAttachmentsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeTransitGatewayAttachmentsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeTransitGatewayRouteTables
#[derive(Debug, PartialEq)]
pub enum DescribeTransitGatewayRouteTablesError {}

impl DescribeTransitGatewayRouteTablesError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeTransitGatewayRouteTablesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeTransitGatewayRouteTablesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeTransitGatewayRouteTablesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeTransitGatewayVpcAttachments
#[derive(Debug, PartialEq)]
pub enum DescribeTransitGatewayVpcAttachmentsError {}

impl DescribeTransitGatewayVpcAttachmentsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeTransitGatewayVpcAttachmentsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeTransitGatewayVpcAttachmentsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeTransitGatewayVpcAttachmentsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeTransitGateways
#[derive(Debug, PartialEq)]
pub enum DescribeTransitGatewaysError {}

impl DescribeTransitGatewaysError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeTransitGatewaysError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeTransitGatewaysError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeTransitGatewaysError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeVolumeAttribute
#[derive(Debug, PartialEq)]
pub enum DescribeVolumeAttributeError {}

impl DescribeVolumeAttributeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeVolumeAttributeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeVolumeAttributeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeVolumeAttributeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeVolumeStatus
#[derive(Debug, PartialEq)]
pub enum DescribeVolumeStatusError {}

impl DescribeVolumeStatusError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeVolumeStatusError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeVolumeStatusError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeVolumeStatusError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeVolumes
#[derive(Debug, PartialEq)]
pub enum DescribeVolumesError {}

impl DescribeVolumesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeVolumesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeVolumesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeVolumesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeVolumesModifications
#[derive(Debug, PartialEq)]
pub enum DescribeVolumesModificationsError {}

impl DescribeVolumesModificationsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeVolumesModificationsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeVolumesModificationsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeVolumesModificationsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeVpcAttribute
#[derive(Debug, PartialEq)]
pub enum DescribeVpcAttributeError {}

impl DescribeVpcAttributeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeVpcAttributeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeVpcAttributeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeVpcAttributeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeVpcClassicLink
#[derive(Debug, PartialEq)]
pub enum DescribeVpcClassicLinkError {}

impl DescribeVpcClassicLinkError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeVpcClassicLinkError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeVpcClassicLinkError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeVpcClassicLinkError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeVpcClassicLinkDnsSupport
#[derive(Debug, PartialEq)]
pub enum DescribeVpcClassicLinkDnsSupportError {}

impl DescribeVpcClassicLinkDnsSupportError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeVpcClassicLinkDnsSupportError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeVpcClassicLinkDnsSupportError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeVpcClassicLinkDnsSupportError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeVpcEndpointConnectionNotifications
#[derive(Debug, PartialEq)]
pub enum DescribeVpcEndpointConnectionNotificationsError {}

impl DescribeVpcEndpointConnectionNotificationsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeVpcEndpointConnectionNotificationsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeVpcEndpointConnectionNotificationsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeVpcEndpointConnectionNotificationsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeVpcEndpointConnections
#[derive(Debug, PartialEq)]
pub enum DescribeVpcEndpointConnectionsError {}

impl DescribeVpcEndpointConnectionsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeVpcEndpointConnectionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeVpcEndpointConnectionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeVpcEndpointConnectionsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeVpcEndpointServiceConfigurations
#[derive(Debug, PartialEq)]
pub enum DescribeVpcEndpointServiceConfigurationsError {}

impl DescribeVpcEndpointServiceConfigurationsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeVpcEndpointServiceConfigurationsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeVpcEndpointServiceConfigurationsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeVpcEndpointServiceConfigurationsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeVpcEndpointServicePermissions
#[derive(Debug, PartialEq)]
pub enum DescribeVpcEndpointServicePermissionsError {}

impl DescribeVpcEndpointServicePermissionsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeVpcEndpointServicePermissionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeVpcEndpointServicePermissionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeVpcEndpointServicePermissionsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeVpcEndpointServices
#[derive(Debug, PartialEq)]
pub enum DescribeVpcEndpointServicesError {}

impl DescribeVpcEndpointServicesError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeVpcEndpointServicesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeVpcEndpointServicesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeVpcEndpointServicesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeVpcEndpoints
#[derive(Debug, PartialEq)]
pub enum DescribeVpcEndpointsError {}

impl DescribeVpcEndpointsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeVpcEndpointsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeVpcEndpointsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeVpcEndpointsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeVpcPeeringConnections
#[derive(Debug, PartialEq)]
pub enum DescribeVpcPeeringConnectionsError {}

impl DescribeVpcPeeringConnectionsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DescribeVpcPeeringConnectionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeVpcPeeringConnectionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeVpcPeeringConnectionsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeVpcs
#[derive(Debug, PartialEq)]
pub enum DescribeVpcsError {}

impl DescribeVpcsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeVpcsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeVpcsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeVpcsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeVpnConnections
#[derive(Debug, PartialEq)]
pub enum DescribeVpnConnectionsError {}

impl DescribeVpnConnectionsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeVpnConnectionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeVpnConnectionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeVpnConnectionsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DescribeVpnGateways
#[derive(Debug, PartialEq)]
pub enum DescribeVpnGatewaysError {}

impl DescribeVpnGatewaysError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DescribeVpnGatewaysError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DescribeVpnGatewaysError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DescribeVpnGatewaysError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DetachClassicLinkVpc
#[derive(Debug, PartialEq)]
pub enum DetachClassicLinkVpcError {}

impl DetachClassicLinkVpcError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DetachClassicLinkVpcError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DetachClassicLinkVpcError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DetachClassicLinkVpcError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DetachInternetGateway
#[derive(Debug, PartialEq)]
pub enum DetachInternetGatewayError {}

impl DetachInternetGatewayError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DetachInternetGatewayError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DetachInternetGatewayError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DetachInternetGatewayError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DetachNetworkInterface
#[derive(Debug, PartialEq)]
pub enum DetachNetworkInterfaceError {}

impl DetachNetworkInterfaceError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DetachNetworkInterfaceError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DetachNetworkInterfaceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DetachNetworkInterfaceError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DetachVolume
#[derive(Debug, PartialEq)]
pub enum DetachVolumeError {}

impl DetachVolumeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DetachVolumeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DetachVolumeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DetachVolumeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DetachVpnGateway
#[derive(Debug, PartialEq)]
pub enum DetachVpnGatewayError {}

impl DetachVpnGatewayError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DetachVpnGatewayError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DetachVpnGatewayError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DetachVpnGatewayError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DisableEbsEncryptionByDefault
#[derive(Debug, PartialEq)]
pub enum DisableEbsEncryptionByDefaultError {}

impl DisableEbsEncryptionByDefaultError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DisableEbsEncryptionByDefaultError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DisableEbsEncryptionByDefaultError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DisableEbsEncryptionByDefaultError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DisableTransitGatewayRouteTablePropagation
#[derive(Debug, PartialEq)]
pub enum DisableTransitGatewayRouteTablePropagationError {}

impl DisableTransitGatewayRouteTablePropagationError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DisableTransitGatewayRouteTablePropagationError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DisableTransitGatewayRouteTablePropagationError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DisableTransitGatewayRouteTablePropagationError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DisableVgwRoutePropagation
#[derive(Debug, PartialEq)]
pub enum DisableVgwRoutePropagationError {}

impl DisableVgwRoutePropagationError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DisableVgwRoutePropagationError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DisableVgwRoutePropagationError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DisableVgwRoutePropagationError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DisableVpcClassicLink
#[derive(Debug, PartialEq)]
pub enum DisableVpcClassicLinkError {}

impl DisableVpcClassicLinkError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DisableVpcClassicLinkError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DisableVpcClassicLinkError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DisableVpcClassicLinkError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DisableVpcClassicLinkDnsSupport
#[derive(Debug, PartialEq)]
pub enum DisableVpcClassicLinkDnsSupportError {}

impl DisableVpcClassicLinkDnsSupportError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DisableVpcClassicLinkDnsSupportError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DisableVpcClassicLinkDnsSupportError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DisableVpcClassicLinkDnsSupportError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DisassociateAddress
#[derive(Debug, PartialEq)]
pub enum DisassociateAddressError {}

impl DisassociateAddressError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DisassociateAddressError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DisassociateAddressError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DisassociateAddressError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DisassociateClientVpnTargetNetwork
#[derive(Debug, PartialEq)]
pub enum DisassociateClientVpnTargetNetworkError {}

impl DisassociateClientVpnTargetNetworkError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DisassociateClientVpnTargetNetworkError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DisassociateClientVpnTargetNetworkError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DisassociateClientVpnTargetNetworkError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DisassociateIamInstanceProfile
#[derive(Debug, PartialEq)]
pub enum DisassociateIamInstanceProfileError {}

impl DisassociateIamInstanceProfileError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DisassociateIamInstanceProfileError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DisassociateIamInstanceProfileError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DisassociateIamInstanceProfileError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DisassociateRouteTable
#[derive(Debug, PartialEq)]
pub enum DisassociateRouteTableError {}

impl DisassociateRouteTableError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DisassociateRouteTableError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DisassociateRouteTableError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DisassociateRouteTableError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DisassociateSubnetCidrBlock
#[derive(Debug, PartialEq)]
pub enum DisassociateSubnetCidrBlockError {}

impl DisassociateSubnetCidrBlockError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DisassociateSubnetCidrBlockError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DisassociateSubnetCidrBlockError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DisassociateSubnetCidrBlockError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DisassociateTransitGatewayRouteTable
#[derive(Debug, PartialEq)]
pub enum DisassociateTransitGatewayRouteTableError {}

impl DisassociateTransitGatewayRouteTableError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<DisassociateTransitGatewayRouteTableError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DisassociateTransitGatewayRouteTableError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DisassociateTransitGatewayRouteTableError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by DisassociateVpcCidrBlock
#[derive(Debug, PartialEq)]
pub enum DisassociateVpcCidrBlockError {}

impl DisassociateVpcCidrBlockError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<DisassociateVpcCidrBlockError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for DisassociateVpcCidrBlockError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for DisassociateVpcCidrBlockError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by EnableEbsEncryptionByDefault
#[derive(Debug, PartialEq)]
pub enum EnableEbsEncryptionByDefaultError {}

impl EnableEbsEncryptionByDefaultError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<EnableEbsEncryptionByDefaultError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for EnableEbsEncryptionByDefaultError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for EnableEbsEncryptionByDefaultError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by EnableTransitGatewayRouteTablePropagation
#[derive(Debug, PartialEq)]
pub enum EnableTransitGatewayRouteTablePropagationError {}

impl EnableTransitGatewayRouteTablePropagationError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<EnableTransitGatewayRouteTablePropagationError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for EnableTransitGatewayRouteTablePropagationError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for EnableTransitGatewayRouteTablePropagationError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by EnableVgwRoutePropagation
#[derive(Debug, PartialEq)]
pub enum EnableVgwRoutePropagationError {}

impl EnableVgwRoutePropagationError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<EnableVgwRoutePropagationError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for EnableVgwRoutePropagationError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for EnableVgwRoutePropagationError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by EnableVolumeIO
#[derive(Debug, PartialEq)]
pub enum EnableVolumeIOError {}

impl EnableVolumeIOError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<EnableVolumeIOError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for EnableVolumeIOError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for EnableVolumeIOError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by EnableVpcClassicLink
#[derive(Debug, PartialEq)]
pub enum EnableVpcClassicLinkError {}

impl EnableVpcClassicLinkError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<EnableVpcClassicLinkError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for EnableVpcClassicLinkError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for EnableVpcClassicLinkError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by EnableVpcClassicLinkDnsSupport
#[derive(Debug, PartialEq)]
pub enum EnableVpcClassicLinkDnsSupportError {}

impl EnableVpcClassicLinkDnsSupportError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<EnableVpcClassicLinkDnsSupportError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for EnableVpcClassicLinkDnsSupportError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for EnableVpcClassicLinkDnsSupportError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ExportClientVpnClientCertificateRevocationList
#[derive(Debug, PartialEq)]
pub enum ExportClientVpnClientCertificateRevocationListError {}

impl ExportClientVpnClientCertificateRevocationListError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ExportClientVpnClientCertificateRevocationListError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ExportClientVpnClientCertificateRevocationListError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ExportClientVpnClientCertificateRevocationListError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ExportClientVpnClientConfiguration
#[derive(Debug, PartialEq)]
pub enum ExportClientVpnClientConfigurationError {}

impl ExportClientVpnClientConfigurationError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ExportClientVpnClientConfigurationError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ExportClientVpnClientConfigurationError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ExportClientVpnClientConfigurationError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ExportTransitGatewayRoutes
#[derive(Debug, PartialEq)]
pub enum ExportTransitGatewayRoutesError {}

impl ExportTransitGatewayRoutesError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ExportTransitGatewayRoutesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ExportTransitGatewayRoutesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ExportTransitGatewayRoutesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by GetConsoleOutput
#[derive(Debug, PartialEq)]
pub enum GetConsoleOutputError {}

impl GetConsoleOutputError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<GetConsoleOutputError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for GetConsoleOutputError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetConsoleOutputError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by GetConsoleScreenshot
#[derive(Debug, PartialEq)]
pub enum GetConsoleScreenshotError {}

impl GetConsoleScreenshotError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<GetConsoleScreenshotError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for GetConsoleScreenshotError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetConsoleScreenshotError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by GetEbsDefaultKmsKeyId
#[derive(Debug, PartialEq)]
pub enum GetEbsDefaultKmsKeyIdError {}

impl GetEbsDefaultKmsKeyIdError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<GetEbsDefaultKmsKeyIdError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for GetEbsDefaultKmsKeyIdError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetEbsDefaultKmsKeyIdError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by GetEbsEncryptionByDefault
#[derive(Debug, PartialEq)]
pub enum GetEbsEncryptionByDefaultError {}

impl GetEbsEncryptionByDefaultError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<GetEbsEncryptionByDefaultError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for GetEbsEncryptionByDefaultError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetEbsEncryptionByDefaultError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by GetHostReservationPurchasePreview
#[derive(Debug, PartialEq)]
pub enum GetHostReservationPurchasePreviewError {}

impl GetHostReservationPurchasePreviewError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<GetHostReservationPurchasePreviewError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for GetHostReservationPurchasePreviewError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetHostReservationPurchasePreviewError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by GetLaunchTemplateData
#[derive(Debug, PartialEq)]
pub enum GetLaunchTemplateDataError {}

impl GetLaunchTemplateDataError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<GetLaunchTemplateDataError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for GetLaunchTemplateDataError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetLaunchTemplateDataError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by GetPasswordData
#[derive(Debug, PartialEq)]
pub enum GetPasswordDataError {}

impl GetPasswordDataError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<GetPasswordDataError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for GetPasswordDataError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetPasswordDataError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by GetReservedInstancesExchangeQuote
#[derive(Debug, PartialEq)]
pub enum GetReservedInstancesExchangeQuoteError {}

impl GetReservedInstancesExchangeQuoteError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<GetReservedInstancesExchangeQuoteError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for GetReservedInstancesExchangeQuoteError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetReservedInstancesExchangeQuoteError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by GetTransitGatewayAttachmentPropagations
#[derive(Debug, PartialEq)]
pub enum GetTransitGatewayAttachmentPropagationsError {}

impl GetTransitGatewayAttachmentPropagationsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<GetTransitGatewayAttachmentPropagationsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for GetTransitGatewayAttachmentPropagationsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetTransitGatewayAttachmentPropagationsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by GetTransitGatewayRouteTableAssociations
#[derive(Debug, PartialEq)]
pub enum GetTransitGatewayRouteTableAssociationsError {}

impl GetTransitGatewayRouteTableAssociationsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<GetTransitGatewayRouteTableAssociationsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for GetTransitGatewayRouteTableAssociationsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetTransitGatewayRouteTableAssociationsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by GetTransitGatewayRouteTablePropagations
#[derive(Debug, PartialEq)]
pub enum GetTransitGatewayRouteTablePropagationsError {}

impl GetTransitGatewayRouteTablePropagationsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<GetTransitGatewayRouteTablePropagationsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for GetTransitGatewayRouteTablePropagationsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for GetTransitGatewayRouteTablePropagationsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ImportClientVpnClientCertificateRevocationList
#[derive(Debug, PartialEq)]
pub enum ImportClientVpnClientCertificateRevocationListError {}

impl ImportClientVpnClientCertificateRevocationListError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ImportClientVpnClientCertificateRevocationListError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ImportClientVpnClientCertificateRevocationListError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ImportClientVpnClientCertificateRevocationListError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ImportImage
#[derive(Debug, PartialEq)]
pub enum ImportImageError {}

impl ImportImageError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ImportImageError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ImportImageError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ImportImageError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ImportInstance
#[derive(Debug, PartialEq)]
pub enum ImportInstanceError {}

impl ImportInstanceError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ImportInstanceError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ImportInstanceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ImportInstanceError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ImportKeyPair
#[derive(Debug, PartialEq)]
pub enum ImportKeyPairError {}

impl ImportKeyPairError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ImportKeyPairError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ImportKeyPairError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ImportKeyPairError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ImportSnapshot
#[derive(Debug, PartialEq)]
pub enum ImportSnapshotError {}

impl ImportSnapshotError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ImportSnapshotError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ImportSnapshotError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ImportSnapshotError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ImportVolume
#[derive(Debug, PartialEq)]
pub enum ImportVolumeError {}

impl ImportVolumeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ImportVolumeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ImportVolumeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ImportVolumeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyCapacityReservation
#[derive(Debug, PartialEq)]
pub enum ModifyCapacityReservationError {}

impl ModifyCapacityReservationError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyCapacityReservationError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyCapacityReservationError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyCapacityReservationError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyClientVpnEndpoint
#[derive(Debug, PartialEq)]
pub enum ModifyClientVpnEndpointError {}

impl ModifyClientVpnEndpointError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyClientVpnEndpointError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyClientVpnEndpointError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyClientVpnEndpointError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyEbsDefaultKmsKeyId
#[derive(Debug, PartialEq)]
pub enum ModifyEbsDefaultKmsKeyIdError {}

impl ModifyEbsDefaultKmsKeyIdError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyEbsDefaultKmsKeyIdError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyEbsDefaultKmsKeyIdError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyEbsDefaultKmsKeyIdError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyFleet
#[derive(Debug, PartialEq)]
pub enum ModifyFleetError {}

impl ModifyFleetError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyFleetError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyFleetError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyFleetError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyFpgaImageAttribute
#[derive(Debug, PartialEq)]
pub enum ModifyFpgaImageAttributeError {}

impl ModifyFpgaImageAttributeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyFpgaImageAttributeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyFpgaImageAttributeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyFpgaImageAttributeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyHosts
#[derive(Debug, PartialEq)]
pub enum ModifyHostsError {}

impl ModifyHostsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyHostsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyHostsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyHostsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyIdFormat
#[derive(Debug, PartialEq)]
pub enum ModifyIdFormatError {}

impl ModifyIdFormatError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyIdFormatError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyIdFormatError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyIdFormatError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyIdentityIdFormat
#[derive(Debug, PartialEq)]
pub enum ModifyIdentityIdFormatError {}

impl ModifyIdentityIdFormatError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyIdentityIdFormatError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyIdentityIdFormatError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyIdentityIdFormatError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyImageAttribute
#[derive(Debug, PartialEq)]
pub enum ModifyImageAttributeError {}

impl ModifyImageAttributeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyImageAttributeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyImageAttributeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyImageAttributeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyInstanceAttribute
#[derive(Debug, PartialEq)]
pub enum ModifyInstanceAttributeError {}

impl ModifyInstanceAttributeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyInstanceAttributeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyInstanceAttributeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyInstanceAttributeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyInstanceCapacityReservationAttributes
#[derive(Debug, PartialEq)]
pub enum ModifyInstanceCapacityReservationAttributesError {}

impl ModifyInstanceCapacityReservationAttributesError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ModifyInstanceCapacityReservationAttributesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyInstanceCapacityReservationAttributesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyInstanceCapacityReservationAttributesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyInstanceCreditSpecification
#[derive(Debug, PartialEq)]
pub enum ModifyInstanceCreditSpecificationError {}

impl ModifyInstanceCreditSpecificationError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ModifyInstanceCreditSpecificationError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyInstanceCreditSpecificationError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyInstanceCreditSpecificationError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyInstanceEventStartTime
#[derive(Debug, PartialEq)]
pub enum ModifyInstanceEventStartTimeError {}

impl ModifyInstanceEventStartTimeError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ModifyInstanceEventStartTimeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyInstanceEventStartTimeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyInstanceEventStartTimeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyInstancePlacement
#[derive(Debug, PartialEq)]
pub enum ModifyInstancePlacementError {}

impl ModifyInstancePlacementError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyInstancePlacementError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyInstancePlacementError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyInstancePlacementError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyLaunchTemplate
#[derive(Debug, PartialEq)]
pub enum ModifyLaunchTemplateError {}

impl ModifyLaunchTemplateError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyLaunchTemplateError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyLaunchTemplateError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyLaunchTemplateError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyNetworkInterfaceAttribute
#[derive(Debug, PartialEq)]
pub enum ModifyNetworkInterfaceAttributeError {}

impl ModifyNetworkInterfaceAttributeError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ModifyNetworkInterfaceAttributeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyNetworkInterfaceAttributeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyNetworkInterfaceAttributeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyReservedInstances
#[derive(Debug, PartialEq)]
pub enum ModifyReservedInstancesError {}

impl ModifyReservedInstancesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyReservedInstancesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyReservedInstancesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyReservedInstancesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifySnapshotAttribute
#[derive(Debug, PartialEq)]
pub enum ModifySnapshotAttributeError {}

impl ModifySnapshotAttributeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifySnapshotAttributeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifySnapshotAttributeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifySnapshotAttributeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifySpotFleetRequest
#[derive(Debug, PartialEq)]
pub enum ModifySpotFleetRequestError {}

impl ModifySpotFleetRequestError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifySpotFleetRequestError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifySpotFleetRequestError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifySpotFleetRequestError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifySubnetAttribute
#[derive(Debug, PartialEq)]
pub enum ModifySubnetAttributeError {}

impl ModifySubnetAttributeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifySubnetAttributeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifySubnetAttributeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifySubnetAttributeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyTransitGatewayVpcAttachment
#[derive(Debug, PartialEq)]
pub enum ModifyTransitGatewayVpcAttachmentError {}

impl ModifyTransitGatewayVpcAttachmentError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ModifyTransitGatewayVpcAttachmentError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyTransitGatewayVpcAttachmentError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyTransitGatewayVpcAttachmentError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyVolume
#[derive(Debug, PartialEq)]
pub enum ModifyVolumeError {}

impl ModifyVolumeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyVolumeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyVolumeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyVolumeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyVolumeAttribute
#[derive(Debug, PartialEq)]
pub enum ModifyVolumeAttributeError {}

impl ModifyVolumeAttributeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyVolumeAttributeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyVolumeAttributeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyVolumeAttributeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyVpcAttribute
#[derive(Debug, PartialEq)]
pub enum ModifyVpcAttributeError {}

impl ModifyVpcAttributeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyVpcAttributeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyVpcAttributeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyVpcAttributeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyVpcEndpoint
#[derive(Debug, PartialEq)]
pub enum ModifyVpcEndpointError {}

impl ModifyVpcEndpointError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyVpcEndpointError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyVpcEndpointError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyVpcEndpointError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyVpcEndpointConnectionNotification
#[derive(Debug, PartialEq)]
pub enum ModifyVpcEndpointConnectionNotificationError {}

impl ModifyVpcEndpointConnectionNotificationError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ModifyVpcEndpointConnectionNotificationError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyVpcEndpointConnectionNotificationError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyVpcEndpointConnectionNotificationError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyVpcEndpointServiceConfiguration
#[derive(Debug, PartialEq)]
pub enum ModifyVpcEndpointServiceConfigurationError {}

impl ModifyVpcEndpointServiceConfigurationError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ModifyVpcEndpointServiceConfigurationError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyVpcEndpointServiceConfigurationError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyVpcEndpointServiceConfigurationError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyVpcEndpointServicePermissions
#[derive(Debug, PartialEq)]
pub enum ModifyVpcEndpointServicePermissionsError {}

impl ModifyVpcEndpointServicePermissionsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ModifyVpcEndpointServicePermissionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyVpcEndpointServicePermissionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyVpcEndpointServicePermissionsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyVpcPeeringConnectionOptions
#[derive(Debug, PartialEq)]
pub enum ModifyVpcPeeringConnectionOptionsError {}

impl ModifyVpcPeeringConnectionOptionsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ModifyVpcPeeringConnectionOptionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyVpcPeeringConnectionOptionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyVpcPeeringConnectionOptionsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyVpcTenancy
#[derive(Debug, PartialEq)]
pub enum ModifyVpcTenancyError {}

impl ModifyVpcTenancyError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyVpcTenancyError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyVpcTenancyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyVpcTenancyError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ModifyVpnConnection
#[derive(Debug, PartialEq)]
pub enum ModifyVpnConnectionError {}

impl ModifyVpnConnectionError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ModifyVpnConnectionError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ModifyVpnConnectionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ModifyVpnConnectionError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by MonitorInstances
#[derive(Debug, PartialEq)]
pub enum MonitorInstancesError {}

impl MonitorInstancesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<MonitorInstancesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for MonitorInstancesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for MonitorInstancesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by MoveAddressToVpc
#[derive(Debug, PartialEq)]
pub enum MoveAddressToVpcError {}

impl MoveAddressToVpcError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<MoveAddressToVpcError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for MoveAddressToVpcError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for MoveAddressToVpcError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ProvisionByoipCidr
#[derive(Debug, PartialEq)]
pub enum ProvisionByoipCidrError {}

impl ProvisionByoipCidrError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ProvisionByoipCidrError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ProvisionByoipCidrError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ProvisionByoipCidrError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by PurchaseHostReservation
#[derive(Debug, PartialEq)]
pub enum PurchaseHostReservationError {}

impl PurchaseHostReservationError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<PurchaseHostReservationError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for PurchaseHostReservationError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for PurchaseHostReservationError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by PurchaseReservedInstancesOffering
#[derive(Debug, PartialEq)]
pub enum PurchaseReservedInstancesOfferingError {}

impl PurchaseReservedInstancesOfferingError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<PurchaseReservedInstancesOfferingError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for PurchaseReservedInstancesOfferingError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for PurchaseReservedInstancesOfferingError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by PurchaseScheduledInstances
#[derive(Debug, PartialEq)]
pub enum PurchaseScheduledInstancesError {}

impl PurchaseScheduledInstancesError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<PurchaseScheduledInstancesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for PurchaseScheduledInstancesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for PurchaseScheduledInstancesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by RebootInstances
#[derive(Debug, PartialEq)]
pub enum RebootInstancesError {}

impl RebootInstancesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<RebootInstancesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RebootInstancesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RebootInstancesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by RegisterImage
#[derive(Debug, PartialEq)]
pub enum RegisterImageError {}

impl RegisterImageError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<RegisterImageError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RegisterImageError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RegisterImageError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by RejectTransitGatewayVpcAttachment
#[derive(Debug, PartialEq)]
pub enum RejectTransitGatewayVpcAttachmentError {}

impl RejectTransitGatewayVpcAttachmentError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<RejectTransitGatewayVpcAttachmentError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RejectTransitGatewayVpcAttachmentError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RejectTransitGatewayVpcAttachmentError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by RejectVpcEndpointConnections
#[derive(Debug, PartialEq)]
pub enum RejectVpcEndpointConnectionsError {}

impl RejectVpcEndpointConnectionsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<RejectVpcEndpointConnectionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RejectVpcEndpointConnectionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RejectVpcEndpointConnectionsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by RejectVpcPeeringConnection
#[derive(Debug, PartialEq)]
pub enum RejectVpcPeeringConnectionError {}

impl RejectVpcPeeringConnectionError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<RejectVpcPeeringConnectionError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RejectVpcPeeringConnectionError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RejectVpcPeeringConnectionError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ReleaseAddress
#[derive(Debug, PartialEq)]
pub enum ReleaseAddressError {}

impl ReleaseAddressError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ReleaseAddressError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ReleaseAddressError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ReleaseAddressError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ReleaseHosts
#[derive(Debug, PartialEq)]
pub enum ReleaseHostsError {}

impl ReleaseHostsError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ReleaseHostsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ReleaseHostsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ReleaseHostsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ReplaceIamInstanceProfileAssociation
#[derive(Debug, PartialEq)]
pub enum ReplaceIamInstanceProfileAssociationError {}

impl ReplaceIamInstanceProfileAssociationError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ReplaceIamInstanceProfileAssociationError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ReplaceIamInstanceProfileAssociationError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ReplaceIamInstanceProfileAssociationError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ReplaceNetworkAclAssociation
#[derive(Debug, PartialEq)]
pub enum ReplaceNetworkAclAssociationError {}

impl ReplaceNetworkAclAssociationError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ReplaceNetworkAclAssociationError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ReplaceNetworkAclAssociationError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ReplaceNetworkAclAssociationError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ReplaceNetworkAclEntry
#[derive(Debug, PartialEq)]
pub enum ReplaceNetworkAclEntryError {}

impl ReplaceNetworkAclEntryError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ReplaceNetworkAclEntryError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ReplaceNetworkAclEntryError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ReplaceNetworkAclEntryError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ReplaceRoute
#[derive(Debug, PartialEq)]
pub enum ReplaceRouteError {}

impl ReplaceRouteError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ReplaceRouteError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ReplaceRouteError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ReplaceRouteError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ReplaceRouteTableAssociation
#[derive(Debug, PartialEq)]
pub enum ReplaceRouteTableAssociationError {}

impl ReplaceRouteTableAssociationError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ReplaceRouteTableAssociationError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ReplaceRouteTableAssociationError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ReplaceRouteTableAssociationError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ReplaceTransitGatewayRoute
#[derive(Debug, PartialEq)]
pub enum ReplaceTransitGatewayRouteError {}

impl ReplaceTransitGatewayRouteError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ReplaceTransitGatewayRouteError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ReplaceTransitGatewayRouteError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ReplaceTransitGatewayRouteError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ReportInstanceStatus
#[derive(Debug, PartialEq)]
pub enum ReportInstanceStatusError {}

impl ReportInstanceStatusError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ReportInstanceStatusError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ReportInstanceStatusError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ReportInstanceStatusError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by RequestSpotFleet
#[derive(Debug, PartialEq)]
pub enum RequestSpotFleetError {}

impl RequestSpotFleetError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<RequestSpotFleetError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RequestSpotFleetError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RequestSpotFleetError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by RequestSpotInstances
#[derive(Debug, PartialEq)]
pub enum RequestSpotInstancesError {}

impl RequestSpotInstancesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<RequestSpotInstancesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RequestSpotInstancesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RequestSpotInstancesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ResetEbsDefaultKmsKeyId
#[derive(Debug, PartialEq)]
pub enum ResetEbsDefaultKmsKeyIdError {}

impl ResetEbsDefaultKmsKeyIdError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ResetEbsDefaultKmsKeyIdError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ResetEbsDefaultKmsKeyIdError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ResetEbsDefaultKmsKeyIdError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ResetFpgaImageAttribute
#[derive(Debug, PartialEq)]
pub enum ResetFpgaImageAttributeError {}

impl ResetFpgaImageAttributeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ResetFpgaImageAttributeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ResetFpgaImageAttributeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ResetFpgaImageAttributeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ResetImageAttribute
#[derive(Debug, PartialEq)]
pub enum ResetImageAttributeError {}

impl ResetImageAttributeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ResetImageAttributeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ResetImageAttributeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ResetImageAttributeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ResetInstanceAttribute
#[derive(Debug, PartialEq)]
pub enum ResetInstanceAttributeError {}

impl ResetInstanceAttributeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ResetInstanceAttributeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ResetInstanceAttributeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ResetInstanceAttributeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ResetNetworkInterfaceAttribute
#[derive(Debug, PartialEq)]
pub enum ResetNetworkInterfaceAttributeError {}

impl ResetNetworkInterfaceAttributeError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<ResetNetworkInterfaceAttributeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ResetNetworkInterfaceAttributeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ResetNetworkInterfaceAttributeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by ResetSnapshotAttribute
#[derive(Debug, PartialEq)]
pub enum ResetSnapshotAttributeError {}

impl ResetSnapshotAttributeError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<ResetSnapshotAttributeError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for ResetSnapshotAttributeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for ResetSnapshotAttributeError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by RestoreAddressToClassic
#[derive(Debug, PartialEq)]
pub enum RestoreAddressToClassicError {}

impl RestoreAddressToClassicError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<RestoreAddressToClassicError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RestoreAddressToClassicError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RestoreAddressToClassicError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by RevokeClientVpnIngress
#[derive(Debug, PartialEq)]
pub enum RevokeClientVpnIngressError {}

impl RevokeClientVpnIngressError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<RevokeClientVpnIngressError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RevokeClientVpnIngressError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RevokeClientVpnIngressError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by RevokeSecurityGroupEgress
#[derive(Debug, PartialEq)]
pub enum RevokeSecurityGroupEgressError {}

impl RevokeSecurityGroupEgressError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<RevokeSecurityGroupEgressError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RevokeSecurityGroupEgressError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RevokeSecurityGroupEgressError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by RevokeSecurityGroupIngress
#[derive(Debug, PartialEq)]
pub enum RevokeSecurityGroupIngressError {}

impl RevokeSecurityGroupIngressError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<RevokeSecurityGroupIngressError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RevokeSecurityGroupIngressError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RevokeSecurityGroupIngressError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by RunInstances
#[derive(Debug, PartialEq)]
pub enum RunInstancesError {}

impl RunInstancesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<RunInstancesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RunInstancesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RunInstancesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by RunScheduledInstances
#[derive(Debug, PartialEq)]
pub enum RunScheduledInstancesError {}

impl RunScheduledInstancesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<RunScheduledInstancesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for RunScheduledInstancesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for RunScheduledInstancesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by SearchTransitGatewayRoutes
#[derive(Debug, PartialEq)]
pub enum SearchTransitGatewayRoutesError {}

impl SearchTransitGatewayRoutesError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<SearchTransitGatewayRoutesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for SearchTransitGatewayRoutesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for SearchTransitGatewayRoutesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by StartInstances
#[derive(Debug, PartialEq)]
pub enum StartInstancesError {}

impl StartInstancesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<StartInstancesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for StartInstancesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for StartInstancesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by StopInstances
#[derive(Debug, PartialEq)]
pub enum StopInstancesError {}

impl StopInstancesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<StopInstancesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for StopInstancesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for StopInstancesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by TerminateClientVpnConnections
#[derive(Debug, PartialEq)]
pub enum TerminateClientVpnConnectionsError {}

impl TerminateClientVpnConnectionsError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<TerminateClientVpnConnectionsError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for TerminateClientVpnConnectionsError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for TerminateClientVpnConnectionsError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by TerminateInstances
#[derive(Debug, PartialEq)]
pub enum TerminateInstancesError {}

impl TerminateInstancesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<TerminateInstancesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for TerminateInstancesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for TerminateInstancesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by UnassignIpv6Addresses
#[derive(Debug, PartialEq)]
pub enum UnassignIpv6AddressesError {}

impl UnassignIpv6AddressesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<UnassignIpv6AddressesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for UnassignIpv6AddressesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for UnassignIpv6AddressesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by UnassignPrivateIpAddresses
#[derive(Debug, PartialEq)]
pub enum UnassignPrivateIpAddressesError {}

impl UnassignPrivateIpAddressesError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<UnassignPrivateIpAddressesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for UnassignPrivateIpAddressesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for UnassignPrivateIpAddressesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by UnmonitorInstances
#[derive(Debug, PartialEq)]
pub enum UnmonitorInstancesError {}

impl UnmonitorInstancesError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<UnmonitorInstancesError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for UnmonitorInstancesError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for UnmonitorInstancesError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by UpdateSecurityGroupRuleDescriptionsEgress
#[derive(Debug, PartialEq)]
pub enum UpdateSecurityGroupRuleDescriptionsEgressError {}

impl UpdateSecurityGroupRuleDescriptionsEgressError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<UpdateSecurityGroupRuleDescriptionsEgressError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for UpdateSecurityGroupRuleDescriptionsEgressError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for UpdateSecurityGroupRuleDescriptionsEgressError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by UpdateSecurityGroupRuleDescriptionsIngress
#[derive(Debug, PartialEq)]
pub enum UpdateSecurityGroupRuleDescriptionsIngressError {}

impl UpdateSecurityGroupRuleDescriptionsIngressError {
    pub fn from_response(
        res: BufferedHttpResponse,
    ) -> RusotoError<UpdateSecurityGroupRuleDescriptionsIngressError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for UpdateSecurityGroupRuleDescriptionsIngressError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for UpdateSecurityGroupRuleDescriptionsIngressError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Errors returned by WithdrawByoipCidr
#[derive(Debug, PartialEq)]
pub enum WithdrawByoipCidrError {}

impl WithdrawByoipCidrError {
    pub fn from_response(res: BufferedHttpResponse) -> RusotoError<WithdrawByoipCidrError> {
        {
            let reader = EventReader::new(res.body.as_ref());
            let mut stack = XmlResponse::new(reader.into_iter().peekable());
            find_start_element(&mut stack);
            if let Ok(parsed_error) = Self::deserialize(&mut stack) {
                match &parsed_error.code[..] {
                    _ => {}
                }
            }
        }
        RusotoError::Unknown(res)
    }

    fn deserialize<T>(stack: &mut T) -> Result<XmlError, XmlParseError>
    where
        T: Peek + Next,
    {
        start_element("Response", stack)?;
        start_element("Errors", stack)?;
        XmlErrorDeserializer::deserialize("Error", stack)
    }
}
impl fmt::Display for WithdrawByoipCidrError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.description())
    }
}
impl Error for WithdrawByoipCidrError {
    fn description(&self) -> &str {
        match *self {}
    }
}
/// Trait representing the capabilities of the Amazon EC2 API. Amazon EC2 clients implement this trait.
pub trait Ec2 {
    /// <p>Accepts the Convertible Reserved Instance exchange quote described in the <a>GetReservedInstancesExchangeQuote</a> call.</p>
    fn accept_reserved_instances_exchange_quote(
        &self,
        input: AcceptReservedInstancesExchangeQuoteRequest,
    ) -> RusotoFuture<
        AcceptReservedInstancesExchangeQuoteResult,
        AcceptReservedInstancesExchangeQuoteError,
    >;

    /// <p>Accepts a request to attach a VPC to a transit gateway.</p> <p>The VPC attachment must be in the <code>pendingAcceptance</code> state. Use <a>DescribeTransitGatewayVpcAttachments</a> to view your pending VPC attachment requests. Use <a>RejectTransitGatewayVpcAttachment</a> to reject a VPC attachment request.</p>
    fn accept_transit_gateway_vpc_attachment(
        &self,
        input: AcceptTransitGatewayVpcAttachmentRequest,
    ) -> RusotoFuture<AcceptTransitGatewayVpcAttachmentResult, AcceptTransitGatewayVpcAttachmentError>;

    /// <p>Accepts one or more interface VPC endpoint connection requests to your VPC endpoint service.</p>
    fn accept_vpc_endpoint_connections(
        &self,
        input: AcceptVpcEndpointConnectionsRequest,
    ) -> RusotoFuture<AcceptVpcEndpointConnectionsResult, AcceptVpcEndpointConnectionsError>;

    /// <p>Accept a VPC peering connection request. To accept a request, the VPC peering connection must be in the <code>pending-acceptance</code> state, and you must be the owner of the peer VPC. Use <a>DescribeVpcPeeringConnections</a> to view your outstanding VPC peering connection requests.</p> <p>For an inter-Region VPC peering connection request, you must accept the VPC peering connection in the Region of the accepter VPC.</p>
    fn accept_vpc_peering_connection(
        &self,
        input: AcceptVpcPeeringConnectionRequest,
    ) -> RusotoFuture<AcceptVpcPeeringConnectionResult, AcceptVpcPeeringConnectionError>;

    /// <p>Advertises an IPv4 address range that is provisioned for use with your AWS resources through bring your own IP addresses (BYOIP).</p> <p>You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time.</p> <p>We recommend that you stop advertising the BYOIP CIDR from other locations when you advertise it from AWS. To minimize down time, you can configure your AWS resources to use an address from a BYOIP CIDR before it is advertised, and then simultaneously stop advertising it from the current location and start advertising it through AWS.</p> <p>It can take a few minutes before traffic to the specified addresses starts routing to AWS because of BGP propagation delays.</p> <p>To stop advertising the BYOIP CIDR, use <a>WithdrawByoipCidr</a>.</p>
    fn advertise_byoip_cidr(
        &self,
        input: AdvertiseByoipCidrRequest,
    ) -> RusotoFuture<AdvertiseByoipCidrResult, AdvertiseByoipCidrError>;

    /// <p>Allocates an Elastic IP address to your AWS account. After you allocate the Elastic IP address you can associate it with an instance or network interface. After you release an Elastic IP address, it is released to the IP address pool and can be allocated to a different AWS account.</p> <p>You can allocate an Elastic IP address from an address pool owned by AWS or from an address pool created from a public IPv4 address range that you have brought to AWS for use with your AWS resources using bring your own IP addresses (BYOIP). For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">Bring Your Own IP Addresses (BYOIP)</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>[EC2-VPC] If you release an Elastic IP address, you might be able to recover it. You cannot recover an Elastic IP address that you released after it is allocated to another AWS account. You cannot recover an Elastic IP address for EC2-Classic. To attempt to recover an Elastic IP address that you released, specify it in this operation.</p> <p>An Elastic IP address is for use either in the EC2-Classic platform or in a VPC. By default, you can allocate 5 Elastic IP addresses for EC2-Classic per Region and 5 Elastic IP addresses for EC2-VPC per Region.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn allocate_address(
        &self,
        input: AllocateAddressRequest,
    ) -> RusotoFuture<AllocateAddressResult, AllocateAddressError>;

    /// <p>Allocates a Dedicated Host to your account. At a minimum, specify the instance size type, Availability Zone, and quantity of hosts to allocate.</p>
    fn allocate_hosts(
        &self,
        input: AllocateHostsRequest,
    ) -> RusotoFuture<AllocateHostsResult, AllocateHostsError>;

    /// <p>Applies a security group to the association between the target network and the Client VPN endpoint. This action replaces the existing security groups with the specified security groups.</p>
    fn apply_security_groups_to_client_vpn_target_network(
        &self,
        input: ApplySecurityGroupsToClientVpnTargetNetworkRequest,
    ) -> RusotoFuture<
        ApplySecurityGroupsToClientVpnTargetNetworkResult,
        ApplySecurityGroupsToClientVpnTargetNetworkError,
    >;

    /// <p>Assigns one or more IPv6 addresses to the specified network interface. You can specify one or more specific IPv6 addresses, or you can specify the number of IPv6 addresses to be automatically assigned from within the subnet's IPv6 CIDR block range. You can assign as many IPv6 addresses to a network interface as you can assign private IPv4 addresses, and the limit varies per instance type. For information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI">IP Addresses Per Network Interface Per Instance Type</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn assign_ipv_6_addresses(
        &self,
        input: AssignIpv6AddressesRequest,
    ) -> RusotoFuture<AssignIpv6AddressesResult, AssignIpv6AddressesError>;

    /// <p>Assigns one or more secondary private IP addresses to the specified network interface.</p> <p>You can specify one or more specific secondary IP addresses, or you can specify the number of secondary IP addresses to be automatically assigned within the subnet's CIDR block range. The number of secondary IP addresses that you can assign to an instance varies by instance type. For information about instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For more information about Elastic IP addresses, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>When you move a secondary private IP address to another network interface, any Elastic IP address that is associated with the IP address is also moved.</p> <p>Remapping an IP address is an asynchronous operation. When you move an IP address from one network interface to another, check <code>network/interfaces/macs/mac/local-ipv4s</code> in the instance metadata to confirm that the remapping is complete.</p>
    fn assign_private_ip_addresses(
        &self,
        input: AssignPrivateIpAddressesRequest,
    ) -> RusotoFuture<(), AssignPrivateIpAddressesError>;

    /// <p><p>Associates an Elastic IP address with an instance or a network interface. Before you can use an Elastic IP address, you must allocate it to your account.</p> <p>An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>[EC2-Classic, VPC in an EC2-VPC-only account] If the Elastic IP address is already associated with a different instance, it is disassociated from that instance and associated with the specified instance. If you associate an Elastic IP address with an instance that has an existing Elastic IP address, the existing address is disassociated from the instance, but remains allocated to your account.</p> <p>[VPC in an EC2-Classic account] If you don&#39;t specify a private IP address, the Elastic IP address is associated with the primary IP address. If the Elastic IP address is already associated with a different instance or a network interface, you get an error unless you allow reassociation. You cannot associate an Elastic IP address with an instance or network interface that has an existing Elastic IP address.</p> <important> <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn&#39;t return an error, and you may be charged for each time the Elastic IP address is remapped to the same instance. For more information, see the <i>Elastic IP Addresses</i> section of <a href="http://aws.amazon.com/ec2/pricing/">Amazon EC2 Pricing</a>.</p> </important></p>
    fn associate_address(
        &self,
        input: AssociateAddressRequest,
    ) -> RusotoFuture<AssociateAddressResult, AssociateAddressError>;

    /// <p>Associates a target network with a Client VPN endpoint. A target network is a subnet in a VPC. You can associate multiple subnets from the same VPC with a Client VPN endpoint. You can associate only one subnet in each Availability Zone. We recommend that you associate at least two subnets to provide Availability Zone redundancy.</p>
    fn associate_client_vpn_target_network(
        &self,
        input: AssociateClientVpnTargetNetworkRequest,
    ) -> RusotoFuture<AssociateClientVpnTargetNetworkResult, AssociateClientVpnTargetNetworkError>;

    /// <p>Associates a set of DHCP options (that you've previously created) with the specified VPC, or associates no DHCP options with the VPC.</p> <p>After you associate the options with the VPC, any existing instances and all new instances that you launch in that VPC use the options. You don't need to restart or relaunch the instances. They automatically pick up the changes within a few hours, depending on how frequently the instance renews its DHCP lease. You can explicitly renew the lease using the operating system on the instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html">DHCP Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn associate_dhcp_options(
        &self,
        input: AssociateDhcpOptionsRequest,
    ) -> RusotoFuture<(), AssociateDhcpOptionsError>;

    /// <p>Associates an IAM instance profile with a running or stopped instance. You cannot associate more than one IAM instance profile with an instance.</p>
    fn associate_iam_instance_profile(
        &self,
        input: AssociateIamInstanceProfileRequest,
    ) -> RusotoFuture<AssociateIamInstanceProfileResult, AssociateIamInstanceProfileError>;

    /// <p>Associates a subnet with a route table. The subnet and route table must be in the same VPC. This association causes traffic originating from the subnet to be routed according to the routes in the route table. The action returns an association ID, which you need in order to disassociate the route table from the subnet later. A route table can be associated with multiple subnets.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn associate_route_table(
        &self,
        input: AssociateRouteTableRequest,
    ) -> RusotoFuture<AssociateRouteTableResult, AssociateRouteTableError>;

    /// <p>Associates a CIDR block with your subnet. You can only associate a single IPv6 CIDR block with your subnet. An IPv6 CIDR block must have a prefix length of /64.</p>
    fn associate_subnet_cidr_block(
        &self,
        input: AssociateSubnetCidrBlockRequest,
    ) -> RusotoFuture<AssociateSubnetCidrBlockResult, AssociateSubnetCidrBlockError>;

    /// <p>Associates the specified attachment with the specified transit gateway route table. You can associate only one route table with an attachment.</p>
    fn associate_transit_gateway_route_table(
        &self,
        input: AssociateTransitGatewayRouteTableRequest,
    ) -> RusotoFuture<AssociateTransitGatewayRouteTableResult, AssociateTransitGatewayRouteTableError>;

    /// <p>Associates a CIDR block with your VPC. You can associate a secondary IPv4 CIDR block, or you can associate an Amazon-provided IPv6 CIDR block. The IPv6 CIDR block size is fixed at /56.</p> <p>For more information about associating CIDR blocks with your VPC and applicable restrictions, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html#VPC_Sizing">VPC and Subnet Sizing</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn associate_vpc_cidr_block(
        &self,
        input: AssociateVpcCidrBlockRequest,
    ) -> RusotoFuture<AssociateVpcCidrBlockResult, AssociateVpcCidrBlockError>;

    /// <p>Links an EC2-Classic instance to a ClassicLink-enabled VPC through one or more of the VPC's security groups. You cannot link an EC2-Classic instance to more than one VPC at a time. You can only link an instance that's in the <code>running</code> state. An instance is automatically unlinked from a VPC when it's stopped - you can link it to the VPC again when you restart it.</p> <p>After you've linked an instance, you cannot change the VPC security groups that are associated with it. To change the security groups, you must first unlink the instance, and then link it again.</p> <p>Linking your instance to a VPC is sometimes referred to as <i>attaching</i> your instance.</p>
    fn attach_classic_link_vpc(
        &self,
        input: AttachClassicLinkVpcRequest,
    ) -> RusotoFuture<AttachClassicLinkVpcResult, AttachClassicLinkVpcError>;

    /// <p>Attaches an internet gateway to a VPC, enabling connectivity between the internet and the VPC. For more information about your VPC and internet gateway, see the <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/">Amazon Virtual Private Cloud User Guide</a>.</p>
    fn attach_internet_gateway(
        &self,
        input: AttachInternetGatewayRequest,
    ) -> RusotoFuture<(), AttachInternetGatewayError>;

    /// <p>Attaches a network interface to an instance.</p>
    fn attach_network_interface(
        &self,
        input: AttachNetworkInterfaceRequest,
    ) -> RusotoFuture<AttachNetworkInterfaceResult, AttachNetworkInterfaceError>;

    /// <p>Attaches an EBS volume to a running or stopped instance and exposes it to the instance with the specified device name.</p> <p>Encrypted EBS volumes may only be attached to instances that support Amazon EBS encryption. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>For a list of supported device names, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html">Attaching an EBS Volume to an Instance</a>. Any device names that aren't reserved for instance store volumes can be used for EBS volumes. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html">Amazon EC2 Instance Store</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>If a volume has an AWS Marketplace product code:</p> <ul> <li> <p>The volume can be attached only to a stopped instance.</p> </li> <li> <p>AWS Marketplace product codes are copied from the volume to the instance.</p> </li> <li> <p>You must be subscribed to the product.</p> </li> <li> <p>The instance type and operating system of the instance must support the product. For example, you can't detach a volume from a Windows instance and attach it to a Linux instance.</p> </li> </ul> <p>For more information about EBS volumes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html">Attaching Amazon EBS Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn attach_volume(
        &self,
        input: AttachVolumeRequest,
    ) -> RusotoFuture<VolumeAttachment, AttachVolumeError>;

    /// <p>Attaches a virtual private gateway to a VPC. You can attach one virtual private gateway to one VPC at a time.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
    fn attach_vpn_gateway(
        &self,
        input: AttachVpnGatewayRequest,
    ) -> RusotoFuture<AttachVpnGatewayResult, AttachVpnGatewayError>;

    /// <p>Adds an ingress authorization rule to a Client VPN endpoint. Ingress authorization rules act as firewall rules that grant access to networks. You must configure ingress authorization rules to enable clients to access resources in AWS or on-premises networks.</p>
    fn authorize_client_vpn_ingress(
        &self,
        input: AuthorizeClientVpnIngressRequest,
    ) -> RusotoFuture<AuthorizeClientVpnIngressResult, AuthorizeClientVpnIngressError>;

    /// <p>[VPC only] Adds the specified egress rules to a security group for use with a VPC.</p> <p>An outbound rule permits instances to send traffic to the specified IPv4 or IPv6 CIDR address ranges, or to the instances associated with the specified destination security groups.</p> <p>You specify a protocol for each rule (for example, TCP). For the TCP and UDP protocols, you must also specify the destination port or port range. For the ICMP protocol, you must also specify the ICMP type and code. You can use -1 for the type or code to mean all types or all codes.</p> <p>Rule changes are propagated to affected instances as quickly as possible. However, a small delay might occur.</p> <p>For more information about VPC security group limits, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC Limits</a>.</p>
    fn authorize_security_group_egress(
        &self,
        input: AuthorizeSecurityGroupEgressRequest,
    ) -> RusotoFuture<(), AuthorizeSecurityGroupEgressError>;

    /// <p>Adds the specified ingress rules to a security group.</p> <p>An inbound rule permits instances to receive traffic from the specified IPv4 or IPv6 CIDR address ranges, or from the instances associated with the specified destination security groups.</p> <p>You specify a protocol for each rule (for example, TCP). For TCP and UDP, you must also specify the destination port or port range. For ICMP/ICMPv6, you must also specify the ICMP/ICMPv6 type and code. You can use -1 to mean all types or all codes.</p> <p>Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.</p> <p>For more information about VPC security group limits, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC Limits</a>.</p>
    fn authorize_security_group_ingress(
        &self,
        input: AuthorizeSecurityGroupIngressRequest,
    ) -> RusotoFuture<(), AuthorizeSecurityGroupIngressError>;

    /// <p><p>Bundles an Amazon instance store-backed Windows instance.</p> <p>During bundling, only the root device volume (C:) is bundled. Data on other instance store volumes is not preserved.</p> <note> <p>This action is not applicable for Linux/Unix instances or Windows instances that are backed by Amazon EBS.</p> </note></p>
    fn bundle_instance(
        &self,
        input: BundleInstanceRequest,
    ) -> RusotoFuture<BundleInstanceResult, BundleInstanceError>;

    /// <p>Cancels a bundling operation for an instance store-backed Windows instance.</p>
    fn cancel_bundle_task(
        &self,
        input: CancelBundleTaskRequest,
    ) -> RusotoFuture<CancelBundleTaskResult, CancelBundleTaskError>;

    /// <p>Cancels the specified Capacity Reservation, releases the reserved capacity, and changes the Capacity Reservation's state to <code>cancelled</code>.</p> <p>Instances running in the reserved capacity continue running until you stop them. Stopped instances that target the Capacity Reservation can no longer launch. Modify these instances to either target a different Capacity Reservation, launch On-Demand Instance capacity, or run in any open Capacity Reservation that has matching attributes and sufficient capacity.</p>
    fn cancel_capacity_reservation(
        &self,
        input: CancelCapacityReservationRequest,
    ) -> RusotoFuture<CancelCapacityReservationResult, CancelCapacityReservationError>;

    /// <p>Cancels an active conversion task. The task can be the import of an instance or volume. The action removes all artifacts of the conversion, including a partially uploaded volume or instance. If the conversion is complete or is in the process of transferring the final disk image, the command fails and returns an exception.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html">Importing a Virtual Machine Using the Amazon EC2 CLI</a>.</p>
    fn cancel_conversion_task(
        &self,
        input: CancelConversionRequest,
    ) -> RusotoFuture<(), CancelConversionTaskError>;

    /// <p>Cancels an active export task. The request removes all artifacts of the export, including any partially-created Amazon S3 objects. If the export task is complete or is in the process of transferring the final disk image, the command fails and returns an error.</p>
    fn cancel_export_task(
        &self,
        input: CancelExportTaskRequest,
    ) -> RusotoFuture<(), CancelExportTaskError>;

    /// <p>Cancels an in-process import virtual machine or import snapshot task.</p>
    fn cancel_import_task(
        &self,
        input: CancelImportTaskRequest,
    ) -> RusotoFuture<CancelImportTaskResult, CancelImportTaskError>;

    /// <p>Cancels the specified Reserved Instance listing in the Reserved Instance Marketplace.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn cancel_reserved_instances_listing(
        &self,
        input: CancelReservedInstancesListingRequest,
    ) -> RusotoFuture<CancelReservedInstancesListingResult, CancelReservedInstancesListingError>;

    /// <p>Cancels the specified Spot Fleet requests.</p> <p>After you cancel a Spot Fleet request, the Spot Fleet launches no new Spot Instances. You must specify whether the Spot Fleet should also terminate its Spot Instances. If you terminate the instances, the Spot Fleet request enters the <code>cancelled_terminating</code> state. Otherwise, the Spot Fleet request enters the <code>cancelled_running</code> state and the instances continue to run until they are interrupted or you terminate them manually.</p>
    fn cancel_spot_fleet_requests(
        &self,
        input: CancelSpotFleetRequestsRequest,
    ) -> RusotoFuture<CancelSpotFleetRequestsResponse, EC2CancelSpotFleetRequestsError>;

    /// <p><p>Cancels one or more Spot Instance requests.</p> <important> <p>Canceling a Spot Instance request does not terminate running Spot Instances associated with the request.</p> </important></p>
    fn cancel_spot_instance_requests(
        &self,
        input: CancelSpotInstanceRequestsRequest,
    ) -> RusotoFuture<CancelSpotInstanceRequestsResult, CancelSpotInstanceRequestsError>;

    /// <p>Determines whether a product code is associated with an instance. This action can only be used by the owner of the product code. It is useful when a product code owner must verify whether another user's instance is eligible for support.</p>
    fn confirm_product_instance(
        &self,
        input: ConfirmProductInstanceRequest,
    ) -> RusotoFuture<ConfirmProductInstanceResult, ConfirmProductInstanceError>;

    /// <p>Copies the specified Amazon FPGA Image (AFI) to the current Region.</p>
    fn copy_fpga_image(
        &self,
        input: CopyFpgaImageRequest,
    ) -> RusotoFuture<CopyFpgaImageResult, CopyFpgaImageError>;

    /// <p>Initiates the copy of an AMI from the specified source Region to the current Region. You specify the destination Region by using its endpoint when making the request.</p> <p>Copies of encrypted backing snapshots for the AMI are encrypted. Copies of unencrypted backing snapshots remain unencrypted, unless you set <code>Encrypted</code> during the copy operation. You cannot create an unencrypted copy of an encrypted backing snapshot.</p> <p>For more information about the prerequisites and limits when copying an AMI, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/CopyingAMIs.html">Copying an AMI</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn copy_image(&self, input: CopyImageRequest) -> RusotoFuture<CopyImageResult, CopyImageError>;

    /// <p>Copies a point-in-time snapshot of an EBS volume and stores it in Amazon S3. You can copy the snapshot within the same Region or from one Region to another. You can use the snapshot to create EBS volumes or Amazon Machine Images (AMIs). The snapshot is copied to the regional endpoint that you send the HTTP request to.</p> <p>Copies of encrypted EBS snapshots remain encrypted. Copies of unencrypted snapshots remain unencrypted, unless the <code>Encrypted</code> flag is specified during the snapshot copy operation. By default, encrypted snapshot copies use the default AWS Key Management Service (AWS KMS) customer master key (CMK); however, you can specify a non-default CMK with the <code>KmsKeyId</code> parameter.</p> <p>To copy an encrypted snapshot that has been shared from another account, you must have permissions for the CMK used to encrypt the snapshot.</p> <p>Snapshots created by copying another snapshot have an arbitrary volume ID that should not be used for any purpose.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-copy-snapshot.html">Copying an Amazon EBS Snapshot</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn copy_snapshot(
        &self,
        input: CopySnapshotRequest,
    ) -> RusotoFuture<CopySnapshotResult, CopySnapshotError>;

    /// <p>Creates a new Capacity Reservation with the specified attributes.</p> <p>Capacity Reservations enable you to reserve capacity for your Amazon EC2 instances in a specific Availability Zone for any duration. This gives you the flexibility to selectively add capacity reservations and still get the Regional RI discounts for that usage. By creating Capacity Reservations, you ensure that you always have access to Amazon EC2 capacity when you need it, for as long as you need it. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html">Capacity Reservations</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Your request to create a Capacity Reservation could fail if Amazon EC2 does not have sufficient capacity to fulfill the request. If your request fails due to Amazon EC2 capacity constraints, either try again at a later time, try in a different Availability Zone, or request a smaller capacity reservation. If your application is flexible across instance types and sizes, try to create a Capacity Reservation with different instance attributes.</p> <p>Your request could also fail if the requested quantity exceeds your On-Demand Instance limit for the selected instance type. If your request fails due to limit constraints, increase your On-Demand Instance limit for the required instance type and try again. For more information about increasing your instance limits, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html">Amazon EC2 Service Limits</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn create_capacity_reservation(
        &self,
        input: CreateCapacityReservationRequest,
    ) -> RusotoFuture<CreateCapacityReservationResult, CreateCapacityReservationError>;

    /// <p>Creates a Client VPN endpoint. A Client VPN endpoint is the resource you create and configure to enable and manage client VPN sessions. It is the destination endpoint at which all client VPN sessions are terminated.</p>
    fn create_client_vpn_endpoint(
        &self,
        input: CreateClientVpnEndpointRequest,
    ) -> RusotoFuture<CreateClientVpnEndpointResult, CreateClientVpnEndpointError>;

    /// <p>Adds a route to a network to a Client VPN endpoint. Each Client VPN endpoint has a route table that describes the available destination network routes. Each route in the route table specifies the path for traﬃc to speciﬁc resources or networks.</p>
    fn create_client_vpn_route(
        &self,
        input: CreateClientVpnRouteRequest,
    ) -> RusotoFuture<CreateClientVpnRouteResult, CreateClientVpnRouteError>;

    /// <p><p>Provides information to AWS about your VPN customer gateway device. The customer gateway is the appliance at your end of the VPN connection. (The device on the AWS side of the VPN connection is the virtual private gateway.) You must provide the Internet-routable IP address of the customer gateway&#39;s external interface. The IP address must be static and may be behind a device performing network address translation (NAT).</p> <p>For devices that use Border Gateway Protocol (BGP), you can also provide the device&#39;s BGP Autonomous System Number (ASN). You can use an existing ASN assigned to your network. If you don&#39;t have an ASN already, you can use a private ASN (in the 64512 - 65534 range).</p> <note> <p>Amazon EC2 supports all 2-byte ASN numbers in the range of 1 - 65534, with the exception of 7224, which is reserved in the <code>us-east-1</code> Region, and 9059, which is reserved in the <code>eu-west-1</code> Region.</p> </note> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p> <important> <p>You cannot create more than one customer gateway with the same VPN type, IP address, and BGP ASN parameter values. If you run an identical request more than one time, the first request creates the customer gateway, and subsequent requests return information about the existing customer gateway. The subsequent requests do not create new customer gateway resources.</p> </important></p>
    fn create_customer_gateway(
        &self,
        input: CreateCustomerGatewayRequest,
    ) -> RusotoFuture<CreateCustomerGatewayResult, CreateCustomerGatewayError>;

    /// <p>Creates a default subnet with a size <code>/20</code> IPv4 CIDR block in the specified Availability Zone in your default VPC. You can have only one default subnet per Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html#create-default-subnet">Creating a Default Subnet</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn create_default_subnet(
        &self,
        input: CreateDefaultSubnetRequest,
    ) -> RusotoFuture<CreateDefaultSubnetResult, CreateDefaultSubnetError>;

    /// <p>Creates a default VPC with a size <code>/16</code> IPv4 CIDR block and a default subnet in each Availability Zone. For more information about the components of a default VPC, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html">Default VPC and Default Subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>. You cannot specify the components of the default VPC yourself.</p> <p>If you deleted your previous default VPC, you can create a default VPC. You cannot have more than one default VPC per Region.</p> <p>If your account supports EC2-Classic, you cannot use this action to create a default VPC in a Region that supports EC2-Classic. If you want a default VPC in a Region that supports EC2-Classic, see "I really want a default VPC for my existing EC2 account. Is that possible?" in the <a href="http://aws.amazon.com/vpc/faqs/#Default_VPCs">Default VPCs FAQ</a>.</p>
    fn create_default_vpc(
        &self,
        input: CreateDefaultVpcRequest,
    ) -> RusotoFuture<CreateDefaultVpcResult, CreateDefaultVpcError>;

    /// <p>Creates a set of DHCP options for your VPC. After creating the set, you must associate it with the VPC, causing all existing and new instances that you launch in the VPC to use this set of DHCP options. The following are the individual DHCP options you can specify. For more information about the options, see <a href="http://www.ietf.org/rfc/rfc2132.txt">RFC 2132</a>.</p> <ul> <li> <p> <code>domain-name-servers</code> - The IP addresses of up to four domain name servers, or AmazonProvidedDNS. The default DHCP option set specifies AmazonProvidedDNS. If specifying more than one domain name server, specify the IP addresses in a single parameter, separated by commas. ITo have your instance to receive a custom DNS hostname as specified in <code>domain-name</code>, you must set <code>domain-name-servers</code> to a custom DNS server.</p> </li> <li> <p> <code>domain-name</code> - If you're using AmazonProvidedDNS in <code>us-east-1</code>, specify <code>ec2.internal</code>. If you're using AmazonProvidedDNS in another Region, specify <code>region.compute.internal</code> (for example, <code>ap-northeast-1.compute.internal</code>). Otherwise, specify a domain name (for example, <code>MyCompany.com</code>). This value is used to complete unqualified DNS hostnames. <b>Important</b>: Some Linux operating systems accept multiple domain names separated by spaces. However, Windows and other Linux operating systems treat the value as a single domain, which results in unexpected behavior. If your DHCP options set is associated with a VPC that has instances with multiple operating systems, specify only one domain name.</p> </li> <li> <p> <code>ntp-servers</code> - The IP addresses of up to four Network Time Protocol (NTP) servers.</p> </li> <li> <p> <code>netbios-name-servers</code> - The IP addresses of up to four NetBIOS name servers.</p> </li> <li> <p> <code>netbios-node-type</code> - The NetBIOS node type (1, 2, 4, or 8). We recommend that you specify 2 (broadcast and multicast are not currently supported). For more information about these node types, see <a href="http://www.ietf.org/rfc/rfc2132.txt">RFC 2132</a>.</p> </li> </ul> <p>Your VPC automatically starts out with a set of DHCP options that includes only a DNS server that we provide (AmazonProvidedDNS). If you create a set of options, and if your VPC has an internet gateway, make sure to set the <code>domain-name-servers</code> option either to <code>AmazonProvidedDNS</code> or to a domain name server of your choice. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html">DHCP Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn create_dhcp_options(
        &self,
        input: CreateDhcpOptionsRequest,
    ) -> RusotoFuture<CreateDhcpOptionsResult, CreateDhcpOptionsError>;

    /// <p>[IPv6 only] Creates an egress-only internet gateway for your VPC. An egress-only internet gateway is used to enable outbound communication over IPv6 from instances in your VPC to the internet, and prevents hosts outside of your VPC from initiating an IPv6 connection with your instance.</p>
    fn create_egress_only_internet_gateway(
        &self,
        input: CreateEgressOnlyInternetGatewayRequest,
    ) -> RusotoFuture<CreateEgressOnlyInternetGatewayResult, CreateEgressOnlyInternetGatewayError>;

    /// <p>Launches an EC2 Fleet.</p> <p>You can create a single EC2 Fleet that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet.html">Launching an EC2 Fleet</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn create_fleet(
        &self,
        input: CreateFleetRequest,
    ) -> RusotoFuture<CreateFleetResult, CreateFleetError>;

    /// <p>Creates one or more flow logs to capture information about IP traffic for a specific network interface, subnet, or VPC. </p> <p>Flow log data for a monitored network interface is recorded as flow log records, which are log events consisting of fields that describe the traffic flow. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html#flow-log-records">Flow Log Records</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>When publishing to CloudWatch Logs, flow log records are published to a log group, and each network interface has a unique log stream in the log group. When publishing to Amazon S3, flow log records for all of the monitored network interfaces are published to a single log file object that is stored in the specified bucket.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html">VPC Flow Logs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn create_flow_logs(
        &self,
        input: CreateFlowLogsRequest,
    ) -> RusotoFuture<CreateFlowLogsResult, CreateFlowLogsError>;

    /// <p>Creates an Amazon FPGA Image (AFI) from the specified design checkpoint (DCP).</p> <p>The create operation is asynchronous. To verify that the AFI is ready for use, check the output logs.</p> <p>An AFI contains the FPGA bitstream that is ready to download to an FPGA. You can securely deploy an AFI on multiple FPGA-accelerated instances. For more information, see the <a href="https://github.com/aws/aws-fpga/">AWS FPGA Hardware Development Kit</a>.</p>
    fn create_fpga_image(
        &self,
        input: CreateFpgaImageRequest,
    ) -> RusotoFuture<CreateFpgaImageResult, CreateFpgaImageError>;

    /// <p>Creates an Amazon EBS-backed AMI from an Amazon EBS-backed instance that is either running or stopped.</p> <p>If you customized your instance with instance store volumes or EBS volumes in addition to the root device volume, the new AMI contains block device mapping information for those volumes. When you launch an instance from this new AMI, the instance automatically launches with those additional volumes.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html">Creating Amazon EBS-Backed Linux AMIs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn create_image(
        &self,
        input: CreateImageRequest,
    ) -> RusotoFuture<CreateImageResult, CreateImageError>;

    /// <p>Exports a running or stopped instance to an S3 bucket.</p> <p>For information about the supported operating systems, image formats, and known limitations for the types of instances you can export, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport.html">Exporting an Instance as a VM Using VM Import/Export</a> in the <i>VM Import/Export User Guide</i>.</p>
    fn create_instance_export_task(
        &self,
        input: CreateInstanceExportTaskRequest,
    ) -> RusotoFuture<CreateInstanceExportTaskResult, CreateInstanceExportTaskError>;

    /// <p>Creates an internet gateway for use with a VPC. After creating the internet gateway, you attach it to a VPC using <a>AttachInternetGateway</a>.</p> <p>For more information about your VPC and internet gateway, see the <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/">Amazon Virtual Private Cloud User Guide</a>.</p>
    fn create_internet_gateway(
        &self,
        input: CreateInternetGatewayRequest,
    ) -> RusotoFuture<CreateInternetGatewayResult, CreateInternetGatewayError>;

    /// <p>Creates a 2048-bit RSA key pair with the specified name. Amazon EC2 stores the public key and displays the private key for you to save to a file. The private key is returned as an unencrypted PEM encoded PKCS#1 private key. If a key with the specified name already exists, Amazon EC2 returns an error.</p> <p>You can have up to five thousand key pairs per Region.</p> <p>The key pair returned to you is available only in the Region in which you create it. If you prefer, you can create your own key pair using a third-party tool and upload it to any Region using <a>ImportKeyPair</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn create_key_pair(
        &self,
        input: CreateKeyPairRequest,
    ) -> RusotoFuture<KeyPair, CreateKeyPairError>;

    /// <p>Creates a launch template. A launch template contains the parameters to launch an instance. When you launch an instance using <a>RunInstances</a>, you can specify a launch template instead of providing the launch parameters in the request.</p>
    fn create_launch_template(
        &self,
        input: CreateLaunchTemplateRequest,
    ) -> RusotoFuture<CreateLaunchTemplateResult, CreateLaunchTemplateError>;

    /// <p>Creates a new version for a launch template. You can specify an existing version of launch template from which to base the new version.</p> <p>Launch template versions are numbered in the order in which they are created. You cannot specify, change, or replace the numbering of launch template versions.</p>
    fn create_launch_template_version(
        &self,
        input: CreateLaunchTemplateVersionRequest,
    ) -> RusotoFuture<CreateLaunchTemplateVersionResult, CreateLaunchTemplateVersionError>;

    /// <p>Creates a NAT gateway in the specified public subnet. This action creates a network interface in the specified subnet with a private IP address from the IP address range of the subnet. Internet-bound traffic from a private subnet can be routed to the NAT gateway, therefore enabling instances in the private subnet to connect to the internet. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">NAT Gateways</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn create_nat_gateway(
        &self,
        input: CreateNatGatewayRequest,
    ) -> RusotoFuture<CreateNatGatewayResult, CreateNatGatewayError>;

    /// <p>Creates a network ACL in a VPC. Network ACLs provide an optional layer of security (in addition to security groups) for the instances in your VPC.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn create_network_acl(
        &self,
        input: CreateNetworkAclRequest,
    ) -> RusotoFuture<CreateNetworkAclResult, CreateNetworkAclError>;

    /// <p>Creates an entry (a rule) in a network ACL with the specified rule number. Each network ACL has a set of numbered ingress rules and a separate set of numbered egress rules. When determining whether a packet should be allowed in or out of a subnet associated with the ACL, we process the entries in the ACL according to the rule numbers, in ascending order. Each network ACL has a set of ingress rules and a separate set of egress rules.</p> <p>We recommend that you leave room between the rule numbers (for example, 100, 110, 120, ...), and not number them one right after the other (for example, 101, 102, 103, ...). This makes it easier to add a rule between existing ones without having to renumber the rules.</p> <p>After you add an entry, you can't modify it; you must either replace it, or create an entry and delete the old one.</p> <p>For more information about network ACLs, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn create_network_acl_entry(
        &self,
        input: CreateNetworkAclEntryRequest,
    ) -> RusotoFuture<(), CreateNetworkAclEntryError>;

    /// <p>Creates a network interface in the specified subnet.</p> <p>For more information about network interfaces, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html">Elastic Network Interfaces</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn create_network_interface(
        &self,
        input: CreateNetworkInterfaceRequest,
    ) -> RusotoFuture<CreateNetworkInterfaceResult, CreateNetworkInterfaceError>;

    /// <p>Grants an AWS-authorized account permission to attach the specified network interface to an instance in their account.</p> <p>You can grant permission to a single AWS account only, and only one account at a time.</p>
    fn create_network_interface_permission(
        &self,
        input: CreateNetworkInterfacePermissionRequest,
    ) -> RusotoFuture<CreateNetworkInterfacePermissionResult, CreateNetworkInterfacePermissionError>;

    /// <p>Creates a placement group in which to launch instances. The strategy of the placement group determines how the instances are organized within the group. </p> <p>A <code>cluster</code> placement group is a logical grouping of instances within a single Availability Zone that benefit from low network latency, high network throughput. A <code>spread</code> placement group places instances on distinct hardware. A <code>partition</code> placement group places groups of instances in different partitions, where instances in one partition do not share the same hardware with instances in another partition.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn create_placement_group(
        &self,
        input: CreatePlacementGroupRequest,
    ) -> RusotoFuture<(), CreatePlacementGroupError>;

    /// <p>Creates a listing for Amazon EC2 Standard Reserved Instances to be sold in the Reserved Instance Marketplace. You can submit one Standard Reserved Instance listing at a time. To get a list of your Standard Reserved Instances, you can use the <a>DescribeReservedInstances</a> operation.</p> <note> <p>Only Standard Reserved Instances can be sold in the Reserved Instance Marketplace. Convertible Reserved Instances cannot be sold.</p> </note> <p>The Reserved Instance Marketplace matches sellers who want to resell Standard Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.</p> <p>To sell your Standard Reserved Instances, you must first register as a seller in the Reserved Instance Marketplace. After completing the registration process, you can create a Reserved Instance Marketplace listing of some or all of your Standard Reserved Instances, and specify the upfront price to receive for them. Your Standard Reserved Instance listings then become available for purchase. To view the details of your Standard Reserved Instance listing, you can use the <a>DescribeReservedInstancesListings</a> operation.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn create_reserved_instances_listing(
        &self,
        input: CreateReservedInstancesListingRequest,
    ) -> RusotoFuture<CreateReservedInstancesListingResult, CreateReservedInstancesListingError>;

    /// <p>Creates a route in a route table within a VPC.</p> <p>You must specify one of the following targets: internet gateway or virtual private gateway, NAT instance, NAT gateway, VPC peering connection, network interface, or egress-only internet gateway.</p> <p>When determining how to route traffic, we use the route with the most specific match. For example, traffic is destined for the IPv4 address <code>192.0.2.3</code>, and the route table includes the following two IPv4 routes:</p> <ul> <li> <p> <code>192.0.2.0/24</code> (goes to some target A)</p> </li> <li> <p> <code>192.0.2.0/28</code> (goes to some target B)</p> </li> </ul> <p>Both routes apply to the traffic destined for <code>192.0.2.3</code>. However, the second route in the list covers a smaller number of IP addresses and is therefore more specific, so we use that route to determine where to target the traffic.</p> <p>For more information about route tables, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn create_route(
        &self,
        input: CreateRouteRequest,
    ) -> RusotoFuture<CreateRouteResult, CreateRouteError>;

    /// <p>Creates a route table for the specified VPC. After you create a route table, you can add routes and associate the table with a subnet.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn create_route_table(
        &self,
        input: CreateRouteTableRequest,
    ) -> RusotoFuture<CreateRouteTableResult, CreateRouteTableError>;

    /// <p>Creates a security group.</p> <p>A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>When you create a security group, you specify a friendly name of your choice. You can have a security group for use in EC2-Classic with the same name as a security group for use in a VPC. However, you can't have two security groups for use in EC2-Classic with the same name or two security groups for use in a VPC with the same name.</p> <p>You have a default security group for use in EC2-Classic and a default security group for use in your VPC. If you don't specify a security group when you launch an instance, the instance is launched into the appropriate default security group. A default security group includes a default rule that grants instances unrestricted network access to each other.</p> <p>You can add or remove rules from your security groups using <a>AuthorizeSecurityGroupIngress</a>, <a>AuthorizeSecurityGroupEgress</a>, <a>RevokeSecurityGroupIngress</a>, and <a>RevokeSecurityGroupEgress</a>.</p> <p>For more information about VPC security group limits, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC Limits</a>.</p>
    fn create_security_group(
        &self,
        input: CreateSecurityGroupRequest,
    ) -> RusotoFuture<CreateSecurityGroupResult, CreateSecurityGroupError>;

    /// <p>Creates a snapshot of an EBS volume and stores it in Amazon S3. You can use snapshots for backups, to make copies of EBS volumes, and to save data before shutting down an instance.</p> <p>When a snapshot is created, any AWS Marketplace product codes that are associated with the source volume are propagated to the snapshot.</p> <p>You can take a snapshot of an attached volume that is in use. However, snapshots only capture data that has been written to your EBS volume at the time the snapshot command is issued; this may exclude any data that has been cached by any applications or the operating system. If you can pause any file systems on the volume long enough to take a snapshot, your snapshot should be complete. However, if you cannot pause all file writes to the volume, you should unmount the volume from within the instance, issue the snapshot command, and then remount the volume to ensure a consistent and complete snapshot. You may remount and use your volume while the snapshot status is <code>pending</code>.</p> <p>To create a snapshot for EBS volumes that serve as root devices, you should stop the instance before taking the snapshot.</p> <p>Snapshots that are taken from encrypted volumes are automatically encrypted. Volumes that are created from encrypted snapshots are also automatically encrypted. Your encrypted volumes and any associated snapshots always remain protected.</p> <p>You can tag your snapshots during creation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Amazon EC2 Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html">Amazon Elastic Block Store</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn create_snapshot(
        &self,
        input: CreateSnapshotRequest,
    ) -> RusotoFuture<Snapshot, CreateSnapshotError>;

    /// <p>Creates crash-consistent snapshots of multiple EBS volumes and stores the data in S3. Volumes are chosen by specifying an instance. Any attached volumes will produce one snapshot each that is crash-consistent across the instance. Boot volumes can be excluded by changing the paramaters. </p>
    fn create_snapshots(
        &self,
        input: CreateSnapshotsRequest,
    ) -> RusotoFuture<CreateSnapshotsResult, CreateSnapshotsError>;

    /// <p>Creates a data feed for Spot Instances, enabling you to view Spot Instance usage logs. You can create one data feed per AWS account. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html">Spot Instance Data Feed</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    fn create_spot_datafeed_subscription(
        &self,
        input: CreateSpotDatafeedSubscriptionRequest,
    ) -> RusotoFuture<CreateSpotDatafeedSubscriptionResult, CreateSpotDatafeedSubscriptionError>;

    /// <p>Creates a subnet in an existing VPC.</p> <p>When you create each subnet, you provide the VPC ID and IPv4 CIDR block for the subnet. After you create a subnet, you can't change its CIDR block. The size of the subnet's IPv4 CIDR block can be the same as a VPC's IPv4 CIDR block, or a subset of a VPC's IPv4 CIDR block. If you create more than one subnet in a VPC, the subnets' CIDR blocks must not overlap. The smallest IPv4 subnet (and VPC) you can create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4 addresses).</p> <p>If you've associated an IPv6 CIDR block with your VPC, you can create a subnet with an IPv6 CIDR block that uses a /64 prefix length. </p> <important> <p>AWS reserves both the first four and the last IPv4 address in each subnet's CIDR block. They're not available for use.</p> </important> <p>If you add more than one subnet to a VPC, they're set up in a star topology with a logical router in the middle.</p> <p>If you launch an instance in a VPC using an Amazon EBS-backed AMI, the IP address doesn't change if you stop and restart the instance (unlike a similar instance launched outside a VPC, which gets a new IP address when restarted). It's therefore possible to have a subnet with no running instances (they're all stopped), but no remaining IP addresses available.</p> <p>For more information about subnets, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html">Your VPC and Subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn create_subnet(
        &self,
        input: CreateSubnetRequest,
    ) -> RusotoFuture<CreateSubnetResult, CreateSubnetError>;

    /// <p>Adds or overwrites the specified tags for the specified Amazon EC2 resource or resources. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value. Tag keys must be unique per resource.</p> <p>For more information about tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For more information about creating IAM policies that control users' access to resources based on tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-iam-actions-resources.html">Supported Resource-Level Permissions for Amazon EC2 API Actions</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn create_tags(&self, input: CreateTagsRequest) -> RusotoFuture<(), CreateTagsError>;

    /// <p>Creates a transit gateway.</p> <p>You can use a transit gateway to interconnect your virtual private clouds (VPC) and on-premises networks. After the transit gateway enters the <code>available</code> state, you can attach your VPCs and VPN connections to the transit gateway.</p> <p>To attach your VPCs, use <a>CreateTransitGatewayVpcAttachment</a>.</p> <p>To attach a VPN connection, use <a>CreateCustomerGateway</a> to create a customer gateway and specify the ID of the customer gateway and the ID of the transit gateway in a call to <a>CreateVpnConnection</a>.</p> <p>When you create a transit gateway, we create a default transit gateway route table and use it as the default association route table and the default propagation route table. You can use <a>CreateTransitGatewayRouteTable</a> to create additional transit gateway route tables. If you disable automatic route propagation, we do not create a default transit gateway route table. You can use <a>EnableTransitGatewayRouteTablePropagation</a> to propagate routes from a resource attachment to a transit gateway route table. If you disable automatic associations, you can use <a>AssociateTransitGatewayRouteTable</a> to associate a resource attachment with a transit gateway route table.</p>
    fn create_transit_gateway(
        &self,
        input: CreateTransitGatewayRequest,
    ) -> RusotoFuture<CreateTransitGatewayResult, CreateTransitGatewayError>;

    /// <p>Creates a static route for the specified transit gateway route table.</p>
    fn create_transit_gateway_route(
        &self,
        input: CreateTransitGatewayRouteRequest,
    ) -> RusotoFuture<CreateTransitGatewayRouteResult, CreateTransitGatewayRouteError>;

    /// <p>Creates a route table for the specified transit gateway.</p>
    fn create_transit_gateway_route_table(
        &self,
        input: CreateTransitGatewayRouteTableRequest,
    ) -> RusotoFuture<CreateTransitGatewayRouteTableResult, CreateTransitGatewayRouteTableError>;

    /// <p>Attaches the specified VPC to the specified transit gateway.</p> <p>If you attach a VPC with a CIDR range that overlaps the CIDR range of a VPC that is already attached, the new VPC CIDR range is not propagated to the default propagation route table.</p> <p>To send VPC traffic to an attached transit gateway, add a route to the VPC route table using <a>CreateRoute</a>.</p>
    fn create_transit_gateway_vpc_attachment(
        &self,
        input: CreateTransitGatewayVpcAttachmentRequest,
    ) -> RusotoFuture<CreateTransitGatewayVpcAttachmentResult, CreateTransitGatewayVpcAttachmentError>;

    /// <p>Creates an EBS volume that can be attached to an instance in the same Availability Zone. The volume is created in the regional endpoint that you send the HTTP request to. For more information see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p> <p>You can create a new empty volume or restore a volume from an EBS snapshot. Any AWS Marketplace product codes from the snapshot are propagated to the volume.</p> <p>You can create encrypted volumes with the <code>Encrypted</code> parameter. Encrypted volumes may only be attached to instances that support Amazon EBS encryption. Volumes that are created from encrypted snapshots are also automatically encrypted. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>You can tag your volumes during creation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Amazon EC2 Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-volume.html">Creating an Amazon EBS Volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn create_volume(&self, input: CreateVolumeRequest) -> RusotoFuture<Volume, CreateVolumeError>;

    /// <p>Creates a VPC with the specified IPv4 CIDR block. The smallest VPC you can create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4 addresses). For more information about how large to make your VPC, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html">Your VPC and Subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>You can optionally request an Amazon-provided IPv6 CIDR block for the VPC. The IPv6 CIDR block uses a /56 prefix length, and is allocated from Amazon's pool of IPv6 addresses. You cannot choose the IPv6 range for your VPC.</p> <p>By default, each instance you launch in the VPC has the default DHCP options, which include only a default DNS server that we provide (AmazonProvidedDNS). For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html">DHCP Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>You can specify the instance tenancy value for the VPC when you create it. You can't change this value for the VPC after you create it. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html">Dedicated Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn create_vpc(&self, input: CreateVpcRequest) -> RusotoFuture<CreateVpcResult, CreateVpcError>;

    /// <p>Creates a VPC endpoint for a specified service. An endpoint enables you to create a private connection between your VPC and the service. The service may be provided by AWS, an AWS Marketplace partner, or another AWS account. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-endpoints.html">VPC Endpoints</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>A <code>gateway</code> endpoint serves as a target for a route in your route table for traffic destined for the AWS service. You can specify an endpoint policy to attach to the endpoint that will control access to the service from your VPC. You can also specify the VPC route tables that use the endpoint.</p> <p>An <code>interface</code> endpoint is a network interface in your subnet that serves as an endpoint for communicating with the specified service. You can specify the subnets in which to create an endpoint, and the security groups to associate with the endpoint network interface.</p> <p>Use <a>DescribeVpcEndpointServices</a> to get a list of supported services.</p>
    fn create_vpc_endpoint(
        &self,
        input: CreateVpcEndpointRequest,
    ) -> RusotoFuture<CreateVpcEndpointResult, CreateVpcEndpointError>;

    /// <p>Creates a connection notification for a specified VPC endpoint or VPC endpoint service. A connection notification notifies you of specific endpoint events. You must create an SNS topic to receive notifications. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Create a Topic</a> in the <i>Amazon Simple Notification Service Developer Guide</i>.</p> <p>You can create a connection notification for interface endpoints only.</p>
    fn create_vpc_endpoint_connection_notification(
        &self,
        input: CreateVpcEndpointConnectionNotificationRequest,
    ) -> RusotoFuture<
        CreateVpcEndpointConnectionNotificationResult,
        CreateVpcEndpointConnectionNotificationError,
    >;

    /// <p>Creates a VPC endpoint service configuration to which service consumers (AWS accounts, IAM users, and IAM roles) can connect. Service consumers can create an interface VPC endpoint to connect to your service.</p> <p>To create an endpoint service configuration, you must first create a Network Load Balancer for your service. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/endpoint-service.html">VPC Endpoint Services</a> in the <i>Amazon Virtual Private Cloud User Guide</i>. </p>
    fn create_vpc_endpoint_service_configuration(
        &self,
        input: CreateVpcEndpointServiceConfigurationRequest,
    ) -> RusotoFuture<
        CreateVpcEndpointServiceConfigurationResult,
        CreateVpcEndpointServiceConfigurationError,
    >;

    /// <p>Requests a VPC peering connection between two VPCs: a requester VPC that you own and an accepter VPC with which to create the connection. The accepter VPC can belong to another AWS account and can be in a different Region to the requester VPC. The requester VPC and accepter VPC cannot have overlapping CIDR blocks.</p> <note> <p>Limitations and rules apply to a VPC peering connection. For more information, see the <a href="https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/vpc-peering-basics.html#vpc-peering-limitations">limitations</a> section in the <i>VPC Peering Guide</i>.</p> </note> <p>The owner of the accepter VPC must accept the peering request to activate the peering connection. The VPC peering connection request expires after 7 days, after which it cannot be accepted or rejected.</p> <p>If you create a VPC peering connection request between VPCs with overlapping CIDR blocks, the VPC peering connection has a status of <code>failed</code>.</p>
    fn create_vpc_peering_connection(
        &self,
        input: CreateVpcPeeringConnectionRequest,
    ) -> RusotoFuture<CreateVpcPeeringConnectionResult, CreateVpcPeeringConnectionError>;

    /// <p>Creates a VPN connection between an existing virtual private gateway and a VPN customer gateway. The supported connection types are <code>ipsec.1</code> and <code>ipsec.2</code>.</p> <p>The response includes information that you need to give to your network administrator to configure your customer gateway.</p> <important> <p>We strongly recommend that you use HTTPS when calling this operation because the response contains sensitive cryptographic information for configuring your customer gateway.</p> </important> <p>If you decide to shut down your VPN connection for any reason and later create a new VPN connection, you must reconfigure your customer gateway with the new information returned from this call.</p> <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
    fn create_vpn_connection(
        &self,
        input: CreateVpnConnectionRequest,
    ) -> RusotoFuture<CreateVpnConnectionResult, CreateVpnConnectionError>;

    /// <p>Creates a static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
    fn create_vpn_connection_route(
        &self,
        input: CreateVpnConnectionRouteRequest,
    ) -> RusotoFuture<(), CreateVpnConnectionRouteError>;

    /// <p>Creates a virtual private gateway. A virtual private gateway is the endpoint on the VPC side of your VPN connection. You can create a virtual private gateway before creating the VPC itself.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
    fn create_vpn_gateway(
        &self,
        input: CreateVpnGatewayRequest,
    ) -> RusotoFuture<CreateVpnGatewayResult, CreateVpnGatewayError>;

    /// <p>Deletes the specified Client VPN endpoint. You must disassociate all target networks before you can delete a Client VPN endpoint.</p>
    fn delete_client_vpn_endpoint(
        &self,
        input: DeleteClientVpnEndpointRequest,
    ) -> RusotoFuture<DeleteClientVpnEndpointResult, DeleteClientVpnEndpointError>;

    /// <p>Deletes a route from a Client VPN endpoint. You can only delete routes that you manually added using the <b>CreateClientVpnRoute</b> action. You cannot delete routes that were automatically added when associating a subnet. To remove routes that have been automatically added, disassociate the target subnet from the Client VPN endpoint.</p>
    fn delete_client_vpn_route(
        &self,
        input: DeleteClientVpnRouteRequest,
    ) -> RusotoFuture<DeleteClientVpnRouteResult, DeleteClientVpnRouteError>;

    /// <p>Deletes the specified customer gateway. You must delete the VPN connection before you can delete the customer gateway.</p>
    fn delete_customer_gateway(
        &self,
        input: DeleteCustomerGatewayRequest,
    ) -> RusotoFuture<(), DeleteCustomerGatewayError>;

    /// <p>Deletes the specified set of DHCP options. You must disassociate the set of DHCP options before you can delete it. You can disassociate the set of DHCP options by associating either a new set of options or the default set of options with the VPC.</p>
    fn delete_dhcp_options(
        &self,
        input: DeleteDhcpOptionsRequest,
    ) -> RusotoFuture<(), DeleteDhcpOptionsError>;

    /// <p>Deletes an egress-only internet gateway.</p>
    fn delete_egress_only_internet_gateway(
        &self,
        input: DeleteEgressOnlyInternetGatewayRequest,
    ) -> RusotoFuture<DeleteEgressOnlyInternetGatewayResult, DeleteEgressOnlyInternetGatewayError>;

    /// <p>Deletes the specified EC2 Fleet.</p> <p>After you delete an EC2 Fleet, it launches no new instances. You must specify whether an EC2 Fleet should also terminate its instances. If you terminate the instances, the EC2 Fleet enters the <code>deleted_terminating</code> state. Otherwise, the EC2 Fleet enters the <code>deleted_running</code> state, and the instances continue to run until they are interrupted or you terminate them manually. </p>
    fn delete_fleets(
        &self,
        input: DeleteFleetsRequest,
    ) -> RusotoFuture<DeleteFleetsResult, DeleteFleetsError>;

    /// <p>Deletes one or more flow logs.</p>
    fn delete_flow_logs(
        &self,
        input: DeleteFlowLogsRequest,
    ) -> RusotoFuture<DeleteFlowLogsResult, DeleteFlowLogsError>;

    /// <p>Deletes the specified Amazon FPGA Image (AFI).</p>
    fn delete_fpga_image(
        &self,
        input: DeleteFpgaImageRequest,
    ) -> RusotoFuture<DeleteFpgaImageResult, DeleteFpgaImageError>;

    /// <p>Deletes the specified internet gateway. You must detach the internet gateway from the VPC before you can delete it.</p>
    fn delete_internet_gateway(
        &self,
        input: DeleteInternetGatewayRequest,
    ) -> RusotoFuture<(), DeleteInternetGatewayError>;

    /// <p>Deletes the specified key pair, by removing the public key from Amazon EC2.</p>
    fn delete_key_pair(&self, input: DeleteKeyPairRequest) -> RusotoFuture<(), DeleteKeyPairError>;

    /// <p>Deletes a launch template. Deleting a launch template deletes all of its versions.</p>
    fn delete_launch_template(
        &self,
        input: DeleteLaunchTemplateRequest,
    ) -> RusotoFuture<DeleteLaunchTemplateResult, DeleteLaunchTemplateError>;

    /// <p>Deletes one or more versions of a launch template. You cannot delete the default version of a launch template; you must first assign a different version as the default. If the default version is the only version for the launch template, you must delete the entire launch template using <a>DeleteLaunchTemplate</a>.</p>
    fn delete_launch_template_versions(
        &self,
        input: DeleteLaunchTemplateVersionsRequest,
    ) -> RusotoFuture<DeleteLaunchTemplateVersionsResult, DeleteLaunchTemplateVersionsError>;

    /// <p>Deletes the specified NAT gateway. Deleting a NAT gateway disassociates its Elastic IP address, but does not release the address from your account. Deleting a NAT gateway does not delete any NAT gateway routes in your route tables.</p>
    fn delete_nat_gateway(
        &self,
        input: DeleteNatGatewayRequest,
    ) -> RusotoFuture<DeleteNatGatewayResult, DeleteNatGatewayError>;

    /// <p>Deletes the specified network ACL. You can't delete the ACL if it's associated with any subnets. You can't delete the default network ACL.</p>
    fn delete_network_acl(
        &self,
        input: DeleteNetworkAclRequest,
    ) -> RusotoFuture<(), DeleteNetworkAclError>;

    /// <p>Deletes the specified ingress or egress entry (rule) from the specified network ACL.</p>
    fn delete_network_acl_entry(
        &self,
        input: DeleteNetworkAclEntryRequest,
    ) -> RusotoFuture<(), DeleteNetworkAclEntryError>;

    /// <p>Deletes the specified network interface. You must detach the network interface before you can delete it.</p>
    fn delete_network_interface(
        &self,
        input: DeleteNetworkInterfaceRequest,
    ) -> RusotoFuture<(), DeleteNetworkInterfaceError>;

    /// <p>Deletes a permission for a network interface. By default, you cannot delete the permission if the account for which you're removing the permission has attached the network interface to an instance. However, you can force delete the permission, regardless of any attachment.</p>
    fn delete_network_interface_permission(
        &self,
        input: DeleteNetworkInterfacePermissionRequest,
    ) -> RusotoFuture<DeleteNetworkInterfacePermissionResult, DeleteNetworkInterfacePermissionError>;

    /// <p>Deletes the specified placement group. You must terminate all instances in the placement group before you can delete the placement group. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn delete_placement_group(
        &self,
        input: DeletePlacementGroupRequest,
    ) -> RusotoFuture<(), DeletePlacementGroupError>;

    /// <p>Deletes the specified route from the specified route table.</p>
    fn delete_route(&self, input: DeleteRouteRequest) -> RusotoFuture<(), DeleteRouteError>;

    /// <p>Deletes the specified route table. You must disassociate the route table from any subnets before you can delete it. You can't delete the main route table.</p>
    fn delete_route_table(
        &self,
        input: DeleteRouteTableRequest,
    ) -> RusotoFuture<(), DeleteRouteTableError>;

    /// <p>Deletes a security group.</p> <p>If you attempt to delete a security group that is associated with an instance, or is referenced by another security group, the operation fails with <code>InvalidGroup.InUse</code> in EC2-Classic or <code>DependencyViolation</code> in EC2-VPC.</p>
    fn delete_security_group(
        &self,
        input: DeleteSecurityGroupRequest,
    ) -> RusotoFuture<(), DeleteSecurityGroupError>;

    /// <p>Deletes the specified snapshot.</p> <p>When you make periodic snapshots of a volume, the snapshots are incremental, and only the blocks on the device that have changed since your last snapshot are saved in the new snapshot. When you delete a snapshot, only the data not needed for any other snapshot is removed. So regardless of which prior snapshots have been deleted, all active snapshots will have access to all the information needed to restore the volume.</p> <p>You cannot delete a snapshot of the root device of an EBS volume used by a registered AMI. You must first de-register the AMI before you can delete the snapshot.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-snapshot.html">Deleting an Amazon EBS Snapshot</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn delete_snapshot(
        &self,
        input: DeleteSnapshotRequest,
    ) -> RusotoFuture<(), DeleteSnapshotError>;

    /// <p>Deletes the data feed for Spot Instances.</p>
    fn delete_spot_datafeed_subscription(
        &self,
        input: DeleteSpotDatafeedSubscriptionRequest,
    ) -> RusotoFuture<(), DeleteSpotDatafeedSubscriptionError>;

    /// <p>Deletes the specified subnet. You must terminate all running instances in the subnet before you can delete the subnet.</p>
    fn delete_subnet(&self, input: DeleteSubnetRequest) -> RusotoFuture<(), DeleteSubnetError>;

    /// <p>Deletes the specified set of tags from the specified set of resources.</p> <p>To list the current tags, use <a>DescribeTags</a>. For more information about tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn delete_tags(&self, input: DeleteTagsRequest) -> RusotoFuture<(), DeleteTagsError>;

    /// <p>Deletes the specified transit gateway.</p>
    fn delete_transit_gateway(
        &self,
        input: DeleteTransitGatewayRequest,
    ) -> RusotoFuture<DeleteTransitGatewayResult, DeleteTransitGatewayError>;

    /// <p>Deletes the specified route from the specified transit gateway route table.</p>
    fn delete_transit_gateway_route(
        &self,
        input: DeleteTransitGatewayRouteRequest,
    ) -> RusotoFuture<DeleteTransitGatewayRouteResult, DeleteTransitGatewayRouteError>;

    /// <p>Deletes the specified transit gateway route table. You must disassociate the route table from any transit gateway route tables before you can delete it.</p>
    fn delete_transit_gateway_route_table(
        &self,
        input: DeleteTransitGatewayRouteTableRequest,
    ) -> RusotoFuture<DeleteTransitGatewayRouteTableResult, DeleteTransitGatewayRouteTableError>;

    /// <p>Deletes the specified VPC attachment.</p>
    fn delete_transit_gateway_vpc_attachment(
        &self,
        input: DeleteTransitGatewayVpcAttachmentRequest,
    ) -> RusotoFuture<DeleteTransitGatewayVpcAttachmentResult, DeleteTransitGatewayVpcAttachmentError>;

    /// <p>Deletes the specified EBS volume. The volume must be in the <code>available</code> state (not attached to an instance).</p> <p>The volume can remain in the <code>deleting</code> state for several minutes.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-volume.html">Deleting an Amazon EBS Volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn delete_volume(&self, input: DeleteVolumeRequest) -> RusotoFuture<(), DeleteVolumeError>;

    /// <p>Deletes the specified VPC. You must detach or delete all gateways and resources that are associated with the VPC before you can delete it. For example, you must terminate all instances running in the VPC, delete all security groups associated with the VPC (except the default one), delete all route tables associated with the VPC (except the default one), and so on.</p>
    fn delete_vpc(&self, input: DeleteVpcRequest) -> RusotoFuture<(), DeleteVpcError>;

    /// <p>Deletes one or more VPC endpoint connection notifications.</p>
    fn delete_vpc_endpoint_connection_notifications(
        &self,
        input: DeleteVpcEndpointConnectionNotificationsRequest,
    ) -> RusotoFuture<
        DeleteVpcEndpointConnectionNotificationsResult,
        DeleteVpcEndpointConnectionNotificationsError,
    >;

    /// <p>Deletes one or more VPC endpoint service configurations in your account. Before you delete the endpoint service configuration, you must reject any <code>Available</code> or <code>PendingAcceptance</code> interface endpoint connections that are attached to the service.</p>
    fn delete_vpc_endpoint_service_configurations(
        &self,
        input: DeleteVpcEndpointServiceConfigurationsRequest,
    ) -> RusotoFuture<
        DeleteVpcEndpointServiceConfigurationsResult,
        DeleteVpcEndpointServiceConfigurationsError,
    >;

    /// <p>Deletes one or more specified VPC endpoints. Deleting a gateway endpoint also deletes the endpoint routes in the route tables that were associated with the endpoint. Deleting an interface endpoint deletes the endpoint network interfaces.</p>
    fn delete_vpc_endpoints(
        &self,
        input: DeleteVpcEndpointsRequest,
    ) -> RusotoFuture<DeleteVpcEndpointsResult, DeleteVpcEndpointsError>;

    /// <p>Deletes a VPC peering connection. Either the owner of the requester VPC or the owner of the accepter VPC can delete the VPC peering connection if it's in the <code>active</code> state. The owner of the requester VPC can delete a VPC peering connection in the <code>pending-acceptance</code> state. You cannot delete a VPC peering connection that's in the <code>failed</code> state.</p>
    fn delete_vpc_peering_connection(
        &self,
        input: DeleteVpcPeeringConnectionRequest,
    ) -> RusotoFuture<DeleteVpcPeeringConnectionResult, DeleteVpcPeeringConnectionError>;

    /// <p>Deletes the specified VPN connection.</p> <p>If you're deleting the VPC and its associated components, we recommend that you detach the virtual private gateway from the VPC and delete the VPC before deleting the VPN connection. If you believe that the tunnel credentials for your VPN connection have been compromised, you can delete the VPN connection and create a new one that has new keys, without needing to delete the VPC or virtual private gateway. If you create a new VPN connection, you must reconfigure the customer gateway using the new configuration information returned with the new VPN connection ID.</p>
    fn delete_vpn_connection(
        &self,
        input: DeleteVpnConnectionRequest,
    ) -> RusotoFuture<(), DeleteVpnConnectionError>;

    /// <p>Deletes the specified static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.</p>
    fn delete_vpn_connection_route(
        &self,
        input: DeleteVpnConnectionRouteRequest,
    ) -> RusotoFuture<(), DeleteVpnConnectionRouteError>;

    /// <p>Deletes the specified virtual private gateway. We recommend that before you delete a virtual private gateway, you detach it from the VPC and delete the VPN connection. Note that you don't need to delete the virtual private gateway if you plan to delete and recreate the VPN connection between your VPC and your network.</p>
    fn delete_vpn_gateway(
        &self,
        input: DeleteVpnGatewayRequest,
    ) -> RusotoFuture<(), DeleteVpnGatewayError>;

    /// <p>Releases the specified address range that you provisioned for use with your AWS resources through bring your own IP addresses (BYOIP) and deletes the corresponding address pool.</p> <p>Before you can release an address range, you must stop advertising it using <a>WithdrawByoipCidr</a> and you must not have any IP addresses allocated from its address range.</p>
    fn deprovision_byoip_cidr(
        &self,
        input: DeprovisionByoipCidrRequest,
    ) -> RusotoFuture<DeprovisionByoipCidrResult, DeprovisionByoipCidrError>;

    /// <p>Deregisters the specified AMI. After you deregister an AMI, it can't be used to launch new instances; however, it doesn't affect any instances that you've already launched from the AMI. You'll continue to incur usage costs for those instances until you terminate them.</p> <p>When you deregister an Amazon EBS-backed AMI, it doesn't affect the snapshot that was created for the root volume of the instance during the AMI creation process. When you deregister an instance store-backed AMI, it doesn't affect the files that you uploaded to Amazon S3 when you created the AMI.</p>
    fn deregister_image(
        &self,
        input: DeregisterImageRequest,
    ) -> RusotoFuture<(), DeregisterImageError>;

    /// <p><p>Describes attributes of your AWS account. The following are the supported account attributes:</p> <ul> <li> <p> <code>supported-platforms</code>: Indicates whether your account can launch instances into EC2-Classic and EC2-VPC, or only into EC2-VPC.</p> </li> <li> <p> <code>default-vpc</code>: The ID of the default VPC for your account, or <code>none</code>.</p> </li> <li> <p> <code>max-instances</code>: The maximum number of On-Demand Instances that you can run.</p> </li> <li> <p> <code>vpc-max-security-groups-per-interface</code>: The maximum number of security groups that you can assign to a network interface.</p> </li> <li> <p> <code>max-elastic-ips</code>: The maximum number of Elastic IP addresses that you can allocate for use with EC2-Classic. </p> </li> <li> <p> <code>vpc-max-elastic-ips</code>: The maximum number of Elastic IP addresses that you can allocate for use with EC2-VPC.</p> </li> </ul></p>
    fn describe_account_attributes(
        &self,
        input: DescribeAccountAttributesRequest,
    ) -> RusotoFuture<DescribeAccountAttributesResult, DescribeAccountAttributesError>;

    /// <p>Describes the specified Elastic IP addresses or all of your Elastic IP addresses.</p> <p>An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_addresses(
        &self,
        input: DescribeAddressesRequest,
    ) -> RusotoFuture<DescribeAddressesResult, DescribeAddressesError>;

    /// <p>Describes the longer ID format settings for all resource types in a specific Region. This request is useful for performing a quick audit to determine whether a specific Region is fully opted in for longer IDs (17-character IDs).</p> <p>This request only returns information about resource types that support longer IDs.</p> <p>The following resource types support longer IDs: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p>
    fn describe_aggregate_id_format(
        &self,
        input: DescribeAggregateIdFormatRequest,
    ) -> RusotoFuture<DescribeAggregateIdFormatResult, DescribeAggregateIdFormatError>;

    /// <p>Describes the Availability Zones that are available to you. The results include zones only for the Region you're currently using. If there is an event impacting an Availability Zone, you can use this request to view the state and any provided message for that Availability Zone.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html">Regions and Availability Zones</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_availability_zones(
        &self,
        input: DescribeAvailabilityZonesRequest,
    ) -> RusotoFuture<DescribeAvailabilityZonesResult, DescribeAvailabilityZonesError>;

    /// <p><p>Describes the specified bundle tasks or all of your bundle tasks.</p> <note> <p>Completed bundle tasks are listed for only a limited time. If your bundle task is no longer in the list, you can still register an AMI from it. Just use <code>RegisterImage</code> with the Amazon S3 bucket name and image manifest name you provided to the bundle task.</p> </note></p>
    fn describe_bundle_tasks(
        &self,
        input: DescribeBundleTasksRequest,
    ) -> RusotoFuture<DescribeBundleTasksResult, DescribeBundleTasksError>;

    /// <p>Describes the IP address ranges that were specified in calls to <a>ProvisionByoipCidr</a>.</p> <p>To describe the address pools that were created when you provisioned the address ranges, use <a>DescribePublicIpv4Pools</a>.</p>
    fn describe_byoip_cidrs(
        &self,
        input: DescribeByoipCidrsRequest,
    ) -> RusotoFuture<DescribeByoipCidrsResult, DescribeByoipCidrsError>;

    /// <p>Describes one or more of your Capacity Reservations. The results describe only the Capacity Reservations in the AWS Region that you're currently using.</p>
    fn describe_capacity_reservations(
        &self,
        input: DescribeCapacityReservationsRequest,
    ) -> RusotoFuture<DescribeCapacityReservationsResult, DescribeCapacityReservationsError>;

    /// <p>Describes one or more of your linked EC2-Classic instances. This request only returns information about EC2-Classic instances linked to a VPC through ClassicLink. You cannot use this request to return information about other instances.</p>
    fn describe_classic_link_instances(
        &self,
        input: DescribeClassicLinkInstancesRequest,
    ) -> RusotoFuture<DescribeClassicLinkInstancesResult, DescribeClassicLinkInstancesError>;

    /// <p>Describes the authorization rules for a specified Client VPN endpoint.</p>
    fn describe_client_vpn_authorization_rules(
        &self,
        input: DescribeClientVpnAuthorizationRulesRequest,
    ) -> RusotoFuture<
        DescribeClientVpnAuthorizationRulesResult,
        DescribeClientVpnAuthorizationRulesError,
    >;

    /// <p>Describes active client connections and connections that have been terminated within the last 60 minutes for the specified Client VPN endpoint.</p>
    fn describe_client_vpn_connections(
        &self,
        input: DescribeClientVpnConnectionsRequest,
    ) -> RusotoFuture<DescribeClientVpnConnectionsResult, DescribeClientVpnConnectionsError>;

    /// <p>Describes one or more Client VPN endpoints in the account.</p>
    fn describe_client_vpn_endpoints(
        &self,
        input: DescribeClientVpnEndpointsRequest,
    ) -> RusotoFuture<DescribeClientVpnEndpointsResult, DescribeClientVpnEndpointsError>;

    /// <p>Describes the routes for the specified Client VPN endpoint.</p>
    fn describe_client_vpn_routes(
        &self,
        input: DescribeClientVpnRoutesRequest,
    ) -> RusotoFuture<DescribeClientVpnRoutesResult, DescribeClientVpnRoutesError>;

    /// <p>Describes the target networks associated with the specified Client VPN endpoint.</p>
    fn describe_client_vpn_target_networks(
        &self,
        input: DescribeClientVpnTargetNetworksRequest,
    ) -> RusotoFuture<DescribeClientVpnTargetNetworksResult, DescribeClientVpnTargetNetworksError>;

    /// <p>Describes the specified conversion tasks or all your conversion tasks. For more information, see the <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/">VM Import/Export User Guide</a>.</p> <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
    fn describe_conversion_tasks(
        &self,
        input: DescribeConversionTasksRequest,
    ) -> RusotoFuture<DescribeConversionTasksResult, DescribeConversionTasksError>;

    /// <p>Describes one or more of your VPN customer gateways.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
    fn describe_customer_gateways(
        &self,
        input: DescribeCustomerGatewaysRequest,
    ) -> RusotoFuture<DescribeCustomerGatewaysResult, DescribeCustomerGatewaysError>;

    /// <p>Describes one or more of your DHCP options sets.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html">DHCP Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn describe_dhcp_options(
        &self,
        input: DescribeDhcpOptionsRequest,
    ) -> RusotoFuture<DescribeDhcpOptionsResult, DescribeDhcpOptionsError>;

    /// <p>Describes one or more of your egress-only internet gateways.</p>
    fn describe_egress_only_internet_gateways(
        &self,
        input: DescribeEgressOnlyInternetGatewaysRequest,
    ) -> RusotoFuture<
        DescribeEgressOnlyInternetGatewaysResult,
        DescribeEgressOnlyInternetGatewaysError,
    >;

    /// <p>Describes the Elastic Graphics accelerator associated with your instances. For more information about Elastic Graphics, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html">Amazon Elastic Graphics</a>.</p>
    fn describe_elastic_gpus(
        &self,
        input: DescribeElasticGpusRequest,
    ) -> RusotoFuture<DescribeElasticGpusResult, DescribeElasticGpusError>;

    /// <p>Describes the specified export tasks or all your export tasks.</p>
    fn describe_export_tasks(
        &self,
        input: DescribeExportTasksRequest,
    ) -> RusotoFuture<DescribeExportTasksResult, DescribeExportTasksError>;

    /// <p>Describes the events for the specified EC2 Fleet during the specified time.</p>
    fn describe_fleet_history(
        &self,
        input: DescribeFleetHistoryRequest,
    ) -> RusotoFuture<DescribeFleetHistoryResult, DescribeFleetHistoryError>;

    /// <p>Describes the running instances for the specified EC2 Fleet.</p>
    fn describe_fleet_instances(
        &self,
        input: DescribeFleetInstancesRequest,
    ) -> RusotoFuture<DescribeFleetInstancesResult, DescribeFleetInstancesError>;

    /// <p>Describes the specified EC2 Fleets or all your EC2 Fleets.</p>
    fn describe_fleets(
        &self,
        input: DescribeFleetsRequest,
    ) -> RusotoFuture<DescribeFleetsResult, DescribeFleetsError>;

    /// <p>Describes one or more flow logs. To view the information in your flow logs (the log streams for the network interfaces), you must use the CloudWatch Logs console or the CloudWatch Logs API.</p>
    fn describe_flow_logs(
        &self,
        input: DescribeFlowLogsRequest,
    ) -> RusotoFuture<DescribeFlowLogsResult, DescribeFlowLogsError>;

    /// <p>Describes the specified attribute of the specified Amazon FPGA Image (AFI).</p>
    fn describe_fpga_image_attribute(
        &self,
        input: DescribeFpgaImageAttributeRequest,
    ) -> RusotoFuture<DescribeFpgaImageAttributeResult, DescribeFpgaImageAttributeError>;

    /// <p>Describes the Amazon FPGA Images (AFIs) available to you. These include public AFIs, private AFIs that you own, and AFIs owned by other AWS accounts for which you have load permissions.</p>
    fn describe_fpga_images(
        &self,
        input: DescribeFpgaImagesRequest,
    ) -> RusotoFuture<DescribeFpgaImagesResult, DescribeFpgaImagesError>;

    /// <p>Describes the Dedicated Host reservations that are available to purchase.</p> <p>The results describe all the Dedicated Host reservation offerings, including offerings that may not match the instance family and Region of your Dedicated Hosts. When purchasing an offering, ensure that the instance family and Region of the offering matches that of the Dedicated Hosts with which it is to be associated. For more information about supported instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html">Dedicated Hosts Overview</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p>
    fn describe_host_reservation_offerings(
        &self,
        input: DescribeHostReservationOfferingsRequest,
    ) -> RusotoFuture<DescribeHostReservationOfferingsResult, DescribeHostReservationOfferingsError>;

    /// <p>Describes reservations that are associated with Dedicated Hosts in your account.</p>
    fn describe_host_reservations(
        &self,
        input: DescribeHostReservationsRequest,
    ) -> RusotoFuture<DescribeHostReservationsResult, DescribeHostReservationsError>;

    /// <p>Describes the specified Dedicated Hosts or all your Dedicated Hosts.</p> <p>The results describe only the Dedicated Hosts in the Region you're currently using. All listed instances consume capacity on your Dedicated Host. Dedicated Hosts that have recently been released are listed with the state <code>released</code>.</p>
    fn describe_hosts(
        &self,
        input: DescribeHostsRequest,
    ) -> RusotoFuture<DescribeHostsResult, DescribeHostsError>;

    /// <p>Describes your IAM instance profile associations.</p>
    fn describe_iam_instance_profile_associations(
        &self,
        input: DescribeIamInstanceProfileAssociationsRequest,
    ) -> RusotoFuture<
        DescribeIamInstanceProfileAssociationsResult,
        DescribeIamInstanceProfileAssociationsError,
    >;

    /// <p>Describes the ID format settings for your resources on a per-Region basis, for example, to view which resource types are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types.</p> <p>The following resource types support longer IDs: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p> <p>These settings apply to the IAM user who makes the request; they do not apply to the entire AWS account. By default, an IAM user defaults to the same settings as the root user, unless they explicitly override the settings by running the <a>ModifyIdFormat</a> command. Resources created with longer IDs are visible to all IAM users, regardless of these settings and provided that they have permission to use the relevant <code>Describe</code> command for the resource type.</p>
    fn describe_id_format(
        &self,
        input: DescribeIdFormatRequest,
    ) -> RusotoFuture<DescribeIdFormatResult, DescribeIdFormatError>;

    /// <p>Describes the ID format settings for resources for the specified IAM user, IAM role, or root user. For example, you can view the resource types that are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p> <p>The following resource types support longer IDs: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p> <p>These settings apply to the principal specified in the request. They do not apply to the principal that makes the request.</p>
    fn describe_identity_id_format(
        &self,
        input: DescribeIdentityIdFormatRequest,
    ) -> RusotoFuture<DescribeIdentityIdFormatResult, DescribeIdentityIdFormatError>;

    /// <p>Describes the specified attribute of the specified AMI. You can specify only one attribute at a time.</p>
    fn describe_image_attribute(
        &self,
        input: DescribeImageAttributeRequest,
    ) -> RusotoFuture<ImageAttribute, DescribeImageAttributeError>;

    /// <p>Describes the specified images (AMIs, AKIs, and ARIs) available to you or all of the images available to you.</p> <p>The images available to you include public images, private images that you own, and private images owned by other AWS accounts for which you have explicit launch permissions.</p> <p>Recently deregistered images appear in the returned results for a short interval and then return empty results. After all instances that reference a deregistered AMI are terminated, specifying the ID of the image results in an error indicating that the AMI ID cannot be found.</p>
    fn describe_images(
        &self,
        input: DescribeImagesRequest,
    ) -> RusotoFuture<DescribeImagesResult, DescribeImagesError>;

    /// <p>Displays details about an import virtual machine or import snapshot tasks that are already created.</p>
    fn describe_import_image_tasks(
        &self,
        input: DescribeImportImageTasksRequest,
    ) -> RusotoFuture<DescribeImportImageTasksResult, DescribeImportImageTasksError>;

    /// <p>Describes your import snapshot tasks.</p>
    fn describe_import_snapshot_tasks(
        &self,
        input: DescribeImportSnapshotTasksRequest,
    ) -> RusotoFuture<DescribeImportSnapshotTasksResult, DescribeImportSnapshotTasksError>;

    /// <p>Describes the specified attribute of the specified instance. You can specify only one attribute at a time. Valid attribute values are: <code>instanceType</code> | <code>kernel</code> | <code>ramdisk</code> | <code>userData</code> | <code>disableApiTermination</code> | <code>instanceInitiatedShutdownBehavior</code> | <code>rootDeviceName</code> | <code>blockDeviceMapping</code> | <code>productCodes</code> | <code>sourceDestCheck</code> | <code>groupSet</code> | <code>ebsOptimized</code> | <code>sriovNetSupport</code> </p>
    fn describe_instance_attribute(
        &self,
        input: DescribeInstanceAttributeRequest,
    ) -> RusotoFuture<InstanceAttribute, DescribeInstanceAttributeError>;

    /// <p>Describes the credit option for CPU usage of the specified T2 or T3 instances. The credit options are <code>standard</code> and <code>unlimited</code>.</p> <p>If you do not specify an instance ID, Amazon EC2 returns T2 and T3 instances with the <code>unlimited</code> credit option, as well as instances that were previously configured as T2 or T3 with the <code>unlimited</code> credit option. For example, if you resize a T2 instance, while it is configured as <code>unlimited</code>, to an M4 instance, Amazon EC2 returns the M4 instance.</p> <p>If you specify one or more instance IDs, Amazon EC2 returns the credit option (<code>standard</code> or <code>unlimited</code>) of those instances. If you specify an instance ID that is not valid, such as an instance that is not a T2 or T3 instance, an error is returned.</p> <p>Recently terminated instances might appear in the returned results. This interval is usually less than one hour.</p> <p>If an Availability Zone is experiencing a service disruption and you specify instance IDs in the affected zone, or do not specify any instance IDs at all, the call fails. If you specify only instance IDs in an unaffected zone, the call works normally.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable Performance Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_instance_credit_specifications(
        &self,
        input: DescribeInstanceCreditSpecificationsRequest,
    ) -> RusotoFuture<
        DescribeInstanceCreditSpecificationsResult,
        DescribeInstanceCreditSpecificationsError,
    >;

    /// <p><p>Describes the status of the specified instances or all of your instances. By default, only running instances are described, unless you specifically indicate to return the status of all instances.</p> <p>Instance status includes the following components:</p> <ul> <li> <p> <b>Status checks</b> - Amazon EC2 performs status checks on running EC2 instances to identify hardware and software issues. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-system-instance-status-check.html">Status Checks for Your Instances</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstances.html">Troubleshooting Instances with Failed Status Checks</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </li> <li> <p> <b>Scheduled events</b> - Amazon EC2 can schedule events (such as reboot, stop, or terminate) for your instances related to hardware issues, software updates, or system maintenance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances-status-check_sched.html">Scheduled Events for Your Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </li> <li> <p> <b>Instance state</b> - You can manage your instances from the moment you launch them through their termination. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance Lifecycle</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </li> </ul></p>
    fn describe_instance_status(
        &self,
        input: DescribeInstanceStatusRequest,
    ) -> RusotoFuture<DescribeInstanceStatusResult, DescribeInstanceStatusError>;

    /// <p>Describes the specified instances or all of your instances.</p> <p>If you specify one or more instance IDs, Amazon EC2 returns information for those instances. If you do not specify instance IDs, Amazon EC2 returns information for all relevant instances. If you specify an instance ID that is not valid, an error is returned. If you specify an instance that you do not own, it is not included in the returned results.</p> <p>Recently terminated instances might appear in the returned results. This interval is usually less than one hour.</p> <p>If you describe instances in the rare case where an Availability Zone is experiencing a service disruption and you specify instance IDs that are in the affected zone, or do not specify any instance IDs at all, the call fails. If you describe instances and specify only instance IDs that are in an unaffected zone, the call works normally.</p>
    fn describe_instances(
        &self,
        input: DescribeInstancesRequest,
    ) -> RusotoFuture<DescribeInstancesResult, DescribeInstancesError>;

    /// <p>Describes one or more of your internet gateways.</p>
    fn describe_internet_gateways(
        &self,
        input: DescribeInternetGatewaysRequest,
    ) -> RusotoFuture<DescribeInternetGatewaysResult, DescribeInternetGatewaysError>;

    /// <p>Describes the specified key pairs or all of your key pairs.</p> <p>For more information about key pairs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_key_pairs(
        &self,
        input: DescribeKeyPairsRequest,
    ) -> RusotoFuture<DescribeKeyPairsResult, DescribeKeyPairsError>;

    /// <p>Describes one or more versions of a specified launch template. You can describe all versions, individual versions, or a range of versions.</p>
    fn describe_launch_template_versions(
        &self,
        input: DescribeLaunchTemplateVersionsRequest,
    ) -> RusotoFuture<DescribeLaunchTemplateVersionsResult, DescribeLaunchTemplateVersionsError>;

    /// <p>Describes one or more launch templates.</p>
    fn describe_launch_templates(
        &self,
        input: DescribeLaunchTemplatesRequest,
    ) -> RusotoFuture<DescribeLaunchTemplatesResult, DescribeLaunchTemplatesError>;

    /// <p>Describes your Elastic IP addresses that are being moved to the EC2-VPC platform, or that are being restored to the EC2-Classic platform. This request does not return information about any other Elastic IP addresses in your account.</p>
    fn describe_moving_addresses(
        &self,
        input: DescribeMovingAddressesRequest,
    ) -> RusotoFuture<DescribeMovingAddressesResult, DescribeMovingAddressesError>;

    /// <p>Describes one or more of your NAT gateways.</p>
    fn describe_nat_gateways(
        &self,
        input: DescribeNatGatewaysRequest,
    ) -> RusotoFuture<DescribeNatGatewaysResult, DescribeNatGatewaysError>;

    /// <p>Describes one or more of your network ACLs.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn describe_network_acls(
        &self,
        input: DescribeNetworkAclsRequest,
    ) -> RusotoFuture<DescribeNetworkAclsResult, DescribeNetworkAclsError>;

    /// <p>Describes a network interface attribute. You can specify only one attribute at a time.</p>
    fn describe_network_interface_attribute(
        &self,
        input: DescribeNetworkInterfaceAttributeRequest,
    ) -> RusotoFuture<DescribeNetworkInterfaceAttributeResult, DescribeNetworkInterfaceAttributeError>;

    /// <p>Describes the permissions for your network interfaces. </p>
    fn describe_network_interface_permissions(
        &self,
        input: DescribeNetworkInterfacePermissionsRequest,
    ) -> RusotoFuture<
        DescribeNetworkInterfacePermissionsResult,
        DescribeNetworkInterfacePermissionsError,
    >;

    /// <p>Describes one or more of your network interfaces.</p>
    fn describe_network_interfaces(
        &self,
        input: DescribeNetworkInterfacesRequest,
    ) -> RusotoFuture<DescribeNetworkInterfacesResult, DescribeNetworkInterfacesError>;

    /// <p>Describes the specified placement groups or all of your placement groups. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_placement_groups(
        &self,
        input: DescribePlacementGroupsRequest,
    ) -> RusotoFuture<DescribePlacementGroupsResult, DescribePlacementGroupsError>;

    /// <p>Describes available AWS services in a prefix list format, which includes the prefix list name and prefix list ID of the service and the IP address range for the service. A prefix list ID is required for creating an outbound security group rule that allows traffic from a VPC to access an AWS service through a gateway VPC endpoint. Currently, the services that support this action are Amazon S3 and Amazon DynamoDB.</p>
    fn describe_prefix_lists(
        &self,
        input: DescribePrefixListsRequest,
    ) -> RusotoFuture<DescribePrefixListsResult, DescribePrefixListsError>;

    /// <p>Describes the ID format settings for the root user and all IAM roles and IAM users that have explicitly specified a longer ID (17-character ID) preference. </p> <p>By default, all IAM roles and IAM users default to the same ID settings as the root user, unless they explicitly override the settings. This request is useful for identifying those IAM users and IAM roles that have overridden the default ID settings.</p> <p>The following resource types support longer IDs: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p>
    fn describe_principal_id_format(
        &self,
        input: DescribePrincipalIdFormatRequest,
    ) -> RusotoFuture<DescribePrincipalIdFormatResult, DescribePrincipalIdFormatError>;

    /// <p>Describes the specified IPv4 address pools.</p>
    fn describe_public_ipv_4_pools(
        &self,
        input: DescribePublicIpv4PoolsRequest,
    ) -> RusotoFuture<DescribePublicIpv4PoolsResult, DescribePublicIpv4PoolsError>;

    /// <p>Describes the Regions that are currently available to you. The API returns a list of all the Regions, including Regions that are disabled for your account. For information about enabling Regions for your account, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/manage-account-payment.html#manage-account-payment-enable-disable-regions">Enabling and Disabling Regions</a> in the <i>AWS Billing and Cost Management User Guide</i>.</p> <p>For a list of the Regions supported by Amazon EC2, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region"> Regions and Endpoints</a>.</p>
    fn describe_regions(
        &self,
        input: DescribeRegionsRequest,
    ) -> RusotoFuture<DescribeRegionsResult, DescribeRegionsError>;

    /// <p>Describes one or more of the Reserved Instances that you purchased.</p> <p>For more information about Reserved Instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_reserved_instances(
        &self,
        input: DescribeReservedInstancesRequest,
    ) -> RusotoFuture<DescribeReservedInstancesResult, DescribeReservedInstancesError>;

    /// <p>Describes your account's Reserved Instance listings in the Reserved Instance Marketplace.</p> <p>The Reserved Instance Marketplace matches sellers who want to resell Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.</p> <p>As a seller, you choose to list some or all of your Reserved Instances, and you specify the upfront price to receive for them. Your Reserved Instances are then listed in the Reserved Instance Marketplace and are available for purchase.</p> <p>As a buyer, you specify the configuration of the Reserved Instance to purchase, and the Marketplace matches what you're searching for with what's available. The Marketplace first sells the lowest priced Reserved Instances to you, and continues to sell available Reserved Instance listings to you until your demand is met. You are charged based on the total price of all of the listings that you purchase.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_reserved_instances_listings(
        &self,
        input: DescribeReservedInstancesListingsRequest,
    ) -> RusotoFuture<DescribeReservedInstancesListingsResult, DescribeReservedInstancesListingsError>;

    /// <p>Describes the modifications made to your Reserved Instances. If no parameter is specified, information about all your Reserved Instances modification requests is returned. If a modification ID is specified, only information about the specific modification is returned.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying Reserved Instances</a> in the Amazon Elastic Compute Cloud User Guide.</p>
    fn describe_reserved_instances_modifications(
        &self,
        input: DescribeReservedInstancesModificationsRequest,
    ) -> RusotoFuture<
        DescribeReservedInstancesModificationsResult,
        DescribeReservedInstancesModificationsError,
    >;

    /// <p>Describes Reserved Instance offerings that are available for purchase. With Reserved Instances, you purchase the right to launch instances for a period of time. During that time period, you do not receive insufficient capacity errors, and you pay a lower usage rate than the rate charged for On-Demand instances for the actual time used.</p> <p>If you have listed your own Reserved Instances for sale in the Reserved Instance Marketplace, they will be excluded from these results. This is to ensure that you do not purchase your own Reserved Instances.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_reserved_instances_offerings(
        &self,
        input: DescribeReservedInstancesOfferingsRequest,
    ) -> RusotoFuture<
        DescribeReservedInstancesOfferingsResult,
        DescribeReservedInstancesOfferingsError,
    >;

    /// <p>Describes one or more of your route tables.</p> <p>Each subnet in your VPC must be associated with a route table. If a subnet is not explicitly associated with any route table, it is implicitly associated with the main route table. This command does not return the subnet ID for implicit associations.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn describe_route_tables(
        &self,
        input: DescribeRouteTablesRequest,
    ) -> RusotoFuture<DescribeRouteTablesResult, DescribeRouteTablesError>;

    /// <p>Finds available schedules that meet the specified criteria.</p> <p>You can search for an available schedule no more than 3 months in advance. You must meet the minimum required duration of 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.</p> <p>After you find a schedule that meets your needs, call <a>PurchaseScheduledInstances</a> to purchase Scheduled Instances with that schedule.</p>
    fn describe_scheduled_instance_availability(
        &self,
        input: DescribeScheduledInstanceAvailabilityRequest,
    ) -> RusotoFuture<
        DescribeScheduledInstanceAvailabilityResult,
        DescribeScheduledInstanceAvailabilityError,
    >;

    /// <p>Describes the specified Scheduled Instances or all your Scheduled Instances.</p>
    fn describe_scheduled_instances(
        &self,
        input: DescribeScheduledInstancesRequest,
    ) -> RusotoFuture<DescribeScheduledInstancesResult, DescribeScheduledInstancesError>;

    /// <p>[VPC only] Describes the VPCs on the other side of a VPC peering connection that are referencing the security groups you've specified in this request.</p>
    fn describe_security_group_references(
        &self,
        input: DescribeSecurityGroupReferencesRequest,
    ) -> RusotoFuture<DescribeSecurityGroupReferencesResult, DescribeSecurityGroupReferencesError>;

    /// <p>Describes the specified security groups or all of your security groups.</p> <p>A security group is for use with instances either in the EC2-Classic platform or in a specific VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn describe_security_groups(
        &self,
        input: DescribeSecurityGroupsRequest,
    ) -> RusotoFuture<DescribeSecurityGroupsResult, DescribeSecurityGroupsError>;

    /// <p>Describes the specified attribute of the specified snapshot. You can specify only one attribute at a time.</p> <p>For more information about EBS snapshots, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html">Amazon EBS Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_snapshot_attribute(
        &self,
        input: DescribeSnapshotAttributeRequest,
    ) -> RusotoFuture<DescribeSnapshotAttributeResult, DescribeSnapshotAttributeError>;

    /// <p>Describes the specified EBS snapshots available to you or all of the EBS snapshots available to you.</p> <p>The snapshots available to you include public snapshots, private snapshots that you own, and private snapshots owned by other AWS accounts for which you have explicit create volume permissions.</p> <p>The create volume permissions fall into the following categories:</p> <ul> <li> <p> <i>public</i>: The owner of the snapshot granted create volume permissions for the snapshot to the <code>all</code> group. All AWS accounts have create volume permissions for these snapshots.</p> </li> <li> <p> <i>explicit</i>: The owner of the snapshot granted create volume permissions to a specific AWS account.</p> </li> <li> <p> <i>implicit</i>: An AWS account has implicit create volume permissions for all snapshots it owns.</p> </li> </ul> <p>The list of snapshots returned can be modified by specifying snapshot IDs, snapshot owners, or AWS accounts with create volume permissions. If no options are specified, Amazon EC2 returns all snapshots for which you have create volume permissions.</p> <p>If you specify one or more snapshot IDs, only snapshots that have the specified IDs are returned. If you specify an invalid snapshot ID, an error is returned. If you specify a snapshot ID for which you do not have access, it is not included in the returned results.</p> <p>If you specify one or more snapshot owners using the <code>OwnerIds</code> option, only snapshots from the specified owners and for which you have access are returned. The results can include the AWS account IDs of the specified owners, <code>amazon</code> for snapshots owned by Amazon, or <code>self</code> for snapshots that you own.</p> <p>If you specify a list of restorable users, only snapshots with create snapshot permissions for those users are returned. You can specify AWS account IDs (if you own the snapshots), <code>self</code> for snapshots for which you own or have explicit permissions, or <code>all</code> for public snapshots.</p> <p>If you are describing a long list of snapshots, you can paginate the output to make the list more manageable. The <code>MaxResults</code> parameter sets the maximum number of results returned in a single page. If the list of results exceeds your <code>MaxResults</code> value, then that number of results is returned along with a <code>NextToken</code> value that can be passed to a subsequent <code>DescribeSnapshots</code> request to retrieve the remaining results.</p> <p>For more information about EBS snapshots, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html">Amazon EBS Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_snapshots(
        &self,
        input: DescribeSnapshotsRequest,
    ) -> RusotoFuture<DescribeSnapshotsResult, DescribeSnapshotsError>;

    /// <p>Describes the data feed for Spot Instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html">Spot Instance Data Feed</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    fn describe_spot_datafeed_subscription(
        &self,
        input: DescribeSpotDatafeedSubscriptionRequest,
    ) -> RusotoFuture<DescribeSpotDatafeedSubscriptionResult, DescribeSpotDatafeedSubscriptionError>;

    /// <p>Describes the running instances for the specified Spot Fleet.</p>
    fn describe_spot_fleet_instances(
        &self,
        input: DescribeSpotFleetInstancesRequest,
    ) -> RusotoFuture<DescribeSpotFleetInstancesResponse, DescribeSpotFleetInstancesError>;

    /// <p>Describes the events for the specified Spot Fleet request during the specified time.</p> <p>Spot Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event. Spot Fleet events are available for 48 hours.</p>
    fn describe_spot_fleet_request_history(
        &self,
        input: DescribeSpotFleetRequestHistoryRequest,
    ) -> RusotoFuture<DescribeSpotFleetRequestHistoryResponse, DescribeSpotFleetRequestHistoryError>;

    /// <p>Describes your Spot Fleet requests.</p> <p>Spot Fleet requests are deleted 48 hours after they are canceled and their instances are terminated.</p>
    fn describe_spot_fleet_requests(
        &self,
        input: DescribeSpotFleetRequestsRequest,
    ) -> RusotoFuture<DescribeSpotFleetRequestsResponse, DescribeSpotFleetRequestsError>;

    /// <p>Describes the specified Spot Instance requests.</p> <p>You can use <code>DescribeSpotInstanceRequests</code> to find a running Spot Instance by examining the response. If the status of the Spot Instance is <code>fulfilled</code>, the instance ID appears in the response and contains the identifier of the instance. Alternatively, you can use <a>DescribeInstances</a> with a filter to look for instances where the instance lifecycle is <code>spot</code>.</p> <p>We recommend that you set <code>MaxResults</code> to a value between 5 and 1000 to limit the number of results returned. This paginates the output, which makes the list more manageable and returns the results faster. If the list of results exceeds your <code>MaxResults</code> value, then that number of results is returned along with a <code>NextToken</code> value that can be passed to a subsequent <code>DescribeSpotInstanceRequests</code> request to retrieve the remaining results.</p> <p>Spot Instance requests are deleted four hours after they are canceled and their instances are terminated.</p>
    fn describe_spot_instance_requests(
        &self,
        input: DescribeSpotInstanceRequestsRequest,
    ) -> RusotoFuture<DescribeSpotInstanceRequestsResult, DescribeSpotInstanceRequestsError>;

    /// <p>Describes the Spot price history. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances-history.html">Spot Instance Pricing History</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>When you specify a start and end time, this operation returns the prices of the instance types within the time range that you specified and the time when the price changed. The price is valid within the time period that you specified; the response merely indicates the last time that the price changed.</p>
    fn describe_spot_price_history(
        &self,
        input: DescribeSpotPriceHistoryRequest,
    ) -> RusotoFuture<DescribeSpotPriceHistoryResult, DescribeSpotPriceHistoryError>;

    /// <p>[VPC only] Describes the stale security group rules for security groups in a specified VPC. Rules are stale when they reference a deleted security group in a peer VPC, or a security group in a peer VPC for which the VPC peering connection has been deleted.</p>
    fn describe_stale_security_groups(
        &self,
        input: DescribeStaleSecurityGroupsRequest,
    ) -> RusotoFuture<DescribeStaleSecurityGroupsResult, DescribeStaleSecurityGroupsError>;

    /// <p>Describes one or more of your subnets.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html">Your VPC and Subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn describe_subnets(
        &self,
        input: DescribeSubnetsRequest,
    ) -> RusotoFuture<DescribeSubnetsResult, DescribeSubnetsError>;

    /// <p>Describes the specified tags for your EC2 resources.</p> <p>For more information about tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_tags(
        &self,
        input: DescribeTagsRequest,
    ) -> RusotoFuture<DescribeTagsResult, DescribeTagsError>;

    /// <p>Describes one or more attachments between resources and transit gateways. By default, all attachments are described. Alternatively, you can filter the results by attachment ID, attachment state, resource ID, or resource owner.</p>
    fn describe_transit_gateway_attachments(
        &self,
        input: DescribeTransitGatewayAttachmentsRequest,
    ) -> RusotoFuture<DescribeTransitGatewayAttachmentsResult, DescribeTransitGatewayAttachmentsError>;

    /// <p>Describes one or more transit gateway route tables. By default, all transit gateway route tables are described. Alternatively, you can filter the results.</p>
    fn describe_transit_gateway_route_tables(
        &self,
        input: DescribeTransitGatewayRouteTablesRequest,
    ) -> RusotoFuture<DescribeTransitGatewayRouteTablesResult, DescribeTransitGatewayRouteTablesError>;

    /// <p>Describes one or more VPC attachments. By default, all VPC attachments are described. Alternatively, you can filter the results.</p>
    fn describe_transit_gateway_vpc_attachments(
        &self,
        input: DescribeTransitGatewayVpcAttachmentsRequest,
    ) -> RusotoFuture<
        DescribeTransitGatewayVpcAttachmentsResult,
        DescribeTransitGatewayVpcAttachmentsError,
    >;

    /// <p>Describes one or more transit gateways. By default, all transit gateways are described. Alternatively, you can filter the results.</p>
    fn describe_transit_gateways(
        &self,
        input: DescribeTransitGatewaysRequest,
    ) -> RusotoFuture<DescribeTransitGatewaysResult, DescribeTransitGatewaysError>;

    /// <p>Describes the specified attribute of the specified volume. You can specify only one attribute at a time.</p> <p>For more information about EBS volumes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html">Amazon EBS Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_volume_attribute(
        &self,
        input: DescribeVolumeAttributeRequest,
    ) -> RusotoFuture<DescribeVolumeAttributeResult, DescribeVolumeAttributeError>;

    /// <p>Describes the status of the specified volumes. Volume status provides the result of the checks performed on your volumes to determine events that can impair the performance of your volumes. The performance of a volume can be affected if an issue occurs on the volume's underlying host. If the volume's underlying host experiences a power outage or system issue, after the system is restored, there could be data inconsistencies on the volume. Volume events notify you if this occurs. Volume actions notify you if any action needs to be taken in response to the event.</p> <p>The <code>DescribeVolumeStatus</code> operation provides the following information about the specified volumes:</p> <p> <i>Status</i>: Reflects the current status of the volume. The possible values are <code>ok</code>, <code>impaired</code> , <code>warning</code>, or <code>insufficient-data</code>. If all checks pass, the overall status of the volume is <code>ok</code>. If the check fails, the overall status is <code>impaired</code>. If the status is <code>insufficient-data</code>, then the checks may still be taking place on your volume at the time. We recommend that you retry the request. For more information about volume status, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-volume-status.html">Monitoring the Status of Your Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p> <i>Events</i>: Reflect the cause of a volume status and may require you to take action. For example, if your volume returns an <code>impaired</code> status, then the volume event might be <code>potential-data-inconsistency</code>. This means that your volume has been affected by an issue with the underlying host, has all I/O operations disabled, and may have inconsistent data.</p> <p> <i>Actions</i>: Reflect the actions you may have to take in response to an event. For example, if the status of the volume is <code>impaired</code> and the volume event shows <code>potential-data-inconsistency</code>, then the action shows <code>enable-volume-io</code>. This means that you may want to enable the I/O operations for the volume by calling the <a>EnableVolumeIO</a> action and then check the volume for data consistency.</p> <p>Volume status is based on the volume status checks, and does not reflect the volume state. Therefore, volume status does not indicate volumes in the <code>error</code> state (for example, when a volume is incapable of accepting I/O.)</p>
    fn describe_volume_status(
        &self,
        input: DescribeVolumeStatusRequest,
    ) -> RusotoFuture<DescribeVolumeStatusResult, DescribeVolumeStatusError>;

    /// <p>Describes the specified EBS volumes or all of your EBS volumes.</p> <p>If you are describing a long list of volumes, you can paginate the output to make the list more manageable. The <code>MaxResults</code> parameter sets the maximum number of results returned in a single page. If the list of results exceeds your <code>MaxResults</code> value, then that number of results is returned along with a <code>NextToken</code> value that can be passed to a subsequent <code>DescribeVolumes</code> request to retrieve the remaining results.</p> <p>For more information about EBS volumes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html">Amazon EBS Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_volumes(
        &self,
        input: DescribeVolumesRequest,
    ) -> RusotoFuture<DescribeVolumesResult, DescribeVolumesError>;

    /// <p>Reports the current modification status of EBS volumes.</p> <p>Current-generation EBS volumes support modification of attributes including type, size, and (for <code>io1</code> volumes) IOPS provisioning while either attached to or detached from an instance. Following an action from the API or the console to modify a volume, the status of the modification may be <code>modifying</code>, <code>optimizing</code>, <code>completed</code>, or <code>failed</code>. If a volume has never been modified, then certain elements of the returned <code>VolumeModification</code> objects are null. </p> <p> You can also use CloudWatch Events to check the status of a modification to an EBS volume. For information about CloudWatch Events, see the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/">Amazon CloudWatch Events User Guide</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#monitoring_mods">Monitoring Volume Modifications"</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_volumes_modifications(
        &self,
        input: DescribeVolumesModificationsRequest,
    ) -> RusotoFuture<DescribeVolumesModificationsResult, DescribeVolumesModificationsError>;

    /// <p>Describes the specified attribute of the specified VPC. You can specify only one attribute at a time.</p>
    fn describe_vpc_attribute(
        &self,
        input: DescribeVpcAttributeRequest,
    ) -> RusotoFuture<DescribeVpcAttributeResult, DescribeVpcAttributeError>;

    /// <p>Describes the ClassicLink status of one or more VPCs.</p>
    fn describe_vpc_classic_link(
        &self,
        input: DescribeVpcClassicLinkRequest,
    ) -> RusotoFuture<DescribeVpcClassicLinkResult, DescribeVpcClassicLinkError>;

    /// <p>Describes the ClassicLink DNS support status of one or more VPCs. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_vpc_classic_link_dns_support(
        &self,
        input: DescribeVpcClassicLinkDnsSupportRequest,
    ) -> RusotoFuture<DescribeVpcClassicLinkDnsSupportResult, DescribeVpcClassicLinkDnsSupportError>;

    /// <p>Describes the connection notifications for VPC endpoints and VPC endpoint services.</p>
    fn describe_vpc_endpoint_connection_notifications(
        &self,
        input: DescribeVpcEndpointConnectionNotificationsRequest,
    ) -> RusotoFuture<
        DescribeVpcEndpointConnectionNotificationsResult,
        DescribeVpcEndpointConnectionNotificationsError,
    >;

    /// <p>Describes the VPC endpoint connections to your VPC endpoint services, including any endpoints that are pending your acceptance.</p>
    fn describe_vpc_endpoint_connections(
        &self,
        input: DescribeVpcEndpointConnectionsRequest,
    ) -> RusotoFuture<DescribeVpcEndpointConnectionsResult, DescribeVpcEndpointConnectionsError>;

    /// <p>Describes the VPC endpoint service configurations in your account (your services).</p>
    fn describe_vpc_endpoint_service_configurations(
        &self,
        input: DescribeVpcEndpointServiceConfigurationsRequest,
    ) -> RusotoFuture<
        DescribeVpcEndpointServiceConfigurationsResult,
        DescribeVpcEndpointServiceConfigurationsError,
    >;

    /// <p>Describes the principals (service consumers) that are permitted to discover your VPC endpoint service.</p>
    fn describe_vpc_endpoint_service_permissions(
        &self,
        input: DescribeVpcEndpointServicePermissionsRequest,
    ) -> RusotoFuture<
        DescribeVpcEndpointServicePermissionsResult,
        DescribeVpcEndpointServicePermissionsError,
    >;

    /// <p>Describes available services to which you can create a VPC endpoint.</p>
    fn describe_vpc_endpoint_services(
        &self,
        input: DescribeVpcEndpointServicesRequest,
    ) -> RusotoFuture<DescribeVpcEndpointServicesResult, DescribeVpcEndpointServicesError>;

    /// <p>Describes one or more of your VPC endpoints.</p>
    fn describe_vpc_endpoints(
        &self,
        input: DescribeVpcEndpointsRequest,
    ) -> RusotoFuture<DescribeVpcEndpointsResult, DescribeVpcEndpointsError>;

    /// <p>Describes one or more of your VPC peering connections.</p>
    fn describe_vpc_peering_connections(
        &self,
        input: DescribeVpcPeeringConnectionsRequest,
    ) -> RusotoFuture<DescribeVpcPeeringConnectionsResult, DescribeVpcPeeringConnectionsError>;

    /// <p>Describes one or more of your VPCs.</p>
    fn describe_vpcs(
        &self,
        input: DescribeVpcsRequest,
    ) -> RusotoFuture<DescribeVpcsResult, DescribeVpcsError>;

    /// <p>Describes one or more of your VPN connections.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
    fn describe_vpn_connections(
        &self,
        input: DescribeVpnConnectionsRequest,
    ) -> RusotoFuture<DescribeVpnConnectionsResult, DescribeVpnConnectionsError>;

    /// <p>Describes one or more of your virtual private gateways.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
    fn describe_vpn_gateways(
        &self,
        input: DescribeVpnGatewaysRequest,
    ) -> RusotoFuture<DescribeVpnGatewaysResult, DescribeVpnGatewaysError>;

    /// <p>Unlinks (detaches) a linked EC2-Classic instance from a VPC. After the instance has been unlinked, the VPC security groups are no longer associated with it. An instance is automatically unlinked from a VPC when it's stopped.</p>
    fn detach_classic_link_vpc(
        &self,
        input: DetachClassicLinkVpcRequest,
    ) -> RusotoFuture<DetachClassicLinkVpcResult, DetachClassicLinkVpcError>;

    /// <p>Detaches an internet gateway from a VPC, disabling connectivity between the internet and the VPC. The VPC must not contain any running instances with Elastic IP addresses or public IPv4 addresses.</p>
    fn detach_internet_gateway(
        &self,
        input: DetachInternetGatewayRequest,
    ) -> RusotoFuture<(), DetachInternetGatewayError>;

    /// <p>Detaches a network interface from an instance.</p>
    fn detach_network_interface(
        &self,
        input: DetachNetworkInterfaceRequest,
    ) -> RusotoFuture<(), DetachNetworkInterfaceError>;

    /// <p>Detaches an EBS volume from an instance. Make sure to unmount any file systems on the device within your operating system before detaching the volume. Failure to do so can result in the volume becoming stuck in the <code>busy</code> state while detaching. If this happens, detachment can be delayed indefinitely until you unmount the volume, force detachment, reboot the instance, or all three. If an EBS volume is the root device of an instance, it can't be detached while the instance is running. To detach the root volume, stop the instance first.</p> <p>When a volume with an AWS Marketplace product code is detached from an instance, the product code is no longer associated with the instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-detaching-volume.html">Detaching an Amazon EBS Volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn detach_volume(
        &self,
        input: DetachVolumeRequest,
    ) -> RusotoFuture<VolumeAttachment, DetachVolumeError>;

    /// <p>Detaches a virtual private gateway from a VPC. You do this if you're planning to turn off the VPC and not use it anymore. You can confirm a virtual private gateway has been completely detached from a VPC by describing the virtual private gateway (any attachments to the virtual private gateway are also described).</p> <p>You must wait for the attachment's state to switch to <code>detached</code> before you can delete the VPC or attach a different VPC to the virtual private gateway.</p>
    fn detach_vpn_gateway(
        &self,
        input: DetachVpnGatewayRequest,
    ) -> RusotoFuture<(), DetachVpnGatewayError>;

    /// <p>Disables default encryption for EBS volumes that are created in your account in the current region.</p> <p>Call this API if you have enabled default encryption using <a>EnableEbsEncryptionByDefault</a> and want to disable default EBS encryption. Once default EBS encryption is disabled, you can still create an encrypted volume by setting <i>encrypted</i> to <i>true</i> in the API call that creates the volume. </p> <p>Disabling default EBS encryption will not change the encryption status of any of your existing volumes.</p>
    fn disable_ebs_encryption_by_default(
        &self,
        input: DisableEbsEncryptionByDefaultRequest,
    ) -> RusotoFuture<DisableEbsEncryptionByDefaultResult, DisableEbsEncryptionByDefaultError>;

    /// <p>Disables the specified resource attachment from propagating routes to the specified propagation route table.</p>
    fn disable_transit_gateway_route_table_propagation(
        &self,
        input: DisableTransitGatewayRouteTablePropagationRequest,
    ) -> RusotoFuture<
        DisableTransitGatewayRouteTablePropagationResult,
        DisableTransitGatewayRouteTablePropagationError,
    >;

    /// <p>Disables a virtual private gateway (VGW) from propagating routes to a specified route table of a VPC.</p>
    fn disable_vgw_route_propagation(
        &self,
        input: DisableVgwRoutePropagationRequest,
    ) -> RusotoFuture<(), DisableVgwRoutePropagationError>;

    /// <p>Disables ClassicLink for a VPC. You cannot disable ClassicLink for a VPC that has EC2-Classic instances linked to it.</p>
    fn disable_vpc_classic_link(
        &self,
        input: DisableVpcClassicLinkRequest,
    ) -> RusotoFuture<DisableVpcClassicLinkResult, DisableVpcClassicLinkError>;

    /// <p>Disables ClassicLink DNS support for a VPC. If disabled, DNS hostnames resolve to public IP addresses when addressed between a linked EC2-Classic instance and instances in the VPC to which it's linked. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn disable_vpc_classic_link_dns_support(
        &self,
        input: DisableVpcClassicLinkDnsSupportRequest,
    ) -> RusotoFuture<DisableVpcClassicLinkDnsSupportResult, DisableVpcClassicLinkDnsSupportError>;

    /// <p>Disassociates an Elastic IP address from the instance or network interface it's associated with.</p> <p>An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error.</p>
    fn disassociate_address(
        &self,
        input: DisassociateAddressRequest,
    ) -> RusotoFuture<(), DisassociateAddressError>;

    /// <p><p>Disassociates a target network from the specified Client VPN endpoint. When you disassociate the last target network from a Client VPN, the following happens:</p> <ul> <li> <p>The route that was automatically added for the VPC is deleted</p> </li> <li> <p>All active client connections are terminated</p> </li> <li> <p>New client connections are disallowed</p> </li> <li> <p>The Client VPN endpoint&#39;s status changes to <code>pending-associate</code> </p> </li> </ul></p>
    fn disassociate_client_vpn_target_network(
        &self,
        input: DisassociateClientVpnTargetNetworkRequest,
    ) -> RusotoFuture<
        DisassociateClientVpnTargetNetworkResult,
        DisassociateClientVpnTargetNetworkError,
    >;

    /// <p>Disassociates an IAM instance profile from a running or stopped instance.</p> <p>Use <a>DescribeIamInstanceProfileAssociations</a> to get the association ID.</p>
    fn disassociate_iam_instance_profile(
        &self,
        input: DisassociateIamInstanceProfileRequest,
    ) -> RusotoFuture<DisassociateIamInstanceProfileResult, DisassociateIamInstanceProfileError>;

    /// <p>Disassociates a subnet from a route table.</p> <p>After you perform this action, the subnet no longer uses the routes in the route table. Instead, it uses the routes in the VPC's main route table. For more information about route tables, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn disassociate_route_table(
        &self,
        input: DisassociateRouteTableRequest,
    ) -> RusotoFuture<(), DisassociateRouteTableError>;

    /// <p>Disassociates a CIDR block from a subnet. Currently, you can disassociate an IPv6 CIDR block only. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it. </p>
    fn disassociate_subnet_cidr_block(
        &self,
        input: DisassociateSubnetCidrBlockRequest,
    ) -> RusotoFuture<DisassociateSubnetCidrBlockResult, DisassociateSubnetCidrBlockError>;

    /// <p>Disassociates a resource attachment from a transit gateway route table.</p>
    fn disassociate_transit_gateway_route_table(
        &self,
        input: DisassociateTransitGatewayRouteTableRequest,
    ) -> RusotoFuture<
        DisassociateTransitGatewayRouteTableResult,
        DisassociateTransitGatewayRouteTableError,
    >;

    /// <p>Disassociates a CIDR block from a VPC. To disassociate the CIDR block, you must specify its association ID. You can get the association ID by using <a>DescribeVpcs</a>. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it. </p> <p>You cannot disassociate the CIDR block with which you originally created the VPC (the primary CIDR block).</p>
    fn disassociate_vpc_cidr_block(
        &self,
        input: DisassociateVpcCidrBlockRequest,
    ) -> RusotoFuture<DisassociateVpcCidrBlockResult, DisassociateVpcCidrBlockError>;

    /// <p>Enables default encryption for EBS volumes that are created in your account in the current region.</p> <p>Once encryption is enabled with this action, EBS volumes that are created in your account will always be encrypted even if encryption is not specified at launch. This setting overrides the <i>encrypted</i> setting to <i>true</i> in all API calls that create EBS volumes in your account. A volume will be encrypted even if you specify <i>encryption</i> to be <i>false</i> in the API call that creates the volume.</p> <p>If you do not specify a customer master key (CMK) in the API call that creates the EBS volume, then the volume is encrypted to your AWS account's managed CMK.</p> <p>You can specify a CMK of your choice using <a>ModifyEbsDefaultKmsKeyId</a>.</p> <p>Enabling encryption-by-default for EBS volumes has no effect on existing unencrypted volumes in your account. Encrypting the data in these requires manual action. You can either create an encrypted snapshot of an unencrypted volume, or encrypt a copy of an unencrypted snapshot. Any volume restored from an encrypted snapshot is also encrypted. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html">Amazon EBS Snapshots</a>.</p> <p>After EBS encryption-by-default is enabled, you can no longer launch older-generation instance types that do not support encryption. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances">Supported Instance Types</a>.</p>
    fn enable_ebs_encryption_by_default(
        &self,
        input: EnableEbsEncryptionByDefaultRequest,
    ) -> RusotoFuture<EnableEbsEncryptionByDefaultResult, EnableEbsEncryptionByDefaultError>;

    /// <p>Enables the specified attachment to propagate routes to the specified propagation route table.</p>
    fn enable_transit_gateway_route_table_propagation(
        &self,
        input: EnableTransitGatewayRouteTablePropagationRequest,
    ) -> RusotoFuture<
        EnableTransitGatewayRouteTablePropagationResult,
        EnableTransitGatewayRouteTablePropagationError,
    >;

    /// <p>Enables a virtual private gateway (VGW) to propagate routes to the specified route table of a VPC.</p>
    fn enable_vgw_route_propagation(
        &self,
        input: EnableVgwRoutePropagationRequest,
    ) -> RusotoFuture<(), EnableVgwRoutePropagationError>;

    /// <p>Enables I/O operations for a volume that had I/O operations disabled because the data on the volume was potentially inconsistent.</p>
    fn enable_volume_io(
        &self,
        input: EnableVolumeIORequest,
    ) -> RusotoFuture<(), EnableVolumeIOError>;

    /// <p>Enables a VPC for ClassicLink. You can then link EC2-Classic instances to your ClassicLink-enabled VPC to allow communication over private IP addresses. You cannot enable your VPC for ClassicLink if any of your VPC route tables have existing routes for address ranges within the <code>10.0.0.0/8</code> IP address range, excluding local routes for VPCs in the <code>10.0.0.0/16</code> and <code>10.1.0.0/16</code> IP address ranges. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn enable_vpc_classic_link(
        &self,
        input: EnableVpcClassicLinkRequest,
    ) -> RusotoFuture<EnableVpcClassicLinkResult, EnableVpcClassicLinkError>;

    /// <p>Enables a VPC to support DNS hostname resolution for ClassicLink. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn enable_vpc_classic_link_dns_support(
        &self,
        input: EnableVpcClassicLinkDnsSupportRequest,
    ) -> RusotoFuture<EnableVpcClassicLinkDnsSupportResult, EnableVpcClassicLinkDnsSupportError>;

    /// <p>Downloads the client certificate revocation list for the specified Client VPN endpoint.</p>
    fn export_client_vpn_client_certificate_revocation_list(
        &self,
        input: ExportClientVpnClientCertificateRevocationListRequest,
    ) -> RusotoFuture<
        ExportClientVpnClientCertificateRevocationListResult,
        ExportClientVpnClientCertificateRevocationListError,
    >;

    /// <p>Downloads the contents of the Client VPN endpoint configuration file for the specified Client VPN endpoint. The Client VPN endpoint configuration file includes the Client VPN endpoint and certificate information clients need to establish a connection with the Client VPN endpoint.</p>
    fn export_client_vpn_client_configuration(
        &self,
        input: ExportClientVpnClientConfigurationRequest,
    ) -> RusotoFuture<
        ExportClientVpnClientConfigurationResult,
        ExportClientVpnClientConfigurationError,
    >;

    /// <p>Exports routes from the specified transit gateway route table to the specified S3 bucket. By default, all routes are exported. Alternatively, you can filter by CIDR range.</p>
    fn export_transit_gateway_routes(
        &self,
        input: ExportTransitGatewayRoutesRequest,
    ) -> RusotoFuture<ExportTransitGatewayRoutesResult, ExportTransitGatewayRoutesError>;

    /// <p>Gets the console output for the specified instance. For Linux instances, the instance console output displays the exact console output that would normally be displayed on a physical monitor attached to a computer. For Windows instances, the instance console output includes the last three system event log errors.</p> <p>By default, the console output returns buffered information that was posted shortly after an instance transition state (start, stop, reboot, or terminate). This information is available for at least one hour after the most recent post. Only the most recent 64 KB of console output is available.</p> <p>You can optionally retrieve the latest serial console output at any time during the instance lifecycle. This option is supported on instance types that use the Nitro hypervisor.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html#instance-console-console-output">Instance Console Output</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn get_console_output(
        &self,
        input: GetConsoleOutputRequest,
    ) -> RusotoFuture<GetConsoleOutputResult, GetConsoleOutputError>;

    /// <p>Retrieve a JPG-format screenshot of a running instance to help with troubleshooting.</p> <p>The returned content is Base64-encoded.</p>
    fn get_console_screenshot(
        &self,
        input: GetConsoleScreenshotRequest,
    ) -> RusotoFuture<GetConsoleScreenshotResult, GetConsoleScreenshotError>;

    /// <p>Describes the default customer master key (CMK) that your account uses to encrypt EBS volumes if you don’t specify a CMK in the API call. You can change this default using <a>ModifyEbsDefaultKmsKeyId</a>.</p>
    fn get_ebs_default_kms_key_id(
        &self,
        input: GetEbsDefaultKmsKeyIdRequest,
    ) -> RusotoFuture<GetEbsDefaultKmsKeyIdResult, GetEbsDefaultKmsKeyIdError>;

    /// <p>Describes whether default EBS encryption is enabled for your account in the current region.</p>
    fn get_ebs_encryption_by_default(
        &self,
        input: GetEbsEncryptionByDefaultRequest,
    ) -> RusotoFuture<GetEbsEncryptionByDefaultResult, GetEbsEncryptionByDefaultError>;

    /// <p>Preview a reservation purchase with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation.</p> <p>This is a preview of the <a>PurchaseHostReservation</a> action and does not result in the offering being purchased.</p>
    fn get_host_reservation_purchase_preview(
        &self,
        input: GetHostReservationPurchasePreviewRequest,
    ) -> RusotoFuture<GetHostReservationPurchasePreviewResult, GetHostReservationPurchasePreviewError>;

    /// <p>Retrieves the configuration data of the specified instance. You can use this data to create a launch template.</p>
    fn get_launch_template_data(
        &self,
        input: GetLaunchTemplateDataRequest,
    ) -> RusotoFuture<GetLaunchTemplateDataResult, GetLaunchTemplateDataError>;

    /// <p>Retrieves the encrypted administrator password for a running Windows instance.</p> <p>The Windows password is generated at boot by the <code>EC2Config</code> service or <code>EC2Launch</code> scripts (Windows Server 2016 and later). This usually only happens the first time an instance is launched. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/UsingConfig_WinAMI.html">EC2Config</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch.html">EC2Launch</a> in the Amazon Elastic Compute Cloud User Guide.</p> <p>For the <code>EC2Config</code> service, the password is not generated for rebundled AMIs unless <code>Ec2SetPassword</code> is enabled before bundling.</p> <p>The password is encrypted using the key pair that you specified when you launched the instance. You must provide the corresponding key pair file.</p> <p>When you launch an instance, password generation and encryption may take a few minutes. If you try to retrieve the password before it's available, the output returns an empty string. We recommend that you wait up to 15 minutes after launching an instance before trying to retrieve the generated password.</p>
    fn get_password_data(
        &self,
        input: GetPasswordDataRequest,
    ) -> RusotoFuture<GetPasswordDataResult, GetPasswordDataError>;

    /// <p>Returns a quote and exchange information for exchanging one or more specified Convertible Reserved Instances for a new Convertible Reserved Instance. If the exchange cannot be performed, the reason is returned in the response. Use <a>AcceptReservedInstancesExchangeQuote</a> to perform the exchange.</p>
    fn get_reserved_instances_exchange_quote(
        &self,
        input: GetReservedInstancesExchangeQuoteRequest,
    ) -> RusotoFuture<GetReservedInstancesExchangeQuoteResult, GetReservedInstancesExchangeQuoteError>;

    /// <p>Lists the route tables to which the specified resource attachment propagates routes.</p>
    fn get_transit_gateway_attachment_propagations(
        &self,
        input: GetTransitGatewayAttachmentPropagationsRequest,
    ) -> RusotoFuture<
        GetTransitGatewayAttachmentPropagationsResult,
        GetTransitGatewayAttachmentPropagationsError,
    >;

    /// <p>Gets information about the associations for the specified transit gateway route table.</p>
    fn get_transit_gateway_route_table_associations(
        &self,
        input: GetTransitGatewayRouteTableAssociationsRequest,
    ) -> RusotoFuture<
        GetTransitGatewayRouteTableAssociationsResult,
        GetTransitGatewayRouteTableAssociationsError,
    >;

    /// <p>Gets information about the route table propagations for the specified transit gateway route table.</p>
    fn get_transit_gateway_route_table_propagations(
        &self,
        input: GetTransitGatewayRouteTablePropagationsRequest,
    ) -> RusotoFuture<
        GetTransitGatewayRouteTablePropagationsResult,
        GetTransitGatewayRouteTablePropagationsError,
    >;

    /// <p>Uploads a client certificate revocation list to the specified Client VPN endpoint. Uploading a client certificate revocation list overwrites the existing client certificate revocation list.</p> <p>Uploading a client certificate revocation list resets existing client connections.</p>
    fn import_client_vpn_client_certificate_revocation_list(
        &self,
        input: ImportClientVpnClientCertificateRevocationListRequest,
    ) -> RusotoFuture<
        ImportClientVpnClientCertificateRevocationListResult,
        ImportClientVpnClientCertificateRevocationListError,
    >;

    /// <p>Import single or multi-volume disk images or EBS snapshots into an Amazon Machine Image (AMI). For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html">Importing a VM as an Image Using VM Import/Export</a> in the <i>VM Import/Export User Guide</i>.</p>
    fn import_image(
        &self,
        input: ImportImageRequest,
    ) -> RusotoFuture<ImportImageResult, ImportImageError>;

    /// <p>Creates an import instance task using metadata from the specified disk image. <code>ImportInstance</code> only supports single-volume VMs. To import multi-volume VMs, use <a>ImportImage</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html">Importing a Virtual Machine Using the Amazon EC2 CLI</a>.</p> <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
    fn import_instance(
        &self,
        input: ImportInstanceRequest,
    ) -> RusotoFuture<ImportInstanceResult, ImportInstanceError>;

    /// <p>Imports the public key from an RSA key pair that you created with a third-party tool. Compare this with <a>CreateKeyPair</a>, in which AWS creates the key pair and gives the keys to you (AWS keeps a copy of the public key). With ImportKeyPair, you create the key pair and give AWS just the public key. The private key is never transferred between you and AWS.</p> <p>For more information about key pairs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn import_key_pair(
        &self,
        input: ImportKeyPairRequest,
    ) -> RusotoFuture<ImportKeyPairResult, ImportKeyPairError>;

    /// <p>Imports a disk into an EBS snapshot.</p>
    fn import_snapshot(
        &self,
        input: ImportSnapshotRequest,
    ) -> RusotoFuture<ImportSnapshotResult, ImportSnapshotError>;

    /// <p>Creates an import volume task using metadata from the specified disk image.For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/importing-your-volumes-into-amazon-ebs.html">Importing Disks to Amazon EBS</a>.</p> <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
    fn import_volume(
        &self,
        input: ImportVolumeRequest,
    ) -> RusotoFuture<ImportVolumeResult, ImportVolumeError>;

    /// <p>Modifies a Capacity Reservation's capacity and the conditions under which it is to be released. You cannot change a Capacity Reservation's instance type, EBS optimization, instance store settings, platform, Availability Zone, or instance eligibility. If you need to modify any of these attributes, we recommend that you cancel the Capacity Reservation, and then create a new one with the required attributes.</p>
    fn modify_capacity_reservation(
        &self,
        input: ModifyCapacityReservationRequest,
    ) -> RusotoFuture<ModifyCapacityReservationResult, ModifyCapacityReservationError>;

    /// <p>Modifies the specified Client VPN endpoint. You can only modify an endpoint's server certificate information, client connection logging information, DNS server, and description. Modifying the DNS server resets existing client connections.</p>
    fn modify_client_vpn_endpoint(
        &self,
        input: ModifyClientVpnEndpointRequest,
    ) -> RusotoFuture<ModifyClientVpnEndpointResult, ModifyClientVpnEndpointError>;

    /// <p>Changes the customer master key (CMK) that your account uses to encrypt EBS volumes if you don't specify a CMK in the API call.</p> <p>By default, your account has an AWS-managed CMK that is used for encrypting an EBS volume when no CMK is specified in the API call that creates the volume. By calling this API, you can specify a customer-managed CMK to use in place of the AWS-managed CMK.</p> <p>Note: Deleting or disabling the CMK that you have specified to act as your default CMK will result in instance-launch failures.</p>
    fn modify_ebs_default_kms_key_id(
        &self,
        input: ModifyEbsDefaultKmsKeyIdRequest,
    ) -> RusotoFuture<ModifyEbsDefaultKmsKeyIdResult, ModifyEbsDefaultKmsKeyIdError>;

    /// <p>Modifies the specified EC2 Fleet.</p> <p>While the EC2 Fleet is being modified, it is in the <code>modifying</code> state.</p>
    fn modify_fleet(
        &self,
        input: ModifyFleetRequest,
    ) -> RusotoFuture<ModifyFleetResult, ModifyFleetError>;

    /// <p>Modifies the specified attribute of the specified Amazon FPGA Image (AFI).</p>
    fn modify_fpga_image_attribute(
        &self,
        input: ModifyFpgaImageAttributeRequest,
    ) -> RusotoFuture<ModifyFpgaImageAttributeResult, ModifyFpgaImageAttributeError>;

    /// <p>Modify the auto-placement setting of a Dedicated Host. When auto-placement is enabled, any instances that you launch with a tenancy of <code>host</code> but without a specific host ID are placed onto any available Dedicated Host in your account that has auto-placement enabled. When auto-placement is disabled, you need to provide a host ID to have the instance launch onto a specific host. If no host ID is provided, the instance is launched onto a suitable host with auto-placement enabled.</p>
    fn modify_hosts(
        &self,
        input: ModifyHostsRequest,
    ) -> RusotoFuture<ModifyHostsResult, ModifyHostsError>;

    /// <p>Modifies the ID format for the specified resource on a per-Region basis. You can specify that resources should receive longer IDs (17-character IDs) when they are created.</p> <p>This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p> <p>This setting applies to the IAM user who makes the request; it does not apply to the entire AWS account. By default, an IAM user defaults to the same settings as the root user. If you're using this action as the root user, then these settings apply to the entire account, unless an IAM user explicitly overrides these settings for themselves. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant <code>Describe</code> command for the resource type.</p>
    fn modify_id_format(
        &self,
        input: ModifyIdFormatRequest,
    ) -> RusotoFuture<(), ModifyIdFormatError>;

    /// <p>Modifies the ID format of a resource for a specified IAM user, IAM role, or the root user for an account; or all IAM users, IAM roles, and the root user for an account. You can specify that resources should receive longer IDs (17-character IDs) when they are created. </p> <p>This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p> <p>This setting applies to the principal specified in the request; it does not apply to the principal that makes the request. </p> <p>Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant <code>Describe</code> command for the resource type.</p>
    fn modify_identity_id_format(
        &self,
        input: ModifyIdentityIdFormatRequest,
    ) -> RusotoFuture<(), ModifyIdentityIdFormatError>;

    /// <p>Modifies the specified attribute of the specified AMI. You can specify only one attribute at a time. You can use the <code>Attribute</code> parameter to specify the attribute or one of the following parameters: <code>Description</code>, <code>LaunchPermission</code>, or <code>ProductCode</code>.</p> <p>AWS Marketplace product codes cannot be modified. Images with an AWS Marketplace product code cannot be made public.</p> <p>To enable the SriovNetSupport enhanced networking attribute of an image, enable SriovNetSupport on an instance and create an AMI from the instance.</p>
    fn modify_image_attribute(
        &self,
        input: ModifyImageAttributeRequest,
    ) -> RusotoFuture<(), ModifyImageAttributeError>;

    /// <p>Modifies the specified attribute of the specified instance. You can specify only one attribute at a time.</p> <p> <b>Note: </b>Using this action to change the security groups associated with an elastic network interface (ENI) attached to an instance in a VPC can result in an error if the instance has more than one ENI. To change the security groups associated with an ENI attached to an instance that has multiple ENIs, we recommend that you use the <a>ModifyNetworkInterfaceAttribute</a> action.</p> <p>To modify some attributes, the instance must be stopped. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_ChangingAttributesWhileInstanceStopped.html">Modifying Attributes of a Stopped Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn modify_instance_attribute(
        &self,
        input: ModifyInstanceAttributeRequest,
    ) -> RusotoFuture<(), ModifyInstanceAttributeError>;

    /// <p>Modifies the Capacity Reservation settings for a stopped instance. Use this action to configure an instance to target a specific Capacity Reservation, run in any <code>open</code> Capacity Reservation with matching attributes, or run On-Demand Instance capacity.</p>
    fn modify_instance_capacity_reservation_attributes(
        &self,
        input: ModifyInstanceCapacityReservationAttributesRequest,
    ) -> RusotoFuture<
        ModifyInstanceCapacityReservationAttributesResult,
        ModifyInstanceCapacityReservationAttributesError,
    >;

    /// <p>Modifies the credit option for CPU usage on a running or stopped T2 or T3 instance. The credit options are <code>standard</code> and <code>unlimited</code>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable Performance Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn modify_instance_credit_specification(
        &self,
        input: ModifyInstanceCreditSpecificationRequest,
    ) -> RusotoFuture<ModifyInstanceCreditSpecificationResult, ModifyInstanceCreditSpecificationError>;

    /// <p>Modifies the start time for a scheduled Amazon EC2 instance event.</p>
    fn modify_instance_event_start_time(
        &self,
        input: ModifyInstanceEventStartTimeRequest,
    ) -> RusotoFuture<ModifyInstanceEventStartTimeResult, ModifyInstanceEventStartTimeError>;

    /// <p>Modifies the placement attributes for a specified instance. You can do the following:</p> <ul> <li> <p>Modify the affinity between an instance and a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html">Dedicated Host</a>. When affinity is set to <code>host</code> and the instance is not associated with a specific Dedicated Host, the next time the instance is launched, it is automatically associated with the host on which it lands. If the instance is restarted or rebooted, this relationship persists.</p> </li> <li> <p>Change the Dedicated Host with which an instance is associated.</p> </li> <li> <p>Change the instance tenancy of an instance from <code>host</code> to <code>dedicated</code>, or from <code>dedicated</code> to <code>host</code>.</p> </li> <li> <p>Move an instance to or from a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">placement group</a>.</p> </li> </ul> <p>At least one attribute for affinity, host ID, tenancy, or placement group name must be specified in the request. Affinity and tenancy can be modified in the same request.</p> <p>To modify the host ID, tenancy, placement group, or partition for an instance, the instance must be in the <code>stopped</code> state.</p>
    fn modify_instance_placement(
        &self,
        input: ModifyInstancePlacementRequest,
    ) -> RusotoFuture<ModifyInstancePlacementResult, ModifyInstancePlacementError>;

    /// <p>Modifies a launch template. You can specify which version of the launch template to set as the default version. When launching an instance, the default version applies when a launch template version is not specified.</p>
    fn modify_launch_template(
        &self,
        input: ModifyLaunchTemplateRequest,
    ) -> RusotoFuture<ModifyLaunchTemplateResult, ModifyLaunchTemplateError>;

    /// <p>Modifies the specified network interface attribute. You can specify only one attribute at a time. You can use this action to attach and detach security groups from an existing EC2 instance.</p>
    fn modify_network_interface_attribute(
        &self,
        input: ModifyNetworkInterfaceAttributeRequest,
    ) -> RusotoFuture<(), ModifyNetworkInterfaceAttributeError>;

    /// <p>Modifies the Availability Zone, instance count, instance type, or network platform (EC2-Classic or EC2-VPC) of your Reserved Instances. The Reserved Instances to be modified must be identical, except for Availability Zone, network platform, and instance type.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying Reserved Instances</a> in the Amazon Elastic Compute Cloud User Guide.</p>
    fn modify_reserved_instances(
        &self,
        input: ModifyReservedInstancesRequest,
    ) -> RusotoFuture<ModifyReservedInstancesResult, ModifyReservedInstancesError>;

    /// <p>Adds or removes permission settings for the specified snapshot. You may add or remove specified AWS account IDs from a snapshot's list of create volume permissions, but you cannot do both in a single API call. If you need to both add and remove account IDs for a snapshot, you must use multiple API calls.</p> <p>Encrypted snapshots and snapshots with AWS Marketplace product codes cannot be made public. Snapshots encrypted with your default CMK cannot be shared with other accounts.</p> <p>For more information about modifying snapshot permissions, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html">Sharing Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn modify_snapshot_attribute(
        &self,
        input: ModifySnapshotAttributeRequest,
    ) -> RusotoFuture<(), ModifySnapshotAttributeError>;

    /// <p>Modifies the specified Spot Fleet request.</p> <p>You can only modify a Spot Fleet request of type <code>maintain</code>.</p> <p>While the Spot Fleet request is being modified, it is in the <code>modifying</code> state.</p> <p>To scale up your Spot Fleet, increase its target capacity. The Spot Fleet launches the additional Spot Instances according to the allocation strategy for the Spot Fleet request. If the allocation strategy is <code>lowestPrice</code>, the Spot Fleet launches instances using the Spot pool with the lowest price. If the allocation strategy is <code>diversified</code>, the Spot Fleet distributes the instances across the Spot pools.</p> <p>To scale down your Spot Fleet, decrease its target capacity. First, the Spot Fleet cancels any open requests that exceed the new target capacity. You can request that the Spot Fleet terminate Spot Instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is <code>lowestPrice</code>, the Spot Fleet terminates the instances with the highest price per unit. If the allocation strategy is <code>diversified</code>, the Spot Fleet terminates instances across the Spot pools. Alternatively, you can request that the Spot Fleet keep the fleet at its current size, but not replace any Spot Instances that are interrupted or that you terminate manually.</p> <p>If you are finished with your Spot Fleet for now, but will use it again later, you can set the target capacity to 0.</p>
    fn modify_spot_fleet_request(
        &self,
        input: ModifySpotFleetRequestRequest,
    ) -> RusotoFuture<ModifySpotFleetRequestResponse, ModifySpotFleetRequestError>;

    /// <p>Modifies a subnet attribute. You can only modify one attribute at a time.</p>
    fn modify_subnet_attribute(
        &self,
        input: ModifySubnetAttributeRequest,
    ) -> RusotoFuture<(), ModifySubnetAttributeError>;

    /// <p>Modifies the specified VPC attachment.</p>
    fn modify_transit_gateway_vpc_attachment(
        &self,
        input: ModifyTransitGatewayVpcAttachmentRequest,
    ) -> RusotoFuture<ModifyTransitGatewayVpcAttachmentResult, ModifyTransitGatewayVpcAttachmentError>;

    /// <p>You can modify several parameters of an existing EBS volume, including volume size, volume type, and IOPS capacity. If your EBS volume is attached to a current-generation EC2 instance type, you may be able to apply these changes without stopping the instance or detaching the volume from it. For more information about modifying an EBS volume running Linux, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html">Modifying the Size, IOPS, or Type of an EBS Volume on Linux</a>. For more information about modifying an EBS volume running Windows, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html">Modifying the Size, IOPS, or Type of an EBS Volume on Windows</a>. </p> <p> When you complete a resize operation on your volume, you need to extend the volume's file-system size to take advantage of the new storage capacity. For information about extending a Linux file system, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#recognize-expanded-volume-linux">Extending a Linux File System</a>. For information about extending a Windows file system, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html#recognize-expanded-volume-windows">Extending a Windows File System</a>. </p> <p> You can use CloudWatch Events to check the status of a modification to an EBS volume. For information about CloudWatch Events, see the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/">Amazon CloudWatch Events User Guide</a>. You can also track the status of a modification using the <a>DescribeVolumesModifications</a> API. For information about tracking status changes using either method, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#monitoring_mods">Monitoring Volume Modifications</a>. </p> <p>With previous-generation instance types, resizing an EBS volume may require detaching and reattaching the volume or stopping and restarting the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html">Modifying the Size, IOPS, or Type of an EBS Volume on Linux</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html">Modifying the Size, IOPS, or Type of an EBS Volume on Windows</a>.</p> <p>If you reach the maximum volume modification rate per volume limit, you will need to wait at least six hours before applying further modifications to the affected EBS volume.</p>
    fn modify_volume(
        &self,
        input: ModifyVolumeRequest,
    ) -> RusotoFuture<ModifyVolumeResult, ModifyVolumeError>;

    /// <p>Modifies a volume attribute.</p> <p>By default, all I/O operations for the volume are suspended when the data on the volume is determined to be potentially inconsistent, to prevent undetectable, latent data corruption. The I/O access to the volume can be resumed by first enabling I/O access and then checking the data consistency on your volume.</p> <p>You can change the default behavior to resume I/O operations. We recommend that you change this only for boot volumes or for volumes that are stateless or disposable.</p>
    fn modify_volume_attribute(
        &self,
        input: ModifyVolumeAttributeRequest,
    ) -> RusotoFuture<(), ModifyVolumeAttributeError>;

    /// <p>Modifies the specified attribute of the specified VPC.</p>
    fn modify_vpc_attribute(
        &self,
        input: ModifyVpcAttributeRequest,
    ) -> RusotoFuture<(), ModifyVpcAttributeError>;

    /// <p>Modifies attributes of a specified VPC endpoint. The attributes that you can modify depend on the type of VPC endpoint (interface or gateway). For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-endpoints.html">VPC Endpoints</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn modify_vpc_endpoint(
        &self,
        input: ModifyVpcEndpointRequest,
    ) -> RusotoFuture<ModifyVpcEndpointResult, ModifyVpcEndpointError>;

    /// <p>Modifies a connection notification for VPC endpoint or VPC endpoint service. You can change the SNS topic for the notification, or the events for which to be notified. </p>
    fn modify_vpc_endpoint_connection_notification(
        &self,
        input: ModifyVpcEndpointConnectionNotificationRequest,
    ) -> RusotoFuture<
        ModifyVpcEndpointConnectionNotificationResult,
        ModifyVpcEndpointConnectionNotificationError,
    >;

    /// <p>Modifies the attributes of your VPC endpoint service configuration. You can change the Network Load Balancers for your service, and you can specify whether acceptance is required for requests to connect to your endpoint service through an interface VPC endpoint.</p>
    fn modify_vpc_endpoint_service_configuration(
        &self,
        input: ModifyVpcEndpointServiceConfigurationRequest,
    ) -> RusotoFuture<
        ModifyVpcEndpointServiceConfigurationResult,
        ModifyVpcEndpointServiceConfigurationError,
    >;

    /// <p>Modifies the permissions for your <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/endpoint-service.html">VPC endpoint service</a>. You can add or remove permissions for service consumers (IAM users, IAM roles, and AWS accounts) to connect to your endpoint service.</p> <p>If you grant permissions to all principals, the service is public. Any users who know the name of a public service can send a request to attach an endpoint. If the service does not require manual approval, attachments are automatically approved.</p>
    fn modify_vpc_endpoint_service_permissions(
        &self,
        input: ModifyVpcEndpointServicePermissionsRequest,
    ) -> RusotoFuture<
        ModifyVpcEndpointServicePermissionsResult,
        ModifyVpcEndpointServicePermissionsError,
    >;

    /// <p>Modifies the VPC peering connection options on one side of a VPC peering connection. You can do the following:</p> <ul> <li> <p>Enable/disable communication over the peering connection between an EC2-Classic instance that's linked to your VPC (using ClassicLink) and instances in the peer VPC.</p> </li> <li> <p>Enable/disable communication over the peering connection between instances in your VPC and an EC2-Classic instance that's linked to the peer VPC.</p> </li> <li> <p>Enable/disable the ability to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.</p> </li> </ul> <p>If the peered VPCs are in the same AWS account, you can enable DNS resolution for queries from the local VPC. This ensures that queries from the local VPC resolve to private IP addresses in the peer VPC. This option is not available if the peered VPCs are in different AWS accounts or different Regions. For peered VPCs in different AWS accounts, each AWS account owner must initiate a separate request to modify the peering connection options. For inter-region peering connections, you must use the Region for the requester VPC to modify the requester VPC peering options and the Region for the accepter VPC to modify the accepter VPC peering options. To verify which VPCs are the accepter and the requester for a VPC peering connection, use the <a>DescribeVpcPeeringConnections</a> command.</p>
    fn modify_vpc_peering_connection_options(
        &self,
        input: ModifyVpcPeeringConnectionOptionsRequest,
    ) -> RusotoFuture<ModifyVpcPeeringConnectionOptionsResult, ModifyVpcPeeringConnectionOptionsError>;

    /// <p>Modifies the instance tenancy attribute of the specified VPC. You can change the instance tenancy attribute of a VPC to <code>default</code> only. You cannot change the instance tenancy attribute to <code>dedicated</code>.</p> <p>After you modify the tenancy of the VPC, any new instances that you launch into the VPC have a tenancy of <code>default</code>, unless you specify otherwise during launch. The tenancy of any existing instances in the VPC is not affected.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html">Dedicated Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn modify_vpc_tenancy(
        &self,
        input: ModifyVpcTenancyRequest,
    ) -> RusotoFuture<ModifyVpcTenancyResult, ModifyVpcTenancyError>;

    /// <p>Modifies the target gateway of a AWS Site-to-Site VPN connection. The following migration options are available:</p> <ul> <li> <p>An existing virtual private gateway to a new virtual private gateway</p> </li> <li> <p>An existing virtual private gateway to a transit gateway</p> </li> <li> <p>An existing transit gateway to a new transit gateway</p> </li> <li> <p>An existing transit gateway to a virtual private gateway</p> </li> </ul> <p>Before you perform the migration to the new gateway, you must configure the new gateway. Use <a>CreateVpnGateway</a> to create a virtual private gateway, or <a>CreateTransitGateway</a> to create a transit gateway.</p> <p>This step is required when you migrate from a virtual private gateway with static routes to a transit gateway. </p> <p>You must delete the static routes before you migrate to the new gateway.</p> <p>Keep a copy of the static route before you delete it. You will need to add back these routes to the transit gateway after the VPN connection migration is complete.</p> <p>After you migrate to the new gateway, you might need to modify your VPC route table. Use <a>CreateRoute</a> and <a>DeleteRoute</a> to make the changes described in <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/modify-vpn-target.html#step-update-routing">VPN Gateway Target Modification Required VPC Route Table Updates</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p> <p> When the new gateway is a transit gateway, modify the transit gateway route table to allow traffic between the VPC and the AWS Site-to-Site VPN connection. Use <a>CreateTransitGatewayRoute</a> to add the routes.</p> <p> If you deleted VPN static routes, you must add the static routes to the transit gateway route table.</p> <p>After you perform this operation, the AWS VPN endpoint's IP addresses on the AWS side and the tunnel options remain intact. Your s2slong; connection will be temporarily unavailable for approximately 10 minutes while we provision the new endpoints </p>
    fn modify_vpn_connection(
        &self,
        input: ModifyVpnConnectionRequest,
    ) -> RusotoFuture<ModifyVpnConnectionResult, ModifyVpnConnectionError>;

    /// <p>Enables detailed monitoring for a running instance. Otherwise, basic monitoring is enabled. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitoring Your Instances and Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>To disable detailed monitoring, see .</p>
    fn monitor_instances(
        &self,
        input: MonitorInstancesRequest,
    ) -> RusotoFuture<MonitorInstancesResult, MonitorInstancesError>;

    /// <p>Moves an Elastic IP address from the EC2-Classic platform to the EC2-VPC platform. The Elastic IP address must be allocated to your account for more than 24 hours, and it must not be associated with an instance. After the Elastic IP address is moved, it is no longer available for use in the EC2-Classic platform, unless you move it back using the <a>RestoreAddressToClassic</a> request. You cannot move an Elastic IP address that was originally allocated for use in the EC2-VPC platform to the EC2-Classic platform. </p>
    fn move_address_to_vpc(
        &self,
        input: MoveAddressToVpcRequest,
    ) -> RusotoFuture<MoveAddressToVpcResult, MoveAddressToVpcError>;

    /// <p>Provisions an address range for use with your AWS resources through bring your own IP addresses (BYOIP) and creates a corresponding address pool. After the address range is provisioned, it is ready to be advertised using <a>AdvertiseByoipCidr</a>.</p> <p>AWS verifies that you own the address range and are authorized to advertise it. You must ensure that the address range is registered to you and that you created an RPKI ROA to authorize Amazon ASNs 16509 and 14618 to advertise the address range. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">Bring Your Own IP Addresses (BYOIP)</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Provisioning an address range is an asynchronous operation, so the call returns immediately, but the address range is not ready to use until its status changes from <code>pending-provision</code> to <code>provisioned</code>. To monitor the status of an address range, use <a>DescribeByoipCidrs</a>. To allocate an Elastic IP address from your address pool, use <a>AllocateAddress</a> with either the specific address from the address pool or the ID of the address pool.</p>
    fn provision_byoip_cidr(
        &self,
        input: ProvisionByoipCidrRequest,
    ) -> RusotoFuture<ProvisionByoipCidrResult, ProvisionByoipCidrError>;

    /// <p>Purchase a reservation with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation. This action results in the specified reservation being purchased and charged to your account.</p>
    fn purchase_host_reservation(
        &self,
        input: PurchaseHostReservationRequest,
    ) -> RusotoFuture<PurchaseHostReservationResult, PurchaseHostReservationError>;

    /// <p>Purchases a Reserved Instance for use with your account. With Reserved Instances, you pay a lower hourly rate compared to On-Demand instance pricing.</p> <p>Use <a>DescribeReservedInstancesOfferings</a> to get a list of Reserved Instance offerings that match your specifications. After you've purchased a Reserved Instance, you can check for your new Reserved Instance with <a>DescribeReservedInstances</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved Instances</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn purchase_reserved_instances_offering(
        &self,
        input: PurchaseReservedInstancesOfferingRequest,
    ) -> RusotoFuture<PurchaseReservedInstancesOfferingResult, PurchaseReservedInstancesOfferingError>;

    /// <p>Purchases the Scheduled Instances with the specified schedule.</p> <p>Scheduled Instances enable you to purchase Amazon EC2 compute capacity by the hour for a one-year term. Before you can purchase a Scheduled Instance, you must call <a>DescribeScheduledInstanceAvailability</a> to check for available schedules and obtain a purchase token. After you purchase a Scheduled Instance, you must call <a>RunScheduledInstances</a> during each scheduled time period.</p> <p>After you purchase a Scheduled Instance, you can't cancel, modify, or resell your purchase.</p>
    fn purchase_scheduled_instances(
        &self,
        input: PurchaseScheduledInstancesRequest,
    ) -> RusotoFuture<PurchaseScheduledInstancesResult, PurchaseScheduledInstancesError>;

    /// <p>Requests a reboot of the specified instances. This operation is asynchronous; it only queues a request to reboot the specified instances. The operation succeeds if the instances are valid and belong to you. Requests to reboot terminated instances are ignored.</p> <p>If an instance does not cleanly shut down within four minutes, Amazon EC2 performs a hard reboot.</p> <p>For more information about troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html">Getting Console Output and Rebooting Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn reboot_instances(
        &self,
        input: RebootInstancesRequest,
    ) -> RusotoFuture<(), RebootInstancesError>;

    /// <p>Registers an AMI. When you're creating an AMI, this is the final step you must complete before you can launch an instance from the AMI. For more information about creating AMIs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami.html">Creating Your Own AMIs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <note> <p>For Amazon EBS-backed instances, <a>CreateImage</a> creates and registers the AMI in a single request, so you don't have to register the AMI yourself.</p> </note> <p>You can also use <code>RegisterImage</code> to create an Amazon EBS-backed Linux AMI from a snapshot of a root device volume. You specify the snapshot using the block device mapping. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-launch-snapshot.html">Launching a Linux Instance from a Backup</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>You can't register an image where a secondary (non-root) snapshot has AWS Marketplace product codes.</p> <p>Some Linux distributions, such as Red Hat Enterprise Linux (RHEL) and SUSE Linux Enterprise Server (SLES), use the EC2 billing product code associated with an AMI to verify the subscription status for package updates. Creating an AMI from an EBS snapshot does not maintain this billing code, and instances launched from such an AMI are not able to connect to package update infrastructure. If you purchase a Reserved Instance offering for one of these Linux distributions and launch instances using an AMI that does not contain the required billing code, your Reserved Instance is not applied to these instances.</p> <p>To create an AMI for operating systems that require a billing code, see <a>CreateImage</a>.</p> <p>If needed, you can deregister an AMI at any time. Any modifications you make to an AMI backed by an instance store volume invalidates its registration. If you make changes to an image, deregister the previous image and register the new image.</p>
    fn register_image(
        &self,
        input: RegisterImageRequest,
    ) -> RusotoFuture<RegisterImageResult, RegisterImageError>;

    /// <p>Rejects a request to attach a VPC to a transit gateway.</p> <p>The VPC attachment must be in the <code>pendingAcceptance</code> state. Use <a>DescribeTransitGatewayVpcAttachments</a> to view your pending VPC attachment requests. Use <a>AcceptTransitGatewayVpcAttachment</a> to accept a VPC attachment request.</p>
    fn reject_transit_gateway_vpc_attachment(
        &self,
        input: RejectTransitGatewayVpcAttachmentRequest,
    ) -> RusotoFuture<RejectTransitGatewayVpcAttachmentResult, RejectTransitGatewayVpcAttachmentError>;

    /// <p>Rejects one or more VPC endpoint connection requests to your VPC endpoint service.</p>
    fn reject_vpc_endpoint_connections(
        &self,
        input: RejectVpcEndpointConnectionsRequest,
    ) -> RusotoFuture<RejectVpcEndpointConnectionsResult, RejectVpcEndpointConnectionsError>;

    /// <p>Rejects a VPC peering connection request. The VPC peering connection must be in the <code>pending-acceptance</code> state. Use the <a>DescribeVpcPeeringConnections</a> request to view your outstanding VPC peering connection requests. To delete an active VPC peering connection, or to delete a VPC peering connection request that you initiated, use <a>DeleteVpcPeeringConnection</a>.</p>
    fn reject_vpc_peering_connection(
        &self,
        input: RejectVpcPeeringConnectionRequest,
    ) -> RusotoFuture<RejectVpcPeeringConnectionResult, RejectVpcPeeringConnectionError>;

    /// <p>Releases the specified Elastic IP address.</p> <p>[EC2-Classic, default VPC] Releasing an Elastic IP address automatically disassociates it from any instance that it's associated with. To disassociate an Elastic IP address without releasing it, use <a>DisassociateAddress</a>.</p> <p>[Nondefault VPC] You must use <a>DisassociateAddress</a> to disassociate the Elastic IP address before you can release it. Otherwise, Amazon EC2 returns an error (<code>InvalidIPAddress.InUse</code>).</p> <p>After releasing an Elastic IP address, it is released to the IP address pool. Be sure to update your DNS records and any servers or devices that communicate with the address. If you attempt to release an Elastic IP address that you already released, you'll get an <code>AuthFailure</code> error if the address is already allocated to another AWS account.</p> <p>[EC2-VPC] After you release an Elastic IP address for use in a VPC, you might be able to recover it. For more information, see <a>AllocateAddress</a>.</p>
    fn release_address(
        &self,
        input: ReleaseAddressRequest,
    ) -> RusotoFuture<(), ReleaseAddressError>;

    /// <p>When you no longer want to use an On-Demand Dedicated Host it can be released. On-Demand billing is stopped and the host goes into <code>released</code> state. The host ID of Dedicated Hosts that have been released can no longer be specified in another request, for example, to modify the host. You must stop or terminate all instances on a host before it can be released.</p> <p>When Dedicated Hosts are released, it may take some time for them to stop counting toward your limit and you may receive capacity errors when trying to allocate new Dedicated Hosts. Wait a few minutes and then try again.</p> <p>Released hosts still appear in a <a>DescribeHosts</a> response.</p>
    fn release_hosts(
        &self,
        input: ReleaseHostsRequest,
    ) -> RusotoFuture<ReleaseHostsResult, ReleaseHostsError>;

    /// <p>Replaces an IAM instance profile for the specified running instance. You can use this action to change the IAM instance profile that's associated with an instance without having to disassociate the existing IAM instance profile first.</p> <p>Use <a>DescribeIamInstanceProfileAssociations</a> to get the association ID.</p>
    fn replace_iam_instance_profile_association(
        &self,
        input: ReplaceIamInstanceProfileAssociationRequest,
    ) -> RusotoFuture<
        ReplaceIamInstanceProfileAssociationResult,
        ReplaceIamInstanceProfileAssociationError,
    >;

    /// <p>Changes which network ACL a subnet is associated with. By default when you create a subnet, it's automatically associated with the default network ACL. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>This is an idempotent operation.</p>
    fn replace_network_acl_association(
        &self,
        input: ReplaceNetworkAclAssociationRequest,
    ) -> RusotoFuture<ReplaceNetworkAclAssociationResult, ReplaceNetworkAclAssociationError>;

    /// <p>Replaces an entry (rule) in a network ACL. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn replace_network_acl_entry(
        &self,
        input: ReplaceNetworkAclEntryRequest,
    ) -> RusotoFuture<(), ReplaceNetworkAclEntryError>;

    /// <p>Replaces an existing route within a route table in a VPC. You must provide only one of the following: internet gateway or virtual private gateway, NAT instance, NAT gateway, VPC peering connection, network interface, or egress-only internet gateway.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn replace_route(&self, input: ReplaceRouteRequest) -> RusotoFuture<(), ReplaceRouteError>;

    /// <p>Changes the route table associated with a given subnet in a VPC. After the operation completes, the subnet uses the routes in the new route table it's associated with. For more information about route tables, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>You can also use ReplaceRouteTableAssociation to change which table is the main route table in the VPC. You just specify the main route table's association ID and the route table to be the new main route table.</p>
    fn replace_route_table_association(
        &self,
        input: ReplaceRouteTableAssociationRequest,
    ) -> RusotoFuture<ReplaceRouteTableAssociationResult, ReplaceRouteTableAssociationError>;

    /// <p>Replaces the specified route in the specified transit gateway route table.</p>
    fn replace_transit_gateway_route(
        &self,
        input: ReplaceTransitGatewayRouteRequest,
    ) -> RusotoFuture<ReplaceTransitGatewayRouteResult, ReplaceTransitGatewayRouteError>;

    /// <p>Submits feedback about the status of an instance. The instance must be in the <code>running</code> state. If your experience with the instance differs from the instance status returned by <a>DescribeInstanceStatus</a>, use <a>ReportInstanceStatus</a> to report your experience with the instance. Amazon EC2 collects this information to improve the accuracy of status checks.</p> <p>Use of this action does not change the value returned by <a>DescribeInstanceStatus</a>.</p>
    fn report_instance_status(
        &self,
        input: ReportInstanceStatusRequest,
    ) -> RusotoFuture<(), ReportInstanceStatusError>;

    /// <p>Creates a Spot Fleet request.</p> <p>The Spot Fleet request specifies the total target capacity and the On-Demand target capacity. Amazon EC2 calculates the difference between the total capacity and On-Demand capacity, and launches the difference as Spot capacity.</p> <p>You can submit a single request that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet.</p> <p>By default, the Spot Fleet requests Spot Instances in the Spot pool where the price per unit is the lowest. Each launch specification can include its own instance weighting that reflects the value of the instance type to your application workload.</p> <p>Alternatively, you can specify that the Spot Fleet distribute the target capacity across the Spot pools included in its launch specifications. By ensuring that the Spot Instances in your Spot Fleet are in different Spot pools, you can improve the availability of your fleet.</p> <p>You can specify tags for the Spot Instances. You cannot tag other resource types in a Spot Fleet request because only the <code>instance</code> resource type is supported.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html">Spot Fleet Requests</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    fn request_spot_fleet(
        &self,
        input: RequestSpotFleetRequest,
    ) -> RusotoFuture<RequestSpotFleetResponse, RequestSpotFleetError>;

    /// <p>Creates a Spot Instance request.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html">Spot Instance Requests</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    fn request_spot_instances(
        &self,
        input: RequestSpotInstancesRequest,
    ) -> RusotoFuture<RequestSpotInstancesResult, RequestSpotInstancesError>;

    /// <p>Resets the account's default customer master key (CMK) to the account's AWS-managed default CMK. This default CMK is used to encrypt EBS volumes when you have enabled EBS encryption by default without specifying a CMK in the API call. If you have not enabled encryption by default, then this CMK is used when you set the <code>Encrypted</code> parameter to true without specifying a custom CMK in the API call.</p> <p>Call this API if you have modified the default CMK that is used for encrypting your EBS volume using <a>ModifyEbsDefaultKmsKeyId</a> and you want to reset it to the AWS-managed default CMK. After resetting, you can continue to provide a CMK of your choice in the API call that creates the volume. However, if no CMK is specified, your account will encrypt the volume to the AWS-managed default CMK.</p>
    fn reset_ebs_default_kms_key_id(
        &self,
        input: ResetEbsDefaultKmsKeyIdRequest,
    ) -> RusotoFuture<ResetEbsDefaultKmsKeyIdResult, ResetEbsDefaultKmsKeyIdError>;

    /// <p>Resets the specified attribute of the specified Amazon FPGA Image (AFI) to its default value. You can only reset the load permission attribute.</p>
    fn reset_fpga_image_attribute(
        &self,
        input: ResetFpgaImageAttributeRequest,
    ) -> RusotoFuture<ResetFpgaImageAttributeResult, ResetFpgaImageAttributeError>;

    /// <p><p>Resets an attribute of an AMI to its default value.</p> <note> <p>The productCodes attribute can&#39;t be reset.</p> </note></p>
    fn reset_image_attribute(
        &self,
        input: ResetImageAttributeRequest,
    ) -> RusotoFuture<(), ResetImageAttributeError>;

    /// <p>Resets an attribute of an instance to its default value. To reset the <code>kernel</code> or <code>ramdisk</code>, the instance must be in a stopped state. To reset the <code>sourceDestCheck</code>, the instance can be either running or stopped.</p> <p>The <code>sourceDestCheck</code> attribute controls whether source/destination checking is enabled. The default value is <code>true</code>, which means checking is enabled. This value must be <code>false</code> for a NAT instance to perform NAT. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html">NAT Instances</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn reset_instance_attribute(
        &self,
        input: ResetInstanceAttributeRequest,
    ) -> RusotoFuture<(), ResetInstanceAttributeError>;

    /// <p>Resets a network interface attribute. You can specify only one attribute at a time.</p>
    fn reset_network_interface_attribute(
        &self,
        input: ResetNetworkInterfaceAttributeRequest,
    ) -> RusotoFuture<(), ResetNetworkInterfaceAttributeError>;

    /// <p>Resets permission settings for the specified snapshot.</p> <p>For more information about modifying snapshot permissions, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html">Sharing Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn reset_snapshot_attribute(
        &self,
        input: ResetSnapshotAttributeRequest,
    ) -> RusotoFuture<(), ResetSnapshotAttributeError>;

    /// <p>Restores an Elastic IP address that was previously moved to the EC2-VPC platform back to the EC2-Classic platform. You cannot move an Elastic IP address that was originally allocated for use in EC2-VPC. The Elastic IP address must not be associated with an instance or network interface.</p>
    fn restore_address_to_classic(
        &self,
        input: RestoreAddressToClassicRequest,
    ) -> RusotoFuture<RestoreAddressToClassicResult, RestoreAddressToClassicError>;

    /// <p>Removes an ingress authorization rule from a Client VPN endpoint. </p>
    fn revoke_client_vpn_ingress(
        &self,
        input: RevokeClientVpnIngressRequest,
    ) -> RusotoFuture<RevokeClientVpnIngressResult, RevokeClientVpnIngressError>;

    /// <p>[VPC only] Removes the specified egress rules from a security group for EC2-VPC. This action doesn't apply to security groups for use in EC2-Classic. To remove a rule, the values that you specify (for example, ports) must match the existing rule's values exactly.</p> <p>Each rule consists of the protocol and the IPv4 or IPv6 CIDR range or source security group. For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule has a description, you do not have to specify the description to revoke the rule.</p> <p>Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.</p>
    fn revoke_security_group_egress(
        &self,
        input: RevokeSecurityGroupEgressRequest,
    ) -> RusotoFuture<(), RevokeSecurityGroupEgressError>;

    /// <p>Removes the specified ingress rules from a security group. To remove a rule, the values that you specify (for example, ports) must match the existing rule's values exactly.</p> <note> <p>[EC2-Classic only] If the values you specify do not match the existing rule's values, no error is returned. Use <a>DescribeSecurityGroups</a> to verify that the rule has been removed.</p> </note> <p>Each rule consists of the protocol and the CIDR range or source security group. For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule has a description, you do not have to specify the description to revoke the rule.</p> <p>Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.</p>
    fn revoke_security_group_ingress(
        &self,
        input: RevokeSecurityGroupIngressRequest,
    ) -> RusotoFuture<(), RevokeSecurityGroupIngressError>;

    /// <p>Launches the specified number of instances using an AMI for which you have permissions. </p> <p>You can specify a number of options, or leave the default options. The following rules apply:</p> <ul> <li> <p>[EC2-VPC] If you don't specify a subnet ID, we choose a default subnet from your default VPC for you. If you don't have a default VPC, you must specify a subnet ID in the request.</p> </li> <li> <p>[EC2-Classic] If don't specify an Availability Zone, we choose one for you.</p> </li> <li> <p>Some instance types must be launched into a VPC. If you do not have a default VPC, or if you do not specify a subnet ID, the request fails. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-vpc.html#vpc-only-instance-types">Instance Types Available Only in a VPC</a>.</p> </li> <li> <p>[EC2-VPC] All instances have a network interface with a primary private IPv4 address. If you don't specify this address, we choose one from the IPv4 range of your subnet.</p> </li> <li> <p>Not all instance types support IPv6 addresses. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a>.</p> </li> <li> <p>If you don't specify a security group ID, we use the default security group. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Security Groups</a>.</p> </li> <li> <p>If any of the AMIs have a product code attached for which the user has not subscribed, the request fails.</p> </li> </ul> <p>You can create a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">launch template</a>, which is a resource that contains the parameters to launch an instance. When you launch an instance using <a>RunInstances</a>, you can specify the launch template instead of specifying the launch parameters.</p> <p>To ensure faster instance launches, break up large requests into smaller batches. For example, create five separate launch requests for 100 instances each instead of one launch request for 500 instances.</p> <p>An instance is ready for you to use when it's in the <code>running</code> state. You can check the state of your instance using <a>DescribeInstances</a>. You can tag instances and EBS volumes during launch, after launch, or both. For more information, see <a>CreateTags</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Amazon EC2 Resources</a>.</p> <p>Linux instances have access to the public key of the key pair at boot. You can use this key to provide secure access to the instance. Amazon EC2 public images use this feature to provide secure access without passwords. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>For troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_InstanceStraightToTerminated.html">What To Do If An Instance Immediately Terminates</a>, and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html">Troubleshooting Connecting to Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn run_instances(
        &self,
        input: RunInstancesRequest,
    ) -> RusotoFuture<Reservation, RunInstancesError>;

    /// <p>Launches the specified Scheduled Instances.</p> <p>Before you can launch a Scheduled Instance, you must purchase it and obtain an identifier using <a>PurchaseScheduledInstances</a>.</p> <p>You must launch a Scheduled Instance during its scheduled time period. You can't stop or reboot a Scheduled Instance, but you can terminate it as needed. If you terminate a Scheduled Instance before the current scheduled time period ends, you can launch it again after a few minutes. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-scheduled-instances.html">Scheduled Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn run_scheduled_instances(
        &self,
        input: RunScheduledInstancesRequest,
    ) -> RusotoFuture<RunScheduledInstancesResult, RunScheduledInstancesError>;

    /// <p>Searches for routes in the specified transit gateway route table.</p>
    fn search_transit_gateway_routes(
        &self,
        input: SearchTransitGatewayRoutesRequest,
    ) -> RusotoFuture<SearchTransitGatewayRoutesResult, SearchTransitGatewayRoutesError>;

    /// <p>Starts an Amazon EBS-backed instance that you've previously stopped.</p> <p>Instances that use Amazon EBS volumes as their root devices can be quickly stopped and started. When an instance is stopped, the compute resources are released and you are not billed for instance usage. However, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. You can restart your instance at any time. Every time you start your Windows instance, Amazon EC2 charges you for a full instance hour. If you stop and restart your Windows instance, a new instance hour begins and Amazon EC2 charges you for another full instance hour even if you are still within the same 60-minute period when it was stopped. Every time you start your Linux instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage.</p> <p>Before stopping an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM.</p> <p>Performing this operation on an instance that uses an instance store as its root device returns an error.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html">Stopping Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn start_instances(
        &self,
        input: StartInstancesRequest,
    ) -> RusotoFuture<StartInstancesResult, StartInstancesError>;

    /// <p>Stops an Amazon EBS-backed instance.</p> <p>You can use the Stop action to hibernate an instance if the instance is <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#enabling-hibernation">enabled for hibernation</a> and it meets the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites">hibernation prerequisites</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>We don't charge usage for a stopped instance, or data transfer fees; however, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. Every time you start your Windows instance, Amazon EC2 charges you for a full instance hour. If you stop and restart your Windows instance, a new instance hour begins and Amazon EC2 charges you for another full instance hour even if you are still within the same 60-minute period when it was stopped. Every time you start your Linux instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage.</p> <p>You can't start, stop, or hibernate Spot Instances, and you can't stop or hibernate instance store-backed instances. For information about using hibernation for Spot Instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-interruptions.html#hibernate-spot-instances">Hibernating Interrupted Spot Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>When you stop or hibernate an instance, we shut it down. You can restart your instance at any time. Before stopping or hibernating an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM, but hibernating an instance does preserve data stored in RAM. If an instance cannot hibernate successfully, a normal shutdown occurs.</p> <p>Stopping and hibernating an instance is different to rebooting or terminating it. For example, when you stop or hibernate an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, the root device and any other devices attached during the instance launch are automatically deleted. For more information about the differences between rebooting, stopping, hibernating, and terminating instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance Lifecycle</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>When you stop an instance, we attempt to shut it down forcibly after a short while. If your instance appears stuck in the stopping state after a period of time, there may be an issue with the underlying host computer. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesStopping.html">Troubleshooting Stopping Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn stop_instances(
        &self,
        input: StopInstancesRequest,
    ) -> RusotoFuture<StopInstancesResult, StopInstancesError>;

    /// <p>Terminates active Client VPN endpoint connections. This action can be used to terminate a specific client connection, or up to five connections established by a specific user.</p>
    fn terminate_client_vpn_connections(
        &self,
        input: TerminateClientVpnConnectionsRequest,
    ) -> RusotoFuture<TerminateClientVpnConnectionsResult, TerminateClientVpnConnectionsError>;

    /// <p>Shuts down the specified instances. This operation is idempotent; if you terminate an instance more than once, each call succeeds. </p> <p>If you specify multiple instances and the request fails (for example, because of a single incorrect instance ID), none of the instances are terminated.</p> <p>Terminated instances remain visible after termination (for approximately one hour).</p> <p>By default, Amazon EC2 deletes all EBS volumes that were attached when the instance launched. Volumes attached after instance launch continue running.</p> <p>You can stop, start, and terminate EBS-backed instances. You can only terminate instance store-backed instances. What happens to an instance differs if you stop it or terminate it. For example, when you stop an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, any attached EBS volumes with the <code>DeleteOnTermination</code> block device mapping parameter set to <code>true</code> are automatically deleted. For more information about the differences between stopping and terminating instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance Lifecycle</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>For more information about troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesShuttingDown.html">Troubleshooting Terminating Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn terminate_instances(
        &self,
        input: TerminateInstancesRequest,
    ) -> RusotoFuture<TerminateInstancesResult, TerminateInstancesError>;

    /// <p>Unassigns one or more IPv6 addresses from a network interface.</p>
    fn unassign_ipv_6_addresses(
        &self,
        input: UnassignIpv6AddressesRequest,
    ) -> RusotoFuture<UnassignIpv6AddressesResult, UnassignIpv6AddressesError>;

    /// <p>Unassigns one or more secondary private IP addresses from a network interface.</p>
    fn unassign_private_ip_addresses(
        &self,
        input: UnassignPrivateIpAddressesRequest,
    ) -> RusotoFuture<(), UnassignPrivateIpAddressesError>;

    /// <p>Disables detailed monitoring for a running instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitoring Your Instances and Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn unmonitor_instances(
        &self,
        input: UnmonitorInstancesRequest,
    ) -> RusotoFuture<UnmonitorInstancesResult, UnmonitorInstancesError>;

    /// <p>[VPC only] Updates the description of an egress (outbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously.</p> <p>You specify the description as part of the IP permissions structure. You can remove a description for a security group rule by omitting the description parameter in the request.</p>
    fn update_security_group_rule_descriptions_egress(
        &self,
        input: UpdateSecurityGroupRuleDescriptionsEgressRequest,
    ) -> RusotoFuture<
        UpdateSecurityGroupRuleDescriptionsEgressResult,
        UpdateSecurityGroupRuleDescriptionsEgressError,
    >;

    /// <p>Updates the description of an ingress (inbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously.</p> <p>You specify the description as part of the IP permissions structure. You can remove a description for a security group rule by omitting the description parameter in the request.</p>
    fn update_security_group_rule_descriptions_ingress(
        &self,
        input: UpdateSecurityGroupRuleDescriptionsIngressRequest,
    ) -> RusotoFuture<
        UpdateSecurityGroupRuleDescriptionsIngressResult,
        UpdateSecurityGroupRuleDescriptionsIngressError,
    >;

    /// <p>Stops advertising an IPv4 address range that is provisioned as an address pool.</p> <p>You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time.</p> <p>It can take a few minutes before traffic to the specified addresses stops routing to AWS because of BGP propagation delays.</p>
    fn withdraw_byoip_cidr(
        &self,
        input: WithdrawByoipCidrRequest,
    ) -> RusotoFuture<WithdrawByoipCidrResult, WithdrawByoipCidrError>;
}
/// A client for the Amazon EC2 API.
#[derive(Clone)]
pub struct Ec2Client {
    client: Client,
    region: region::Region,
}

impl Ec2Client {
    /// Creates a client backed by the default tokio event loop.
    ///
    /// The client will use the default credentials provider and tls client.
    pub fn new(region: region::Region) -> Ec2Client {
        Ec2Client {
            client: Client::shared(),
            region,
        }
    }

    pub fn new_with<P, D>(
        request_dispatcher: D,
        credentials_provider: P,
        region: region::Region,
    ) -> Ec2Client
    where
        P: ProvideAwsCredentials + Send + Sync + 'static,
        D: DispatchSignedRequest + Send + Sync + 'static,
    {
        Ec2Client {
            client: Client::new_with(credentials_provider, request_dispatcher),
            region,
        }
    }
}

impl Ec2 for Ec2Client {
    /// <p>Accepts the Convertible Reserved Instance exchange quote described in the <a>GetReservedInstancesExchangeQuote</a> call.</p>
    fn accept_reserved_instances_exchange_quote(
        &self,
        input: AcceptReservedInstancesExchangeQuoteRequest,
    ) -> RusotoFuture<
        AcceptReservedInstancesExchangeQuoteResult,
        AcceptReservedInstancesExchangeQuoteError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AcceptReservedInstancesExchangeQuote");
        params.put("Version", "2016-11-15");
        AcceptReservedInstancesExchangeQuoteRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(AcceptReservedInstancesExchangeQuoteError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = AcceptReservedInstancesExchangeQuoteResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            AcceptReservedInstancesExchangeQuoteResultDeserializer::deserialize(
                                &actual_tag_name,
                                &mut stack,
                            )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Accepts a request to attach a VPC to a transit gateway.</p> <p>The VPC attachment must be in the <code>pendingAcceptance</code> state. Use <a>DescribeTransitGatewayVpcAttachments</a> to view your pending VPC attachment requests. Use <a>RejectTransitGatewayVpcAttachment</a> to reject a VPC attachment request.</p>
    fn accept_transit_gateway_vpc_attachment(
        &self,
        input: AcceptTransitGatewayVpcAttachmentRequest,
    ) -> RusotoFuture<AcceptTransitGatewayVpcAttachmentResult, AcceptTransitGatewayVpcAttachmentError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AcceptTransitGatewayVpcAttachment");
        params.put("Version", "2016-11-15");
        AcceptTransitGatewayVpcAttachmentRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(AcceptTransitGatewayVpcAttachmentError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = AcceptTransitGatewayVpcAttachmentResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = AcceptTransitGatewayVpcAttachmentResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Accepts one or more interface VPC endpoint connection requests to your VPC endpoint service.</p>
    fn accept_vpc_endpoint_connections(
        &self,
        input: AcceptVpcEndpointConnectionsRequest,
    ) -> RusotoFuture<AcceptVpcEndpointConnectionsResult, AcceptVpcEndpointConnectionsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AcceptVpcEndpointConnections");
        params.put("Version", "2016-11-15");
        AcceptVpcEndpointConnectionsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(AcceptVpcEndpointConnectionsError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = AcceptVpcEndpointConnectionsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = AcceptVpcEndpointConnectionsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Accept a VPC peering connection request. To accept a request, the VPC peering connection must be in the <code>pending-acceptance</code> state, and you must be the owner of the peer VPC. Use <a>DescribeVpcPeeringConnections</a> to view your outstanding VPC peering connection requests.</p> <p>For an inter-Region VPC peering connection request, you must accept the VPC peering connection in the Region of the accepter VPC.</p>
    fn accept_vpc_peering_connection(
        &self,
        input: AcceptVpcPeeringConnectionRequest,
    ) -> RusotoFuture<AcceptVpcPeeringConnectionResult, AcceptVpcPeeringConnectionError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AcceptVpcPeeringConnection");
        params.put("Version", "2016-11-15");
        AcceptVpcPeeringConnectionRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(AcceptVpcPeeringConnectionError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = AcceptVpcPeeringConnectionResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = AcceptVpcPeeringConnectionResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Advertises an IPv4 address range that is provisioned for use with your AWS resources through bring your own IP addresses (BYOIP).</p> <p>You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time.</p> <p>We recommend that you stop advertising the BYOIP CIDR from other locations when you advertise it from AWS. To minimize down time, you can configure your AWS resources to use an address from a BYOIP CIDR before it is advertised, and then simultaneously stop advertising it from the current location and start advertising it through AWS.</p> <p>It can take a few minutes before traffic to the specified addresses starts routing to AWS because of BGP propagation delays.</p> <p>To stop advertising the BYOIP CIDR, use <a>WithdrawByoipCidr</a>.</p>
    fn advertise_byoip_cidr(
        &self,
        input: AdvertiseByoipCidrRequest,
    ) -> RusotoFuture<AdvertiseByoipCidrResult, AdvertiseByoipCidrError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AdvertiseByoipCidr");
        params.put("Version", "2016-11-15");
        AdvertiseByoipCidrRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(AdvertiseByoipCidrError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = AdvertiseByoipCidrResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = AdvertiseByoipCidrResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Allocates an Elastic IP address to your AWS account. After you allocate the Elastic IP address you can associate it with an instance or network interface. After you release an Elastic IP address, it is released to the IP address pool and can be allocated to a different AWS account.</p> <p>You can allocate an Elastic IP address from an address pool owned by AWS or from an address pool created from a public IPv4 address range that you have brought to AWS for use with your AWS resources using bring your own IP addresses (BYOIP). For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">Bring Your Own IP Addresses (BYOIP)</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>[EC2-VPC] If you release an Elastic IP address, you might be able to recover it. You cannot recover an Elastic IP address that you released after it is allocated to another AWS account. You cannot recover an Elastic IP address for EC2-Classic. To attempt to recover an Elastic IP address that you released, specify it in this operation.</p> <p>An Elastic IP address is for use either in the EC2-Classic platform or in a VPC. By default, you can allocate 5 Elastic IP addresses for EC2-Classic per Region and 5 Elastic IP addresses for EC2-VPC per Region.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn allocate_address(
        &self,
        input: AllocateAddressRequest,
    ) -> RusotoFuture<AllocateAddressResult, AllocateAddressError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AllocateAddress");
        params.put("Version", "2016-11-15");
        AllocateAddressRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(AllocateAddressError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = AllocateAddressResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = AllocateAddressResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Allocates a Dedicated Host to your account. At a minimum, specify the instance size type, Availability Zone, and quantity of hosts to allocate.</p>
    fn allocate_hosts(
        &self,
        input: AllocateHostsRequest,
    ) -> RusotoFuture<AllocateHostsResult, AllocateHostsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AllocateHosts");
        params.put("Version", "2016-11-15");
        AllocateHostsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(AllocateHostsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = AllocateHostsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = AllocateHostsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Applies a security group to the association between the target network and the Client VPN endpoint. This action replaces the existing security groups with the specified security groups.</p>
    fn apply_security_groups_to_client_vpn_target_network(
        &self,
        input: ApplySecurityGroupsToClientVpnTargetNetworkRequest,
    ) -> RusotoFuture<
        ApplySecurityGroupsToClientVpnTargetNetworkResult,
        ApplySecurityGroupsToClientVpnTargetNetworkError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ApplySecurityGroupsToClientVpnTargetNetwork");
        params.put("Version", "2016-11-15");
        ApplySecurityGroupsToClientVpnTargetNetworkRequestSerializer::serialize(
            &mut params,
            "",
            &input,
        );
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
                        if !response.status.is_success() {
                            return response.buffer().map(|try_response| {
                                try_response.map_or_else(|e| e, |response| {
                                    Err(ApplySecurityGroupsToClientVpnTargetNetworkError::from_response(response))
                                })
                            }).boxed();
                        }

                        response.buffer().map(move |response| {
            let response = response?;
            
            let result;
            if response.body.is_empty() {
                result = ApplySecurityGroupsToClientVpnTargetNetworkResult::default();
            } else {
                let reader = EventReader::new_with_config(
                    response.body.as_ref(),
                    ParserConfig::new().trim_whitespace(true)
                );
                let mut stack = XmlResponse::new(reader.into_iter().peekable());
                let _start_document = stack.next();
                let actual_tag_name = peek_at_name(&mut stack)?;
                result = ApplySecurityGroupsToClientVpnTargetNetworkResultDeserializer::deserialize(&actual_tag_name, &mut stack)?;
            }
             // parse non-payload
            Ok(result)
        }).boxed()
                    })
    }

    /// <p>Assigns one or more IPv6 addresses to the specified network interface. You can specify one or more specific IPv6 addresses, or you can specify the number of IPv6 addresses to be automatically assigned from within the subnet's IPv6 CIDR block range. You can assign as many IPv6 addresses to a network interface as you can assign private IPv4 addresses, and the limit varies per instance type. For information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI">IP Addresses Per Network Interface Per Instance Type</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn assign_ipv_6_addresses(
        &self,
        input: AssignIpv6AddressesRequest,
    ) -> RusotoFuture<AssignIpv6AddressesResult, AssignIpv6AddressesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AssignIpv6Addresses");
        params.put("Version", "2016-11-15");
        AssignIpv6AddressesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(AssignIpv6AddressesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = AssignIpv6AddressesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = AssignIpv6AddressesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Assigns one or more secondary private IP addresses to the specified network interface.</p> <p>You can specify one or more specific secondary IP addresses, or you can specify the number of secondary IP addresses to be automatically assigned within the subnet's CIDR block range. The number of secondary IP addresses that you can assign to an instance varies by instance type. For information about instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For more information about Elastic IP addresses, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>When you move a secondary private IP address to another network interface, any Elastic IP address that is associated with the IP address is also moved.</p> <p>Remapping an IP address is an asynchronous operation. When you move an IP address from one network interface to another, check <code>network/interfaces/macs/mac/local-ipv4s</code> in the instance metadata to confirm that the remapping is complete.</p>
    fn assign_private_ip_addresses(
        &self,
        input: AssignPrivateIpAddressesRequest,
    ) -> RusotoFuture<(), AssignPrivateIpAddressesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AssignPrivateIpAddresses");
        params.put("Version", "2016-11-15");
        AssignPrivateIpAddressesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(AssignPrivateIpAddressesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p><p>Associates an Elastic IP address with an instance or a network interface. Before you can use an Elastic IP address, you must allocate it to your account.</p> <p>An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>[EC2-Classic, VPC in an EC2-VPC-only account] If the Elastic IP address is already associated with a different instance, it is disassociated from that instance and associated with the specified instance. If you associate an Elastic IP address with an instance that has an existing Elastic IP address, the existing address is disassociated from the instance, but remains allocated to your account.</p> <p>[VPC in an EC2-Classic account] If you don&#39;t specify a private IP address, the Elastic IP address is associated with the primary IP address. If the Elastic IP address is already associated with a different instance or a network interface, you get an error unless you allow reassociation. You cannot associate an Elastic IP address with an instance or network interface that has an existing Elastic IP address.</p> <important> <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn&#39;t return an error, and you may be charged for each time the Elastic IP address is remapped to the same instance. For more information, see the <i>Elastic IP Addresses</i> section of <a href="http://aws.amazon.com/ec2/pricing/">Amazon EC2 Pricing</a>.</p> </important></p>
    fn associate_address(
        &self,
        input: AssociateAddressRequest,
    ) -> RusotoFuture<AssociateAddressResult, AssociateAddressError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AssociateAddress");
        params.put("Version", "2016-11-15");
        AssociateAddressRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(AssociateAddressError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = AssociateAddressResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = AssociateAddressResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Associates a target network with a Client VPN endpoint. A target network is a subnet in a VPC. You can associate multiple subnets from the same VPC with a Client VPN endpoint. You can associate only one subnet in each Availability Zone. We recommend that you associate at least two subnets to provide Availability Zone redundancy.</p>
    fn associate_client_vpn_target_network(
        &self,
        input: AssociateClientVpnTargetNetworkRequest,
    ) -> RusotoFuture<AssociateClientVpnTargetNetworkResult, AssociateClientVpnTargetNetworkError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AssociateClientVpnTargetNetwork");
        params.put("Version", "2016-11-15");
        AssociateClientVpnTargetNetworkRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(AssociateClientVpnTargetNetworkError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = AssociateClientVpnTargetNetworkResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = AssociateClientVpnTargetNetworkResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Associates a set of DHCP options (that you've previously created) with the specified VPC, or associates no DHCP options with the VPC.</p> <p>After you associate the options with the VPC, any existing instances and all new instances that you launch in that VPC use the options. You don't need to restart or relaunch the instances. They automatically pick up the changes within a few hours, depending on how frequently the instance renews its DHCP lease. You can explicitly renew the lease using the operating system on the instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html">DHCP Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn associate_dhcp_options(
        &self,
        input: AssociateDhcpOptionsRequest,
    ) -> RusotoFuture<(), AssociateDhcpOptionsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AssociateDhcpOptions");
        params.put("Version", "2016-11-15");
        AssociateDhcpOptionsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(AssociateDhcpOptionsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Associates an IAM instance profile with a running or stopped instance. You cannot associate more than one IAM instance profile with an instance.</p>
    fn associate_iam_instance_profile(
        &self,
        input: AssociateIamInstanceProfileRequest,
    ) -> RusotoFuture<AssociateIamInstanceProfileResult, AssociateIamInstanceProfileError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AssociateIamInstanceProfile");
        params.put("Version", "2016-11-15");
        AssociateIamInstanceProfileRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(AssociateIamInstanceProfileError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = AssociateIamInstanceProfileResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = AssociateIamInstanceProfileResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Associates a subnet with a route table. The subnet and route table must be in the same VPC. This association causes traffic originating from the subnet to be routed according to the routes in the route table. The action returns an association ID, which you need in order to disassociate the route table from the subnet later. A route table can be associated with multiple subnets.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn associate_route_table(
        &self,
        input: AssociateRouteTableRequest,
    ) -> RusotoFuture<AssociateRouteTableResult, AssociateRouteTableError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AssociateRouteTable");
        params.put("Version", "2016-11-15");
        AssociateRouteTableRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(AssociateRouteTableError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = AssociateRouteTableResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = AssociateRouteTableResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Associates a CIDR block with your subnet. You can only associate a single IPv6 CIDR block with your subnet. An IPv6 CIDR block must have a prefix length of /64.</p>
    fn associate_subnet_cidr_block(
        &self,
        input: AssociateSubnetCidrBlockRequest,
    ) -> RusotoFuture<AssociateSubnetCidrBlockResult, AssociateSubnetCidrBlockError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AssociateSubnetCidrBlock");
        params.put("Version", "2016-11-15");
        AssociateSubnetCidrBlockRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(AssociateSubnetCidrBlockError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = AssociateSubnetCidrBlockResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = AssociateSubnetCidrBlockResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Associates the specified attachment with the specified transit gateway route table. You can associate only one route table with an attachment.</p>
    fn associate_transit_gateway_route_table(
        &self,
        input: AssociateTransitGatewayRouteTableRequest,
    ) -> RusotoFuture<AssociateTransitGatewayRouteTableResult, AssociateTransitGatewayRouteTableError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AssociateTransitGatewayRouteTable");
        params.put("Version", "2016-11-15");
        AssociateTransitGatewayRouteTableRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(AssociateTransitGatewayRouteTableError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = AssociateTransitGatewayRouteTableResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = AssociateTransitGatewayRouteTableResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Associates a CIDR block with your VPC. You can associate a secondary IPv4 CIDR block, or you can associate an Amazon-provided IPv6 CIDR block. The IPv6 CIDR block size is fixed at /56.</p> <p>For more information about associating CIDR blocks with your VPC and applicable restrictions, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html#VPC_Sizing">VPC and Subnet Sizing</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn associate_vpc_cidr_block(
        &self,
        input: AssociateVpcCidrBlockRequest,
    ) -> RusotoFuture<AssociateVpcCidrBlockResult, AssociateVpcCidrBlockError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AssociateVpcCidrBlock");
        params.put("Version", "2016-11-15");
        AssociateVpcCidrBlockRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(AssociateVpcCidrBlockError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = AssociateVpcCidrBlockResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = AssociateVpcCidrBlockResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Links an EC2-Classic instance to a ClassicLink-enabled VPC through one or more of the VPC's security groups. You cannot link an EC2-Classic instance to more than one VPC at a time. You can only link an instance that's in the <code>running</code> state. An instance is automatically unlinked from a VPC when it's stopped - you can link it to the VPC again when you restart it.</p> <p>After you've linked an instance, you cannot change the VPC security groups that are associated with it. To change the security groups, you must first unlink the instance, and then link it again.</p> <p>Linking your instance to a VPC is sometimes referred to as <i>attaching</i> your instance.</p>
    fn attach_classic_link_vpc(
        &self,
        input: AttachClassicLinkVpcRequest,
    ) -> RusotoFuture<AttachClassicLinkVpcResult, AttachClassicLinkVpcError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AttachClassicLinkVpc");
        params.put("Version", "2016-11-15");
        AttachClassicLinkVpcRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(AttachClassicLinkVpcError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = AttachClassicLinkVpcResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = AttachClassicLinkVpcResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Attaches an internet gateway to a VPC, enabling connectivity between the internet and the VPC. For more information about your VPC and internet gateway, see the <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/">Amazon Virtual Private Cloud User Guide</a>.</p>
    fn attach_internet_gateway(
        &self,
        input: AttachInternetGatewayRequest,
    ) -> RusotoFuture<(), AttachInternetGatewayError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AttachInternetGateway");
        params.put("Version", "2016-11-15");
        AttachInternetGatewayRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(AttachInternetGatewayError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Attaches a network interface to an instance.</p>
    fn attach_network_interface(
        &self,
        input: AttachNetworkInterfaceRequest,
    ) -> RusotoFuture<AttachNetworkInterfaceResult, AttachNetworkInterfaceError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AttachNetworkInterface");
        params.put("Version", "2016-11-15");
        AttachNetworkInterfaceRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(AttachNetworkInterfaceError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = AttachNetworkInterfaceResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = AttachNetworkInterfaceResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Attaches an EBS volume to a running or stopped instance and exposes it to the instance with the specified device name.</p> <p>Encrypted EBS volumes may only be attached to instances that support Amazon EBS encryption. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>For a list of supported device names, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html">Attaching an EBS Volume to an Instance</a>. Any device names that aren't reserved for instance store volumes can be used for EBS volumes. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html">Amazon EC2 Instance Store</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>If a volume has an AWS Marketplace product code:</p> <ul> <li> <p>The volume can be attached only to a stopped instance.</p> </li> <li> <p>AWS Marketplace product codes are copied from the volume to the instance.</p> </li> <li> <p>You must be subscribed to the product.</p> </li> <li> <p>The instance type and operating system of the instance must support the product. For example, you can't detach a volume from a Windows instance and attach it to a Linux instance.</p> </li> </ul> <p>For more information about EBS volumes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html">Attaching Amazon EBS Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn attach_volume(
        &self,
        input: AttachVolumeRequest,
    ) -> RusotoFuture<VolumeAttachment, AttachVolumeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AttachVolume");
        params.put("Version", "2016-11-15");
        AttachVolumeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(AttachVolumeError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = VolumeAttachment::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = VolumeAttachmentDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Attaches a virtual private gateway to a VPC. You can attach one virtual private gateway to one VPC at a time.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
    fn attach_vpn_gateway(
        &self,
        input: AttachVpnGatewayRequest,
    ) -> RusotoFuture<AttachVpnGatewayResult, AttachVpnGatewayError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AttachVpnGateway");
        params.put("Version", "2016-11-15");
        AttachVpnGatewayRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(AttachVpnGatewayError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = AttachVpnGatewayResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = AttachVpnGatewayResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Adds an ingress authorization rule to a Client VPN endpoint. Ingress authorization rules act as firewall rules that grant access to networks. You must configure ingress authorization rules to enable clients to access resources in AWS or on-premises networks.</p>
    fn authorize_client_vpn_ingress(
        &self,
        input: AuthorizeClientVpnIngressRequest,
    ) -> RusotoFuture<AuthorizeClientVpnIngressResult, AuthorizeClientVpnIngressError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AuthorizeClientVpnIngress");
        params.put("Version", "2016-11-15");
        AuthorizeClientVpnIngressRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(AuthorizeClientVpnIngressError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = AuthorizeClientVpnIngressResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = AuthorizeClientVpnIngressResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>[VPC only] Adds the specified egress rules to a security group for use with a VPC.</p> <p>An outbound rule permits instances to send traffic to the specified IPv4 or IPv6 CIDR address ranges, or to the instances associated with the specified destination security groups.</p> <p>You specify a protocol for each rule (for example, TCP). For the TCP and UDP protocols, you must also specify the destination port or port range. For the ICMP protocol, you must also specify the ICMP type and code. You can use -1 for the type or code to mean all types or all codes.</p> <p>Rule changes are propagated to affected instances as quickly as possible. However, a small delay might occur.</p> <p>For more information about VPC security group limits, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC Limits</a>.</p>
    fn authorize_security_group_egress(
        &self,
        input: AuthorizeSecurityGroupEgressRequest,
    ) -> RusotoFuture<(), AuthorizeSecurityGroupEgressError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AuthorizeSecurityGroupEgress");
        params.put("Version", "2016-11-15");
        AuthorizeSecurityGroupEgressRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(AuthorizeSecurityGroupEgressError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Adds the specified ingress rules to a security group.</p> <p>An inbound rule permits instances to receive traffic from the specified IPv4 or IPv6 CIDR address ranges, or from the instances associated with the specified destination security groups.</p> <p>You specify a protocol for each rule (for example, TCP). For TCP and UDP, you must also specify the destination port or port range. For ICMP/ICMPv6, you must also specify the ICMP/ICMPv6 type and code. You can use -1 to mean all types or all codes.</p> <p>Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.</p> <p>For more information about VPC security group limits, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC Limits</a>.</p>
    fn authorize_security_group_ingress(
        &self,
        input: AuthorizeSecurityGroupIngressRequest,
    ) -> RusotoFuture<(), AuthorizeSecurityGroupIngressError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "AuthorizeSecurityGroupIngress");
        params.put("Version", "2016-11-15");
        AuthorizeSecurityGroupIngressRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(AuthorizeSecurityGroupIngressError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p><p>Bundles an Amazon instance store-backed Windows instance.</p> <p>During bundling, only the root device volume (C:) is bundled. Data on other instance store volumes is not preserved.</p> <note> <p>This action is not applicable for Linux/Unix instances or Windows instances that are backed by Amazon EBS.</p> </note></p>
    fn bundle_instance(
        &self,
        input: BundleInstanceRequest,
    ) -> RusotoFuture<BundleInstanceResult, BundleInstanceError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "BundleInstance");
        params.put("Version", "2016-11-15");
        BundleInstanceRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(BundleInstanceError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = BundleInstanceResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = BundleInstanceResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Cancels a bundling operation for an instance store-backed Windows instance.</p>
    fn cancel_bundle_task(
        &self,
        input: CancelBundleTaskRequest,
    ) -> RusotoFuture<CancelBundleTaskResult, CancelBundleTaskError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CancelBundleTask");
        params.put("Version", "2016-11-15");
        CancelBundleTaskRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CancelBundleTaskError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CancelBundleTaskResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CancelBundleTaskResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Cancels the specified Capacity Reservation, releases the reserved capacity, and changes the Capacity Reservation's state to <code>cancelled</code>.</p> <p>Instances running in the reserved capacity continue running until you stop them. Stopped instances that target the Capacity Reservation can no longer launch. Modify these instances to either target a different Capacity Reservation, launch On-Demand Instance capacity, or run in any open Capacity Reservation that has matching attributes and sufficient capacity.</p>
    fn cancel_capacity_reservation(
        &self,
        input: CancelCapacityReservationRequest,
    ) -> RusotoFuture<CancelCapacityReservationResult, CancelCapacityReservationError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CancelCapacityReservation");
        params.put("Version", "2016-11-15");
        CancelCapacityReservationRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CancelCapacityReservationError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CancelCapacityReservationResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CancelCapacityReservationResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Cancels an active conversion task. The task can be the import of an instance or volume. The action removes all artifacts of the conversion, including a partially uploaded volume or instance. If the conversion is complete or is in the process of transferring the final disk image, the command fails and returns an exception.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html">Importing a Virtual Machine Using the Amazon EC2 CLI</a>.</p>
    fn cancel_conversion_task(
        &self,
        input: CancelConversionRequest,
    ) -> RusotoFuture<(), CancelConversionTaskError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CancelConversionTask");
        params.put("Version", "2016-11-15");
        CancelConversionRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CancelConversionTaskError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Cancels an active export task. The request removes all artifacts of the export, including any partially-created Amazon S3 objects. If the export task is complete or is in the process of transferring the final disk image, the command fails and returns an error.</p>
    fn cancel_export_task(
        &self,
        input: CancelExportTaskRequest,
    ) -> RusotoFuture<(), CancelExportTaskError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CancelExportTask");
        params.put("Version", "2016-11-15");
        CancelExportTaskRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CancelExportTaskError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Cancels an in-process import virtual machine or import snapshot task.</p>
    fn cancel_import_task(
        &self,
        input: CancelImportTaskRequest,
    ) -> RusotoFuture<CancelImportTaskResult, CancelImportTaskError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CancelImportTask");
        params.put("Version", "2016-11-15");
        CancelImportTaskRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CancelImportTaskError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CancelImportTaskResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CancelImportTaskResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Cancels the specified Reserved Instance listing in the Reserved Instance Marketplace.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn cancel_reserved_instances_listing(
        &self,
        input: CancelReservedInstancesListingRequest,
    ) -> RusotoFuture<CancelReservedInstancesListingResult, CancelReservedInstancesListingError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CancelReservedInstancesListing");
        params.put("Version", "2016-11-15");
        CancelReservedInstancesListingRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(CancelReservedInstancesListingError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CancelReservedInstancesListingResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CancelReservedInstancesListingResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Cancels the specified Spot Fleet requests.</p> <p>After you cancel a Spot Fleet request, the Spot Fleet launches no new Spot Instances. You must specify whether the Spot Fleet should also terminate its Spot Instances. If you terminate the instances, the Spot Fleet request enters the <code>cancelled_terminating</code> state. Otherwise, the Spot Fleet request enters the <code>cancelled_running</code> state and the instances continue to run until they are interrupted or you terminate them manually.</p>
    fn cancel_spot_fleet_requests(
        &self,
        input: CancelSpotFleetRequestsRequest,
    ) -> RusotoFuture<CancelSpotFleetRequestsResponse, EC2CancelSpotFleetRequestsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CancelSpotFleetRequests");
        params.put("Version", "2016-11-15");
        CancelSpotFleetRequestsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(EC2CancelSpotFleetRequestsError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CancelSpotFleetRequestsResponse::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CancelSpotFleetRequestsResponseDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p><p>Cancels one or more Spot Instance requests.</p> <important> <p>Canceling a Spot Instance request does not terminate running Spot Instances associated with the request.</p> </important></p>
    fn cancel_spot_instance_requests(
        &self,
        input: CancelSpotInstanceRequestsRequest,
    ) -> RusotoFuture<CancelSpotInstanceRequestsResult, CancelSpotInstanceRequestsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CancelSpotInstanceRequests");
        params.put("Version", "2016-11-15");
        CancelSpotInstanceRequestsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(CancelSpotInstanceRequestsError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CancelSpotInstanceRequestsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CancelSpotInstanceRequestsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Determines whether a product code is associated with an instance. This action can only be used by the owner of the product code. It is useful when a product code owner must verify whether another user's instance is eligible for support.</p>
    fn confirm_product_instance(
        &self,
        input: ConfirmProductInstanceRequest,
    ) -> RusotoFuture<ConfirmProductInstanceResult, ConfirmProductInstanceError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ConfirmProductInstance");
        params.put("Version", "2016-11-15");
        ConfirmProductInstanceRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ConfirmProductInstanceError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ConfirmProductInstanceResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ConfirmProductInstanceResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Copies the specified Amazon FPGA Image (AFI) to the current Region.</p>
    fn copy_fpga_image(
        &self,
        input: CopyFpgaImageRequest,
    ) -> RusotoFuture<CopyFpgaImageResult, CopyFpgaImageError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CopyFpgaImage");
        params.put("Version", "2016-11-15");
        CopyFpgaImageRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CopyFpgaImageError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CopyFpgaImageResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CopyFpgaImageResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Initiates the copy of an AMI from the specified source Region to the current Region. You specify the destination Region by using its endpoint when making the request.</p> <p>Copies of encrypted backing snapshots for the AMI are encrypted. Copies of unencrypted backing snapshots remain unencrypted, unless you set <code>Encrypted</code> during the copy operation. You cannot create an unencrypted copy of an encrypted backing snapshot.</p> <p>For more information about the prerequisites and limits when copying an AMI, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/CopyingAMIs.html">Copying an AMI</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn copy_image(&self, input: CopyImageRequest) -> RusotoFuture<CopyImageResult, CopyImageError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CopyImage");
        params.put("Version", "2016-11-15");
        CopyImageRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CopyImageError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CopyImageResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            CopyImageResultDeserializer::deserialize(&actual_tag_name, &mut stack)?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Copies a point-in-time snapshot of an EBS volume and stores it in Amazon S3. You can copy the snapshot within the same Region or from one Region to another. You can use the snapshot to create EBS volumes or Amazon Machine Images (AMIs). The snapshot is copied to the regional endpoint that you send the HTTP request to.</p> <p>Copies of encrypted EBS snapshots remain encrypted. Copies of unencrypted snapshots remain unencrypted, unless the <code>Encrypted</code> flag is specified during the snapshot copy operation. By default, encrypted snapshot copies use the default AWS Key Management Service (AWS KMS) customer master key (CMK); however, you can specify a non-default CMK with the <code>KmsKeyId</code> parameter.</p> <p>To copy an encrypted snapshot that has been shared from another account, you must have permissions for the CMK used to encrypt the snapshot.</p> <p>Snapshots created by copying another snapshot have an arbitrary volume ID that should not be used for any purpose.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-copy-snapshot.html">Copying an Amazon EBS Snapshot</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn copy_snapshot(
        &self,
        input: CopySnapshotRequest,
    ) -> RusotoFuture<CopySnapshotResult, CopySnapshotError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CopySnapshot");
        params.put("Version", "2016-11-15");
        CopySnapshotRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CopySnapshotError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CopySnapshotResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CopySnapshotResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a new Capacity Reservation with the specified attributes.</p> <p>Capacity Reservations enable you to reserve capacity for your Amazon EC2 instances in a specific Availability Zone for any duration. This gives you the flexibility to selectively add capacity reservations and still get the Regional RI discounts for that usage. By creating Capacity Reservations, you ensure that you always have access to Amazon EC2 capacity when you need it, for as long as you need it. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html">Capacity Reservations</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Your request to create a Capacity Reservation could fail if Amazon EC2 does not have sufficient capacity to fulfill the request. If your request fails due to Amazon EC2 capacity constraints, either try again at a later time, try in a different Availability Zone, or request a smaller capacity reservation. If your application is flexible across instance types and sizes, try to create a Capacity Reservation with different instance attributes.</p> <p>Your request could also fail if the requested quantity exceeds your On-Demand Instance limit for the selected instance type. If your request fails due to limit constraints, increase your On-Demand Instance limit for the required instance type and try again. For more information about increasing your instance limits, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html">Amazon EC2 Service Limits</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn create_capacity_reservation(
        &self,
        input: CreateCapacityReservationRequest,
    ) -> RusotoFuture<CreateCapacityReservationResult, CreateCapacityReservationError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateCapacityReservation");
        params.put("Version", "2016-11-15");
        CreateCapacityReservationRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateCapacityReservationError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateCapacityReservationResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateCapacityReservationResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a Client VPN endpoint. A Client VPN endpoint is the resource you create and configure to enable and manage client VPN sessions. It is the destination endpoint at which all client VPN sessions are terminated.</p>
    fn create_client_vpn_endpoint(
        &self,
        input: CreateClientVpnEndpointRequest,
    ) -> RusotoFuture<CreateClientVpnEndpointResult, CreateClientVpnEndpointError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateClientVpnEndpoint");
        params.put("Version", "2016-11-15");
        CreateClientVpnEndpointRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateClientVpnEndpointError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateClientVpnEndpointResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateClientVpnEndpointResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Adds a route to a network to a Client VPN endpoint. Each Client VPN endpoint has a route table that describes the available destination network routes. Each route in the route table specifies the path for traﬃc to speciﬁc resources or networks.</p>
    fn create_client_vpn_route(
        &self,
        input: CreateClientVpnRouteRequest,
    ) -> RusotoFuture<CreateClientVpnRouteResult, CreateClientVpnRouteError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateClientVpnRoute");
        params.put("Version", "2016-11-15");
        CreateClientVpnRouteRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateClientVpnRouteError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateClientVpnRouteResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateClientVpnRouteResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p><p>Provides information to AWS about your VPN customer gateway device. The customer gateway is the appliance at your end of the VPN connection. (The device on the AWS side of the VPN connection is the virtual private gateway.) You must provide the Internet-routable IP address of the customer gateway&#39;s external interface. The IP address must be static and may be behind a device performing network address translation (NAT).</p> <p>For devices that use Border Gateway Protocol (BGP), you can also provide the device&#39;s BGP Autonomous System Number (ASN). You can use an existing ASN assigned to your network. If you don&#39;t have an ASN already, you can use a private ASN (in the 64512 - 65534 range).</p> <note> <p>Amazon EC2 supports all 2-byte ASN numbers in the range of 1 - 65534, with the exception of 7224, which is reserved in the <code>us-east-1</code> Region, and 9059, which is reserved in the <code>eu-west-1</code> Region.</p> </note> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p> <important> <p>You cannot create more than one customer gateway with the same VPN type, IP address, and BGP ASN parameter values. If you run an identical request more than one time, the first request creates the customer gateway, and subsequent requests return information about the existing customer gateway. The subsequent requests do not create new customer gateway resources.</p> </important></p>
    fn create_customer_gateway(
        &self,
        input: CreateCustomerGatewayRequest,
    ) -> RusotoFuture<CreateCustomerGatewayResult, CreateCustomerGatewayError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateCustomerGateway");
        params.put("Version", "2016-11-15");
        CreateCustomerGatewayRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateCustomerGatewayError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateCustomerGatewayResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateCustomerGatewayResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a default subnet with a size <code>/20</code> IPv4 CIDR block in the specified Availability Zone in your default VPC. You can have only one default subnet per Availability Zone. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html#create-default-subnet">Creating a Default Subnet</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn create_default_subnet(
        &self,
        input: CreateDefaultSubnetRequest,
    ) -> RusotoFuture<CreateDefaultSubnetResult, CreateDefaultSubnetError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateDefaultSubnet");
        params.put("Version", "2016-11-15");
        CreateDefaultSubnetRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateDefaultSubnetError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateDefaultSubnetResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateDefaultSubnetResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a default VPC with a size <code>/16</code> IPv4 CIDR block and a default subnet in each Availability Zone. For more information about the components of a default VPC, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/default-vpc.html">Default VPC and Default Subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>. You cannot specify the components of the default VPC yourself.</p> <p>If you deleted your previous default VPC, you can create a default VPC. You cannot have more than one default VPC per Region.</p> <p>If your account supports EC2-Classic, you cannot use this action to create a default VPC in a Region that supports EC2-Classic. If you want a default VPC in a Region that supports EC2-Classic, see "I really want a default VPC for my existing EC2 account. Is that possible?" in the <a href="http://aws.amazon.com/vpc/faqs/#Default_VPCs">Default VPCs FAQ</a>.</p>
    fn create_default_vpc(
        &self,
        input: CreateDefaultVpcRequest,
    ) -> RusotoFuture<CreateDefaultVpcResult, CreateDefaultVpcError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateDefaultVpc");
        params.put("Version", "2016-11-15");
        CreateDefaultVpcRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateDefaultVpcError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateDefaultVpcResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateDefaultVpcResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a set of DHCP options for your VPC. After creating the set, you must associate it with the VPC, causing all existing and new instances that you launch in the VPC to use this set of DHCP options. The following are the individual DHCP options you can specify. For more information about the options, see <a href="http://www.ietf.org/rfc/rfc2132.txt">RFC 2132</a>.</p> <ul> <li> <p> <code>domain-name-servers</code> - The IP addresses of up to four domain name servers, or AmazonProvidedDNS. The default DHCP option set specifies AmazonProvidedDNS. If specifying more than one domain name server, specify the IP addresses in a single parameter, separated by commas. ITo have your instance to receive a custom DNS hostname as specified in <code>domain-name</code>, you must set <code>domain-name-servers</code> to a custom DNS server.</p> </li> <li> <p> <code>domain-name</code> - If you're using AmazonProvidedDNS in <code>us-east-1</code>, specify <code>ec2.internal</code>. If you're using AmazonProvidedDNS in another Region, specify <code>region.compute.internal</code> (for example, <code>ap-northeast-1.compute.internal</code>). Otherwise, specify a domain name (for example, <code>MyCompany.com</code>). This value is used to complete unqualified DNS hostnames. <b>Important</b>: Some Linux operating systems accept multiple domain names separated by spaces. However, Windows and other Linux operating systems treat the value as a single domain, which results in unexpected behavior. If your DHCP options set is associated with a VPC that has instances with multiple operating systems, specify only one domain name.</p> </li> <li> <p> <code>ntp-servers</code> - The IP addresses of up to four Network Time Protocol (NTP) servers.</p> </li> <li> <p> <code>netbios-name-servers</code> - The IP addresses of up to four NetBIOS name servers.</p> </li> <li> <p> <code>netbios-node-type</code> - The NetBIOS node type (1, 2, 4, or 8). We recommend that you specify 2 (broadcast and multicast are not currently supported). For more information about these node types, see <a href="http://www.ietf.org/rfc/rfc2132.txt">RFC 2132</a>.</p> </li> </ul> <p>Your VPC automatically starts out with a set of DHCP options that includes only a DNS server that we provide (AmazonProvidedDNS). If you create a set of options, and if your VPC has an internet gateway, make sure to set the <code>domain-name-servers</code> option either to <code>AmazonProvidedDNS</code> or to a domain name server of your choice. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html">DHCP Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn create_dhcp_options(
        &self,
        input: CreateDhcpOptionsRequest,
    ) -> RusotoFuture<CreateDhcpOptionsResult, CreateDhcpOptionsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateDhcpOptions");
        params.put("Version", "2016-11-15");
        CreateDhcpOptionsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateDhcpOptionsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateDhcpOptionsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateDhcpOptionsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>[IPv6 only] Creates an egress-only internet gateway for your VPC. An egress-only internet gateway is used to enable outbound communication over IPv6 from instances in your VPC to the internet, and prevents hosts outside of your VPC from initiating an IPv6 connection with your instance.</p>
    fn create_egress_only_internet_gateway(
        &self,
        input: CreateEgressOnlyInternetGatewayRequest,
    ) -> RusotoFuture<CreateEgressOnlyInternetGatewayResult, CreateEgressOnlyInternetGatewayError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateEgressOnlyInternetGateway");
        params.put("Version", "2016-11-15");
        CreateEgressOnlyInternetGatewayRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(CreateEgressOnlyInternetGatewayError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateEgressOnlyInternetGatewayResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateEgressOnlyInternetGatewayResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Launches an EC2 Fleet.</p> <p>You can create a single EC2 Fleet that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet.html">Launching an EC2 Fleet</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn create_fleet(
        &self,
        input: CreateFleetRequest,
    ) -> RusotoFuture<CreateFleetResult, CreateFleetError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateFleet");
        params.put("Version", "2016-11-15");
        CreateFleetRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateFleetError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateFleetResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateFleetResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates one or more flow logs to capture information about IP traffic for a specific network interface, subnet, or VPC. </p> <p>Flow log data for a monitored network interface is recorded as flow log records, which are log events consisting of fields that describe the traffic flow. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html#flow-log-records">Flow Log Records</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>When publishing to CloudWatch Logs, flow log records are published to a log group, and each network interface has a unique log stream in the log group. When publishing to Amazon S3, flow log records for all of the monitored network interfaces are published to a single log file object that is stored in the specified bucket.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/flow-logs.html">VPC Flow Logs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn create_flow_logs(
        &self,
        input: CreateFlowLogsRequest,
    ) -> RusotoFuture<CreateFlowLogsResult, CreateFlowLogsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateFlowLogs");
        params.put("Version", "2016-11-15");
        CreateFlowLogsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateFlowLogsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateFlowLogsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateFlowLogsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates an Amazon FPGA Image (AFI) from the specified design checkpoint (DCP).</p> <p>The create operation is asynchronous. To verify that the AFI is ready for use, check the output logs.</p> <p>An AFI contains the FPGA bitstream that is ready to download to an FPGA. You can securely deploy an AFI on multiple FPGA-accelerated instances. For more information, see the <a href="https://github.com/aws/aws-fpga/">AWS FPGA Hardware Development Kit</a>.</p>
    fn create_fpga_image(
        &self,
        input: CreateFpgaImageRequest,
    ) -> RusotoFuture<CreateFpgaImageResult, CreateFpgaImageError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateFpgaImage");
        params.put("Version", "2016-11-15");
        CreateFpgaImageRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateFpgaImageError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateFpgaImageResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateFpgaImageResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates an Amazon EBS-backed AMI from an Amazon EBS-backed instance that is either running or stopped.</p> <p>If you customized your instance with instance store volumes or EBS volumes in addition to the root device volume, the new AMI contains block device mapping information for those volumes. When you launch an instance from this new AMI, the instance automatically launches with those additional volumes.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html">Creating Amazon EBS-Backed Linux AMIs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn create_image(
        &self,
        input: CreateImageRequest,
    ) -> RusotoFuture<CreateImageResult, CreateImageError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateImage");
        params.put("Version", "2016-11-15");
        CreateImageRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateImageError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateImageResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateImageResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Exports a running or stopped instance to an S3 bucket.</p> <p>For information about the supported operating systems, image formats, and known limitations for the types of instances you can export, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport.html">Exporting an Instance as a VM Using VM Import/Export</a> in the <i>VM Import/Export User Guide</i>.</p>
    fn create_instance_export_task(
        &self,
        input: CreateInstanceExportTaskRequest,
    ) -> RusotoFuture<CreateInstanceExportTaskResult, CreateInstanceExportTaskError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateInstanceExportTask");
        params.put("Version", "2016-11-15");
        CreateInstanceExportTaskRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateInstanceExportTaskError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateInstanceExportTaskResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateInstanceExportTaskResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates an internet gateway for use with a VPC. After creating the internet gateway, you attach it to a VPC using <a>AttachInternetGateway</a>.</p> <p>For more information about your VPC and internet gateway, see the <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/">Amazon Virtual Private Cloud User Guide</a>.</p>
    fn create_internet_gateway(
        &self,
        input: CreateInternetGatewayRequest,
    ) -> RusotoFuture<CreateInternetGatewayResult, CreateInternetGatewayError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateInternetGateway");
        params.put("Version", "2016-11-15");
        CreateInternetGatewayRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateInternetGatewayError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateInternetGatewayResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateInternetGatewayResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a 2048-bit RSA key pair with the specified name. Amazon EC2 stores the public key and displays the private key for you to save to a file. The private key is returned as an unencrypted PEM encoded PKCS#1 private key. If a key with the specified name already exists, Amazon EC2 returns an error.</p> <p>You can have up to five thousand key pairs per Region.</p> <p>The key pair returned to you is available only in the Region in which you create it. If you prefer, you can create your own key pair using a third-party tool and upload it to any Region using <a>ImportKeyPair</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn create_key_pair(
        &self,
        input: CreateKeyPairRequest,
    ) -> RusotoFuture<KeyPair, CreateKeyPairError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateKeyPair");
        params.put("Version", "2016-11-15");
        CreateKeyPairRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateKeyPairError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = KeyPair::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = KeyPairDeserializer::deserialize(&actual_tag_name, &mut stack)?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a launch template. A launch template contains the parameters to launch an instance. When you launch an instance using <a>RunInstances</a>, you can specify a launch template instead of providing the launch parameters in the request.</p>
    fn create_launch_template(
        &self,
        input: CreateLaunchTemplateRequest,
    ) -> RusotoFuture<CreateLaunchTemplateResult, CreateLaunchTemplateError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateLaunchTemplate");
        params.put("Version", "2016-11-15");
        CreateLaunchTemplateRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateLaunchTemplateError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateLaunchTemplateResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateLaunchTemplateResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a new version for a launch template. You can specify an existing version of launch template from which to base the new version.</p> <p>Launch template versions are numbered in the order in which they are created. You cannot specify, change, or replace the numbering of launch template versions.</p>
    fn create_launch_template_version(
        &self,
        input: CreateLaunchTemplateVersionRequest,
    ) -> RusotoFuture<CreateLaunchTemplateVersionResult, CreateLaunchTemplateVersionError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateLaunchTemplateVersion");
        params.put("Version", "2016-11-15");
        CreateLaunchTemplateVersionRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(CreateLaunchTemplateVersionError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateLaunchTemplateVersionResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateLaunchTemplateVersionResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a NAT gateway in the specified public subnet. This action creates a network interface in the specified subnet with a private IP address from the IP address range of the subnet. Internet-bound traffic from a private subnet can be routed to the NAT gateway, therefore enabling instances in the private subnet to connect to the internet. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-nat-gateway.html">NAT Gateways</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn create_nat_gateway(
        &self,
        input: CreateNatGatewayRequest,
    ) -> RusotoFuture<CreateNatGatewayResult, CreateNatGatewayError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateNatGateway");
        params.put("Version", "2016-11-15");
        CreateNatGatewayRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateNatGatewayError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateNatGatewayResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateNatGatewayResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a network ACL in a VPC. Network ACLs provide an optional layer of security (in addition to security groups) for the instances in your VPC.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn create_network_acl(
        &self,
        input: CreateNetworkAclRequest,
    ) -> RusotoFuture<CreateNetworkAclResult, CreateNetworkAclError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateNetworkAcl");
        params.put("Version", "2016-11-15");
        CreateNetworkAclRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateNetworkAclError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateNetworkAclResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateNetworkAclResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates an entry (a rule) in a network ACL with the specified rule number. Each network ACL has a set of numbered ingress rules and a separate set of numbered egress rules. When determining whether a packet should be allowed in or out of a subnet associated with the ACL, we process the entries in the ACL according to the rule numbers, in ascending order. Each network ACL has a set of ingress rules and a separate set of egress rules.</p> <p>We recommend that you leave room between the rule numbers (for example, 100, 110, 120, ...), and not number them one right after the other (for example, 101, 102, 103, ...). This makes it easier to add a rule between existing ones without having to renumber the rules.</p> <p>After you add an entry, you can't modify it; you must either replace it, or create an entry and delete the old one.</p> <p>For more information about network ACLs, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn create_network_acl_entry(
        &self,
        input: CreateNetworkAclEntryRequest,
    ) -> RusotoFuture<(), CreateNetworkAclEntryError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateNetworkAclEntry");
        params.put("Version", "2016-11-15");
        CreateNetworkAclEntryRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateNetworkAclEntryError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Creates a network interface in the specified subnet.</p> <p>For more information about network interfaces, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html">Elastic Network Interfaces</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn create_network_interface(
        &self,
        input: CreateNetworkInterfaceRequest,
    ) -> RusotoFuture<CreateNetworkInterfaceResult, CreateNetworkInterfaceError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateNetworkInterface");
        params.put("Version", "2016-11-15");
        CreateNetworkInterfaceRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateNetworkInterfaceError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateNetworkInterfaceResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateNetworkInterfaceResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Grants an AWS-authorized account permission to attach the specified network interface to an instance in their account.</p> <p>You can grant permission to a single AWS account only, and only one account at a time.</p>
    fn create_network_interface_permission(
        &self,
        input: CreateNetworkInterfacePermissionRequest,
    ) -> RusotoFuture<CreateNetworkInterfacePermissionResult, CreateNetworkInterfacePermissionError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateNetworkInterfacePermission");
        params.put("Version", "2016-11-15");
        CreateNetworkInterfacePermissionRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(CreateNetworkInterfacePermissionError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateNetworkInterfacePermissionResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateNetworkInterfacePermissionResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a placement group in which to launch instances. The strategy of the placement group determines how the instances are organized within the group. </p> <p>A <code>cluster</code> placement group is a logical grouping of instances within a single Availability Zone that benefit from low network latency, high network throughput. A <code>spread</code> placement group places instances on distinct hardware. A <code>partition</code> placement group places groups of instances in different partitions, where instances in one partition do not share the same hardware with instances in another partition.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn create_placement_group(
        &self,
        input: CreatePlacementGroupRequest,
    ) -> RusotoFuture<(), CreatePlacementGroupError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreatePlacementGroup");
        params.put("Version", "2016-11-15");
        CreatePlacementGroupRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreatePlacementGroupError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Creates a listing for Amazon EC2 Standard Reserved Instances to be sold in the Reserved Instance Marketplace. You can submit one Standard Reserved Instance listing at a time. To get a list of your Standard Reserved Instances, you can use the <a>DescribeReservedInstances</a> operation.</p> <note> <p>Only Standard Reserved Instances can be sold in the Reserved Instance Marketplace. Convertible Reserved Instances cannot be sold.</p> </note> <p>The Reserved Instance Marketplace matches sellers who want to resell Standard Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.</p> <p>To sell your Standard Reserved Instances, you must first register as a seller in the Reserved Instance Marketplace. After completing the registration process, you can create a Reserved Instance Marketplace listing of some or all of your Standard Reserved Instances, and specify the upfront price to receive for them. Your Standard Reserved Instance listings then become available for purchase. To view the details of your Standard Reserved Instance listing, you can use the <a>DescribeReservedInstancesListings</a> operation.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn create_reserved_instances_listing(
        &self,
        input: CreateReservedInstancesListingRequest,
    ) -> RusotoFuture<CreateReservedInstancesListingResult, CreateReservedInstancesListingError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateReservedInstancesListing");
        params.put("Version", "2016-11-15");
        CreateReservedInstancesListingRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(CreateReservedInstancesListingError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateReservedInstancesListingResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateReservedInstancesListingResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a route in a route table within a VPC.</p> <p>You must specify one of the following targets: internet gateway or virtual private gateway, NAT instance, NAT gateway, VPC peering connection, network interface, or egress-only internet gateway.</p> <p>When determining how to route traffic, we use the route with the most specific match. For example, traffic is destined for the IPv4 address <code>192.0.2.3</code>, and the route table includes the following two IPv4 routes:</p> <ul> <li> <p> <code>192.0.2.0/24</code> (goes to some target A)</p> </li> <li> <p> <code>192.0.2.0/28</code> (goes to some target B)</p> </li> </ul> <p>Both routes apply to the traffic destined for <code>192.0.2.3</code>. However, the second route in the list covers a smaller number of IP addresses and is therefore more specific, so we use that route to determine where to target the traffic.</p> <p>For more information about route tables, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn create_route(
        &self,
        input: CreateRouteRequest,
    ) -> RusotoFuture<CreateRouteResult, CreateRouteError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateRoute");
        params.put("Version", "2016-11-15");
        CreateRouteRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateRouteError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateRouteResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateRouteResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a route table for the specified VPC. After you create a route table, you can add routes and associate the table with a subnet.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn create_route_table(
        &self,
        input: CreateRouteTableRequest,
    ) -> RusotoFuture<CreateRouteTableResult, CreateRouteTableError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateRouteTable");
        params.put("Version", "2016-11-15");
        CreateRouteTableRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateRouteTableError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateRouteTableResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateRouteTableResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a security group.</p> <p>A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>When you create a security group, you specify a friendly name of your choice. You can have a security group for use in EC2-Classic with the same name as a security group for use in a VPC. However, you can't have two security groups for use in EC2-Classic with the same name or two security groups for use in a VPC with the same name.</p> <p>You have a default security group for use in EC2-Classic and a default security group for use in your VPC. If you don't specify a security group when you launch an instance, the instance is launched into the appropriate default security group. A default security group includes a default rule that grants instances unrestricted network access to each other.</p> <p>You can add or remove rules from your security groups using <a>AuthorizeSecurityGroupIngress</a>, <a>AuthorizeSecurityGroupEgress</a>, <a>RevokeSecurityGroupIngress</a>, and <a>RevokeSecurityGroupEgress</a>.</p> <p>For more information about VPC security group limits, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html">Amazon VPC Limits</a>.</p>
    fn create_security_group(
        &self,
        input: CreateSecurityGroupRequest,
    ) -> RusotoFuture<CreateSecurityGroupResult, CreateSecurityGroupError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateSecurityGroup");
        params.put("Version", "2016-11-15");
        CreateSecurityGroupRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateSecurityGroupError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateSecurityGroupResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateSecurityGroupResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a snapshot of an EBS volume and stores it in Amazon S3. You can use snapshots for backups, to make copies of EBS volumes, and to save data before shutting down an instance.</p> <p>When a snapshot is created, any AWS Marketplace product codes that are associated with the source volume are propagated to the snapshot.</p> <p>You can take a snapshot of an attached volume that is in use. However, snapshots only capture data that has been written to your EBS volume at the time the snapshot command is issued; this may exclude any data that has been cached by any applications or the operating system. If you can pause any file systems on the volume long enough to take a snapshot, your snapshot should be complete. However, if you cannot pause all file writes to the volume, you should unmount the volume from within the instance, issue the snapshot command, and then remount the volume to ensure a consistent and complete snapshot. You may remount and use your volume while the snapshot status is <code>pending</code>.</p> <p>To create a snapshot for EBS volumes that serve as root devices, you should stop the instance before taking the snapshot.</p> <p>Snapshots that are taken from encrypted volumes are automatically encrypted. Volumes that are created from encrypted snapshots are also automatically encrypted. Your encrypted volumes and any associated snapshots always remain protected.</p> <p>You can tag your snapshots during creation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Amazon EC2 Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html">Amazon Elastic Block Store</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn create_snapshot(
        &self,
        input: CreateSnapshotRequest,
    ) -> RusotoFuture<Snapshot, CreateSnapshotError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateSnapshot");
        params.put("Version", "2016-11-15");
        CreateSnapshotRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateSnapshotError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = Snapshot::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = SnapshotDeserializer::deserialize(&actual_tag_name, &mut stack)?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates crash-consistent snapshots of multiple EBS volumes and stores the data in S3. Volumes are chosen by specifying an instance. Any attached volumes will produce one snapshot each that is crash-consistent across the instance. Boot volumes can be excluded by changing the paramaters. </p>
    fn create_snapshots(
        &self,
        input: CreateSnapshotsRequest,
    ) -> RusotoFuture<CreateSnapshotsResult, CreateSnapshotsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateSnapshots");
        params.put("Version", "2016-11-15");
        CreateSnapshotsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateSnapshotsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateSnapshotsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateSnapshotsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a data feed for Spot Instances, enabling you to view Spot Instance usage logs. You can create one data feed per AWS account. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html">Spot Instance Data Feed</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    fn create_spot_datafeed_subscription(
        &self,
        input: CreateSpotDatafeedSubscriptionRequest,
    ) -> RusotoFuture<CreateSpotDatafeedSubscriptionResult, CreateSpotDatafeedSubscriptionError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateSpotDatafeedSubscription");
        params.put("Version", "2016-11-15");
        CreateSpotDatafeedSubscriptionRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(CreateSpotDatafeedSubscriptionError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateSpotDatafeedSubscriptionResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateSpotDatafeedSubscriptionResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a subnet in an existing VPC.</p> <p>When you create each subnet, you provide the VPC ID and IPv4 CIDR block for the subnet. After you create a subnet, you can't change its CIDR block. The size of the subnet's IPv4 CIDR block can be the same as a VPC's IPv4 CIDR block, or a subset of a VPC's IPv4 CIDR block. If you create more than one subnet in a VPC, the subnets' CIDR blocks must not overlap. The smallest IPv4 subnet (and VPC) you can create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4 addresses).</p> <p>If you've associated an IPv6 CIDR block with your VPC, you can create a subnet with an IPv6 CIDR block that uses a /64 prefix length. </p> <important> <p>AWS reserves both the first four and the last IPv4 address in each subnet's CIDR block. They're not available for use.</p> </important> <p>If you add more than one subnet to a VPC, they're set up in a star topology with a logical router in the middle.</p> <p>If you launch an instance in a VPC using an Amazon EBS-backed AMI, the IP address doesn't change if you stop and restart the instance (unlike a similar instance launched outside a VPC, which gets a new IP address when restarted). It's therefore possible to have a subnet with no running instances (they're all stopped), but no remaining IP addresses available.</p> <p>For more information about subnets, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html">Your VPC and Subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn create_subnet(
        &self,
        input: CreateSubnetRequest,
    ) -> RusotoFuture<CreateSubnetResult, CreateSubnetError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateSubnet");
        params.put("Version", "2016-11-15");
        CreateSubnetRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateSubnetError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateSubnetResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateSubnetResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Adds or overwrites the specified tags for the specified Amazon EC2 resource or resources. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value. Tag keys must be unique per resource.</p> <p>For more information about tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. For more information about creating IAM policies that control users' access to resources based on tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-iam-actions-resources.html">Supported Resource-Level Permissions for Amazon EC2 API Actions</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn create_tags(&self, input: CreateTagsRequest) -> RusotoFuture<(), CreateTagsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateTags");
        params.put("Version", "2016-11-15");
        CreateTagsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateTagsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Creates a transit gateway.</p> <p>You can use a transit gateway to interconnect your virtual private clouds (VPC) and on-premises networks. After the transit gateway enters the <code>available</code> state, you can attach your VPCs and VPN connections to the transit gateway.</p> <p>To attach your VPCs, use <a>CreateTransitGatewayVpcAttachment</a>.</p> <p>To attach a VPN connection, use <a>CreateCustomerGateway</a> to create a customer gateway and specify the ID of the customer gateway and the ID of the transit gateway in a call to <a>CreateVpnConnection</a>.</p> <p>When you create a transit gateway, we create a default transit gateway route table and use it as the default association route table and the default propagation route table. You can use <a>CreateTransitGatewayRouteTable</a> to create additional transit gateway route tables. If you disable automatic route propagation, we do not create a default transit gateway route table. You can use <a>EnableTransitGatewayRouteTablePropagation</a> to propagate routes from a resource attachment to a transit gateway route table. If you disable automatic associations, you can use <a>AssociateTransitGatewayRouteTable</a> to associate a resource attachment with a transit gateway route table.</p>
    fn create_transit_gateway(
        &self,
        input: CreateTransitGatewayRequest,
    ) -> RusotoFuture<CreateTransitGatewayResult, CreateTransitGatewayError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateTransitGateway");
        params.put("Version", "2016-11-15");
        CreateTransitGatewayRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateTransitGatewayError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateTransitGatewayResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateTransitGatewayResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a static route for the specified transit gateway route table.</p>
    fn create_transit_gateway_route(
        &self,
        input: CreateTransitGatewayRouteRequest,
    ) -> RusotoFuture<CreateTransitGatewayRouteResult, CreateTransitGatewayRouteError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateTransitGatewayRoute");
        params.put("Version", "2016-11-15");
        CreateTransitGatewayRouteRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateTransitGatewayRouteError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateTransitGatewayRouteResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateTransitGatewayRouteResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a route table for the specified transit gateway.</p>
    fn create_transit_gateway_route_table(
        &self,
        input: CreateTransitGatewayRouteTableRequest,
    ) -> RusotoFuture<CreateTransitGatewayRouteTableResult, CreateTransitGatewayRouteTableError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateTransitGatewayRouteTable");
        params.put("Version", "2016-11-15");
        CreateTransitGatewayRouteTableRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(CreateTransitGatewayRouteTableError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateTransitGatewayRouteTableResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateTransitGatewayRouteTableResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Attaches the specified VPC to the specified transit gateway.</p> <p>If you attach a VPC with a CIDR range that overlaps the CIDR range of a VPC that is already attached, the new VPC CIDR range is not propagated to the default propagation route table.</p> <p>To send VPC traffic to an attached transit gateway, add a route to the VPC route table using <a>CreateRoute</a>.</p>
    fn create_transit_gateway_vpc_attachment(
        &self,
        input: CreateTransitGatewayVpcAttachmentRequest,
    ) -> RusotoFuture<CreateTransitGatewayVpcAttachmentResult, CreateTransitGatewayVpcAttachmentError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateTransitGatewayVpcAttachment");
        params.put("Version", "2016-11-15");
        CreateTransitGatewayVpcAttachmentRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(CreateTransitGatewayVpcAttachmentError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateTransitGatewayVpcAttachmentResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateTransitGatewayVpcAttachmentResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates an EBS volume that can be attached to an instance in the same Availability Zone. The volume is created in the regional endpoint that you send the HTTP request to. For more information see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and Endpoints</a>.</p> <p>You can create a new empty volume or restore a volume from an EBS snapshot. Any AWS Marketplace product codes from the snapshot are propagated to the volume.</p> <p>You can create encrypted volumes with the <code>Encrypted</code> parameter. Encrypted volumes may only be attached to instances that support Amazon EBS encryption. Volumes that are created from encrypted snapshots are also automatically encrypted. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>You can tag your volumes during creation. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Amazon EC2 Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-volume.html">Creating an Amazon EBS Volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn create_volume(&self, input: CreateVolumeRequest) -> RusotoFuture<Volume, CreateVolumeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateVolume");
        params.put("Version", "2016-11-15");
        CreateVolumeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateVolumeError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = Volume::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = VolumeDeserializer::deserialize(&actual_tag_name, &mut stack)?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a VPC with the specified IPv4 CIDR block. The smallest VPC you can create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4 addresses). For more information about how large to make your VPC, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html">Your VPC and Subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>You can optionally request an Amazon-provided IPv6 CIDR block for the VPC. The IPv6 CIDR block uses a /56 prefix length, and is allocated from Amazon's pool of IPv6 addresses. You cannot choose the IPv6 range for your VPC.</p> <p>By default, each instance you launch in the VPC has the default DHCP options, which include only a default DNS server that we provide (AmazonProvidedDNS). For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html">DHCP Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>You can specify the instance tenancy value for the VPC when you create it. You can't change this value for the VPC after you create it. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html">Dedicated Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn create_vpc(&self, input: CreateVpcRequest) -> RusotoFuture<CreateVpcResult, CreateVpcError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateVpc");
        params.put("Version", "2016-11-15");
        CreateVpcRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateVpcError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateVpcResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            CreateVpcResultDeserializer::deserialize(&actual_tag_name, &mut stack)?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a VPC endpoint for a specified service. An endpoint enables you to create a private connection between your VPC and the service. The service may be provided by AWS, an AWS Marketplace partner, or another AWS account. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-endpoints.html">VPC Endpoints</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>A <code>gateway</code> endpoint serves as a target for a route in your route table for traffic destined for the AWS service. You can specify an endpoint policy to attach to the endpoint that will control access to the service from your VPC. You can also specify the VPC route tables that use the endpoint.</p> <p>An <code>interface</code> endpoint is a network interface in your subnet that serves as an endpoint for communicating with the specified service. You can specify the subnets in which to create an endpoint, and the security groups to associate with the endpoint network interface.</p> <p>Use <a>DescribeVpcEndpointServices</a> to get a list of supported services.</p>
    fn create_vpc_endpoint(
        &self,
        input: CreateVpcEndpointRequest,
    ) -> RusotoFuture<CreateVpcEndpointResult, CreateVpcEndpointError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateVpcEndpoint");
        params.put("Version", "2016-11-15");
        CreateVpcEndpointRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateVpcEndpointError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateVpcEndpointResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateVpcEndpointResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a connection notification for a specified VPC endpoint or VPC endpoint service. A connection notification notifies you of specific endpoint events. You must create an SNS topic to receive notifications. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Create a Topic</a> in the <i>Amazon Simple Notification Service Developer Guide</i>.</p> <p>You can create a connection notification for interface endpoints only.</p>
    fn create_vpc_endpoint_connection_notification(
        &self,
        input: CreateVpcEndpointConnectionNotificationRequest,
    ) -> RusotoFuture<
        CreateVpcEndpointConnectionNotificationResult,
        CreateVpcEndpointConnectionNotificationError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateVpcEndpointConnectionNotification");
        params.put("Version", "2016-11-15");
        CreateVpcEndpointConnectionNotificationRequestSerializer::serialize(
            &mut params,
            "",
            &input,
        );
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(CreateVpcEndpointConnectionNotificationError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateVpcEndpointConnectionNotificationResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            CreateVpcEndpointConnectionNotificationResultDeserializer::deserialize(
                                &actual_tag_name,
                                &mut stack,
                            )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a VPC endpoint service configuration to which service consumers (AWS accounts, IAM users, and IAM roles) can connect. Service consumers can create an interface VPC endpoint to connect to your service.</p> <p>To create an endpoint service configuration, you must first create a Network Load Balancer for your service. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/endpoint-service.html">VPC Endpoint Services</a> in the <i>Amazon Virtual Private Cloud User Guide</i>. </p>
    fn create_vpc_endpoint_service_configuration(
        &self,
        input: CreateVpcEndpointServiceConfigurationRequest,
    ) -> RusotoFuture<
        CreateVpcEndpointServiceConfigurationResult,
        CreateVpcEndpointServiceConfigurationError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateVpcEndpointServiceConfiguration");
        params.put("Version", "2016-11-15");
        CreateVpcEndpointServiceConfigurationRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(CreateVpcEndpointServiceConfigurationError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateVpcEndpointServiceConfigurationResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            CreateVpcEndpointServiceConfigurationResultDeserializer::deserialize(
                                &actual_tag_name,
                                &mut stack,
                            )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Requests a VPC peering connection between two VPCs: a requester VPC that you own and an accepter VPC with which to create the connection. The accepter VPC can belong to another AWS account and can be in a different Region to the requester VPC. The requester VPC and accepter VPC cannot have overlapping CIDR blocks.</p> <note> <p>Limitations and rules apply to a VPC peering connection. For more information, see the <a href="https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/vpc-peering-basics.html#vpc-peering-limitations">limitations</a> section in the <i>VPC Peering Guide</i>.</p> </note> <p>The owner of the accepter VPC must accept the peering request to activate the peering connection. The VPC peering connection request expires after 7 days, after which it cannot be accepted or rejected.</p> <p>If you create a VPC peering connection request between VPCs with overlapping CIDR blocks, the VPC peering connection has a status of <code>failed</code>.</p>
    fn create_vpc_peering_connection(
        &self,
        input: CreateVpcPeeringConnectionRequest,
    ) -> RusotoFuture<CreateVpcPeeringConnectionResult, CreateVpcPeeringConnectionError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateVpcPeeringConnection");
        params.put("Version", "2016-11-15");
        CreateVpcPeeringConnectionRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(CreateVpcPeeringConnectionError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateVpcPeeringConnectionResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateVpcPeeringConnectionResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a VPN connection between an existing virtual private gateway and a VPN customer gateway. The supported connection types are <code>ipsec.1</code> and <code>ipsec.2</code>.</p> <p>The response includes information that you need to give to your network administrator to configure your customer gateway.</p> <important> <p>We strongly recommend that you use HTTPS when calling this operation because the response contains sensitive cryptographic information for configuring your customer gateway.</p> </important> <p>If you decide to shut down your VPN connection for any reason and later create a new VPN connection, you must reconfigure your customer gateway with the new information returned from this call.</p> <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
    fn create_vpn_connection(
        &self,
        input: CreateVpnConnectionRequest,
    ) -> RusotoFuture<CreateVpnConnectionResult, CreateVpnConnectionError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateVpnConnection");
        params.put("Version", "2016-11-15");
        CreateVpnConnectionRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateVpnConnectionError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateVpnConnectionResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateVpnConnectionResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
    fn create_vpn_connection_route(
        &self,
        input: CreateVpnConnectionRouteRequest,
    ) -> RusotoFuture<(), CreateVpnConnectionRouteError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateVpnConnectionRoute");
        params.put("Version", "2016-11-15");
        CreateVpnConnectionRouteRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateVpnConnectionRouteError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Creates a virtual private gateway. A virtual private gateway is the endpoint on the VPC side of your VPN connection. You can create a virtual private gateway before creating the VPC itself.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
    fn create_vpn_gateway(
        &self,
        input: CreateVpnGatewayRequest,
    ) -> RusotoFuture<CreateVpnGatewayResult, CreateVpnGatewayError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "CreateVpnGateway");
        params.put("Version", "2016-11-15");
        CreateVpnGatewayRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(CreateVpnGatewayError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = CreateVpnGatewayResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = CreateVpnGatewayResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Deletes the specified Client VPN endpoint. You must disassociate all target networks before you can delete a Client VPN endpoint.</p>
    fn delete_client_vpn_endpoint(
        &self,
        input: DeleteClientVpnEndpointRequest,
    ) -> RusotoFuture<DeleteClientVpnEndpointResult, DeleteClientVpnEndpointError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteClientVpnEndpoint");
        params.put("Version", "2016-11-15");
        DeleteClientVpnEndpointRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteClientVpnEndpointError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DeleteClientVpnEndpointResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DeleteClientVpnEndpointResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Deletes a route from a Client VPN endpoint. You can only delete routes that you manually added using the <b>CreateClientVpnRoute</b> action. You cannot delete routes that were automatically added when associating a subnet. To remove routes that have been automatically added, disassociate the target subnet from the Client VPN endpoint.</p>
    fn delete_client_vpn_route(
        &self,
        input: DeleteClientVpnRouteRequest,
    ) -> RusotoFuture<DeleteClientVpnRouteResult, DeleteClientVpnRouteError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteClientVpnRoute");
        params.put("Version", "2016-11-15");
        DeleteClientVpnRouteRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteClientVpnRouteError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DeleteClientVpnRouteResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DeleteClientVpnRouteResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Deletes the specified customer gateway. You must delete the VPN connection before you can delete the customer gateway.</p>
    fn delete_customer_gateway(
        &self,
        input: DeleteCustomerGatewayRequest,
    ) -> RusotoFuture<(), DeleteCustomerGatewayError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteCustomerGateway");
        params.put("Version", "2016-11-15");
        DeleteCustomerGatewayRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteCustomerGatewayError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Deletes the specified set of DHCP options. You must disassociate the set of DHCP options before you can delete it. You can disassociate the set of DHCP options by associating either a new set of options or the default set of options with the VPC.</p>
    fn delete_dhcp_options(
        &self,
        input: DeleteDhcpOptionsRequest,
    ) -> RusotoFuture<(), DeleteDhcpOptionsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteDhcpOptions");
        params.put("Version", "2016-11-15");
        DeleteDhcpOptionsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteDhcpOptionsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Deletes an egress-only internet gateway.</p>
    fn delete_egress_only_internet_gateway(
        &self,
        input: DeleteEgressOnlyInternetGatewayRequest,
    ) -> RusotoFuture<DeleteEgressOnlyInternetGatewayResult, DeleteEgressOnlyInternetGatewayError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteEgressOnlyInternetGateway");
        params.put("Version", "2016-11-15");
        DeleteEgressOnlyInternetGatewayRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DeleteEgressOnlyInternetGatewayError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DeleteEgressOnlyInternetGatewayResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DeleteEgressOnlyInternetGatewayResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Deletes the specified EC2 Fleet.</p> <p>After you delete an EC2 Fleet, it launches no new instances. You must specify whether an EC2 Fleet should also terminate its instances. If you terminate the instances, the EC2 Fleet enters the <code>deleted_terminating</code> state. Otherwise, the EC2 Fleet enters the <code>deleted_running</code> state, and the instances continue to run until they are interrupted or you terminate them manually. </p>
    fn delete_fleets(
        &self,
        input: DeleteFleetsRequest,
    ) -> RusotoFuture<DeleteFleetsResult, DeleteFleetsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteFleets");
        params.put("Version", "2016-11-15");
        DeleteFleetsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteFleetsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DeleteFleetsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DeleteFleetsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Deletes one or more flow logs.</p>
    fn delete_flow_logs(
        &self,
        input: DeleteFlowLogsRequest,
    ) -> RusotoFuture<DeleteFlowLogsResult, DeleteFlowLogsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteFlowLogs");
        params.put("Version", "2016-11-15");
        DeleteFlowLogsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteFlowLogsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DeleteFlowLogsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DeleteFlowLogsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Deletes the specified Amazon FPGA Image (AFI).</p>
    fn delete_fpga_image(
        &self,
        input: DeleteFpgaImageRequest,
    ) -> RusotoFuture<DeleteFpgaImageResult, DeleteFpgaImageError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteFpgaImage");
        params.put("Version", "2016-11-15");
        DeleteFpgaImageRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteFpgaImageError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DeleteFpgaImageResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DeleteFpgaImageResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Deletes the specified internet gateway. You must detach the internet gateway from the VPC before you can delete it.</p>
    fn delete_internet_gateway(
        &self,
        input: DeleteInternetGatewayRequest,
    ) -> RusotoFuture<(), DeleteInternetGatewayError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteInternetGateway");
        params.put("Version", "2016-11-15");
        DeleteInternetGatewayRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteInternetGatewayError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Deletes the specified key pair, by removing the public key from Amazon EC2.</p>
    fn delete_key_pair(&self, input: DeleteKeyPairRequest) -> RusotoFuture<(), DeleteKeyPairError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteKeyPair");
        params.put("Version", "2016-11-15");
        DeleteKeyPairRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteKeyPairError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Deletes a launch template. Deleting a launch template deletes all of its versions.</p>
    fn delete_launch_template(
        &self,
        input: DeleteLaunchTemplateRequest,
    ) -> RusotoFuture<DeleteLaunchTemplateResult, DeleteLaunchTemplateError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteLaunchTemplate");
        params.put("Version", "2016-11-15");
        DeleteLaunchTemplateRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteLaunchTemplateError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DeleteLaunchTemplateResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DeleteLaunchTemplateResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Deletes one or more versions of a launch template. You cannot delete the default version of a launch template; you must first assign a different version as the default. If the default version is the only version for the launch template, you must delete the entire launch template using <a>DeleteLaunchTemplate</a>.</p>
    fn delete_launch_template_versions(
        &self,
        input: DeleteLaunchTemplateVersionsRequest,
    ) -> RusotoFuture<DeleteLaunchTemplateVersionsResult, DeleteLaunchTemplateVersionsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteLaunchTemplateVersions");
        params.put("Version", "2016-11-15");
        DeleteLaunchTemplateVersionsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DeleteLaunchTemplateVersionsError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DeleteLaunchTemplateVersionsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DeleteLaunchTemplateVersionsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Deletes the specified NAT gateway. Deleting a NAT gateway disassociates its Elastic IP address, but does not release the address from your account. Deleting a NAT gateway does not delete any NAT gateway routes in your route tables.</p>
    fn delete_nat_gateway(
        &self,
        input: DeleteNatGatewayRequest,
    ) -> RusotoFuture<DeleteNatGatewayResult, DeleteNatGatewayError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteNatGateway");
        params.put("Version", "2016-11-15");
        DeleteNatGatewayRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteNatGatewayError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DeleteNatGatewayResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DeleteNatGatewayResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Deletes the specified network ACL. You can't delete the ACL if it's associated with any subnets. You can't delete the default network ACL.</p>
    fn delete_network_acl(
        &self,
        input: DeleteNetworkAclRequest,
    ) -> RusotoFuture<(), DeleteNetworkAclError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteNetworkAcl");
        params.put("Version", "2016-11-15");
        DeleteNetworkAclRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteNetworkAclError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Deletes the specified ingress or egress entry (rule) from the specified network ACL.</p>
    fn delete_network_acl_entry(
        &self,
        input: DeleteNetworkAclEntryRequest,
    ) -> RusotoFuture<(), DeleteNetworkAclEntryError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteNetworkAclEntry");
        params.put("Version", "2016-11-15");
        DeleteNetworkAclEntryRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteNetworkAclEntryError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Deletes the specified network interface. You must detach the network interface before you can delete it.</p>
    fn delete_network_interface(
        &self,
        input: DeleteNetworkInterfaceRequest,
    ) -> RusotoFuture<(), DeleteNetworkInterfaceError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteNetworkInterface");
        params.put("Version", "2016-11-15");
        DeleteNetworkInterfaceRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteNetworkInterfaceError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Deletes a permission for a network interface. By default, you cannot delete the permission if the account for which you're removing the permission has attached the network interface to an instance. However, you can force delete the permission, regardless of any attachment.</p>
    fn delete_network_interface_permission(
        &self,
        input: DeleteNetworkInterfacePermissionRequest,
    ) -> RusotoFuture<DeleteNetworkInterfacePermissionResult, DeleteNetworkInterfacePermissionError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteNetworkInterfacePermission");
        params.put("Version", "2016-11-15");
        DeleteNetworkInterfacePermissionRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DeleteNetworkInterfacePermissionError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DeleteNetworkInterfacePermissionResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DeleteNetworkInterfacePermissionResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Deletes the specified placement group. You must terminate all instances in the placement group before you can delete the placement group. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn delete_placement_group(
        &self,
        input: DeletePlacementGroupRequest,
    ) -> RusotoFuture<(), DeletePlacementGroupError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeletePlacementGroup");
        params.put("Version", "2016-11-15");
        DeletePlacementGroupRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeletePlacementGroupError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Deletes the specified route from the specified route table.</p>
    fn delete_route(&self, input: DeleteRouteRequest) -> RusotoFuture<(), DeleteRouteError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteRoute");
        params.put("Version", "2016-11-15");
        DeleteRouteRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteRouteError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Deletes the specified route table. You must disassociate the route table from any subnets before you can delete it. You can't delete the main route table.</p>
    fn delete_route_table(
        &self,
        input: DeleteRouteTableRequest,
    ) -> RusotoFuture<(), DeleteRouteTableError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteRouteTable");
        params.put("Version", "2016-11-15");
        DeleteRouteTableRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteRouteTableError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Deletes a security group.</p> <p>If you attempt to delete a security group that is associated with an instance, or is referenced by another security group, the operation fails with <code>InvalidGroup.InUse</code> in EC2-Classic or <code>DependencyViolation</code> in EC2-VPC.</p>
    fn delete_security_group(
        &self,
        input: DeleteSecurityGroupRequest,
    ) -> RusotoFuture<(), DeleteSecurityGroupError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteSecurityGroup");
        params.put("Version", "2016-11-15");
        DeleteSecurityGroupRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteSecurityGroupError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Deletes the specified snapshot.</p> <p>When you make periodic snapshots of a volume, the snapshots are incremental, and only the blocks on the device that have changed since your last snapshot are saved in the new snapshot. When you delete a snapshot, only the data not needed for any other snapshot is removed. So regardless of which prior snapshots have been deleted, all active snapshots will have access to all the information needed to restore the volume.</p> <p>You cannot delete a snapshot of the root device of an EBS volume used by a registered AMI. You must first de-register the AMI before you can delete the snapshot.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-snapshot.html">Deleting an Amazon EBS Snapshot</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn delete_snapshot(
        &self,
        input: DeleteSnapshotRequest,
    ) -> RusotoFuture<(), DeleteSnapshotError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteSnapshot");
        params.put("Version", "2016-11-15");
        DeleteSnapshotRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteSnapshotError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Deletes the data feed for Spot Instances.</p>
    fn delete_spot_datafeed_subscription(
        &self,
        input: DeleteSpotDatafeedSubscriptionRequest,
    ) -> RusotoFuture<(), DeleteSpotDatafeedSubscriptionError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteSpotDatafeedSubscription");
        params.put("Version", "2016-11-15");
        DeleteSpotDatafeedSubscriptionRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DeleteSpotDatafeedSubscriptionError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Deletes the specified subnet. You must terminate all running instances in the subnet before you can delete the subnet.</p>
    fn delete_subnet(&self, input: DeleteSubnetRequest) -> RusotoFuture<(), DeleteSubnetError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteSubnet");
        params.put("Version", "2016-11-15");
        DeleteSubnetRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteSubnetError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Deletes the specified set of tags from the specified set of resources.</p> <p>To list the current tags, use <a>DescribeTags</a>. For more information about tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn delete_tags(&self, input: DeleteTagsRequest) -> RusotoFuture<(), DeleteTagsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteTags");
        params.put("Version", "2016-11-15");
        DeleteTagsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteTagsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Deletes the specified transit gateway.</p>
    fn delete_transit_gateway(
        &self,
        input: DeleteTransitGatewayRequest,
    ) -> RusotoFuture<DeleteTransitGatewayResult, DeleteTransitGatewayError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteTransitGateway");
        params.put("Version", "2016-11-15");
        DeleteTransitGatewayRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteTransitGatewayError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DeleteTransitGatewayResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DeleteTransitGatewayResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Deletes the specified route from the specified transit gateway route table.</p>
    fn delete_transit_gateway_route(
        &self,
        input: DeleteTransitGatewayRouteRequest,
    ) -> RusotoFuture<DeleteTransitGatewayRouteResult, DeleteTransitGatewayRouteError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteTransitGatewayRoute");
        params.put("Version", "2016-11-15");
        DeleteTransitGatewayRouteRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteTransitGatewayRouteError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DeleteTransitGatewayRouteResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DeleteTransitGatewayRouteResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Deletes the specified transit gateway route table. You must disassociate the route table from any transit gateway route tables before you can delete it.</p>
    fn delete_transit_gateway_route_table(
        &self,
        input: DeleteTransitGatewayRouteTableRequest,
    ) -> RusotoFuture<DeleteTransitGatewayRouteTableResult, DeleteTransitGatewayRouteTableError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteTransitGatewayRouteTable");
        params.put("Version", "2016-11-15");
        DeleteTransitGatewayRouteTableRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DeleteTransitGatewayRouteTableError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DeleteTransitGatewayRouteTableResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DeleteTransitGatewayRouteTableResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Deletes the specified VPC attachment.</p>
    fn delete_transit_gateway_vpc_attachment(
        &self,
        input: DeleteTransitGatewayVpcAttachmentRequest,
    ) -> RusotoFuture<DeleteTransitGatewayVpcAttachmentResult, DeleteTransitGatewayVpcAttachmentError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteTransitGatewayVpcAttachment");
        params.put("Version", "2016-11-15");
        DeleteTransitGatewayVpcAttachmentRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DeleteTransitGatewayVpcAttachmentError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DeleteTransitGatewayVpcAttachmentResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DeleteTransitGatewayVpcAttachmentResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Deletes the specified EBS volume. The volume must be in the <code>available</code> state (not attached to an instance).</p> <p>The volume can remain in the <code>deleting</code> state for several minutes.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-volume.html">Deleting an Amazon EBS Volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn delete_volume(&self, input: DeleteVolumeRequest) -> RusotoFuture<(), DeleteVolumeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteVolume");
        params.put("Version", "2016-11-15");
        DeleteVolumeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteVolumeError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Deletes the specified VPC. You must detach or delete all gateways and resources that are associated with the VPC before you can delete it. For example, you must terminate all instances running in the VPC, delete all security groups associated with the VPC (except the default one), delete all route tables associated with the VPC (except the default one), and so on.</p>
    fn delete_vpc(&self, input: DeleteVpcRequest) -> RusotoFuture<(), DeleteVpcError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteVpc");
        params.put("Version", "2016-11-15");
        DeleteVpcRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteVpcError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Deletes one or more VPC endpoint connection notifications.</p>
    fn delete_vpc_endpoint_connection_notifications(
        &self,
        input: DeleteVpcEndpointConnectionNotificationsRequest,
    ) -> RusotoFuture<
        DeleteVpcEndpointConnectionNotificationsResult,
        DeleteVpcEndpointConnectionNotificationsError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteVpcEndpointConnectionNotifications");
        params.put("Version", "2016-11-15");
        DeleteVpcEndpointConnectionNotificationsRequestSerializer::serialize(
            &mut params,
            "",
            &input,
        );
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
                        if !response.status.is_success() {
                            return response.buffer().map(|try_response| {
                                try_response.map_or_else(|e| e, |response| {
                                    Err(DeleteVpcEndpointConnectionNotificationsError::from_response(response))
                                })
                            }).boxed();
                        }

                        response.buffer().map(move |response| {
            let response = response?;
            
            let result;
            if response.body.is_empty() {
                result = DeleteVpcEndpointConnectionNotificationsResult::default();
            } else {
                let reader = EventReader::new_with_config(
                    response.body.as_ref(),
                    ParserConfig::new().trim_whitespace(true)
                );
                let mut stack = XmlResponse::new(reader.into_iter().peekable());
                let _start_document = stack.next();
                let actual_tag_name = peek_at_name(&mut stack)?;
                result = DeleteVpcEndpointConnectionNotificationsResultDeserializer::deserialize(&actual_tag_name, &mut stack)?;
            }
             // parse non-payload
            Ok(result)
        }).boxed()
                    })
    }

    /// <p>Deletes one or more VPC endpoint service configurations in your account. Before you delete the endpoint service configuration, you must reject any <code>Available</code> or <code>PendingAcceptance</code> interface endpoint connections that are attached to the service.</p>
    fn delete_vpc_endpoint_service_configurations(
        &self,
        input: DeleteVpcEndpointServiceConfigurationsRequest,
    ) -> RusotoFuture<
        DeleteVpcEndpointServiceConfigurationsResult,
        DeleteVpcEndpointServiceConfigurationsError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteVpcEndpointServiceConfigurations");
        params.put("Version", "2016-11-15");
        DeleteVpcEndpointServiceConfigurationsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DeleteVpcEndpointServiceConfigurationsError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DeleteVpcEndpointServiceConfigurationsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            DeleteVpcEndpointServiceConfigurationsResultDeserializer::deserialize(
                                &actual_tag_name,
                                &mut stack,
                            )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Deletes one or more specified VPC endpoints. Deleting a gateway endpoint also deletes the endpoint routes in the route tables that were associated with the endpoint. Deleting an interface endpoint deletes the endpoint network interfaces.</p>
    fn delete_vpc_endpoints(
        &self,
        input: DeleteVpcEndpointsRequest,
    ) -> RusotoFuture<DeleteVpcEndpointsResult, DeleteVpcEndpointsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteVpcEndpoints");
        params.put("Version", "2016-11-15");
        DeleteVpcEndpointsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteVpcEndpointsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DeleteVpcEndpointsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DeleteVpcEndpointsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Deletes a VPC peering connection. Either the owner of the requester VPC or the owner of the accepter VPC can delete the VPC peering connection if it's in the <code>active</code> state. The owner of the requester VPC can delete a VPC peering connection in the <code>pending-acceptance</code> state. You cannot delete a VPC peering connection that's in the <code>failed</code> state.</p>
    fn delete_vpc_peering_connection(
        &self,
        input: DeleteVpcPeeringConnectionRequest,
    ) -> RusotoFuture<DeleteVpcPeeringConnectionResult, DeleteVpcPeeringConnectionError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteVpcPeeringConnection");
        params.put("Version", "2016-11-15");
        DeleteVpcPeeringConnectionRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DeleteVpcPeeringConnectionError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DeleteVpcPeeringConnectionResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DeleteVpcPeeringConnectionResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Deletes the specified VPN connection.</p> <p>If you're deleting the VPC and its associated components, we recommend that you detach the virtual private gateway from the VPC and delete the VPC before deleting the VPN connection. If you believe that the tunnel credentials for your VPN connection have been compromised, you can delete the VPN connection and create a new one that has new keys, without needing to delete the VPC or virtual private gateway. If you create a new VPN connection, you must reconfigure the customer gateway using the new configuration information returned with the new VPN connection ID.</p>
    fn delete_vpn_connection(
        &self,
        input: DeleteVpnConnectionRequest,
    ) -> RusotoFuture<(), DeleteVpnConnectionError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteVpnConnection");
        params.put("Version", "2016-11-15");
        DeleteVpnConnectionRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteVpnConnectionError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Deletes the specified static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.</p>
    fn delete_vpn_connection_route(
        &self,
        input: DeleteVpnConnectionRouteRequest,
    ) -> RusotoFuture<(), DeleteVpnConnectionRouteError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteVpnConnectionRoute");
        params.put("Version", "2016-11-15");
        DeleteVpnConnectionRouteRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteVpnConnectionRouteError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Deletes the specified virtual private gateway. We recommend that before you delete a virtual private gateway, you detach it from the VPC and delete the VPN connection. Note that you don't need to delete the virtual private gateway if you plan to delete and recreate the VPN connection between your VPC and your network.</p>
    fn delete_vpn_gateway(
        &self,
        input: DeleteVpnGatewayRequest,
    ) -> RusotoFuture<(), DeleteVpnGatewayError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeleteVpnGateway");
        params.put("Version", "2016-11-15");
        DeleteVpnGatewayRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeleteVpnGatewayError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Releases the specified address range that you provisioned for use with your AWS resources through bring your own IP addresses (BYOIP) and deletes the corresponding address pool.</p> <p>Before you can release an address range, you must stop advertising it using <a>WithdrawByoipCidr</a> and you must not have any IP addresses allocated from its address range.</p>
    fn deprovision_byoip_cidr(
        &self,
        input: DeprovisionByoipCidrRequest,
    ) -> RusotoFuture<DeprovisionByoipCidrResult, DeprovisionByoipCidrError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeprovisionByoipCidr");
        params.put("Version", "2016-11-15");
        DeprovisionByoipCidrRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeprovisionByoipCidrError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DeprovisionByoipCidrResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DeprovisionByoipCidrResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Deregisters the specified AMI. After you deregister an AMI, it can't be used to launch new instances; however, it doesn't affect any instances that you've already launched from the AMI. You'll continue to incur usage costs for those instances until you terminate them.</p> <p>When you deregister an Amazon EBS-backed AMI, it doesn't affect the snapshot that was created for the root volume of the instance during the AMI creation process. When you deregister an instance store-backed AMI, it doesn't affect the files that you uploaded to Amazon S3 when you created the AMI.</p>
    fn deregister_image(
        &self,
        input: DeregisterImageRequest,
    ) -> RusotoFuture<(), DeregisterImageError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DeregisterImage");
        params.put("Version", "2016-11-15");
        DeregisterImageRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DeregisterImageError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p><p>Describes attributes of your AWS account. The following are the supported account attributes:</p> <ul> <li> <p> <code>supported-platforms</code>: Indicates whether your account can launch instances into EC2-Classic and EC2-VPC, or only into EC2-VPC.</p> </li> <li> <p> <code>default-vpc</code>: The ID of the default VPC for your account, or <code>none</code>.</p> </li> <li> <p> <code>max-instances</code>: The maximum number of On-Demand Instances that you can run.</p> </li> <li> <p> <code>vpc-max-security-groups-per-interface</code>: The maximum number of security groups that you can assign to a network interface.</p> </li> <li> <p> <code>max-elastic-ips</code>: The maximum number of Elastic IP addresses that you can allocate for use with EC2-Classic. </p> </li> <li> <p> <code>vpc-max-elastic-ips</code>: The maximum number of Elastic IP addresses that you can allocate for use with EC2-VPC.</p> </li> </ul></p>
    fn describe_account_attributes(
        &self,
        input: DescribeAccountAttributesRequest,
    ) -> RusotoFuture<DescribeAccountAttributesResult, DescribeAccountAttributesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeAccountAttributes");
        params.put("Version", "2016-11-15");
        DescribeAccountAttributesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeAccountAttributesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeAccountAttributesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeAccountAttributesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the specified Elastic IP addresses or all of your Elastic IP addresses.</p> <p>An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_addresses(
        &self,
        input: DescribeAddressesRequest,
    ) -> RusotoFuture<DescribeAddressesResult, DescribeAddressesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeAddresses");
        params.put("Version", "2016-11-15");
        DescribeAddressesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeAddressesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeAddressesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeAddressesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the longer ID format settings for all resource types in a specific Region. This request is useful for performing a quick audit to determine whether a specific Region is fully opted in for longer IDs (17-character IDs).</p> <p>This request only returns information about resource types that support longer IDs.</p> <p>The following resource types support longer IDs: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p>
    fn describe_aggregate_id_format(
        &self,
        input: DescribeAggregateIdFormatRequest,
    ) -> RusotoFuture<DescribeAggregateIdFormatResult, DescribeAggregateIdFormatError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeAggregateIdFormat");
        params.put("Version", "2016-11-15");
        DescribeAggregateIdFormatRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeAggregateIdFormatError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeAggregateIdFormatResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeAggregateIdFormatResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the Availability Zones that are available to you. The results include zones only for the Region you're currently using. If there is an event impacting an Availability Zone, you can use this request to view the state and any provided message for that Availability Zone.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html">Regions and Availability Zones</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_availability_zones(
        &self,
        input: DescribeAvailabilityZonesRequest,
    ) -> RusotoFuture<DescribeAvailabilityZonesResult, DescribeAvailabilityZonesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeAvailabilityZones");
        params.put("Version", "2016-11-15");
        DescribeAvailabilityZonesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeAvailabilityZonesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeAvailabilityZonesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeAvailabilityZonesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p><p>Describes the specified bundle tasks or all of your bundle tasks.</p> <note> <p>Completed bundle tasks are listed for only a limited time. If your bundle task is no longer in the list, you can still register an AMI from it. Just use <code>RegisterImage</code> with the Amazon S3 bucket name and image manifest name you provided to the bundle task.</p> </note></p>
    fn describe_bundle_tasks(
        &self,
        input: DescribeBundleTasksRequest,
    ) -> RusotoFuture<DescribeBundleTasksResult, DescribeBundleTasksError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeBundleTasks");
        params.put("Version", "2016-11-15");
        DescribeBundleTasksRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeBundleTasksError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeBundleTasksResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeBundleTasksResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the IP address ranges that were specified in calls to <a>ProvisionByoipCidr</a>.</p> <p>To describe the address pools that were created when you provisioned the address ranges, use <a>DescribePublicIpv4Pools</a>.</p>
    fn describe_byoip_cidrs(
        &self,
        input: DescribeByoipCidrsRequest,
    ) -> RusotoFuture<DescribeByoipCidrsResult, DescribeByoipCidrsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeByoipCidrs");
        params.put("Version", "2016-11-15");
        DescribeByoipCidrsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeByoipCidrsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeByoipCidrsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeByoipCidrsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more of your Capacity Reservations. The results describe only the Capacity Reservations in the AWS Region that you're currently using.</p>
    fn describe_capacity_reservations(
        &self,
        input: DescribeCapacityReservationsRequest,
    ) -> RusotoFuture<DescribeCapacityReservationsResult, DescribeCapacityReservationsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeCapacityReservations");
        params.put("Version", "2016-11-15");
        DescribeCapacityReservationsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeCapacityReservationsError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeCapacityReservationsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeCapacityReservationsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more of your linked EC2-Classic instances. This request only returns information about EC2-Classic instances linked to a VPC through ClassicLink. You cannot use this request to return information about other instances.</p>
    fn describe_classic_link_instances(
        &self,
        input: DescribeClassicLinkInstancesRequest,
    ) -> RusotoFuture<DescribeClassicLinkInstancesResult, DescribeClassicLinkInstancesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeClassicLinkInstances");
        params.put("Version", "2016-11-15");
        DescribeClassicLinkInstancesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeClassicLinkInstancesError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeClassicLinkInstancesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeClassicLinkInstancesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the authorization rules for a specified Client VPN endpoint.</p>
    fn describe_client_vpn_authorization_rules(
        &self,
        input: DescribeClientVpnAuthorizationRulesRequest,
    ) -> RusotoFuture<
        DescribeClientVpnAuthorizationRulesResult,
        DescribeClientVpnAuthorizationRulesError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeClientVpnAuthorizationRules");
        params.put("Version", "2016-11-15");
        DescribeClientVpnAuthorizationRulesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeClientVpnAuthorizationRulesError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeClientVpnAuthorizationRulesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            DescribeClientVpnAuthorizationRulesResultDeserializer::deserialize(
                                &actual_tag_name,
                                &mut stack,
                            )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes active client connections and connections that have been terminated within the last 60 minutes for the specified Client VPN endpoint.</p>
    fn describe_client_vpn_connections(
        &self,
        input: DescribeClientVpnConnectionsRequest,
    ) -> RusotoFuture<DescribeClientVpnConnectionsResult, DescribeClientVpnConnectionsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeClientVpnConnections");
        params.put("Version", "2016-11-15");
        DescribeClientVpnConnectionsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeClientVpnConnectionsError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeClientVpnConnectionsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeClientVpnConnectionsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more Client VPN endpoints in the account.</p>
    fn describe_client_vpn_endpoints(
        &self,
        input: DescribeClientVpnEndpointsRequest,
    ) -> RusotoFuture<DescribeClientVpnEndpointsResult, DescribeClientVpnEndpointsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeClientVpnEndpoints");
        params.put("Version", "2016-11-15");
        DescribeClientVpnEndpointsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeClientVpnEndpointsError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeClientVpnEndpointsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeClientVpnEndpointsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the routes for the specified Client VPN endpoint.</p>
    fn describe_client_vpn_routes(
        &self,
        input: DescribeClientVpnRoutesRequest,
    ) -> RusotoFuture<DescribeClientVpnRoutesResult, DescribeClientVpnRoutesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeClientVpnRoutes");
        params.put("Version", "2016-11-15");
        DescribeClientVpnRoutesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeClientVpnRoutesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeClientVpnRoutesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeClientVpnRoutesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the target networks associated with the specified Client VPN endpoint.</p>
    fn describe_client_vpn_target_networks(
        &self,
        input: DescribeClientVpnTargetNetworksRequest,
    ) -> RusotoFuture<DescribeClientVpnTargetNetworksResult, DescribeClientVpnTargetNetworksError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeClientVpnTargetNetworks");
        params.put("Version", "2016-11-15");
        DescribeClientVpnTargetNetworksRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeClientVpnTargetNetworksError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeClientVpnTargetNetworksResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeClientVpnTargetNetworksResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the specified conversion tasks or all your conversion tasks. For more information, see the <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/">VM Import/Export User Guide</a>.</p> <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
    fn describe_conversion_tasks(
        &self,
        input: DescribeConversionTasksRequest,
    ) -> RusotoFuture<DescribeConversionTasksResult, DescribeConversionTasksError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeConversionTasks");
        params.put("Version", "2016-11-15");
        DescribeConversionTasksRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeConversionTasksError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeConversionTasksResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeConversionTasksResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more of your VPN customer gateways.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
    fn describe_customer_gateways(
        &self,
        input: DescribeCustomerGatewaysRequest,
    ) -> RusotoFuture<DescribeCustomerGatewaysResult, DescribeCustomerGatewaysError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeCustomerGateways");
        params.put("Version", "2016-11-15");
        DescribeCustomerGatewaysRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeCustomerGatewaysError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeCustomerGatewaysResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeCustomerGatewaysResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more of your DHCP options sets.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html">DHCP Options Sets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn describe_dhcp_options(
        &self,
        input: DescribeDhcpOptionsRequest,
    ) -> RusotoFuture<DescribeDhcpOptionsResult, DescribeDhcpOptionsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeDhcpOptions");
        params.put("Version", "2016-11-15");
        DescribeDhcpOptionsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeDhcpOptionsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeDhcpOptionsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeDhcpOptionsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more of your egress-only internet gateways.</p>
    fn describe_egress_only_internet_gateways(
        &self,
        input: DescribeEgressOnlyInternetGatewaysRequest,
    ) -> RusotoFuture<
        DescribeEgressOnlyInternetGatewaysResult,
        DescribeEgressOnlyInternetGatewaysError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeEgressOnlyInternetGateways");
        params.put("Version", "2016-11-15");
        DescribeEgressOnlyInternetGatewaysRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeEgressOnlyInternetGatewaysError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeEgressOnlyInternetGatewaysResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeEgressOnlyInternetGatewaysResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the Elastic Graphics accelerator associated with your instances. For more information about Elastic Graphics, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html">Amazon Elastic Graphics</a>.</p>
    fn describe_elastic_gpus(
        &self,
        input: DescribeElasticGpusRequest,
    ) -> RusotoFuture<DescribeElasticGpusResult, DescribeElasticGpusError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeElasticGpus");
        params.put("Version", "2016-11-15");
        DescribeElasticGpusRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeElasticGpusError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeElasticGpusResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeElasticGpusResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the specified export tasks or all your export tasks.</p>
    fn describe_export_tasks(
        &self,
        input: DescribeExportTasksRequest,
    ) -> RusotoFuture<DescribeExportTasksResult, DescribeExportTasksError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeExportTasks");
        params.put("Version", "2016-11-15");
        DescribeExportTasksRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeExportTasksError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeExportTasksResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeExportTasksResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the events for the specified EC2 Fleet during the specified time.</p>
    fn describe_fleet_history(
        &self,
        input: DescribeFleetHistoryRequest,
    ) -> RusotoFuture<DescribeFleetHistoryResult, DescribeFleetHistoryError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeFleetHistory");
        params.put("Version", "2016-11-15");
        DescribeFleetHistoryRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeFleetHistoryError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeFleetHistoryResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeFleetHistoryResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the running instances for the specified EC2 Fleet.</p>
    fn describe_fleet_instances(
        &self,
        input: DescribeFleetInstancesRequest,
    ) -> RusotoFuture<DescribeFleetInstancesResult, DescribeFleetInstancesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeFleetInstances");
        params.put("Version", "2016-11-15");
        DescribeFleetInstancesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeFleetInstancesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeFleetInstancesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeFleetInstancesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the specified EC2 Fleets or all your EC2 Fleets.</p>
    fn describe_fleets(
        &self,
        input: DescribeFleetsRequest,
    ) -> RusotoFuture<DescribeFleetsResult, DescribeFleetsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeFleets");
        params.put("Version", "2016-11-15");
        DescribeFleetsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeFleetsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeFleetsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeFleetsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more flow logs. To view the information in your flow logs (the log streams for the network interfaces), you must use the CloudWatch Logs console or the CloudWatch Logs API.</p>
    fn describe_flow_logs(
        &self,
        input: DescribeFlowLogsRequest,
    ) -> RusotoFuture<DescribeFlowLogsResult, DescribeFlowLogsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeFlowLogs");
        params.put("Version", "2016-11-15");
        DescribeFlowLogsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeFlowLogsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeFlowLogsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeFlowLogsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the specified attribute of the specified Amazon FPGA Image (AFI).</p>
    fn describe_fpga_image_attribute(
        &self,
        input: DescribeFpgaImageAttributeRequest,
    ) -> RusotoFuture<DescribeFpgaImageAttributeResult, DescribeFpgaImageAttributeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeFpgaImageAttribute");
        params.put("Version", "2016-11-15");
        DescribeFpgaImageAttributeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeFpgaImageAttributeError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeFpgaImageAttributeResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeFpgaImageAttributeResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the Amazon FPGA Images (AFIs) available to you. These include public AFIs, private AFIs that you own, and AFIs owned by other AWS accounts for which you have load permissions.</p>
    fn describe_fpga_images(
        &self,
        input: DescribeFpgaImagesRequest,
    ) -> RusotoFuture<DescribeFpgaImagesResult, DescribeFpgaImagesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeFpgaImages");
        params.put("Version", "2016-11-15");
        DescribeFpgaImagesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeFpgaImagesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeFpgaImagesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeFpgaImagesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the Dedicated Host reservations that are available to purchase.</p> <p>The results describe all the Dedicated Host reservation offerings, including offerings that may not match the instance family and Region of your Dedicated Hosts. When purchasing an offering, ensure that the instance family and Region of the offering matches that of the Dedicated Hosts with which it is to be associated. For more information about supported instance types, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html">Dedicated Hosts Overview</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p>
    fn describe_host_reservation_offerings(
        &self,
        input: DescribeHostReservationOfferingsRequest,
    ) -> RusotoFuture<DescribeHostReservationOfferingsResult, DescribeHostReservationOfferingsError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeHostReservationOfferings");
        params.put("Version", "2016-11-15");
        DescribeHostReservationOfferingsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeHostReservationOfferingsError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeHostReservationOfferingsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeHostReservationOfferingsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes reservations that are associated with Dedicated Hosts in your account.</p>
    fn describe_host_reservations(
        &self,
        input: DescribeHostReservationsRequest,
    ) -> RusotoFuture<DescribeHostReservationsResult, DescribeHostReservationsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeHostReservations");
        params.put("Version", "2016-11-15");
        DescribeHostReservationsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeHostReservationsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeHostReservationsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeHostReservationsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the specified Dedicated Hosts or all your Dedicated Hosts.</p> <p>The results describe only the Dedicated Hosts in the Region you're currently using. All listed instances consume capacity on your Dedicated Host. Dedicated Hosts that have recently been released are listed with the state <code>released</code>.</p>
    fn describe_hosts(
        &self,
        input: DescribeHostsRequest,
    ) -> RusotoFuture<DescribeHostsResult, DescribeHostsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeHosts");
        params.put("Version", "2016-11-15");
        DescribeHostsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeHostsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeHostsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeHostsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes your IAM instance profile associations.</p>
    fn describe_iam_instance_profile_associations(
        &self,
        input: DescribeIamInstanceProfileAssociationsRequest,
    ) -> RusotoFuture<
        DescribeIamInstanceProfileAssociationsResult,
        DescribeIamInstanceProfileAssociationsError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeIamInstanceProfileAssociations");
        params.put("Version", "2016-11-15");
        DescribeIamInstanceProfileAssociationsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeIamInstanceProfileAssociationsError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeIamInstanceProfileAssociationsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            DescribeIamInstanceProfileAssociationsResultDeserializer::deserialize(
                                &actual_tag_name,
                                &mut stack,
                            )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the ID format settings for your resources on a per-Region basis, for example, to view which resource types are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types.</p> <p>The following resource types support longer IDs: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p> <p>These settings apply to the IAM user who makes the request; they do not apply to the entire AWS account. By default, an IAM user defaults to the same settings as the root user, unless they explicitly override the settings by running the <a>ModifyIdFormat</a> command. Resources created with longer IDs are visible to all IAM users, regardless of these settings and provided that they have permission to use the relevant <code>Describe</code> command for the resource type.</p>
    fn describe_id_format(
        &self,
        input: DescribeIdFormatRequest,
    ) -> RusotoFuture<DescribeIdFormatResult, DescribeIdFormatError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeIdFormat");
        params.put("Version", "2016-11-15");
        DescribeIdFormatRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeIdFormatError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeIdFormatResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeIdFormatResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the ID format settings for resources for the specified IAM user, IAM role, or root user. For example, you can view the resource types that are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p> <p>The following resource types support longer IDs: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p> <p>These settings apply to the principal specified in the request. They do not apply to the principal that makes the request.</p>
    fn describe_identity_id_format(
        &self,
        input: DescribeIdentityIdFormatRequest,
    ) -> RusotoFuture<DescribeIdentityIdFormatResult, DescribeIdentityIdFormatError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeIdentityIdFormat");
        params.put("Version", "2016-11-15");
        DescribeIdentityIdFormatRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeIdentityIdFormatError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeIdentityIdFormatResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeIdentityIdFormatResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the specified attribute of the specified AMI. You can specify only one attribute at a time.</p>
    fn describe_image_attribute(
        &self,
        input: DescribeImageAttributeRequest,
    ) -> RusotoFuture<ImageAttribute, DescribeImageAttributeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeImageAttribute");
        params.put("Version", "2016-11-15");
        DescribeImageAttributeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeImageAttributeError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ImageAttribute::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            ImageAttributeDeserializer::deserialize(&actual_tag_name, &mut stack)?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the specified images (AMIs, AKIs, and ARIs) available to you or all of the images available to you.</p> <p>The images available to you include public images, private images that you own, and private images owned by other AWS accounts for which you have explicit launch permissions.</p> <p>Recently deregistered images appear in the returned results for a short interval and then return empty results. After all instances that reference a deregistered AMI are terminated, specifying the ID of the image results in an error indicating that the AMI ID cannot be found.</p>
    fn describe_images(
        &self,
        input: DescribeImagesRequest,
    ) -> RusotoFuture<DescribeImagesResult, DescribeImagesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeImages");
        params.put("Version", "2016-11-15");
        DescribeImagesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeImagesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeImagesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeImagesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Displays details about an import virtual machine or import snapshot tasks that are already created.</p>
    fn describe_import_image_tasks(
        &self,
        input: DescribeImportImageTasksRequest,
    ) -> RusotoFuture<DescribeImportImageTasksResult, DescribeImportImageTasksError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeImportImageTasks");
        params.put("Version", "2016-11-15");
        DescribeImportImageTasksRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeImportImageTasksError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeImportImageTasksResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeImportImageTasksResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes your import snapshot tasks.</p>
    fn describe_import_snapshot_tasks(
        &self,
        input: DescribeImportSnapshotTasksRequest,
    ) -> RusotoFuture<DescribeImportSnapshotTasksResult, DescribeImportSnapshotTasksError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeImportSnapshotTasks");
        params.put("Version", "2016-11-15");
        DescribeImportSnapshotTasksRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeImportSnapshotTasksError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeImportSnapshotTasksResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeImportSnapshotTasksResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the specified attribute of the specified instance. You can specify only one attribute at a time. Valid attribute values are: <code>instanceType</code> | <code>kernel</code> | <code>ramdisk</code> | <code>userData</code> | <code>disableApiTermination</code> | <code>instanceInitiatedShutdownBehavior</code> | <code>rootDeviceName</code> | <code>blockDeviceMapping</code> | <code>productCodes</code> | <code>sourceDestCheck</code> | <code>groupSet</code> | <code>ebsOptimized</code> | <code>sriovNetSupport</code> </p>
    fn describe_instance_attribute(
        &self,
        input: DescribeInstanceAttributeRequest,
    ) -> RusotoFuture<InstanceAttribute, DescribeInstanceAttributeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeInstanceAttribute");
        params.put("Version", "2016-11-15");
        DescribeInstanceAttributeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeInstanceAttributeError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = InstanceAttribute::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = InstanceAttributeDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the credit option for CPU usage of the specified T2 or T3 instances. The credit options are <code>standard</code> and <code>unlimited</code>.</p> <p>If you do not specify an instance ID, Amazon EC2 returns T2 and T3 instances with the <code>unlimited</code> credit option, as well as instances that were previously configured as T2 or T3 with the <code>unlimited</code> credit option. For example, if you resize a T2 instance, while it is configured as <code>unlimited</code>, to an M4 instance, Amazon EC2 returns the M4 instance.</p> <p>If you specify one or more instance IDs, Amazon EC2 returns the credit option (<code>standard</code> or <code>unlimited</code>) of those instances. If you specify an instance ID that is not valid, such as an instance that is not a T2 or T3 instance, an error is returned.</p> <p>Recently terminated instances might appear in the returned results. This interval is usually less than one hour.</p> <p>If an Availability Zone is experiencing a service disruption and you specify instance IDs in the affected zone, or do not specify any instance IDs at all, the call fails. If you specify only instance IDs in an unaffected zone, the call works normally.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable Performance Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_instance_credit_specifications(
        &self,
        input: DescribeInstanceCreditSpecificationsRequest,
    ) -> RusotoFuture<
        DescribeInstanceCreditSpecificationsResult,
        DescribeInstanceCreditSpecificationsError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeInstanceCreditSpecifications");
        params.put("Version", "2016-11-15");
        DescribeInstanceCreditSpecificationsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeInstanceCreditSpecificationsError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeInstanceCreditSpecificationsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            DescribeInstanceCreditSpecificationsResultDeserializer::deserialize(
                                &actual_tag_name,
                                &mut stack,
                            )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p><p>Describes the status of the specified instances or all of your instances. By default, only running instances are described, unless you specifically indicate to return the status of all instances.</p> <p>Instance status includes the following components:</p> <ul> <li> <p> <b>Status checks</b> - Amazon EC2 performs status checks on running EC2 instances to identify hardware and software issues. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-system-instance-status-check.html">Status Checks for Your Instances</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstances.html">Troubleshooting Instances with Failed Status Checks</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </li> <li> <p> <b>Scheduled events</b> - Amazon EC2 can schedule events (such as reboot, stop, or terminate) for your instances related to hardware issues, software updates, or system maintenance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances-status-check_sched.html">Scheduled Events for Your Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </li> <li> <p> <b>Instance state</b> - You can manage your instances from the moment you launch them through their termination. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance Lifecycle</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </li> </ul></p>
    fn describe_instance_status(
        &self,
        input: DescribeInstanceStatusRequest,
    ) -> RusotoFuture<DescribeInstanceStatusResult, DescribeInstanceStatusError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeInstanceStatus");
        params.put("Version", "2016-11-15");
        DescribeInstanceStatusRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeInstanceStatusError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeInstanceStatusResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeInstanceStatusResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the specified instances or all of your instances.</p> <p>If you specify one or more instance IDs, Amazon EC2 returns information for those instances. If you do not specify instance IDs, Amazon EC2 returns information for all relevant instances. If you specify an instance ID that is not valid, an error is returned. If you specify an instance that you do not own, it is not included in the returned results.</p> <p>Recently terminated instances might appear in the returned results. This interval is usually less than one hour.</p> <p>If you describe instances in the rare case where an Availability Zone is experiencing a service disruption and you specify instance IDs that are in the affected zone, or do not specify any instance IDs at all, the call fails. If you describe instances and specify only instance IDs that are in an unaffected zone, the call works normally.</p>
    fn describe_instances(
        &self,
        input: DescribeInstancesRequest,
    ) -> RusotoFuture<DescribeInstancesResult, DescribeInstancesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeInstances");
        params.put("Version", "2016-11-15");
        DescribeInstancesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeInstancesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeInstancesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeInstancesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more of your internet gateways.</p>
    fn describe_internet_gateways(
        &self,
        input: DescribeInternetGatewaysRequest,
    ) -> RusotoFuture<DescribeInternetGatewaysResult, DescribeInternetGatewaysError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeInternetGateways");
        params.put("Version", "2016-11-15");
        DescribeInternetGatewaysRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeInternetGatewaysError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeInternetGatewaysResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeInternetGatewaysResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the specified key pairs or all of your key pairs.</p> <p>For more information about key pairs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_key_pairs(
        &self,
        input: DescribeKeyPairsRequest,
    ) -> RusotoFuture<DescribeKeyPairsResult, DescribeKeyPairsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeKeyPairs");
        params.put("Version", "2016-11-15");
        DescribeKeyPairsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeKeyPairsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeKeyPairsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeKeyPairsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more versions of a specified launch template. You can describe all versions, individual versions, or a range of versions.</p>
    fn describe_launch_template_versions(
        &self,
        input: DescribeLaunchTemplateVersionsRequest,
    ) -> RusotoFuture<DescribeLaunchTemplateVersionsResult, DescribeLaunchTemplateVersionsError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeLaunchTemplateVersions");
        params.put("Version", "2016-11-15");
        DescribeLaunchTemplateVersionsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeLaunchTemplateVersionsError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeLaunchTemplateVersionsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeLaunchTemplateVersionsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more launch templates.</p>
    fn describe_launch_templates(
        &self,
        input: DescribeLaunchTemplatesRequest,
    ) -> RusotoFuture<DescribeLaunchTemplatesResult, DescribeLaunchTemplatesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeLaunchTemplates");
        params.put("Version", "2016-11-15");
        DescribeLaunchTemplatesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeLaunchTemplatesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeLaunchTemplatesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeLaunchTemplatesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes your Elastic IP addresses that are being moved to the EC2-VPC platform, or that are being restored to the EC2-Classic platform. This request does not return information about any other Elastic IP addresses in your account.</p>
    fn describe_moving_addresses(
        &self,
        input: DescribeMovingAddressesRequest,
    ) -> RusotoFuture<DescribeMovingAddressesResult, DescribeMovingAddressesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeMovingAddresses");
        params.put("Version", "2016-11-15");
        DescribeMovingAddressesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeMovingAddressesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeMovingAddressesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeMovingAddressesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more of your NAT gateways.</p>
    fn describe_nat_gateways(
        &self,
        input: DescribeNatGatewaysRequest,
    ) -> RusotoFuture<DescribeNatGatewaysResult, DescribeNatGatewaysError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeNatGateways");
        params.put("Version", "2016-11-15");
        DescribeNatGatewaysRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeNatGatewaysError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeNatGatewaysResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeNatGatewaysResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more of your network ACLs.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn describe_network_acls(
        &self,
        input: DescribeNetworkAclsRequest,
    ) -> RusotoFuture<DescribeNetworkAclsResult, DescribeNetworkAclsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeNetworkAcls");
        params.put("Version", "2016-11-15");
        DescribeNetworkAclsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeNetworkAclsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeNetworkAclsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeNetworkAclsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes a network interface attribute. You can specify only one attribute at a time.</p>
    fn describe_network_interface_attribute(
        &self,
        input: DescribeNetworkInterfaceAttributeRequest,
    ) -> RusotoFuture<DescribeNetworkInterfaceAttributeResult, DescribeNetworkInterfaceAttributeError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeNetworkInterfaceAttribute");
        params.put("Version", "2016-11-15");
        DescribeNetworkInterfaceAttributeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeNetworkInterfaceAttributeError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeNetworkInterfaceAttributeResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeNetworkInterfaceAttributeResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the permissions for your network interfaces. </p>
    fn describe_network_interface_permissions(
        &self,
        input: DescribeNetworkInterfacePermissionsRequest,
    ) -> RusotoFuture<
        DescribeNetworkInterfacePermissionsResult,
        DescribeNetworkInterfacePermissionsError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeNetworkInterfacePermissions");
        params.put("Version", "2016-11-15");
        DescribeNetworkInterfacePermissionsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeNetworkInterfacePermissionsError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeNetworkInterfacePermissionsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            DescribeNetworkInterfacePermissionsResultDeserializer::deserialize(
                                &actual_tag_name,
                                &mut stack,
                            )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more of your network interfaces.</p>
    fn describe_network_interfaces(
        &self,
        input: DescribeNetworkInterfacesRequest,
    ) -> RusotoFuture<DescribeNetworkInterfacesResult, DescribeNetworkInterfacesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeNetworkInterfaces");
        params.put("Version", "2016-11-15");
        DescribeNetworkInterfacesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeNetworkInterfacesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeNetworkInterfacesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeNetworkInterfacesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the specified placement groups or all of your placement groups. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_placement_groups(
        &self,
        input: DescribePlacementGroupsRequest,
    ) -> RusotoFuture<DescribePlacementGroupsResult, DescribePlacementGroupsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribePlacementGroups");
        params.put("Version", "2016-11-15");
        DescribePlacementGroupsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribePlacementGroupsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribePlacementGroupsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribePlacementGroupsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes available AWS services in a prefix list format, which includes the prefix list name and prefix list ID of the service and the IP address range for the service. A prefix list ID is required for creating an outbound security group rule that allows traffic from a VPC to access an AWS service through a gateway VPC endpoint. Currently, the services that support this action are Amazon S3 and Amazon DynamoDB.</p>
    fn describe_prefix_lists(
        &self,
        input: DescribePrefixListsRequest,
    ) -> RusotoFuture<DescribePrefixListsResult, DescribePrefixListsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribePrefixLists");
        params.put("Version", "2016-11-15");
        DescribePrefixListsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribePrefixListsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribePrefixListsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribePrefixListsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the ID format settings for the root user and all IAM roles and IAM users that have explicitly specified a longer ID (17-character ID) preference. </p> <p>By default, all IAM roles and IAM users default to the same ID settings as the root user, unless they explicitly override the settings. This request is useful for identifying those IAM users and IAM roles that have overridden the default ID settings.</p> <p>The following resource types support longer IDs: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p>
    fn describe_principal_id_format(
        &self,
        input: DescribePrincipalIdFormatRequest,
    ) -> RusotoFuture<DescribePrincipalIdFormatResult, DescribePrincipalIdFormatError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribePrincipalIdFormat");
        params.put("Version", "2016-11-15");
        DescribePrincipalIdFormatRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribePrincipalIdFormatError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribePrincipalIdFormatResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribePrincipalIdFormatResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the specified IPv4 address pools.</p>
    fn describe_public_ipv_4_pools(
        &self,
        input: DescribePublicIpv4PoolsRequest,
    ) -> RusotoFuture<DescribePublicIpv4PoolsResult, DescribePublicIpv4PoolsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribePublicIpv4Pools");
        params.put("Version", "2016-11-15");
        DescribePublicIpv4PoolsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribePublicIpv4PoolsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribePublicIpv4PoolsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribePublicIpv4PoolsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the Regions that are currently available to you. The API returns a list of all the Regions, including Regions that are disabled for your account. For information about enabling Regions for your account, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/manage-account-payment.html#manage-account-payment-enable-disable-regions">Enabling and Disabling Regions</a> in the <i>AWS Billing and Cost Management User Guide</i>.</p> <p>For a list of the Regions supported by Amazon EC2, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region"> Regions and Endpoints</a>.</p>
    fn describe_regions(
        &self,
        input: DescribeRegionsRequest,
    ) -> RusotoFuture<DescribeRegionsResult, DescribeRegionsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeRegions");
        params.put("Version", "2016-11-15");
        DescribeRegionsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeRegionsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeRegionsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeRegionsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more of the Reserved Instances that you purchased.</p> <p>For more information about Reserved Instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_reserved_instances(
        &self,
        input: DescribeReservedInstancesRequest,
    ) -> RusotoFuture<DescribeReservedInstancesResult, DescribeReservedInstancesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeReservedInstances");
        params.put("Version", "2016-11-15");
        DescribeReservedInstancesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeReservedInstancesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeReservedInstancesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeReservedInstancesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes your account's Reserved Instance listings in the Reserved Instance Marketplace.</p> <p>The Reserved Instance Marketplace matches sellers who want to resell Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.</p> <p>As a seller, you choose to list some or all of your Reserved Instances, and you specify the upfront price to receive for them. Your Reserved Instances are then listed in the Reserved Instance Marketplace and are available for purchase.</p> <p>As a buyer, you specify the configuration of the Reserved Instance to purchase, and the Marketplace matches what you're searching for with what's available. The Marketplace first sells the lowest priced Reserved Instances to you, and continues to sell available Reserved Instance listings to you until your demand is met. You are charged based on the total price of all of the listings that you purchase.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_reserved_instances_listings(
        &self,
        input: DescribeReservedInstancesListingsRequest,
    ) -> RusotoFuture<DescribeReservedInstancesListingsResult, DescribeReservedInstancesListingsError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeReservedInstancesListings");
        params.put("Version", "2016-11-15");
        DescribeReservedInstancesListingsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeReservedInstancesListingsError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeReservedInstancesListingsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeReservedInstancesListingsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the modifications made to your Reserved Instances. If no parameter is specified, information about all your Reserved Instances modification requests is returned. If a modification ID is specified, only information about the specific modification is returned.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying Reserved Instances</a> in the Amazon Elastic Compute Cloud User Guide.</p>
    fn describe_reserved_instances_modifications(
        &self,
        input: DescribeReservedInstancesModificationsRequest,
    ) -> RusotoFuture<
        DescribeReservedInstancesModificationsResult,
        DescribeReservedInstancesModificationsError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeReservedInstancesModifications");
        params.put("Version", "2016-11-15");
        DescribeReservedInstancesModificationsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeReservedInstancesModificationsError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeReservedInstancesModificationsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            DescribeReservedInstancesModificationsResultDeserializer::deserialize(
                                &actual_tag_name,
                                &mut stack,
                            )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes Reserved Instance offerings that are available for purchase. With Reserved Instances, you purchase the right to launch instances for a period of time. During that time period, you do not receive insufficient capacity errors, and you pay a lower usage rate than the rate charged for On-Demand instances for the actual time used.</p> <p>If you have listed your own Reserved Instances for sale in the Reserved Instance Marketplace, they will be excluded from these results. This is to ensure that you do not purchase your own Reserved Instances.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_reserved_instances_offerings(
        &self,
        input: DescribeReservedInstancesOfferingsRequest,
    ) -> RusotoFuture<
        DescribeReservedInstancesOfferingsResult,
        DescribeReservedInstancesOfferingsError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeReservedInstancesOfferings");
        params.put("Version", "2016-11-15");
        DescribeReservedInstancesOfferingsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeReservedInstancesOfferingsError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeReservedInstancesOfferingsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeReservedInstancesOfferingsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more of your route tables.</p> <p>Each subnet in your VPC must be associated with a route table. If a subnet is not explicitly associated with any route table, it is implicitly associated with the main route table. This command does not return the subnet ID for implicit associations.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn describe_route_tables(
        &self,
        input: DescribeRouteTablesRequest,
    ) -> RusotoFuture<DescribeRouteTablesResult, DescribeRouteTablesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeRouteTables");
        params.put("Version", "2016-11-15");
        DescribeRouteTablesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeRouteTablesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeRouteTablesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeRouteTablesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Finds available schedules that meet the specified criteria.</p> <p>You can search for an available schedule no more than 3 months in advance. You must meet the minimum required duration of 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.</p> <p>After you find a schedule that meets your needs, call <a>PurchaseScheduledInstances</a> to purchase Scheduled Instances with that schedule.</p>
    fn describe_scheduled_instance_availability(
        &self,
        input: DescribeScheduledInstanceAvailabilityRequest,
    ) -> RusotoFuture<
        DescribeScheduledInstanceAvailabilityResult,
        DescribeScheduledInstanceAvailabilityError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeScheduledInstanceAvailability");
        params.put("Version", "2016-11-15");
        DescribeScheduledInstanceAvailabilityRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeScheduledInstanceAvailabilityError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeScheduledInstanceAvailabilityResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            DescribeScheduledInstanceAvailabilityResultDeserializer::deserialize(
                                &actual_tag_name,
                                &mut stack,
                            )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the specified Scheduled Instances or all your Scheduled Instances.</p>
    fn describe_scheduled_instances(
        &self,
        input: DescribeScheduledInstancesRequest,
    ) -> RusotoFuture<DescribeScheduledInstancesResult, DescribeScheduledInstancesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeScheduledInstances");
        params.put("Version", "2016-11-15");
        DescribeScheduledInstancesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeScheduledInstancesError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeScheduledInstancesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeScheduledInstancesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>[VPC only] Describes the VPCs on the other side of a VPC peering connection that are referencing the security groups you've specified in this request.</p>
    fn describe_security_group_references(
        &self,
        input: DescribeSecurityGroupReferencesRequest,
    ) -> RusotoFuture<DescribeSecurityGroupReferencesResult, DescribeSecurityGroupReferencesError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeSecurityGroupReferences");
        params.put("Version", "2016-11-15");
        DescribeSecurityGroupReferencesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeSecurityGroupReferencesError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeSecurityGroupReferencesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeSecurityGroupReferencesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the specified security groups or all of your security groups.</p> <p>A security group is for use with instances either in the EC2-Classic platform or in a specific VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Amazon EC2 Security Groups</a> in the <i>Amazon Elastic Compute Cloud User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html">Security Groups for Your VPC</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn describe_security_groups(
        &self,
        input: DescribeSecurityGroupsRequest,
    ) -> RusotoFuture<DescribeSecurityGroupsResult, DescribeSecurityGroupsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeSecurityGroups");
        params.put("Version", "2016-11-15");
        DescribeSecurityGroupsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeSecurityGroupsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeSecurityGroupsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeSecurityGroupsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the specified attribute of the specified snapshot. You can specify only one attribute at a time.</p> <p>For more information about EBS snapshots, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html">Amazon EBS Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_snapshot_attribute(
        &self,
        input: DescribeSnapshotAttributeRequest,
    ) -> RusotoFuture<DescribeSnapshotAttributeResult, DescribeSnapshotAttributeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeSnapshotAttribute");
        params.put("Version", "2016-11-15");
        DescribeSnapshotAttributeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeSnapshotAttributeError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeSnapshotAttributeResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeSnapshotAttributeResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the specified EBS snapshots available to you or all of the EBS snapshots available to you.</p> <p>The snapshots available to you include public snapshots, private snapshots that you own, and private snapshots owned by other AWS accounts for which you have explicit create volume permissions.</p> <p>The create volume permissions fall into the following categories:</p> <ul> <li> <p> <i>public</i>: The owner of the snapshot granted create volume permissions for the snapshot to the <code>all</code> group. All AWS accounts have create volume permissions for these snapshots.</p> </li> <li> <p> <i>explicit</i>: The owner of the snapshot granted create volume permissions to a specific AWS account.</p> </li> <li> <p> <i>implicit</i>: An AWS account has implicit create volume permissions for all snapshots it owns.</p> </li> </ul> <p>The list of snapshots returned can be modified by specifying snapshot IDs, snapshot owners, or AWS accounts with create volume permissions. If no options are specified, Amazon EC2 returns all snapshots for which you have create volume permissions.</p> <p>If you specify one or more snapshot IDs, only snapshots that have the specified IDs are returned. If you specify an invalid snapshot ID, an error is returned. If you specify a snapshot ID for which you do not have access, it is not included in the returned results.</p> <p>If you specify one or more snapshot owners using the <code>OwnerIds</code> option, only snapshots from the specified owners and for which you have access are returned. The results can include the AWS account IDs of the specified owners, <code>amazon</code> for snapshots owned by Amazon, or <code>self</code> for snapshots that you own.</p> <p>If you specify a list of restorable users, only snapshots with create snapshot permissions for those users are returned. You can specify AWS account IDs (if you own the snapshots), <code>self</code> for snapshots for which you own or have explicit permissions, or <code>all</code> for public snapshots.</p> <p>If you are describing a long list of snapshots, you can paginate the output to make the list more manageable. The <code>MaxResults</code> parameter sets the maximum number of results returned in a single page. If the list of results exceeds your <code>MaxResults</code> value, then that number of results is returned along with a <code>NextToken</code> value that can be passed to a subsequent <code>DescribeSnapshots</code> request to retrieve the remaining results.</p> <p>For more information about EBS snapshots, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html">Amazon EBS Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_snapshots(
        &self,
        input: DescribeSnapshotsRequest,
    ) -> RusotoFuture<DescribeSnapshotsResult, DescribeSnapshotsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeSnapshots");
        params.put("Version", "2016-11-15");
        DescribeSnapshotsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeSnapshotsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeSnapshotsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeSnapshotsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the data feed for Spot Instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html">Spot Instance Data Feed</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    fn describe_spot_datafeed_subscription(
        &self,
        input: DescribeSpotDatafeedSubscriptionRequest,
    ) -> RusotoFuture<DescribeSpotDatafeedSubscriptionResult, DescribeSpotDatafeedSubscriptionError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeSpotDatafeedSubscription");
        params.put("Version", "2016-11-15");
        DescribeSpotDatafeedSubscriptionRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeSpotDatafeedSubscriptionError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeSpotDatafeedSubscriptionResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeSpotDatafeedSubscriptionResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the running instances for the specified Spot Fleet.</p>
    fn describe_spot_fleet_instances(
        &self,
        input: DescribeSpotFleetInstancesRequest,
    ) -> RusotoFuture<DescribeSpotFleetInstancesResponse, DescribeSpotFleetInstancesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeSpotFleetInstances");
        params.put("Version", "2016-11-15");
        DescribeSpotFleetInstancesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeSpotFleetInstancesError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeSpotFleetInstancesResponse::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeSpotFleetInstancesResponseDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the events for the specified Spot Fleet request during the specified time.</p> <p>Spot Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event. Spot Fleet events are available for 48 hours.</p>
    fn describe_spot_fleet_request_history(
        &self,
        input: DescribeSpotFleetRequestHistoryRequest,
    ) -> RusotoFuture<DescribeSpotFleetRequestHistoryResponse, DescribeSpotFleetRequestHistoryError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeSpotFleetRequestHistory");
        params.put("Version", "2016-11-15");
        DescribeSpotFleetRequestHistoryRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeSpotFleetRequestHistoryError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeSpotFleetRequestHistoryResponse::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeSpotFleetRequestHistoryResponseDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes your Spot Fleet requests.</p> <p>Spot Fleet requests are deleted 48 hours after they are canceled and their instances are terminated.</p>
    fn describe_spot_fleet_requests(
        &self,
        input: DescribeSpotFleetRequestsRequest,
    ) -> RusotoFuture<DescribeSpotFleetRequestsResponse, DescribeSpotFleetRequestsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeSpotFleetRequests");
        params.put("Version", "2016-11-15");
        DescribeSpotFleetRequestsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeSpotFleetRequestsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeSpotFleetRequestsResponse::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeSpotFleetRequestsResponseDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the specified Spot Instance requests.</p> <p>You can use <code>DescribeSpotInstanceRequests</code> to find a running Spot Instance by examining the response. If the status of the Spot Instance is <code>fulfilled</code>, the instance ID appears in the response and contains the identifier of the instance. Alternatively, you can use <a>DescribeInstances</a> with a filter to look for instances where the instance lifecycle is <code>spot</code>.</p> <p>We recommend that you set <code>MaxResults</code> to a value between 5 and 1000 to limit the number of results returned. This paginates the output, which makes the list more manageable and returns the results faster. If the list of results exceeds your <code>MaxResults</code> value, then that number of results is returned along with a <code>NextToken</code> value that can be passed to a subsequent <code>DescribeSpotInstanceRequests</code> request to retrieve the remaining results.</p> <p>Spot Instance requests are deleted four hours after they are canceled and their instances are terminated.</p>
    fn describe_spot_instance_requests(
        &self,
        input: DescribeSpotInstanceRequestsRequest,
    ) -> RusotoFuture<DescribeSpotInstanceRequestsResult, DescribeSpotInstanceRequestsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeSpotInstanceRequests");
        params.put("Version", "2016-11-15");
        DescribeSpotInstanceRequestsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeSpotInstanceRequestsError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeSpotInstanceRequestsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeSpotInstanceRequestsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the Spot price history. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances-history.html">Spot Instance Pricing History</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>When you specify a start and end time, this operation returns the prices of the instance types within the time range that you specified and the time when the price changed. The price is valid within the time period that you specified; the response merely indicates the last time that the price changed.</p>
    fn describe_spot_price_history(
        &self,
        input: DescribeSpotPriceHistoryRequest,
    ) -> RusotoFuture<DescribeSpotPriceHistoryResult, DescribeSpotPriceHistoryError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeSpotPriceHistory");
        params.put("Version", "2016-11-15");
        DescribeSpotPriceHistoryRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeSpotPriceHistoryError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeSpotPriceHistoryResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeSpotPriceHistoryResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>[VPC only] Describes the stale security group rules for security groups in a specified VPC. Rules are stale when they reference a deleted security group in a peer VPC, or a security group in a peer VPC for which the VPC peering connection has been deleted.</p>
    fn describe_stale_security_groups(
        &self,
        input: DescribeStaleSecurityGroupsRequest,
    ) -> RusotoFuture<DescribeStaleSecurityGroupsResult, DescribeStaleSecurityGroupsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeStaleSecurityGroups");
        params.put("Version", "2016-11-15");
        DescribeStaleSecurityGroupsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeStaleSecurityGroupsError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeStaleSecurityGroupsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeStaleSecurityGroupsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more of your subnets.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html">Your VPC and Subnets</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn describe_subnets(
        &self,
        input: DescribeSubnetsRequest,
    ) -> RusotoFuture<DescribeSubnetsResult, DescribeSubnetsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeSubnets");
        params.put("Version", "2016-11-15");
        DescribeSubnetsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeSubnetsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeSubnetsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeSubnetsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the specified tags for your EC2 resources.</p> <p>For more information about tags, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Resources</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_tags(
        &self,
        input: DescribeTagsRequest,
    ) -> RusotoFuture<DescribeTagsResult, DescribeTagsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeTags");
        params.put("Version", "2016-11-15");
        DescribeTagsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeTagsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeTagsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeTagsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more attachments between resources and transit gateways. By default, all attachments are described. Alternatively, you can filter the results by attachment ID, attachment state, resource ID, or resource owner.</p>
    fn describe_transit_gateway_attachments(
        &self,
        input: DescribeTransitGatewayAttachmentsRequest,
    ) -> RusotoFuture<DescribeTransitGatewayAttachmentsResult, DescribeTransitGatewayAttachmentsError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeTransitGatewayAttachments");
        params.put("Version", "2016-11-15");
        DescribeTransitGatewayAttachmentsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeTransitGatewayAttachmentsError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeTransitGatewayAttachmentsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeTransitGatewayAttachmentsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more transit gateway route tables. By default, all transit gateway route tables are described. Alternatively, you can filter the results.</p>
    fn describe_transit_gateway_route_tables(
        &self,
        input: DescribeTransitGatewayRouteTablesRequest,
    ) -> RusotoFuture<DescribeTransitGatewayRouteTablesResult, DescribeTransitGatewayRouteTablesError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeTransitGatewayRouteTables");
        params.put("Version", "2016-11-15");
        DescribeTransitGatewayRouteTablesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeTransitGatewayRouteTablesError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeTransitGatewayRouteTablesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeTransitGatewayRouteTablesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more VPC attachments. By default, all VPC attachments are described. Alternatively, you can filter the results.</p>
    fn describe_transit_gateway_vpc_attachments(
        &self,
        input: DescribeTransitGatewayVpcAttachmentsRequest,
    ) -> RusotoFuture<
        DescribeTransitGatewayVpcAttachmentsResult,
        DescribeTransitGatewayVpcAttachmentsError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeTransitGatewayVpcAttachments");
        params.put("Version", "2016-11-15");
        DescribeTransitGatewayVpcAttachmentsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeTransitGatewayVpcAttachmentsError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeTransitGatewayVpcAttachmentsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            DescribeTransitGatewayVpcAttachmentsResultDeserializer::deserialize(
                                &actual_tag_name,
                                &mut stack,
                            )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more transit gateways. By default, all transit gateways are described. Alternatively, you can filter the results.</p>
    fn describe_transit_gateways(
        &self,
        input: DescribeTransitGatewaysRequest,
    ) -> RusotoFuture<DescribeTransitGatewaysResult, DescribeTransitGatewaysError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeTransitGateways");
        params.put("Version", "2016-11-15");
        DescribeTransitGatewaysRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeTransitGatewaysError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeTransitGatewaysResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeTransitGatewaysResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the specified attribute of the specified volume. You can specify only one attribute at a time.</p> <p>For more information about EBS volumes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html">Amazon EBS Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_volume_attribute(
        &self,
        input: DescribeVolumeAttributeRequest,
    ) -> RusotoFuture<DescribeVolumeAttributeResult, DescribeVolumeAttributeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeVolumeAttribute");
        params.put("Version", "2016-11-15");
        DescribeVolumeAttributeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeVolumeAttributeError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeVolumeAttributeResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeVolumeAttributeResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the status of the specified volumes. Volume status provides the result of the checks performed on your volumes to determine events that can impair the performance of your volumes. The performance of a volume can be affected if an issue occurs on the volume's underlying host. If the volume's underlying host experiences a power outage or system issue, after the system is restored, there could be data inconsistencies on the volume. Volume events notify you if this occurs. Volume actions notify you if any action needs to be taken in response to the event.</p> <p>The <code>DescribeVolumeStatus</code> operation provides the following information about the specified volumes:</p> <p> <i>Status</i>: Reflects the current status of the volume. The possible values are <code>ok</code>, <code>impaired</code> , <code>warning</code>, or <code>insufficient-data</code>. If all checks pass, the overall status of the volume is <code>ok</code>. If the check fails, the overall status is <code>impaired</code>. If the status is <code>insufficient-data</code>, then the checks may still be taking place on your volume at the time. We recommend that you retry the request. For more information about volume status, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-volume-status.html">Monitoring the Status of Your Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p> <i>Events</i>: Reflect the cause of a volume status and may require you to take action. For example, if your volume returns an <code>impaired</code> status, then the volume event might be <code>potential-data-inconsistency</code>. This means that your volume has been affected by an issue with the underlying host, has all I/O operations disabled, and may have inconsistent data.</p> <p> <i>Actions</i>: Reflect the actions you may have to take in response to an event. For example, if the status of the volume is <code>impaired</code> and the volume event shows <code>potential-data-inconsistency</code>, then the action shows <code>enable-volume-io</code>. This means that you may want to enable the I/O operations for the volume by calling the <a>EnableVolumeIO</a> action and then check the volume for data consistency.</p> <p>Volume status is based on the volume status checks, and does not reflect the volume state. Therefore, volume status does not indicate volumes in the <code>error</code> state (for example, when a volume is incapable of accepting I/O.)</p>
    fn describe_volume_status(
        &self,
        input: DescribeVolumeStatusRequest,
    ) -> RusotoFuture<DescribeVolumeStatusResult, DescribeVolumeStatusError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeVolumeStatus");
        params.put("Version", "2016-11-15");
        DescribeVolumeStatusRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeVolumeStatusError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeVolumeStatusResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeVolumeStatusResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the specified EBS volumes or all of your EBS volumes.</p> <p>If you are describing a long list of volumes, you can paginate the output to make the list more manageable. The <code>MaxResults</code> parameter sets the maximum number of results returned in a single page. If the list of results exceeds your <code>MaxResults</code> value, then that number of results is returned along with a <code>NextToken</code> value that can be passed to a subsequent <code>DescribeVolumes</code> request to retrieve the remaining results.</p> <p>For more information about EBS volumes, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html">Amazon EBS Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_volumes(
        &self,
        input: DescribeVolumesRequest,
    ) -> RusotoFuture<DescribeVolumesResult, DescribeVolumesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeVolumes");
        params.put("Version", "2016-11-15");
        DescribeVolumesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeVolumesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeVolumesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeVolumesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Reports the current modification status of EBS volumes.</p> <p>Current-generation EBS volumes support modification of attributes including type, size, and (for <code>io1</code> volumes) IOPS provisioning while either attached to or detached from an instance. Following an action from the API or the console to modify a volume, the status of the modification may be <code>modifying</code>, <code>optimizing</code>, <code>completed</code>, or <code>failed</code>. If a volume has never been modified, then certain elements of the returned <code>VolumeModification</code> objects are null. </p> <p> You can also use CloudWatch Events to check the status of a modification to an EBS volume. For information about CloudWatch Events, see the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/">Amazon CloudWatch Events User Guide</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#monitoring_mods">Monitoring Volume Modifications"</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_volumes_modifications(
        &self,
        input: DescribeVolumesModificationsRequest,
    ) -> RusotoFuture<DescribeVolumesModificationsResult, DescribeVolumesModificationsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeVolumesModifications");
        params.put("Version", "2016-11-15");
        DescribeVolumesModificationsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeVolumesModificationsError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeVolumesModificationsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeVolumesModificationsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the specified attribute of the specified VPC. You can specify only one attribute at a time.</p>
    fn describe_vpc_attribute(
        &self,
        input: DescribeVpcAttributeRequest,
    ) -> RusotoFuture<DescribeVpcAttributeResult, DescribeVpcAttributeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeVpcAttribute");
        params.put("Version", "2016-11-15");
        DescribeVpcAttributeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeVpcAttributeError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeVpcAttributeResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeVpcAttributeResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the ClassicLink status of one or more VPCs.</p>
    fn describe_vpc_classic_link(
        &self,
        input: DescribeVpcClassicLinkRequest,
    ) -> RusotoFuture<DescribeVpcClassicLinkResult, DescribeVpcClassicLinkError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeVpcClassicLink");
        params.put("Version", "2016-11-15");
        DescribeVpcClassicLinkRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeVpcClassicLinkError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeVpcClassicLinkResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeVpcClassicLinkResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the ClassicLink DNS support status of one or more VPCs. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn describe_vpc_classic_link_dns_support(
        &self,
        input: DescribeVpcClassicLinkDnsSupportRequest,
    ) -> RusotoFuture<DescribeVpcClassicLinkDnsSupportResult, DescribeVpcClassicLinkDnsSupportError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeVpcClassicLinkDnsSupport");
        params.put("Version", "2016-11-15");
        DescribeVpcClassicLinkDnsSupportRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeVpcClassicLinkDnsSupportError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeVpcClassicLinkDnsSupportResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeVpcClassicLinkDnsSupportResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the connection notifications for VPC endpoints and VPC endpoint services.</p>
    fn describe_vpc_endpoint_connection_notifications(
        &self,
        input: DescribeVpcEndpointConnectionNotificationsRequest,
    ) -> RusotoFuture<
        DescribeVpcEndpointConnectionNotificationsResult,
        DescribeVpcEndpointConnectionNotificationsError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeVpcEndpointConnectionNotifications");
        params.put("Version", "2016-11-15");
        DescribeVpcEndpointConnectionNotificationsRequestSerializer::serialize(
            &mut params,
            "",
            &input,
        );
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
                        if !response.status.is_success() {
                            return response.buffer().map(|try_response| {
                                try_response.map_or_else(|e| e, |response| {
                                    Err(DescribeVpcEndpointConnectionNotificationsError::from_response(response))
                                })
                            }).boxed();
                        }

                        response.buffer().map(move |response| {
            let response = response?;
            
            let result;
            if response.body.is_empty() {
                result = DescribeVpcEndpointConnectionNotificationsResult::default();
            } else {
                let reader = EventReader::new_with_config(
                    response.body.as_ref(),
                    ParserConfig::new().trim_whitespace(true)
                );
                let mut stack = XmlResponse::new(reader.into_iter().peekable());
                let _start_document = stack.next();
                let actual_tag_name = peek_at_name(&mut stack)?;
                result = DescribeVpcEndpointConnectionNotificationsResultDeserializer::deserialize(&actual_tag_name, &mut stack)?;
            }
             // parse non-payload
            Ok(result)
        }).boxed()
                    })
    }

    /// <p>Describes the VPC endpoint connections to your VPC endpoint services, including any endpoints that are pending your acceptance.</p>
    fn describe_vpc_endpoint_connections(
        &self,
        input: DescribeVpcEndpointConnectionsRequest,
    ) -> RusotoFuture<DescribeVpcEndpointConnectionsResult, DescribeVpcEndpointConnectionsError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeVpcEndpointConnections");
        params.put("Version", "2016-11-15");
        DescribeVpcEndpointConnectionsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeVpcEndpointConnectionsError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeVpcEndpointConnectionsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeVpcEndpointConnectionsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the VPC endpoint service configurations in your account (your services).</p>
    fn describe_vpc_endpoint_service_configurations(
        &self,
        input: DescribeVpcEndpointServiceConfigurationsRequest,
    ) -> RusotoFuture<
        DescribeVpcEndpointServiceConfigurationsResult,
        DescribeVpcEndpointServiceConfigurationsError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeVpcEndpointServiceConfigurations");
        params.put("Version", "2016-11-15");
        DescribeVpcEndpointServiceConfigurationsRequestSerializer::serialize(
            &mut params,
            "",
            &input,
        );
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
                        if !response.status.is_success() {
                            return response.buffer().map(|try_response| {
                                try_response.map_or_else(|e| e, |response| {
                                    Err(DescribeVpcEndpointServiceConfigurationsError::from_response(response))
                                })
                            }).boxed();
                        }

                        response.buffer().map(move |response| {
            let response = response?;
            
            let result;
            if response.body.is_empty() {
                result = DescribeVpcEndpointServiceConfigurationsResult::default();
            } else {
                let reader = EventReader::new_with_config(
                    response.body.as_ref(),
                    ParserConfig::new().trim_whitespace(true)
                );
                let mut stack = XmlResponse::new(reader.into_iter().peekable());
                let _start_document = stack.next();
                let actual_tag_name = peek_at_name(&mut stack)?;
                result = DescribeVpcEndpointServiceConfigurationsResultDeserializer::deserialize(&actual_tag_name, &mut stack)?;
            }
             // parse non-payload
            Ok(result)
        }).boxed()
                    })
    }

    /// <p>Describes the principals (service consumers) that are permitted to discover your VPC endpoint service.</p>
    fn describe_vpc_endpoint_service_permissions(
        &self,
        input: DescribeVpcEndpointServicePermissionsRequest,
    ) -> RusotoFuture<
        DescribeVpcEndpointServicePermissionsResult,
        DescribeVpcEndpointServicePermissionsError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeVpcEndpointServicePermissions");
        params.put("Version", "2016-11-15");
        DescribeVpcEndpointServicePermissionsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeVpcEndpointServicePermissionsError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeVpcEndpointServicePermissionsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            DescribeVpcEndpointServicePermissionsResultDeserializer::deserialize(
                                &actual_tag_name,
                                &mut stack,
                            )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes available services to which you can create a VPC endpoint.</p>
    fn describe_vpc_endpoint_services(
        &self,
        input: DescribeVpcEndpointServicesRequest,
    ) -> RusotoFuture<DescribeVpcEndpointServicesResult, DescribeVpcEndpointServicesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeVpcEndpointServices");
        params.put("Version", "2016-11-15");
        DescribeVpcEndpointServicesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeVpcEndpointServicesError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeVpcEndpointServicesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeVpcEndpointServicesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more of your VPC endpoints.</p>
    fn describe_vpc_endpoints(
        &self,
        input: DescribeVpcEndpointsRequest,
    ) -> RusotoFuture<DescribeVpcEndpointsResult, DescribeVpcEndpointsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeVpcEndpoints");
        params.put("Version", "2016-11-15");
        DescribeVpcEndpointsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeVpcEndpointsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeVpcEndpointsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeVpcEndpointsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more of your VPC peering connections.</p>
    fn describe_vpc_peering_connections(
        &self,
        input: DescribeVpcPeeringConnectionsRequest,
    ) -> RusotoFuture<DescribeVpcPeeringConnectionsResult, DescribeVpcPeeringConnectionsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeVpcPeeringConnections");
        params.put("Version", "2016-11-15");
        DescribeVpcPeeringConnectionsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DescribeVpcPeeringConnectionsError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeVpcPeeringConnectionsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeVpcPeeringConnectionsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more of your VPCs.</p>
    fn describe_vpcs(
        &self,
        input: DescribeVpcsRequest,
    ) -> RusotoFuture<DescribeVpcsResult, DescribeVpcsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeVpcs");
        params.put("Version", "2016-11-15");
        DescribeVpcsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeVpcsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeVpcsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeVpcsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more of your VPN connections.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
    fn describe_vpn_connections(
        &self,
        input: DescribeVpnConnectionsRequest,
    ) -> RusotoFuture<DescribeVpnConnectionsResult, DescribeVpnConnectionsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeVpnConnections");
        params.put("Version", "2016-11-15");
        DescribeVpnConnectionsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeVpnConnectionsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeVpnConnectionsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeVpnConnectionsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes one or more of your virtual private gateways.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html">AWS Site-to-Site VPN</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p>
    fn describe_vpn_gateways(
        &self,
        input: DescribeVpnGatewaysRequest,
    ) -> RusotoFuture<DescribeVpnGatewaysResult, DescribeVpnGatewaysError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DescribeVpnGateways");
        params.put("Version", "2016-11-15");
        DescribeVpnGatewaysRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DescribeVpnGatewaysError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DescribeVpnGatewaysResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DescribeVpnGatewaysResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Unlinks (detaches) a linked EC2-Classic instance from a VPC. After the instance has been unlinked, the VPC security groups are no longer associated with it. An instance is automatically unlinked from a VPC when it's stopped.</p>
    fn detach_classic_link_vpc(
        &self,
        input: DetachClassicLinkVpcRequest,
    ) -> RusotoFuture<DetachClassicLinkVpcResult, DetachClassicLinkVpcError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DetachClassicLinkVpc");
        params.put("Version", "2016-11-15");
        DetachClassicLinkVpcRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DetachClassicLinkVpcError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DetachClassicLinkVpcResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DetachClassicLinkVpcResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Detaches an internet gateway from a VPC, disabling connectivity between the internet and the VPC. The VPC must not contain any running instances with Elastic IP addresses or public IPv4 addresses.</p>
    fn detach_internet_gateway(
        &self,
        input: DetachInternetGatewayRequest,
    ) -> RusotoFuture<(), DetachInternetGatewayError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DetachInternetGateway");
        params.put("Version", "2016-11-15");
        DetachInternetGatewayRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DetachInternetGatewayError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Detaches a network interface from an instance.</p>
    fn detach_network_interface(
        &self,
        input: DetachNetworkInterfaceRequest,
    ) -> RusotoFuture<(), DetachNetworkInterfaceError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DetachNetworkInterface");
        params.put("Version", "2016-11-15");
        DetachNetworkInterfaceRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DetachNetworkInterfaceError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Detaches an EBS volume from an instance. Make sure to unmount any file systems on the device within your operating system before detaching the volume. Failure to do so can result in the volume becoming stuck in the <code>busy</code> state while detaching. If this happens, detachment can be delayed indefinitely until you unmount the volume, force detachment, reboot the instance, or all three. If an EBS volume is the root device of an instance, it can't be detached while the instance is running. To detach the root volume, stop the instance first.</p> <p>When a volume with an AWS Marketplace product code is detached from an instance, the product code is no longer associated with the instance.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-detaching-volume.html">Detaching an Amazon EBS Volume</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn detach_volume(
        &self,
        input: DetachVolumeRequest,
    ) -> RusotoFuture<VolumeAttachment, DetachVolumeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DetachVolume");
        params.put("Version", "2016-11-15");
        DetachVolumeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DetachVolumeError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = VolumeAttachment::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = VolumeAttachmentDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Detaches a virtual private gateway from a VPC. You do this if you're planning to turn off the VPC and not use it anymore. You can confirm a virtual private gateway has been completely detached from a VPC by describing the virtual private gateway (any attachments to the virtual private gateway are also described).</p> <p>You must wait for the attachment's state to switch to <code>detached</code> before you can delete the VPC or attach a different VPC to the virtual private gateway.</p>
    fn detach_vpn_gateway(
        &self,
        input: DetachVpnGatewayRequest,
    ) -> RusotoFuture<(), DetachVpnGatewayError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DetachVpnGateway");
        params.put("Version", "2016-11-15");
        DetachVpnGatewayRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DetachVpnGatewayError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Disables default encryption for EBS volumes that are created in your account in the current region.</p> <p>Call this API if you have enabled default encryption using <a>EnableEbsEncryptionByDefault</a> and want to disable default EBS encryption. Once default EBS encryption is disabled, you can still create an encrypted volume by setting <i>encrypted</i> to <i>true</i> in the API call that creates the volume. </p> <p>Disabling default EBS encryption will not change the encryption status of any of your existing volumes.</p>
    fn disable_ebs_encryption_by_default(
        &self,
        input: DisableEbsEncryptionByDefaultRequest,
    ) -> RusotoFuture<DisableEbsEncryptionByDefaultResult, DisableEbsEncryptionByDefaultError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DisableEbsEncryptionByDefault");
        params.put("Version", "2016-11-15");
        DisableEbsEncryptionByDefaultRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DisableEbsEncryptionByDefaultError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DisableEbsEncryptionByDefaultResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DisableEbsEncryptionByDefaultResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Disables the specified resource attachment from propagating routes to the specified propagation route table.</p>
    fn disable_transit_gateway_route_table_propagation(
        &self,
        input: DisableTransitGatewayRouteTablePropagationRequest,
    ) -> RusotoFuture<
        DisableTransitGatewayRouteTablePropagationResult,
        DisableTransitGatewayRouteTablePropagationError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DisableTransitGatewayRouteTablePropagation");
        params.put("Version", "2016-11-15");
        DisableTransitGatewayRouteTablePropagationRequestSerializer::serialize(
            &mut params,
            "",
            &input,
        );
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
                        if !response.status.is_success() {
                            return response.buffer().map(|try_response| {
                                try_response.map_or_else(|e| e, |response| {
                                    Err(DisableTransitGatewayRouteTablePropagationError::from_response(response))
                                })
                            }).boxed();
                        }

                        response.buffer().map(move |response| {
            let response = response?;
            
            let result;
            if response.body.is_empty() {
                result = DisableTransitGatewayRouteTablePropagationResult::default();
            } else {
                let reader = EventReader::new_with_config(
                    response.body.as_ref(),
                    ParserConfig::new().trim_whitespace(true)
                );
                let mut stack = XmlResponse::new(reader.into_iter().peekable());
                let _start_document = stack.next();
                let actual_tag_name = peek_at_name(&mut stack)?;
                result = DisableTransitGatewayRouteTablePropagationResultDeserializer::deserialize(&actual_tag_name, &mut stack)?;
            }
             // parse non-payload
            Ok(result)
        }).boxed()
                    })
    }

    /// <p>Disables a virtual private gateway (VGW) from propagating routes to a specified route table of a VPC.</p>
    fn disable_vgw_route_propagation(
        &self,
        input: DisableVgwRoutePropagationRequest,
    ) -> RusotoFuture<(), DisableVgwRoutePropagationError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DisableVgwRoutePropagation");
        params.put("Version", "2016-11-15");
        DisableVgwRoutePropagationRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DisableVgwRoutePropagationError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Disables ClassicLink for a VPC. You cannot disable ClassicLink for a VPC that has EC2-Classic instances linked to it.</p>
    fn disable_vpc_classic_link(
        &self,
        input: DisableVpcClassicLinkRequest,
    ) -> RusotoFuture<DisableVpcClassicLinkResult, DisableVpcClassicLinkError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DisableVpcClassicLink");
        params.put("Version", "2016-11-15");
        DisableVpcClassicLinkRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DisableVpcClassicLinkError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DisableVpcClassicLinkResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DisableVpcClassicLinkResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Disables ClassicLink DNS support for a VPC. If disabled, DNS hostnames resolve to public IP addresses when addressed between a linked EC2-Classic instance and instances in the VPC to which it's linked. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn disable_vpc_classic_link_dns_support(
        &self,
        input: DisableVpcClassicLinkDnsSupportRequest,
    ) -> RusotoFuture<DisableVpcClassicLinkDnsSupportResult, DisableVpcClassicLinkDnsSupportError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DisableVpcClassicLinkDnsSupport");
        params.put("Version", "2016-11-15");
        DisableVpcClassicLinkDnsSupportRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DisableVpcClassicLinkDnsSupportError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DisableVpcClassicLinkDnsSupportResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DisableVpcClassicLinkDnsSupportResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Disassociates an Elastic IP address from the instance or network interface it's associated with.</p> <p>An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error.</p>
    fn disassociate_address(
        &self,
        input: DisassociateAddressRequest,
    ) -> RusotoFuture<(), DisassociateAddressError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DisassociateAddress");
        params.put("Version", "2016-11-15");
        DisassociateAddressRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DisassociateAddressError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p><p>Disassociates a target network from the specified Client VPN endpoint. When you disassociate the last target network from a Client VPN, the following happens:</p> <ul> <li> <p>The route that was automatically added for the VPC is deleted</p> </li> <li> <p>All active client connections are terminated</p> </li> <li> <p>New client connections are disallowed</p> </li> <li> <p>The Client VPN endpoint&#39;s status changes to <code>pending-associate</code> </p> </li> </ul></p>
    fn disassociate_client_vpn_target_network(
        &self,
        input: DisassociateClientVpnTargetNetworkRequest,
    ) -> RusotoFuture<
        DisassociateClientVpnTargetNetworkResult,
        DisassociateClientVpnTargetNetworkError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DisassociateClientVpnTargetNetwork");
        params.put("Version", "2016-11-15");
        DisassociateClientVpnTargetNetworkRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DisassociateClientVpnTargetNetworkError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DisassociateClientVpnTargetNetworkResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DisassociateClientVpnTargetNetworkResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Disassociates an IAM instance profile from a running or stopped instance.</p> <p>Use <a>DescribeIamInstanceProfileAssociations</a> to get the association ID.</p>
    fn disassociate_iam_instance_profile(
        &self,
        input: DisassociateIamInstanceProfileRequest,
    ) -> RusotoFuture<DisassociateIamInstanceProfileResult, DisassociateIamInstanceProfileError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DisassociateIamInstanceProfile");
        params.put("Version", "2016-11-15");
        DisassociateIamInstanceProfileRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DisassociateIamInstanceProfileError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DisassociateIamInstanceProfileResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DisassociateIamInstanceProfileResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Disassociates a subnet from a route table.</p> <p>After you perform this action, the subnet no longer uses the routes in the route table. Instead, it uses the routes in the VPC's main route table. For more information about route tables, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn disassociate_route_table(
        &self,
        input: DisassociateRouteTableRequest,
    ) -> RusotoFuture<(), DisassociateRouteTableError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DisassociateRouteTable");
        params.put("Version", "2016-11-15");
        DisassociateRouteTableRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DisassociateRouteTableError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Disassociates a CIDR block from a subnet. Currently, you can disassociate an IPv6 CIDR block only. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it. </p>
    fn disassociate_subnet_cidr_block(
        &self,
        input: DisassociateSubnetCidrBlockRequest,
    ) -> RusotoFuture<DisassociateSubnetCidrBlockResult, DisassociateSubnetCidrBlockError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DisassociateSubnetCidrBlock");
        params.put("Version", "2016-11-15");
        DisassociateSubnetCidrBlockRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DisassociateSubnetCidrBlockError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DisassociateSubnetCidrBlockResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DisassociateSubnetCidrBlockResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Disassociates a resource attachment from a transit gateway route table.</p>
    fn disassociate_transit_gateway_route_table(
        &self,
        input: DisassociateTransitGatewayRouteTableRequest,
    ) -> RusotoFuture<
        DisassociateTransitGatewayRouteTableResult,
        DisassociateTransitGatewayRouteTableError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DisassociateTransitGatewayRouteTable");
        params.put("Version", "2016-11-15");
        DisassociateTransitGatewayRouteTableRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(DisassociateTransitGatewayRouteTableError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DisassociateTransitGatewayRouteTableResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            DisassociateTransitGatewayRouteTableResultDeserializer::deserialize(
                                &actual_tag_name,
                                &mut stack,
                            )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Disassociates a CIDR block from a VPC. To disassociate the CIDR block, you must specify its association ID. You can get the association ID by using <a>DescribeVpcs</a>. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it. </p> <p>You cannot disassociate the CIDR block with which you originally created the VPC (the primary CIDR block).</p>
    fn disassociate_vpc_cidr_block(
        &self,
        input: DisassociateVpcCidrBlockRequest,
    ) -> RusotoFuture<DisassociateVpcCidrBlockResult, DisassociateVpcCidrBlockError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "DisassociateVpcCidrBlock");
        params.put("Version", "2016-11-15");
        DisassociateVpcCidrBlockRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(DisassociateVpcCidrBlockError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = DisassociateVpcCidrBlockResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = DisassociateVpcCidrBlockResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Enables default encryption for EBS volumes that are created in your account in the current region.</p> <p>Once encryption is enabled with this action, EBS volumes that are created in your account will always be encrypted even if encryption is not specified at launch. This setting overrides the <i>encrypted</i> setting to <i>true</i> in all API calls that create EBS volumes in your account. A volume will be encrypted even if you specify <i>encryption</i> to be <i>false</i> in the API call that creates the volume.</p> <p>If you do not specify a customer master key (CMK) in the API call that creates the EBS volume, then the volume is encrypted to your AWS account's managed CMK.</p> <p>You can specify a CMK of your choice using <a>ModifyEbsDefaultKmsKeyId</a>.</p> <p>Enabling encryption-by-default for EBS volumes has no effect on existing unencrypted volumes in your account. Encrypting the data in these requires manual action. You can either create an encrypted snapshot of an unencrypted volume, or encrypt a copy of an unencrypted snapshot. Any volume restored from an encrypted snapshot is also encrypted. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html">Amazon EBS Snapshots</a>.</p> <p>After EBS encryption-by-default is enabled, you can no longer launch older-generation instance types that do not support encryption. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances">Supported Instance Types</a>.</p>
    fn enable_ebs_encryption_by_default(
        &self,
        input: EnableEbsEncryptionByDefaultRequest,
    ) -> RusotoFuture<EnableEbsEncryptionByDefaultResult, EnableEbsEncryptionByDefaultError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "EnableEbsEncryptionByDefault");
        params.put("Version", "2016-11-15");
        EnableEbsEncryptionByDefaultRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(EnableEbsEncryptionByDefaultError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = EnableEbsEncryptionByDefaultResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = EnableEbsEncryptionByDefaultResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Enables the specified attachment to propagate routes to the specified propagation route table.</p>
    fn enable_transit_gateway_route_table_propagation(
        &self,
        input: EnableTransitGatewayRouteTablePropagationRequest,
    ) -> RusotoFuture<
        EnableTransitGatewayRouteTablePropagationResult,
        EnableTransitGatewayRouteTablePropagationError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "EnableTransitGatewayRouteTablePropagation");
        params.put("Version", "2016-11-15");
        EnableTransitGatewayRouteTablePropagationRequestSerializer::serialize(
            &mut params,
            "",
            &input,
        );
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
                        if !response.status.is_success() {
                            return response.buffer().map(|try_response| {
                                try_response.map_or_else(|e| e, |response| {
                                    Err(EnableTransitGatewayRouteTablePropagationError::from_response(response))
                                })
                            }).boxed();
                        }

                        response.buffer().map(move |response| {
            let response = response?;
            
            let result;
            if response.body.is_empty() {
                result = EnableTransitGatewayRouteTablePropagationResult::default();
            } else {
                let reader = EventReader::new_with_config(
                    response.body.as_ref(),
                    ParserConfig::new().trim_whitespace(true)
                );
                let mut stack = XmlResponse::new(reader.into_iter().peekable());
                let _start_document = stack.next();
                let actual_tag_name = peek_at_name(&mut stack)?;
                result = EnableTransitGatewayRouteTablePropagationResultDeserializer::deserialize(&actual_tag_name, &mut stack)?;
            }
             // parse non-payload
            Ok(result)
        }).boxed()
                    })
    }

    /// <p>Enables a virtual private gateway (VGW) to propagate routes to the specified route table of a VPC.</p>
    fn enable_vgw_route_propagation(
        &self,
        input: EnableVgwRoutePropagationRequest,
    ) -> RusotoFuture<(), EnableVgwRoutePropagationError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "EnableVgwRoutePropagation");
        params.put("Version", "2016-11-15");
        EnableVgwRoutePropagationRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(EnableVgwRoutePropagationError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Enables I/O operations for a volume that had I/O operations disabled because the data on the volume was potentially inconsistent.</p>
    fn enable_volume_io(
        &self,
        input: EnableVolumeIORequest,
    ) -> RusotoFuture<(), EnableVolumeIOError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "EnableVolumeIO");
        params.put("Version", "2016-11-15");
        EnableVolumeIORequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(EnableVolumeIOError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Enables a VPC for ClassicLink. You can then link EC2-Classic instances to your ClassicLink-enabled VPC to allow communication over private IP addresses. You cannot enable your VPC for ClassicLink if any of your VPC route tables have existing routes for address ranges within the <code>10.0.0.0/8</code> IP address range, excluding local routes for VPCs in the <code>10.0.0.0/16</code> and <code>10.1.0.0/16</code> IP address ranges. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn enable_vpc_classic_link(
        &self,
        input: EnableVpcClassicLinkRequest,
    ) -> RusotoFuture<EnableVpcClassicLinkResult, EnableVpcClassicLinkError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "EnableVpcClassicLink");
        params.put("Version", "2016-11-15");
        EnableVpcClassicLinkRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(EnableVpcClassicLinkError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = EnableVpcClassicLinkResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = EnableVpcClassicLinkResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Enables a VPC to support DNS hostname resolution for ClassicLink. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn enable_vpc_classic_link_dns_support(
        &self,
        input: EnableVpcClassicLinkDnsSupportRequest,
    ) -> RusotoFuture<EnableVpcClassicLinkDnsSupportResult, EnableVpcClassicLinkDnsSupportError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "EnableVpcClassicLinkDnsSupport");
        params.put("Version", "2016-11-15");
        EnableVpcClassicLinkDnsSupportRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(EnableVpcClassicLinkDnsSupportError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = EnableVpcClassicLinkDnsSupportResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = EnableVpcClassicLinkDnsSupportResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Downloads the client certificate revocation list for the specified Client VPN endpoint.</p>
    fn export_client_vpn_client_certificate_revocation_list(
        &self,
        input: ExportClientVpnClientCertificateRevocationListRequest,
    ) -> RusotoFuture<
        ExportClientVpnClientCertificateRevocationListResult,
        ExportClientVpnClientCertificateRevocationListError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ExportClientVpnClientCertificateRevocationList");
        params.put("Version", "2016-11-15");
        ExportClientVpnClientCertificateRevocationListRequestSerializer::serialize(
            &mut params,
            "",
            &input,
        );
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
                        if !response.status.is_success() {
                            return response.buffer().map(|try_response| {
                                try_response.map_or_else(|e| e, |response| {
                                    Err(ExportClientVpnClientCertificateRevocationListError::from_response(response))
                                })
                            }).boxed();
                        }

                        response.buffer().map(move |response| {
            let response = response?;
            
            let result;
            if response.body.is_empty() {
                result = ExportClientVpnClientCertificateRevocationListResult::default();
            } else {
                let reader = EventReader::new_with_config(
                    response.body.as_ref(),
                    ParserConfig::new().trim_whitespace(true)
                );
                let mut stack = XmlResponse::new(reader.into_iter().peekable());
                let _start_document = stack.next();
                let actual_tag_name = peek_at_name(&mut stack)?;
                result = ExportClientVpnClientCertificateRevocationListResultDeserializer::deserialize(&actual_tag_name, &mut stack)?;
            }
             // parse non-payload
            Ok(result)
        }).boxed()
                    })
    }

    /// <p>Downloads the contents of the Client VPN endpoint configuration file for the specified Client VPN endpoint. The Client VPN endpoint configuration file includes the Client VPN endpoint and certificate information clients need to establish a connection with the Client VPN endpoint.</p>
    fn export_client_vpn_client_configuration(
        &self,
        input: ExportClientVpnClientConfigurationRequest,
    ) -> RusotoFuture<
        ExportClientVpnClientConfigurationResult,
        ExportClientVpnClientConfigurationError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ExportClientVpnClientConfiguration");
        params.put("Version", "2016-11-15");
        ExportClientVpnClientConfigurationRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(ExportClientVpnClientConfigurationError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ExportClientVpnClientConfigurationResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ExportClientVpnClientConfigurationResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Exports routes from the specified transit gateway route table to the specified S3 bucket. By default, all routes are exported. Alternatively, you can filter by CIDR range.</p>
    fn export_transit_gateway_routes(
        &self,
        input: ExportTransitGatewayRoutesRequest,
    ) -> RusotoFuture<ExportTransitGatewayRoutesResult, ExportTransitGatewayRoutesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ExportTransitGatewayRoutes");
        params.put("Version", "2016-11-15");
        ExportTransitGatewayRoutesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(ExportTransitGatewayRoutesError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ExportTransitGatewayRoutesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ExportTransitGatewayRoutesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Gets the console output for the specified instance. For Linux instances, the instance console output displays the exact console output that would normally be displayed on a physical monitor attached to a computer. For Windows instances, the instance console output includes the last three system event log errors.</p> <p>By default, the console output returns buffered information that was posted shortly after an instance transition state (start, stop, reboot, or terminate). This information is available for at least one hour after the most recent post. Only the most recent 64 KB of console output is available.</p> <p>You can optionally retrieve the latest serial console output at any time during the instance lifecycle. This option is supported on instance types that use the Nitro hypervisor.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html#instance-console-console-output">Instance Console Output</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn get_console_output(
        &self,
        input: GetConsoleOutputRequest,
    ) -> RusotoFuture<GetConsoleOutputResult, GetConsoleOutputError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetConsoleOutput");
        params.put("Version", "2016-11-15");
        GetConsoleOutputRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(GetConsoleOutputError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = GetConsoleOutputResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = GetConsoleOutputResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Retrieve a JPG-format screenshot of a running instance to help with troubleshooting.</p> <p>The returned content is Base64-encoded.</p>
    fn get_console_screenshot(
        &self,
        input: GetConsoleScreenshotRequest,
    ) -> RusotoFuture<GetConsoleScreenshotResult, GetConsoleScreenshotError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetConsoleScreenshot");
        params.put("Version", "2016-11-15");
        GetConsoleScreenshotRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(GetConsoleScreenshotError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = GetConsoleScreenshotResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = GetConsoleScreenshotResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes the default customer master key (CMK) that your account uses to encrypt EBS volumes if you don’t specify a CMK in the API call. You can change this default using <a>ModifyEbsDefaultKmsKeyId</a>.</p>
    fn get_ebs_default_kms_key_id(
        &self,
        input: GetEbsDefaultKmsKeyIdRequest,
    ) -> RusotoFuture<GetEbsDefaultKmsKeyIdResult, GetEbsDefaultKmsKeyIdError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetEbsDefaultKmsKeyId");
        params.put("Version", "2016-11-15");
        GetEbsDefaultKmsKeyIdRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(GetEbsDefaultKmsKeyIdError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = GetEbsDefaultKmsKeyIdResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = GetEbsDefaultKmsKeyIdResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Describes whether default EBS encryption is enabled for your account in the current region.</p>
    fn get_ebs_encryption_by_default(
        &self,
        input: GetEbsEncryptionByDefaultRequest,
    ) -> RusotoFuture<GetEbsEncryptionByDefaultResult, GetEbsEncryptionByDefaultError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetEbsEncryptionByDefault");
        params.put("Version", "2016-11-15");
        GetEbsEncryptionByDefaultRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(GetEbsEncryptionByDefaultError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = GetEbsEncryptionByDefaultResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = GetEbsEncryptionByDefaultResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Preview a reservation purchase with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation.</p> <p>This is a preview of the <a>PurchaseHostReservation</a> action and does not result in the offering being purchased.</p>
    fn get_host_reservation_purchase_preview(
        &self,
        input: GetHostReservationPurchasePreviewRequest,
    ) -> RusotoFuture<GetHostReservationPurchasePreviewResult, GetHostReservationPurchasePreviewError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetHostReservationPurchasePreview");
        params.put("Version", "2016-11-15");
        GetHostReservationPurchasePreviewRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(GetHostReservationPurchasePreviewError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = GetHostReservationPurchasePreviewResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = GetHostReservationPurchasePreviewResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Retrieves the configuration data of the specified instance. You can use this data to create a launch template.</p>
    fn get_launch_template_data(
        &self,
        input: GetLaunchTemplateDataRequest,
    ) -> RusotoFuture<GetLaunchTemplateDataResult, GetLaunchTemplateDataError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetLaunchTemplateData");
        params.put("Version", "2016-11-15");
        GetLaunchTemplateDataRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(GetLaunchTemplateDataError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = GetLaunchTemplateDataResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = GetLaunchTemplateDataResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Retrieves the encrypted administrator password for a running Windows instance.</p> <p>The Windows password is generated at boot by the <code>EC2Config</code> service or <code>EC2Launch</code> scripts (Windows Server 2016 and later). This usually only happens the first time an instance is launched. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/UsingConfig_WinAMI.html">EC2Config</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch.html">EC2Launch</a> in the Amazon Elastic Compute Cloud User Guide.</p> <p>For the <code>EC2Config</code> service, the password is not generated for rebundled AMIs unless <code>Ec2SetPassword</code> is enabled before bundling.</p> <p>The password is encrypted using the key pair that you specified when you launched the instance. You must provide the corresponding key pair file.</p> <p>When you launch an instance, password generation and encryption may take a few minutes. If you try to retrieve the password before it's available, the output returns an empty string. We recommend that you wait up to 15 minutes after launching an instance before trying to retrieve the generated password.</p>
    fn get_password_data(
        &self,
        input: GetPasswordDataRequest,
    ) -> RusotoFuture<GetPasswordDataResult, GetPasswordDataError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetPasswordData");
        params.put("Version", "2016-11-15");
        GetPasswordDataRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(GetPasswordDataError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = GetPasswordDataResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = GetPasswordDataResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Returns a quote and exchange information for exchanging one or more specified Convertible Reserved Instances for a new Convertible Reserved Instance. If the exchange cannot be performed, the reason is returned in the response. Use <a>AcceptReservedInstancesExchangeQuote</a> to perform the exchange.</p>
    fn get_reserved_instances_exchange_quote(
        &self,
        input: GetReservedInstancesExchangeQuoteRequest,
    ) -> RusotoFuture<GetReservedInstancesExchangeQuoteResult, GetReservedInstancesExchangeQuoteError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetReservedInstancesExchangeQuote");
        params.put("Version", "2016-11-15");
        GetReservedInstancesExchangeQuoteRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(GetReservedInstancesExchangeQuoteError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = GetReservedInstancesExchangeQuoteResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = GetReservedInstancesExchangeQuoteResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Lists the route tables to which the specified resource attachment propagates routes.</p>
    fn get_transit_gateway_attachment_propagations(
        &self,
        input: GetTransitGatewayAttachmentPropagationsRequest,
    ) -> RusotoFuture<
        GetTransitGatewayAttachmentPropagationsResult,
        GetTransitGatewayAttachmentPropagationsError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetTransitGatewayAttachmentPropagations");
        params.put("Version", "2016-11-15");
        GetTransitGatewayAttachmentPropagationsRequestSerializer::serialize(
            &mut params,
            "",
            &input,
        );
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(GetTransitGatewayAttachmentPropagationsError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = GetTransitGatewayAttachmentPropagationsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            GetTransitGatewayAttachmentPropagationsResultDeserializer::deserialize(
                                &actual_tag_name,
                                &mut stack,
                            )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Gets information about the associations for the specified transit gateway route table.</p>
    fn get_transit_gateway_route_table_associations(
        &self,
        input: GetTransitGatewayRouteTableAssociationsRequest,
    ) -> RusotoFuture<
        GetTransitGatewayRouteTableAssociationsResult,
        GetTransitGatewayRouteTableAssociationsError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetTransitGatewayRouteTableAssociations");
        params.put("Version", "2016-11-15");
        GetTransitGatewayRouteTableAssociationsRequestSerializer::serialize(
            &mut params,
            "",
            &input,
        );
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(GetTransitGatewayRouteTableAssociationsError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = GetTransitGatewayRouteTableAssociationsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            GetTransitGatewayRouteTableAssociationsResultDeserializer::deserialize(
                                &actual_tag_name,
                                &mut stack,
                            )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Gets information about the route table propagations for the specified transit gateway route table.</p>
    fn get_transit_gateway_route_table_propagations(
        &self,
        input: GetTransitGatewayRouteTablePropagationsRequest,
    ) -> RusotoFuture<
        GetTransitGatewayRouteTablePropagationsResult,
        GetTransitGatewayRouteTablePropagationsError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "GetTransitGatewayRouteTablePropagations");
        params.put("Version", "2016-11-15");
        GetTransitGatewayRouteTablePropagationsRequestSerializer::serialize(
            &mut params,
            "",
            &input,
        );
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(GetTransitGatewayRouteTablePropagationsError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = GetTransitGatewayRouteTablePropagationsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            GetTransitGatewayRouteTablePropagationsResultDeserializer::deserialize(
                                &actual_tag_name,
                                &mut stack,
                            )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Uploads a client certificate revocation list to the specified Client VPN endpoint. Uploading a client certificate revocation list overwrites the existing client certificate revocation list.</p> <p>Uploading a client certificate revocation list resets existing client connections.</p>
    fn import_client_vpn_client_certificate_revocation_list(
        &self,
        input: ImportClientVpnClientCertificateRevocationListRequest,
    ) -> RusotoFuture<
        ImportClientVpnClientCertificateRevocationListResult,
        ImportClientVpnClientCertificateRevocationListError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ImportClientVpnClientCertificateRevocationList");
        params.put("Version", "2016-11-15");
        ImportClientVpnClientCertificateRevocationListRequestSerializer::serialize(
            &mut params,
            "",
            &input,
        );
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
                        if !response.status.is_success() {
                            return response.buffer().map(|try_response| {
                                try_response.map_or_else(|e| e, |response| {
                                    Err(ImportClientVpnClientCertificateRevocationListError::from_response(response))
                                })
                            }).boxed();
                        }

                        response.buffer().map(move |response| {
            let response = response?;
            
            let result;
            if response.body.is_empty() {
                result = ImportClientVpnClientCertificateRevocationListResult::default();
            } else {
                let reader = EventReader::new_with_config(
                    response.body.as_ref(),
                    ParserConfig::new().trim_whitespace(true)
                );
                let mut stack = XmlResponse::new(reader.into_iter().peekable());
                let _start_document = stack.next();
                let actual_tag_name = peek_at_name(&mut stack)?;
                result = ImportClientVpnClientCertificateRevocationListResultDeserializer::deserialize(&actual_tag_name, &mut stack)?;
            }
             // parse non-payload
            Ok(result)
        }).boxed()
                    })
    }

    /// <p>Import single or multi-volume disk images or EBS snapshots into an Amazon Machine Image (AMI). For more information, see <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html">Importing a VM as an Image Using VM Import/Export</a> in the <i>VM Import/Export User Guide</i>.</p>
    fn import_image(
        &self,
        input: ImportImageRequest,
    ) -> RusotoFuture<ImportImageResult, ImportImageError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ImportImage");
        params.put("Version", "2016-11-15");
        ImportImageRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ImportImageError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ImportImageResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ImportImageResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates an import instance task using metadata from the specified disk image. <code>ImportInstance</code> only supports single-volume VMs. To import multi-volume VMs, use <a>ImportImage</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html">Importing a Virtual Machine Using the Amazon EC2 CLI</a>.</p> <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
    fn import_instance(
        &self,
        input: ImportInstanceRequest,
    ) -> RusotoFuture<ImportInstanceResult, ImportInstanceError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ImportInstance");
        params.put("Version", "2016-11-15");
        ImportInstanceRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ImportInstanceError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ImportInstanceResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ImportInstanceResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Imports the public key from an RSA key pair that you created with a third-party tool. Compare this with <a>CreateKeyPair</a>, in which AWS creates the key pair and gives the keys to you (AWS keeps a copy of the public key). With ImportKeyPair, you create the key pair and give AWS just the public key. The private key is never transferred between you and AWS.</p> <p>For more information about key pairs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn import_key_pair(
        &self,
        input: ImportKeyPairRequest,
    ) -> RusotoFuture<ImportKeyPairResult, ImportKeyPairError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ImportKeyPair");
        params.put("Version", "2016-11-15");
        ImportKeyPairRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ImportKeyPairError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ImportKeyPairResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ImportKeyPairResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Imports a disk into an EBS snapshot.</p>
    fn import_snapshot(
        &self,
        input: ImportSnapshotRequest,
    ) -> RusotoFuture<ImportSnapshotResult, ImportSnapshotError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ImportSnapshot");
        params.put("Version", "2016-11-15");
        ImportSnapshotRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ImportSnapshotError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ImportSnapshotResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ImportSnapshotResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates an import volume task using metadata from the specified disk image.For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/importing-your-volumes-into-amazon-ebs.html">Importing Disks to Amazon EBS</a>.</p> <p>For information about the import manifest referenced by this API action, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html">VM Import Manifest</a>.</p>
    fn import_volume(
        &self,
        input: ImportVolumeRequest,
    ) -> RusotoFuture<ImportVolumeResult, ImportVolumeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ImportVolume");
        params.put("Version", "2016-11-15");
        ImportVolumeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ImportVolumeError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ImportVolumeResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ImportVolumeResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Modifies a Capacity Reservation's capacity and the conditions under which it is to be released. You cannot change a Capacity Reservation's instance type, EBS optimization, instance store settings, platform, Availability Zone, or instance eligibility. If you need to modify any of these attributes, we recommend that you cancel the Capacity Reservation, and then create a new one with the required attributes.</p>
    fn modify_capacity_reservation(
        &self,
        input: ModifyCapacityReservationRequest,
    ) -> RusotoFuture<ModifyCapacityReservationResult, ModifyCapacityReservationError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyCapacityReservation");
        params.put("Version", "2016-11-15");
        ModifyCapacityReservationRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ModifyCapacityReservationError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ModifyCapacityReservationResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ModifyCapacityReservationResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Modifies the specified Client VPN endpoint. You can only modify an endpoint's server certificate information, client connection logging information, DNS server, and description. Modifying the DNS server resets existing client connections.</p>
    fn modify_client_vpn_endpoint(
        &self,
        input: ModifyClientVpnEndpointRequest,
    ) -> RusotoFuture<ModifyClientVpnEndpointResult, ModifyClientVpnEndpointError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyClientVpnEndpoint");
        params.put("Version", "2016-11-15");
        ModifyClientVpnEndpointRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ModifyClientVpnEndpointError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ModifyClientVpnEndpointResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ModifyClientVpnEndpointResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Changes the customer master key (CMK) that your account uses to encrypt EBS volumes if you don't specify a CMK in the API call.</p> <p>By default, your account has an AWS-managed CMK that is used for encrypting an EBS volume when no CMK is specified in the API call that creates the volume. By calling this API, you can specify a customer-managed CMK to use in place of the AWS-managed CMK.</p> <p>Note: Deleting or disabling the CMK that you have specified to act as your default CMK will result in instance-launch failures.</p>
    fn modify_ebs_default_kms_key_id(
        &self,
        input: ModifyEbsDefaultKmsKeyIdRequest,
    ) -> RusotoFuture<ModifyEbsDefaultKmsKeyIdResult, ModifyEbsDefaultKmsKeyIdError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyEbsDefaultKmsKeyId");
        params.put("Version", "2016-11-15");
        ModifyEbsDefaultKmsKeyIdRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ModifyEbsDefaultKmsKeyIdError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ModifyEbsDefaultKmsKeyIdResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ModifyEbsDefaultKmsKeyIdResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Modifies the specified EC2 Fleet.</p> <p>While the EC2 Fleet is being modified, it is in the <code>modifying</code> state.</p>
    fn modify_fleet(
        &self,
        input: ModifyFleetRequest,
    ) -> RusotoFuture<ModifyFleetResult, ModifyFleetError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyFleet");
        params.put("Version", "2016-11-15");
        ModifyFleetRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ModifyFleetError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ModifyFleetResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ModifyFleetResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Modifies the specified attribute of the specified Amazon FPGA Image (AFI).</p>
    fn modify_fpga_image_attribute(
        &self,
        input: ModifyFpgaImageAttributeRequest,
    ) -> RusotoFuture<ModifyFpgaImageAttributeResult, ModifyFpgaImageAttributeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyFpgaImageAttribute");
        params.put("Version", "2016-11-15");
        ModifyFpgaImageAttributeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ModifyFpgaImageAttributeError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ModifyFpgaImageAttributeResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ModifyFpgaImageAttributeResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Modify the auto-placement setting of a Dedicated Host. When auto-placement is enabled, any instances that you launch with a tenancy of <code>host</code> but without a specific host ID are placed onto any available Dedicated Host in your account that has auto-placement enabled. When auto-placement is disabled, you need to provide a host ID to have the instance launch onto a specific host. If no host ID is provided, the instance is launched onto a suitable host with auto-placement enabled.</p>
    fn modify_hosts(
        &self,
        input: ModifyHostsRequest,
    ) -> RusotoFuture<ModifyHostsResult, ModifyHostsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyHosts");
        params.put("Version", "2016-11-15");
        ModifyHostsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ModifyHostsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ModifyHostsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ModifyHostsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Modifies the ID format for the specified resource on a per-Region basis. You can specify that resources should receive longer IDs (17-character IDs) when they are created.</p> <p>This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p> <p>This setting applies to the IAM user who makes the request; it does not apply to the entire AWS account. By default, an IAM user defaults to the same settings as the root user. If you're using this action as the root user, then these settings apply to the entire account, unless an IAM user explicitly overrides these settings for themselves. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant <code>Describe</code> command for the resource type.</p>
    fn modify_id_format(
        &self,
        input: ModifyIdFormatRequest,
    ) -> RusotoFuture<(), ModifyIdFormatError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyIdFormat");
        params.put("Version", "2016-11-15");
        ModifyIdFormatRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ModifyIdFormatError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Modifies the ID format of a resource for a specified IAM user, IAM role, or the root user for an account; or all IAM users, IAM roles, and the root user for an account. You can specify that resources should receive longer IDs (17-character IDs) when they are created. </p> <p>This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html">Resource IDs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. </p> <p>This setting applies to the principal specified in the request; it does not apply to the principal that makes the request. </p> <p>Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant <code>Describe</code> command for the resource type.</p>
    fn modify_identity_id_format(
        &self,
        input: ModifyIdentityIdFormatRequest,
    ) -> RusotoFuture<(), ModifyIdentityIdFormatError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyIdentityIdFormat");
        params.put("Version", "2016-11-15");
        ModifyIdentityIdFormatRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ModifyIdentityIdFormatError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Modifies the specified attribute of the specified AMI. You can specify only one attribute at a time. You can use the <code>Attribute</code> parameter to specify the attribute or one of the following parameters: <code>Description</code>, <code>LaunchPermission</code>, or <code>ProductCode</code>.</p> <p>AWS Marketplace product codes cannot be modified. Images with an AWS Marketplace product code cannot be made public.</p> <p>To enable the SriovNetSupport enhanced networking attribute of an image, enable SriovNetSupport on an instance and create an AMI from the instance.</p>
    fn modify_image_attribute(
        &self,
        input: ModifyImageAttributeRequest,
    ) -> RusotoFuture<(), ModifyImageAttributeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyImageAttribute");
        params.put("Version", "2016-11-15");
        ModifyImageAttributeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ModifyImageAttributeError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Modifies the specified attribute of the specified instance. You can specify only one attribute at a time.</p> <p> <b>Note: </b>Using this action to change the security groups associated with an elastic network interface (ENI) attached to an instance in a VPC can result in an error if the instance has more than one ENI. To change the security groups associated with an ENI attached to an instance that has multiple ENIs, we recommend that you use the <a>ModifyNetworkInterfaceAttribute</a> action.</p> <p>To modify some attributes, the instance must be stopped. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_ChangingAttributesWhileInstanceStopped.html">Modifying Attributes of a Stopped Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn modify_instance_attribute(
        &self,
        input: ModifyInstanceAttributeRequest,
    ) -> RusotoFuture<(), ModifyInstanceAttributeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyInstanceAttribute");
        params.put("Version", "2016-11-15");
        ModifyInstanceAttributeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ModifyInstanceAttributeError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Modifies the Capacity Reservation settings for a stopped instance. Use this action to configure an instance to target a specific Capacity Reservation, run in any <code>open</code> Capacity Reservation with matching attributes, or run On-Demand Instance capacity.</p>
    fn modify_instance_capacity_reservation_attributes(
        &self,
        input: ModifyInstanceCapacityReservationAttributesRequest,
    ) -> RusotoFuture<
        ModifyInstanceCapacityReservationAttributesResult,
        ModifyInstanceCapacityReservationAttributesError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyInstanceCapacityReservationAttributes");
        params.put("Version", "2016-11-15");
        ModifyInstanceCapacityReservationAttributesRequestSerializer::serialize(
            &mut params,
            "",
            &input,
        );
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
                        if !response.status.is_success() {
                            return response.buffer().map(|try_response| {
                                try_response.map_or_else(|e| e, |response| {
                                    Err(ModifyInstanceCapacityReservationAttributesError::from_response(response))
                                })
                            }).boxed();
                        }

                        response.buffer().map(move |response| {
            let response = response?;
            
            let result;
            if response.body.is_empty() {
                result = ModifyInstanceCapacityReservationAttributesResult::default();
            } else {
                let reader = EventReader::new_with_config(
                    response.body.as_ref(),
                    ParserConfig::new().trim_whitespace(true)
                );
                let mut stack = XmlResponse::new(reader.into_iter().peekable());
                let _start_document = stack.next();
                let actual_tag_name = peek_at_name(&mut stack)?;
                result = ModifyInstanceCapacityReservationAttributesResultDeserializer::deserialize(&actual_tag_name, &mut stack)?;
            }
             // parse non-payload
            Ok(result)
        }).boxed()
                    })
    }

    /// <p>Modifies the credit option for CPU usage on a running or stopped T2 or T3 instance. The credit options are <code>standard</code> and <code>unlimited</code>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html">Burstable Performance Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn modify_instance_credit_specification(
        &self,
        input: ModifyInstanceCreditSpecificationRequest,
    ) -> RusotoFuture<ModifyInstanceCreditSpecificationResult, ModifyInstanceCreditSpecificationError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyInstanceCreditSpecification");
        params.put("Version", "2016-11-15");
        ModifyInstanceCreditSpecificationRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(ModifyInstanceCreditSpecificationError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ModifyInstanceCreditSpecificationResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ModifyInstanceCreditSpecificationResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Modifies the start time for a scheduled Amazon EC2 instance event.</p>
    fn modify_instance_event_start_time(
        &self,
        input: ModifyInstanceEventStartTimeRequest,
    ) -> RusotoFuture<ModifyInstanceEventStartTimeResult, ModifyInstanceEventStartTimeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyInstanceEventStartTime");
        params.put("Version", "2016-11-15");
        ModifyInstanceEventStartTimeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(ModifyInstanceEventStartTimeError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ModifyInstanceEventStartTimeResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ModifyInstanceEventStartTimeResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Modifies the placement attributes for a specified instance. You can do the following:</p> <ul> <li> <p>Modify the affinity between an instance and a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html">Dedicated Host</a>. When affinity is set to <code>host</code> and the instance is not associated with a specific Dedicated Host, the next time the instance is launched, it is automatically associated with the host on which it lands. If the instance is restarted or rebooted, this relationship persists.</p> </li> <li> <p>Change the Dedicated Host with which an instance is associated.</p> </li> <li> <p>Change the instance tenancy of an instance from <code>host</code> to <code>dedicated</code>, or from <code>dedicated</code> to <code>host</code>.</p> </li> <li> <p>Move an instance to or from a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">placement group</a>.</p> </li> </ul> <p>At least one attribute for affinity, host ID, tenancy, or placement group name must be specified in the request. Affinity and tenancy can be modified in the same request.</p> <p>To modify the host ID, tenancy, placement group, or partition for an instance, the instance must be in the <code>stopped</code> state.</p>
    fn modify_instance_placement(
        &self,
        input: ModifyInstancePlacementRequest,
    ) -> RusotoFuture<ModifyInstancePlacementResult, ModifyInstancePlacementError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyInstancePlacement");
        params.put("Version", "2016-11-15");
        ModifyInstancePlacementRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ModifyInstancePlacementError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ModifyInstancePlacementResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ModifyInstancePlacementResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Modifies a launch template. You can specify which version of the launch template to set as the default version. When launching an instance, the default version applies when a launch template version is not specified.</p>
    fn modify_launch_template(
        &self,
        input: ModifyLaunchTemplateRequest,
    ) -> RusotoFuture<ModifyLaunchTemplateResult, ModifyLaunchTemplateError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyLaunchTemplate");
        params.put("Version", "2016-11-15");
        ModifyLaunchTemplateRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ModifyLaunchTemplateError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ModifyLaunchTemplateResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ModifyLaunchTemplateResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Modifies the specified network interface attribute. You can specify only one attribute at a time. You can use this action to attach and detach security groups from an existing EC2 instance.</p>
    fn modify_network_interface_attribute(
        &self,
        input: ModifyNetworkInterfaceAttributeRequest,
    ) -> RusotoFuture<(), ModifyNetworkInterfaceAttributeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyNetworkInterfaceAttribute");
        params.put("Version", "2016-11-15");
        ModifyNetworkInterfaceAttributeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(ModifyNetworkInterfaceAttributeError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Modifies the Availability Zone, instance count, instance type, or network platform (EC2-Classic or EC2-VPC) of your Reserved Instances. The Reserved Instances to be modified must be identical, except for Availability Zone, network platform, and instance type.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html">Modifying Reserved Instances</a> in the Amazon Elastic Compute Cloud User Guide.</p>
    fn modify_reserved_instances(
        &self,
        input: ModifyReservedInstancesRequest,
    ) -> RusotoFuture<ModifyReservedInstancesResult, ModifyReservedInstancesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyReservedInstances");
        params.put("Version", "2016-11-15");
        ModifyReservedInstancesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ModifyReservedInstancesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ModifyReservedInstancesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ModifyReservedInstancesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Adds or removes permission settings for the specified snapshot. You may add or remove specified AWS account IDs from a snapshot's list of create volume permissions, but you cannot do both in a single API call. If you need to both add and remove account IDs for a snapshot, you must use multiple API calls.</p> <p>Encrypted snapshots and snapshots with AWS Marketplace product codes cannot be made public. Snapshots encrypted with your default CMK cannot be shared with other accounts.</p> <p>For more information about modifying snapshot permissions, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html">Sharing Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn modify_snapshot_attribute(
        &self,
        input: ModifySnapshotAttributeRequest,
    ) -> RusotoFuture<(), ModifySnapshotAttributeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifySnapshotAttribute");
        params.put("Version", "2016-11-15");
        ModifySnapshotAttributeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ModifySnapshotAttributeError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Modifies the specified Spot Fleet request.</p> <p>You can only modify a Spot Fleet request of type <code>maintain</code>.</p> <p>While the Spot Fleet request is being modified, it is in the <code>modifying</code> state.</p> <p>To scale up your Spot Fleet, increase its target capacity. The Spot Fleet launches the additional Spot Instances according to the allocation strategy for the Spot Fleet request. If the allocation strategy is <code>lowestPrice</code>, the Spot Fleet launches instances using the Spot pool with the lowest price. If the allocation strategy is <code>diversified</code>, the Spot Fleet distributes the instances across the Spot pools.</p> <p>To scale down your Spot Fleet, decrease its target capacity. First, the Spot Fleet cancels any open requests that exceed the new target capacity. You can request that the Spot Fleet terminate Spot Instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is <code>lowestPrice</code>, the Spot Fleet terminates the instances with the highest price per unit. If the allocation strategy is <code>diversified</code>, the Spot Fleet terminates instances across the Spot pools. Alternatively, you can request that the Spot Fleet keep the fleet at its current size, but not replace any Spot Instances that are interrupted or that you terminate manually.</p> <p>If you are finished with your Spot Fleet for now, but will use it again later, you can set the target capacity to 0.</p>
    fn modify_spot_fleet_request(
        &self,
        input: ModifySpotFleetRequestRequest,
    ) -> RusotoFuture<ModifySpotFleetRequestResponse, ModifySpotFleetRequestError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifySpotFleetRequest");
        params.put("Version", "2016-11-15");
        ModifySpotFleetRequestRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ModifySpotFleetRequestError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ModifySpotFleetRequestResponse::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ModifySpotFleetRequestResponseDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Modifies a subnet attribute. You can only modify one attribute at a time.</p>
    fn modify_subnet_attribute(
        &self,
        input: ModifySubnetAttributeRequest,
    ) -> RusotoFuture<(), ModifySubnetAttributeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifySubnetAttribute");
        params.put("Version", "2016-11-15");
        ModifySubnetAttributeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ModifySubnetAttributeError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Modifies the specified VPC attachment.</p>
    fn modify_transit_gateway_vpc_attachment(
        &self,
        input: ModifyTransitGatewayVpcAttachmentRequest,
    ) -> RusotoFuture<ModifyTransitGatewayVpcAttachmentResult, ModifyTransitGatewayVpcAttachmentError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyTransitGatewayVpcAttachment");
        params.put("Version", "2016-11-15");
        ModifyTransitGatewayVpcAttachmentRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(ModifyTransitGatewayVpcAttachmentError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ModifyTransitGatewayVpcAttachmentResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ModifyTransitGatewayVpcAttachmentResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>You can modify several parameters of an existing EBS volume, including volume size, volume type, and IOPS capacity. If your EBS volume is attached to a current-generation EC2 instance type, you may be able to apply these changes without stopping the instance or detaching the volume from it. For more information about modifying an EBS volume running Linux, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html">Modifying the Size, IOPS, or Type of an EBS Volume on Linux</a>. For more information about modifying an EBS volume running Windows, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html">Modifying the Size, IOPS, or Type of an EBS Volume on Windows</a>. </p> <p> When you complete a resize operation on your volume, you need to extend the volume's file-system size to take advantage of the new storage capacity. For information about extending a Linux file system, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#recognize-expanded-volume-linux">Extending a Linux File System</a>. For information about extending a Windows file system, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html#recognize-expanded-volume-windows">Extending a Windows File System</a>. </p> <p> You can use CloudWatch Events to check the status of a modification to an EBS volume. For information about CloudWatch Events, see the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/">Amazon CloudWatch Events User Guide</a>. You can also track the status of a modification using the <a>DescribeVolumesModifications</a> API. For information about tracking status changes using either method, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#monitoring_mods">Monitoring Volume Modifications</a>. </p> <p>With previous-generation instance types, resizing an EBS volume may require detaching and reattaching the volume or stopping and restarting the instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html">Modifying the Size, IOPS, or Type of an EBS Volume on Linux</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html">Modifying the Size, IOPS, or Type of an EBS Volume on Windows</a>.</p> <p>If you reach the maximum volume modification rate per volume limit, you will need to wait at least six hours before applying further modifications to the affected EBS volume.</p>
    fn modify_volume(
        &self,
        input: ModifyVolumeRequest,
    ) -> RusotoFuture<ModifyVolumeResult, ModifyVolumeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyVolume");
        params.put("Version", "2016-11-15");
        ModifyVolumeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ModifyVolumeError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ModifyVolumeResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ModifyVolumeResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Modifies a volume attribute.</p> <p>By default, all I/O operations for the volume are suspended when the data on the volume is determined to be potentially inconsistent, to prevent undetectable, latent data corruption. The I/O access to the volume can be resumed by first enabling I/O access and then checking the data consistency on your volume.</p> <p>You can change the default behavior to resume I/O operations. We recommend that you change this only for boot volumes or for volumes that are stateless or disposable.</p>
    fn modify_volume_attribute(
        &self,
        input: ModifyVolumeAttributeRequest,
    ) -> RusotoFuture<(), ModifyVolumeAttributeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyVolumeAttribute");
        params.put("Version", "2016-11-15");
        ModifyVolumeAttributeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ModifyVolumeAttributeError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Modifies the specified attribute of the specified VPC.</p>
    fn modify_vpc_attribute(
        &self,
        input: ModifyVpcAttributeRequest,
    ) -> RusotoFuture<(), ModifyVpcAttributeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyVpcAttribute");
        params.put("Version", "2016-11-15");
        ModifyVpcAttributeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ModifyVpcAttributeError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Modifies attributes of a specified VPC endpoint. The attributes that you can modify depend on the type of VPC endpoint (interface or gateway). For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-endpoints.html">VPC Endpoints</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn modify_vpc_endpoint(
        &self,
        input: ModifyVpcEndpointRequest,
    ) -> RusotoFuture<ModifyVpcEndpointResult, ModifyVpcEndpointError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyVpcEndpoint");
        params.put("Version", "2016-11-15");
        ModifyVpcEndpointRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ModifyVpcEndpointError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ModifyVpcEndpointResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ModifyVpcEndpointResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Modifies a connection notification for VPC endpoint or VPC endpoint service. You can change the SNS topic for the notification, or the events for which to be notified. </p>
    fn modify_vpc_endpoint_connection_notification(
        &self,
        input: ModifyVpcEndpointConnectionNotificationRequest,
    ) -> RusotoFuture<
        ModifyVpcEndpointConnectionNotificationResult,
        ModifyVpcEndpointConnectionNotificationError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyVpcEndpointConnectionNotification");
        params.put("Version", "2016-11-15");
        ModifyVpcEndpointConnectionNotificationRequestSerializer::serialize(
            &mut params,
            "",
            &input,
        );
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(ModifyVpcEndpointConnectionNotificationError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ModifyVpcEndpointConnectionNotificationResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            ModifyVpcEndpointConnectionNotificationResultDeserializer::deserialize(
                                &actual_tag_name,
                                &mut stack,
                            )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Modifies the attributes of your VPC endpoint service configuration. You can change the Network Load Balancers for your service, and you can specify whether acceptance is required for requests to connect to your endpoint service through an interface VPC endpoint.</p>
    fn modify_vpc_endpoint_service_configuration(
        &self,
        input: ModifyVpcEndpointServiceConfigurationRequest,
    ) -> RusotoFuture<
        ModifyVpcEndpointServiceConfigurationResult,
        ModifyVpcEndpointServiceConfigurationError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyVpcEndpointServiceConfiguration");
        params.put("Version", "2016-11-15");
        ModifyVpcEndpointServiceConfigurationRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(ModifyVpcEndpointServiceConfigurationError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ModifyVpcEndpointServiceConfigurationResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            ModifyVpcEndpointServiceConfigurationResultDeserializer::deserialize(
                                &actual_tag_name,
                                &mut stack,
                            )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Modifies the permissions for your <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/endpoint-service.html">VPC endpoint service</a>. You can add or remove permissions for service consumers (IAM users, IAM roles, and AWS accounts) to connect to your endpoint service.</p> <p>If you grant permissions to all principals, the service is public. Any users who know the name of a public service can send a request to attach an endpoint. If the service does not require manual approval, attachments are automatically approved.</p>
    fn modify_vpc_endpoint_service_permissions(
        &self,
        input: ModifyVpcEndpointServicePermissionsRequest,
    ) -> RusotoFuture<
        ModifyVpcEndpointServicePermissionsResult,
        ModifyVpcEndpointServicePermissionsError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyVpcEndpointServicePermissions");
        params.put("Version", "2016-11-15");
        ModifyVpcEndpointServicePermissionsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(ModifyVpcEndpointServicePermissionsError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ModifyVpcEndpointServicePermissionsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            ModifyVpcEndpointServicePermissionsResultDeserializer::deserialize(
                                &actual_tag_name,
                                &mut stack,
                            )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Modifies the VPC peering connection options on one side of a VPC peering connection. You can do the following:</p> <ul> <li> <p>Enable/disable communication over the peering connection between an EC2-Classic instance that's linked to your VPC (using ClassicLink) and instances in the peer VPC.</p> </li> <li> <p>Enable/disable communication over the peering connection between instances in your VPC and an EC2-Classic instance that's linked to the peer VPC.</p> </li> <li> <p>Enable/disable the ability to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.</p> </li> </ul> <p>If the peered VPCs are in the same AWS account, you can enable DNS resolution for queries from the local VPC. This ensures that queries from the local VPC resolve to private IP addresses in the peer VPC. This option is not available if the peered VPCs are in different AWS accounts or different Regions. For peered VPCs in different AWS accounts, each AWS account owner must initiate a separate request to modify the peering connection options. For inter-region peering connections, you must use the Region for the requester VPC to modify the requester VPC peering options and the Region for the accepter VPC to modify the accepter VPC peering options. To verify which VPCs are the accepter and the requester for a VPC peering connection, use the <a>DescribeVpcPeeringConnections</a> command.</p>
    fn modify_vpc_peering_connection_options(
        &self,
        input: ModifyVpcPeeringConnectionOptionsRequest,
    ) -> RusotoFuture<ModifyVpcPeeringConnectionOptionsResult, ModifyVpcPeeringConnectionOptionsError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyVpcPeeringConnectionOptions");
        params.put("Version", "2016-11-15");
        ModifyVpcPeeringConnectionOptionsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(ModifyVpcPeeringConnectionOptionsError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ModifyVpcPeeringConnectionOptionsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ModifyVpcPeeringConnectionOptionsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Modifies the instance tenancy attribute of the specified VPC. You can change the instance tenancy attribute of a VPC to <code>default</code> only. You cannot change the instance tenancy attribute to <code>dedicated</code>.</p> <p>After you modify the tenancy of the VPC, any new instances that you launch into the VPC have a tenancy of <code>default</code>, unless you specify otherwise during launch. The tenancy of any existing instances in the VPC is not affected.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html">Dedicated Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn modify_vpc_tenancy(
        &self,
        input: ModifyVpcTenancyRequest,
    ) -> RusotoFuture<ModifyVpcTenancyResult, ModifyVpcTenancyError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyVpcTenancy");
        params.put("Version", "2016-11-15");
        ModifyVpcTenancyRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ModifyVpcTenancyError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ModifyVpcTenancyResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ModifyVpcTenancyResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Modifies the target gateway of a AWS Site-to-Site VPN connection. The following migration options are available:</p> <ul> <li> <p>An existing virtual private gateway to a new virtual private gateway</p> </li> <li> <p>An existing virtual private gateway to a transit gateway</p> </li> <li> <p>An existing transit gateway to a new transit gateway</p> </li> <li> <p>An existing transit gateway to a virtual private gateway</p> </li> </ul> <p>Before you perform the migration to the new gateway, you must configure the new gateway. Use <a>CreateVpnGateway</a> to create a virtual private gateway, or <a>CreateTransitGateway</a> to create a transit gateway.</p> <p>This step is required when you migrate from a virtual private gateway with static routes to a transit gateway. </p> <p>You must delete the static routes before you migrate to the new gateway.</p> <p>Keep a copy of the static route before you delete it. You will need to add back these routes to the transit gateway after the VPN connection migration is complete.</p> <p>After you migrate to the new gateway, you might need to modify your VPC route table. Use <a>CreateRoute</a> and <a>DeleteRoute</a> to make the changes described in <a href="https://docs.aws.amazon.com/vpn/latest/s2svpn/modify-vpn-target.html#step-update-routing">VPN Gateway Target Modification Required VPC Route Table Updates</a> in the <i>AWS Site-to-Site VPN User Guide</i>.</p> <p> When the new gateway is a transit gateway, modify the transit gateway route table to allow traffic between the VPC and the AWS Site-to-Site VPN connection. Use <a>CreateTransitGatewayRoute</a> to add the routes.</p> <p> If you deleted VPN static routes, you must add the static routes to the transit gateway route table.</p> <p>After you perform this operation, the AWS VPN endpoint's IP addresses on the AWS side and the tunnel options remain intact. Your s2slong; connection will be temporarily unavailable for approximately 10 minutes while we provision the new endpoints </p>
    fn modify_vpn_connection(
        &self,
        input: ModifyVpnConnectionRequest,
    ) -> RusotoFuture<ModifyVpnConnectionResult, ModifyVpnConnectionError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ModifyVpnConnection");
        params.put("Version", "2016-11-15");
        ModifyVpnConnectionRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ModifyVpnConnectionError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ModifyVpnConnectionResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ModifyVpnConnectionResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Enables detailed monitoring for a running instance. Otherwise, basic monitoring is enabled. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitoring Your Instances and Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>To disable detailed monitoring, see .</p>
    fn monitor_instances(
        &self,
        input: MonitorInstancesRequest,
    ) -> RusotoFuture<MonitorInstancesResult, MonitorInstancesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "MonitorInstances");
        params.put("Version", "2016-11-15");
        MonitorInstancesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(MonitorInstancesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = MonitorInstancesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = MonitorInstancesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Moves an Elastic IP address from the EC2-Classic platform to the EC2-VPC platform. The Elastic IP address must be allocated to your account for more than 24 hours, and it must not be associated with an instance. After the Elastic IP address is moved, it is no longer available for use in the EC2-Classic platform, unless you move it back using the <a>RestoreAddressToClassic</a> request. You cannot move an Elastic IP address that was originally allocated for use in the EC2-VPC platform to the EC2-Classic platform. </p>
    fn move_address_to_vpc(
        &self,
        input: MoveAddressToVpcRequest,
    ) -> RusotoFuture<MoveAddressToVpcResult, MoveAddressToVpcError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "MoveAddressToVpc");
        params.put("Version", "2016-11-15");
        MoveAddressToVpcRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(MoveAddressToVpcError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = MoveAddressToVpcResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = MoveAddressToVpcResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Provisions an address range for use with your AWS resources through bring your own IP addresses (BYOIP) and creates a corresponding address pool. After the address range is provisioned, it is ready to be advertised using <a>AdvertiseByoipCidr</a>.</p> <p>AWS verifies that you own the address range and are authorized to advertise it. You must ensure that the address range is registered to you and that you created an RPKI ROA to authorize Amazon ASNs 16509 and 14618 to advertise the address range. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html">Bring Your Own IP Addresses (BYOIP)</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Provisioning an address range is an asynchronous operation, so the call returns immediately, but the address range is not ready to use until its status changes from <code>pending-provision</code> to <code>provisioned</code>. To monitor the status of an address range, use <a>DescribeByoipCidrs</a>. To allocate an Elastic IP address from your address pool, use <a>AllocateAddress</a> with either the specific address from the address pool or the ID of the address pool.</p>
    fn provision_byoip_cidr(
        &self,
        input: ProvisionByoipCidrRequest,
    ) -> RusotoFuture<ProvisionByoipCidrResult, ProvisionByoipCidrError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ProvisionByoipCidr");
        params.put("Version", "2016-11-15");
        ProvisionByoipCidrRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ProvisionByoipCidrError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ProvisionByoipCidrResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ProvisionByoipCidrResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Purchase a reservation with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation. This action results in the specified reservation being purchased and charged to your account.</p>
    fn purchase_host_reservation(
        &self,
        input: PurchaseHostReservationRequest,
    ) -> RusotoFuture<PurchaseHostReservationResult, PurchaseHostReservationError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "PurchaseHostReservation");
        params.put("Version", "2016-11-15");
        PurchaseHostReservationRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(PurchaseHostReservationError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = PurchaseHostReservationResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = PurchaseHostReservationResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Purchases a Reserved Instance for use with your account. With Reserved Instances, you pay a lower hourly rate compared to On-Demand instance pricing.</p> <p>Use <a>DescribeReservedInstancesOfferings</a> to get a list of Reserved Instance offerings that match your specifications. After you've purchased a Reserved Instance, you can check for your new Reserved Instance with <a>DescribeReservedInstances</a>.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html">Reserved Instances</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html">Reserved Instance Marketplace</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn purchase_reserved_instances_offering(
        &self,
        input: PurchaseReservedInstancesOfferingRequest,
    ) -> RusotoFuture<PurchaseReservedInstancesOfferingResult, PurchaseReservedInstancesOfferingError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "PurchaseReservedInstancesOffering");
        params.put("Version", "2016-11-15");
        PurchaseReservedInstancesOfferingRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(PurchaseReservedInstancesOfferingError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = PurchaseReservedInstancesOfferingResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = PurchaseReservedInstancesOfferingResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Purchases the Scheduled Instances with the specified schedule.</p> <p>Scheduled Instances enable you to purchase Amazon EC2 compute capacity by the hour for a one-year term. Before you can purchase a Scheduled Instance, you must call <a>DescribeScheduledInstanceAvailability</a> to check for available schedules and obtain a purchase token. After you purchase a Scheduled Instance, you must call <a>RunScheduledInstances</a> during each scheduled time period.</p> <p>After you purchase a Scheduled Instance, you can't cancel, modify, or resell your purchase.</p>
    fn purchase_scheduled_instances(
        &self,
        input: PurchaseScheduledInstancesRequest,
    ) -> RusotoFuture<PurchaseScheduledInstancesResult, PurchaseScheduledInstancesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "PurchaseScheduledInstances");
        params.put("Version", "2016-11-15");
        PurchaseScheduledInstancesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(PurchaseScheduledInstancesError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = PurchaseScheduledInstancesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = PurchaseScheduledInstancesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Requests a reboot of the specified instances. This operation is asynchronous; it only queues a request to reboot the specified instances. The operation succeeds if the instances are valid and belong to you. Requests to reboot terminated instances are ignored.</p> <p>If an instance does not cleanly shut down within four minutes, Amazon EC2 performs a hard reboot.</p> <p>For more information about troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html">Getting Console Output and Rebooting Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn reboot_instances(
        &self,
        input: RebootInstancesRequest,
    ) -> RusotoFuture<(), RebootInstancesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RebootInstances");
        params.put("Version", "2016-11-15");
        RebootInstancesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(RebootInstancesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Registers an AMI. When you're creating an AMI, this is the final step you must complete before you can launch an instance from the AMI. For more information about creating AMIs, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami.html">Creating Your Own AMIs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <note> <p>For Amazon EBS-backed instances, <a>CreateImage</a> creates and registers the AMI in a single request, so you don't have to register the AMI yourself.</p> </note> <p>You can also use <code>RegisterImage</code> to create an Amazon EBS-backed Linux AMI from a snapshot of a root device volume. You specify the snapshot using the block device mapping. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-launch-snapshot.html">Launching a Linux Instance from a Backup</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>You can't register an image where a secondary (non-root) snapshot has AWS Marketplace product codes.</p> <p>Some Linux distributions, such as Red Hat Enterprise Linux (RHEL) and SUSE Linux Enterprise Server (SLES), use the EC2 billing product code associated with an AMI to verify the subscription status for package updates. Creating an AMI from an EBS snapshot does not maintain this billing code, and instances launched from such an AMI are not able to connect to package update infrastructure. If you purchase a Reserved Instance offering for one of these Linux distributions and launch instances using an AMI that does not contain the required billing code, your Reserved Instance is not applied to these instances.</p> <p>To create an AMI for operating systems that require a billing code, see <a>CreateImage</a>.</p> <p>If needed, you can deregister an AMI at any time. Any modifications you make to an AMI backed by an instance store volume invalidates its registration. If you make changes to an image, deregister the previous image and register the new image.</p>
    fn register_image(
        &self,
        input: RegisterImageRequest,
    ) -> RusotoFuture<RegisterImageResult, RegisterImageError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RegisterImage");
        params.put("Version", "2016-11-15");
        RegisterImageRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(RegisterImageError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = RegisterImageResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = RegisterImageResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Rejects a request to attach a VPC to a transit gateway.</p> <p>The VPC attachment must be in the <code>pendingAcceptance</code> state. Use <a>DescribeTransitGatewayVpcAttachments</a> to view your pending VPC attachment requests. Use <a>AcceptTransitGatewayVpcAttachment</a> to accept a VPC attachment request.</p>
    fn reject_transit_gateway_vpc_attachment(
        &self,
        input: RejectTransitGatewayVpcAttachmentRequest,
    ) -> RusotoFuture<RejectTransitGatewayVpcAttachmentResult, RejectTransitGatewayVpcAttachmentError>
    {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RejectTransitGatewayVpcAttachment");
        params.put("Version", "2016-11-15");
        RejectTransitGatewayVpcAttachmentRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(RejectTransitGatewayVpcAttachmentError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = RejectTransitGatewayVpcAttachmentResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = RejectTransitGatewayVpcAttachmentResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Rejects one or more VPC endpoint connection requests to your VPC endpoint service.</p>
    fn reject_vpc_endpoint_connections(
        &self,
        input: RejectVpcEndpointConnectionsRequest,
    ) -> RusotoFuture<RejectVpcEndpointConnectionsResult, RejectVpcEndpointConnectionsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RejectVpcEndpointConnections");
        params.put("Version", "2016-11-15");
        RejectVpcEndpointConnectionsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(RejectVpcEndpointConnectionsError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = RejectVpcEndpointConnectionsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = RejectVpcEndpointConnectionsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Rejects a VPC peering connection request. The VPC peering connection must be in the <code>pending-acceptance</code> state. Use the <a>DescribeVpcPeeringConnections</a> request to view your outstanding VPC peering connection requests. To delete an active VPC peering connection, or to delete a VPC peering connection request that you initiated, use <a>DeleteVpcPeeringConnection</a>.</p>
    fn reject_vpc_peering_connection(
        &self,
        input: RejectVpcPeeringConnectionRequest,
    ) -> RusotoFuture<RejectVpcPeeringConnectionResult, RejectVpcPeeringConnectionError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RejectVpcPeeringConnection");
        params.put("Version", "2016-11-15");
        RejectVpcPeeringConnectionRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(RejectVpcPeeringConnectionError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = RejectVpcPeeringConnectionResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = RejectVpcPeeringConnectionResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Releases the specified Elastic IP address.</p> <p>[EC2-Classic, default VPC] Releasing an Elastic IP address automatically disassociates it from any instance that it's associated with. To disassociate an Elastic IP address without releasing it, use <a>DisassociateAddress</a>.</p> <p>[Nondefault VPC] You must use <a>DisassociateAddress</a> to disassociate the Elastic IP address before you can release it. Otherwise, Amazon EC2 returns an error (<code>InvalidIPAddress.InUse</code>).</p> <p>After releasing an Elastic IP address, it is released to the IP address pool. Be sure to update your DNS records and any servers or devices that communicate with the address. If you attempt to release an Elastic IP address that you already released, you'll get an <code>AuthFailure</code> error if the address is already allocated to another AWS account.</p> <p>[EC2-VPC] After you release an Elastic IP address for use in a VPC, you might be able to recover it. For more information, see <a>AllocateAddress</a>.</p>
    fn release_address(
        &self,
        input: ReleaseAddressRequest,
    ) -> RusotoFuture<(), ReleaseAddressError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ReleaseAddress");
        params.put("Version", "2016-11-15");
        ReleaseAddressRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ReleaseAddressError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>When you no longer want to use an On-Demand Dedicated Host it can be released. On-Demand billing is stopped and the host goes into <code>released</code> state. The host ID of Dedicated Hosts that have been released can no longer be specified in another request, for example, to modify the host. You must stop or terminate all instances on a host before it can be released.</p> <p>When Dedicated Hosts are released, it may take some time for them to stop counting toward your limit and you may receive capacity errors when trying to allocate new Dedicated Hosts. Wait a few minutes and then try again.</p> <p>Released hosts still appear in a <a>DescribeHosts</a> response.</p>
    fn release_hosts(
        &self,
        input: ReleaseHostsRequest,
    ) -> RusotoFuture<ReleaseHostsResult, ReleaseHostsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ReleaseHosts");
        params.put("Version", "2016-11-15");
        ReleaseHostsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ReleaseHostsError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ReleaseHostsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ReleaseHostsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Replaces an IAM instance profile for the specified running instance. You can use this action to change the IAM instance profile that's associated with an instance without having to disassociate the existing IAM instance profile first.</p> <p>Use <a>DescribeIamInstanceProfileAssociations</a> to get the association ID.</p>
    fn replace_iam_instance_profile_association(
        &self,
        input: ReplaceIamInstanceProfileAssociationRequest,
    ) -> RusotoFuture<
        ReplaceIamInstanceProfileAssociationResult,
        ReplaceIamInstanceProfileAssociationError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ReplaceIamInstanceProfileAssociation");
        params.put("Version", "2016-11-15");
        ReplaceIamInstanceProfileAssociationRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(ReplaceIamInstanceProfileAssociationError::from_response(
                                    response,
                                ))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ReplaceIamInstanceProfileAssociationResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            ReplaceIamInstanceProfileAssociationResultDeserializer::deserialize(
                                &actual_tag_name,
                                &mut stack,
                            )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Changes which network ACL a subnet is associated with. By default when you create a subnet, it's automatically associated with the default network ACL. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>This is an idempotent operation.</p>
    fn replace_network_acl_association(
        &self,
        input: ReplaceNetworkAclAssociationRequest,
    ) -> RusotoFuture<ReplaceNetworkAclAssociationResult, ReplaceNetworkAclAssociationError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ReplaceNetworkAclAssociation");
        params.put("Version", "2016-11-15");
        ReplaceNetworkAclAssociationRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(ReplaceNetworkAclAssociationError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ReplaceNetworkAclAssociationResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ReplaceNetworkAclAssociationResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Replaces an entry (rule) in a network ACL. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html">Network ACLs</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn replace_network_acl_entry(
        &self,
        input: ReplaceNetworkAclEntryRequest,
    ) -> RusotoFuture<(), ReplaceNetworkAclEntryError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ReplaceNetworkAclEntry");
        params.put("Version", "2016-11-15");
        ReplaceNetworkAclEntryRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ReplaceNetworkAclEntryError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Replaces an existing route within a route table in a VPC. You must provide only one of the following: internet gateway or virtual private gateway, NAT instance, NAT gateway, VPC peering connection, network interface, or egress-only internet gateway.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn replace_route(&self, input: ReplaceRouteRequest) -> RusotoFuture<(), ReplaceRouteError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ReplaceRoute");
        params.put("Version", "2016-11-15");
        ReplaceRouteRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ReplaceRouteError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Changes the route table associated with a given subnet in a VPC. After the operation completes, the subnet uses the routes in the new route table it's associated with. For more information about route tables, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Route_Tables.html">Route Tables</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p> <p>You can also use ReplaceRouteTableAssociation to change which table is the main route table in the VPC. You just specify the main route table's association ID and the route table to be the new main route table.</p>
    fn replace_route_table_association(
        &self,
        input: ReplaceRouteTableAssociationRequest,
    ) -> RusotoFuture<ReplaceRouteTableAssociationResult, ReplaceRouteTableAssociationError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ReplaceRouteTableAssociation");
        params.put("Version", "2016-11-15");
        ReplaceRouteTableAssociationRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(ReplaceRouteTableAssociationError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ReplaceRouteTableAssociationResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ReplaceRouteTableAssociationResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Replaces the specified route in the specified transit gateway route table.</p>
    fn replace_transit_gateway_route(
        &self,
        input: ReplaceTransitGatewayRouteRequest,
    ) -> RusotoFuture<ReplaceTransitGatewayRouteResult, ReplaceTransitGatewayRouteError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ReplaceTransitGatewayRoute");
        params.put("Version", "2016-11-15");
        ReplaceTransitGatewayRouteRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(ReplaceTransitGatewayRouteError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ReplaceTransitGatewayRouteResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ReplaceTransitGatewayRouteResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Submits feedback about the status of an instance. The instance must be in the <code>running</code> state. If your experience with the instance differs from the instance status returned by <a>DescribeInstanceStatus</a>, use <a>ReportInstanceStatus</a> to report your experience with the instance. Amazon EC2 collects this information to improve the accuracy of status checks.</p> <p>Use of this action does not change the value returned by <a>DescribeInstanceStatus</a>.</p>
    fn report_instance_status(
        &self,
        input: ReportInstanceStatusRequest,
    ) -> RusotoFuture<(), ReportInstanceStatusError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ReportInstanceStatus");
        params.put("Version", "2016-11-15");
        ReportInstanceStatusRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ReportInstanceStatusError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Creates a Spot Fleet request.</p> <p>The Spot Fleet request specifies the total target capacity and the On-Demand target capacity. Amazon EC2 calculates the difference between the total capacity and On-Demand capacity, and launches the difference as Spot capacity.</p> <p>You can submit a single request that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet.</p> <p>By default, the Spot Fleet requests Spot Instances in the Spot pool where the price per unit is the lowest. Each launch specification can include its own instance weighting that reflects the value of the instance type to your application workload.</p> <p>Alternatively, you can specify that the Spot Fleet distribute the target capacity across the Spot pools included in its launch specifications. By ensuring that the Spot Instances in your Spot Fleet are in different Spot pools, you can improve the availability of your fleet.</p> <p>You can specify tags for the Spot Instances. You cannot tag other resource types in a Spot Fleet request because only the <code>instance</code> resource type is supported.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html">Spot Fleet Requests</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    fn request_spot_fleet(
        &self,
        input: RequestSpotFleetRequest,
    ) -> RusotoFuture<RequestSpotFleetResponse, RequestSpotFleetError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RequestSpotFleet");
        params.put("Version", "2016-11-15");
        RequestSpotFleetRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(RequestSpotFleetError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = RequestSpotFleetResponse::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = RequestSpotFleetResponseDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Creates a Spot Instance request.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html">Spot Instance Requests</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p>
    fn request_spot_instances(
        &self,
        input: RequestSpotInstancesRequest,
    ) -> RusotoFuture<RequestSpotInstancesResult, RequestSpotInstancesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RequestSpotInstances");
        params.put("Version", "2016-11-15");
        RequestSpotInstancesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(RequestSpotInstancesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = RequestSpotInstancesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = RequestSpotInstancesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Resets the account's default customer master key (CMK) to the account's AWS-managed default CMK. This default CMK is used to encrypt EBS volumes when you have enabled EBS encryption by default without specifying a CMK in the API call. If you have not enabled encryption by default, then this CMK is used when you set the <code>Encrypted</code> parameter to true without specifying a custom CMK in the API call.</p> <p>Call this API if you have modified the default CMK that is used for encrypting your EBS volume using <a>ModifyEbsDefaultKmsKeyId</a> and you want to reset it to the AWS-managed default CMK. After resetting, you can continue to provide a CMK of your choice in the API call that creates the volume. However, if no CMK is specified, your account will encrypt the volume to the AWS-managed default CMK.</p>
    fn reset_ebs_default_kms_key_id(
        &self,
        input: ResetEbsDefaultKmsKeyIdRequest,
    ) -> RusotoFuture<ResetEbsDefaultKmsKeyIdResult, ResetEbsDefaultKmsKeyIdError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ResetEbsDefaultKmsKeyId");
        params.put("Version", "2016-11-15");
        ResetEbsDefaultKmsKeyIdRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ResetEbsDefaultKmsKeyIdError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ResetEbsDefaultKmsKeyIdResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ResetEbsDefaultKmsKeyIdResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Resets the specified attribute of the specified Amazon FPGA Image (AFI) to its default value. You can only reset the load permission attribute.</p>
    fn reset_fpga_image_attribute(
        &self,
        input: ResetFpgaImageAttributeRequest,
    ) -> RusotoFuture<ResetFpgaImageAttributeResult, ResetFpgaImageAttributeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ResetFpgaImageAttribute");
        params.put("Version", "2016-11-15");
        ResetFpgaImageAttributeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ResetFpgaImageAttributeError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = ResetFpgaImageAttributeResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = ResetFpgaImageAttributeResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p><p>Resets an attribute of an AMI to its default value.</p> <note> <p>The productCodes attribute can&#39;t be reset.</p> </note></p>
    fn reset_image_attribute(
        &self,
        input: ResetImageAttributeRequest,
    ) -> RusotoFuture<(), ResetImageAttributeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ResetImageAttribute");
        params.put("Version", "2016-11-15");
        ResetImageAttributeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ResetImageAttributeError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Resets an attribute of an instance to its default value. To reset the <code>kernel</code> or <code>ramdisk</code>, the instance must be in a stopped state. To reset the <code>sourceDestCheck</code>, the instance can be either running or stopped.</p> <p>The <code>sourceDestCheck</code> attribute controls whether source/destination checking is enabled. The default value is <code>true</code>, which means checking is enabled. This value must be <code>false</code> for a NAT instance to perform NAT. For more information, see <a href="https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html">NAT Instances</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
    fn reset_instance_attribute(
        &self,
        input: ResetInstanceAttributeRequest,
    ) -> RusotoFuture<(), ResetInstanceAttributeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ResetInstanceAttribute");
        params.put("Version", "2016-11-15");
        ResetInstanceAttributeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ResetInstanceAttributeError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Resets a network interface attribute. You can specify only one attribute at a time.</p>
    fn reset_network_interface_attribute(
        &self,
        input: ResetNetworkInterfaceAttributeRequest,
    ) -> RusotoFuture<(), ResetNetworkInterfaceAttributeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ResetNetworkInterfaceAttribute");
        params.put("Version", "2016-11-15");
        ResetNetworkInterfaceAttributeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(ResetNetworkInterfaceAttributeError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Resets permission settings for the specified snapshot.</p> <p>For more information about modifying snapshot permissions, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html">Sharing Snapshots</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn reset_snapshot_attribute(
        &self,
        input: ResetSnapshotAttributeRequest,
    ) -> RusotoFuture<(), ResetSnapshotAttributeError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "ResetSnapshotAttribute");
        params.put("Version", "2016-11-15");
        ResetSnapshotAttributeRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(ResetSnapshotAttributeError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Restores an Elastic IP address that was previously moved to the EC2-VPC platform back to the EC2-Classic platform. You cannot move an Elastic IP address that was originally allocated for use in EC2-VPC. The Elastic IP address must not be associated with an instance or network interface.</p>
    fn restore_address_to_classic(
        &self,
        input: RestoreAddressToClassicRequest,
    ) -> RusotoFuture<RestoreAddressToClassicResult, RestoreAddressToClassicError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RestoreAddressToClassic");
        params.put("Version", "2016-11-15");
        RestoreAddressToClassicRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(RestoreAddressToClassicError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = RestoreAddressToClassicResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = RestoreAddressToClassicResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Removes an ingress authorization rule from a Client VPN endpoint. </p>
    fn revoke_client_vpn_ingress(
        &self,
        input: RevokeClientVpnIngressRequest,
    ) -> RusotoFuture<RevokeClientVpnIngressResult, RevokeClientVpnIngressError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RevokeClientVpnIngress");
        params.put("Version", "2016-11-15");
        RevokeClientVpnIngressRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(RevokeClientVpnIngressError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = RevokeClientVpnIngressResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = RevokeClientVpnIngressResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>[VPC only] Removes the specified egress rules from a security group for EC2-VPC. This action doesn't apply to security groups for use in EC2-Classic. To remove a rule, the values that you specify (for example, ports) must match the existing rule's values exactly.</p> <p>Each rule consists of the protocol and the IPv4 or IPv6 CIDR range or source security group. For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule has a description, you do not have to specify the description to revoke the rule.</p> <p>Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.</p>
    fn revoke_security_group_egress(
        &self,
        input: RevokeSecurityGroupEgressRequest,
    ) -> RusotoFuture<(), RevokeSecurityGroupEgressError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RevokeSecurityGroupEgress");
        params.put("Version", "2016-11-15");
        RevokeSecurityGroupEgressRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(RevokeSecurityGroupEgressError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Removes the specified ingress rules from a security group. To remove a rule, the values that you specify (for example, ports) must match the existing rule's values exactly.</p> <note> <p>[EC2-Classic only] If the values you specify do not match the existing rule's values, no error is returned. Use <a>DescribeSecurityGroups</a> to verify that the rule has been removed.</p> </note> <p>Each rule consists of the protocol and the CIDR range or source security group. For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule has a description, you do not have to specify the description to revoke the rule.</p> <p>Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.</p>
    fn revoke_security_group_ingress(
        &self,
        input: RevokeSecurityGroupIngressRequest,
    ) -> RusotoFuture<(), RevokeSecurityGroupIngressError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RevokeSecurityGroupIngress");
        params.put("Version", "2016-11-15");
        RevokeSecurityGroupIngressRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(RevokeSecurityGroupIngressError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Launches the specified number of instances using an AMI for which you have permissions. </p> <p>You can specify a number of options, or leave the default options. The following rules apply:</p> <ul> <li> <p>[EC2-VPC] If you don't specify a subnet ID, we choose a default subnet from your default VPC for you. If you don't have a default VPC, you must specify a subnet ID in the request.</p> </li> <li> <p>[EC2-Classic] If don't specify an Availability Zone, we choose one for you.</p> </li> <li> <p>Some instance types must be launched into a VPC. If you do not have a default VPC, or if you do not specify a subnet ID, the request fails. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-vpc.html#vpc-only-instance-types">Instance Types Available Only in a VPC</a>.</p> </li> <li> <p>[EC2-VPC] All instances have a network interface with a primary private IPv4 address. If you don't specify this address, we choose one from the IPv4 range of your subnet.</p> </li> <li> <p>Not all instance types support IPv6 addresses. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html">Instance Types</a>.</p> </li> <li> <p>If you don't specify a security group ID, we use the default security group. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">Security Groups</a>.</p> </li> <li> <p>If any of the AMIs have a product code attached for which the user has not subscribed, the request fails.</p> </li> </ul> <p>You can create a <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html">launch template</a>, which is a resource that contains the parameters to launch an instance. When you launch an instance using <a>RunInstances</a>, you can specify the launch template instead of specifying the launch parameters.</p> <p>To ensure faster instance launches, break up large requests into smaller batches. For example, create five separate launch requests for 100 instances each instead of one launch request for 500 instances.</p> <p>An instance is ready for you to use when it's in the <code>running</code> state. You can check the state of your instance using <a>DescribeInstances</a>. You can tag instances and EBS volumes during launch, after launch, or both. For more information, see <a>CreateTags</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging Your Amazon EC2 Resources</a>.</p> <p>Linux instances have access to the public key of the key pair at boot. You can use this key to provide secure access to the instance. Amazon EC2 public images use this feature to provide secure access without passwords. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html">Key Pairs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>For troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_InstanceStraightToTerminated.html">What To Do If An Instance Immediately Terminates</a>, and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html">Troubleshooting Connecting to Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn run_instances(
        &self,
        input: RunInstancesRequest,
    ) -> RusotoFuture<Reservation, RunInstancesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RunInstances");
        params.put("Version", "2016-11-15");
        RunInstancesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(RunInstancesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = Reservation::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result =
                            ReservationDeserializer::deserialize(&actual_tag_name, &mut stack)?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Launches the specified Scheduled Instances.</p> <p>Before you can launch a Scheduled Instance, you must purchase it and obtain an identifier using <a>PurchaseScheduledInstances</a>.</p> <p>You must launch a Scheduled Instance during its scheduled time period. You can't stop or reboot a Scheduled Instance, but you can terminate it as needed. If you terminate a Scheduled Instance before the current scheduled time period ends, you can launch it again after a few minutes. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-scheduled-instances.html">Scheduled Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn run_scheduled_instances(
        &self,
        input: RunScheduledInstancesRequest,
    ) -> RusotoFuture<RunScheduledInstancesResult, RunScheduledInstancesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "RunScheduledInstances");
        params.put("Version", "2016-11-15");
        RunScheduledInstancesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(RunScheduledInstancesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = RunScheduledInstancesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = RunScheduledInstancesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Searches for routes in the specified transit gateway route table.</p>
    fn search_transit_gateway_routes(
        &self,
        input: SearchTransitGatewayRoutesRequest,
    ) -> RusotoFuture<SearchTransitGatewayRoutesResult, SearchTransitGatewayRoutesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "SearchTransitGatewayRoutes");
        params.put("Version", "2016-11-15");
        SearchTransitGatewayRoutesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(SearchTransitGatewayRoutesError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = SearchTransitGatewayRoutesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = SearchTransitGatewayRoutesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Starts an Amazon EBS-backed instance that you've previously stopped.</p> <p>Instances that use Amazon EBS volumes as their root devices can be quickly stopped and started. When an instance is stopped, the compute resources are released and you are not billed for instance usage. However, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. You can restart your instance at any time. Every time you start your Windows instance, Amazon EC2 charges you for a full instance hour. If you stop and restart your Windows instance, a new instance hour begins and Amazon EC2 charges you for another full instance hour even if you are still within the same 60-minute period when it was stopped. Every time you start your Linux instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage.</p> <p>Before stopping an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM.</p> <p>Performing this operation on an instance that uses an instance store as its root device returns an error.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html">Stopping Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn start_instances(
        &self,
        input: StartInstancesRequest,
    ) -> RusotoFuture<StartInstancesResult, StartInstancesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "StartInstances");
        params.put("Version", "2016-11-15");
        StartInstancesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(StartInstancesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = StartInstancesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = StartInstancesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Stops an Amazon EBS-backed instance.</p> <p>You can use the Stop action to hibernate an instance if the instance is <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#enabling-hibernation">enabled for hibernation</a> and it meets the <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites">hibernation prerequisites</a>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>We don't charge usage for a stopped instance, or data transfer fees; however, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. Every time you start your Windows instance, Amazon EC2 charges you for a full instance hour. If you stop and restart your Windows instance, a new instance hour begins and Amazon EC2 charges you for another full instance hour even if you are still within the same 60-minute period when it was stopped. Every time you start your Linux instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage.</p> <p>You can't start, stop, or hibernate Spot Instances, and you can't stop or hibernate instance store-backed instances. For information about using hibernation for Spot Instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-interruptions.html#hibernate-spot-instances">Hibernating Interrupted Spot Instances</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>When you stop or hibernate an instance, we shut it down. You can restart your instance at any time. Before stopping or hibernating an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM, but hibernating an instance does preserve data stored in RAM. If an instance cannot hibernate successfully, a normal shutdown occurs.</p> <p>Stopping and hibernating an instance is different to rebooting or terminating it. For example, when you stop or hibernate an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, the root device and any other devices attached during the instance launch are automatically deleted. For more information about the differences between rebooting, stopping, hibernating, and terminating instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance Lifecycle</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>When you stop an instance, we attempt to shut it down forcibly after a short while. If your instance appears stuck in the stopping state after a period of time, there may be an issue with the underlying host computer. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesStopping.html">Troubleshooting Stopping Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn stop_instances(
        &self,
        input: StopInstancesRequest,
    ) -> RusotoFuture<StopInstancesResult, StopInstancesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "StopInstances");
        params.put("Version", "2016-11-15");
        StopInstancesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(StopInstancesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = StopInstancesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = StopInstancesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Terminates active Client VPN endpoint connections. This action can be used to terminate a specific client connection, or up to five connections established by a specific user.</p>
    fn terminate_client_vpn_connections(
        &self,
        input: TerminateClientVpnConnectionsRequest,
    ) -> RusotoFuture<TerminateClientVpnConnectionsResult, TerminateClientVpnConnectionsError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "TerminateClientVpnConnections");
        params.put("Version", "2016-11-15");
        TerminateClientVpnConnectionsRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(TerminateClientVpnConnectionsError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = TerminateClientVpnConnectionsResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = TerminateClientVpnConnectionsResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Shuts down the specified instances. This operation is idempotent; if you terminate an instance more than once, each call succeeds. </p> <p>If you specify multiple instances and the request fails (for example, because of a single incorrect instance ID), none of the instances are terminated.</p> <p>Terminated instances remain visible after termination (for approximately one hour).</p> <p>By default, Amazon EC2 deletes all EBS volumes that were attached when the instance launched. Volumes attached after instance launch continue running.</p> <p>You can stop, start, and terminate EBS-backed instances. You can only terminate instance store-backed instances. What happens to an instance differs if you stop it or terminate it. For example, when you stop an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, any attached EBS volumes with the <code>DeleteOnTermination</code> block device mapping parameter set to <code>true</code> are automatically deleted. For more information about the differences between stopping and terminating instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">Instance Lifecycle</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>For more information about troubleshooting, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesShuttingDown.html">Troubleshooting Terminating Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn terminate_instances(
        &self,
        input: TerminateInstancesRequest,
    ) -> RusotoFuture<TerminateInstancesResult, TerminateInstancesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "TerminateInstances");
        params.put("Version", "2016-11-15");
        TerminateInstancesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(TerminateInstancesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = TerminateInstancesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = TerminateInstancesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Unassigns one or more IPv6 addresses from a network interface.</p>
    fn unassign_ipv_6_addresses(
        &self,
        input: UnassignIpv6AddressesRequest,
    ) -> RusotoFuture<UnassignIpv6AddressesResult, UnassignIpv6AddressesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "UnassignIpv6Addresses");
        params.put("Version", "2016-11-15");
        UnassignIpv6AddressesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(UnassignIpv6AddressesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = UnassignIpv6AddressesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = UnassignIpv6AddressesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>Unassigns one or more secondary private IP addresses from a network interface.</p>
    fn unassign_private_ip_addresses(
        &self,
        input: UnassignPrivateIpAddressesRequest,
    ) -> RusotoFuture<(), UnassignPrivateIpAddressesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "UnassignPrivateIpAddresses");
        params.put("Version", "2016-11-15");
        UnassignPrivateIpAddressesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| {
                                Err(UnassignPrivateIpAddressesError::from_response(response))
                            },
                        )
                    })
                    .boxed();
            }

            futures::future::ready(Ok(::std::mem::drop(response))).boxed()
        })
    }

    /// <p>Disables detailed monitoring for a running instance. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html">Monitoring Your Instances and Volumes</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
    fn unmonitor_instances(
        &self,
        input: UnmonitorInstancesRequest,
    ) -> RusotoFuture<UnmonitorInstancesResult, UnmonitorInstancesError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "UnmonitorInstances");
        params.put("Version", "2016-11-15");
        UnmonitorInstancesRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(UnmonitorInstancesError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = UnmonitorInstancesResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = UnmonitorInstancesResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }

    /// <p>[VPC only] Updates the description of an egress (outbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously.</p> <p>You specify the description as part of the IP permissions structure. You can remove a description for a security group rule by omitting the description parameter in the request.</p>
    fn update_security_group_rule_descriptions_egress(
        &self,
        input: UpdateSecurityGroupRuleDescriptionsEgressRequest,
    ) -> RusotoFuture<
        UpdateSecurityGroupRuleDescriptionsEgressResult,
        UpdateSecurityGroupRuleDescriptionsEgressError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "UpdateSecurityGroupRuleDescriptionsEgress");
        params.put("Version", "2016-11-15");
        UpdateSecurityGroupRuleDescriptionsEgressRequestSerializer::serialize(
            &mut params,
            "",
            &input,
        );
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
                        if !response.status.is_success() {
                            return response.buffer().map(|try_response| {
                                try_response.map_or_else(|e| e, |response| {
                                    Err(UpdateSecurityGroupRuleDescriptionsEgressError::from_response(response))
                                })
                            }).boxed();
                        }

                        response.buffer().map(move |response| {
            let response = response?;
            
            let result;
            if response.body.is_empty() {
                result = UpdateSecurityGroupRuleDescriptionsEgressResult::default();
            } else {
                let reader = EventReader::new_with_config(
                    response.body.as_ref(),
                    ParserConfig::new().trim_whitespace(true)
                );
                let mut stack = XmlResponse::new(reader.into_iter().peekable());
                let _start_document = stack.next();
                let actual_tag_name = peek_at_name(&mut stack)?;
                result = UpdateSecurityGroupRuleDescriptionsEgressResultDeserializer::deserialize(&actual_tag_name, &mut stack)?;
            }
             // parse non-payload
            Ok(result)
        }).boxed()
                    })
    }

    /// <p>Updates the description of an ingress (inbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously.</p> <p>You specify the description as part of the IP permissions structure. You can remove a description for a security group rule by omitting the description parameter in the request.</p>
    fn update_security_group_rule_descriptions_ingress(
        &self,
        input: UpdateSecurityGroupRuleDescriptionsIngressRequest,
    ) -> RusotoFuture<
        UpdateSecurityGroupRuleDescriptionsIngressResult,
        UpdateSecurityGroupRuleDescriptionsIngressError,
    > {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "UpdateSecurityGroupRuleDescriptionsIngress");
        params.put("Version", "2016-11-15");
        UpdateSecurityGroupRuleDescriptionsIngressRequestSerializer::serialize(
            &mut params,
            "",
            &input,
        );
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
                        if !response.status.is_success() {
                            return response.buffer().map(|try_response| {
                                try_response.map_or_else(|e| e, |response| {
                                    Err(UpdateSecurityGroupRuleDescriptionsIngressError::from_response(response))
                                })
                            }).boxed();
                        }

                        response.buffer().map(move |response| {
            let response = response?;
            
            let result;
            if response.body.is_empty() {
                result = UpdateSecurityGroupRuleDescriptionsIngressResult::default();
            } else {
                let reader = EventReader::new_with_config(
                    response.body.as_ref(),
                    ParserConfig::new().trim_whitespace(true)
                );
                let mut stack = XmlResponse::new(reader.into_iter().peekable());
                let _start_document = stack.next();
                let actual_tag_name = peek_at_name(&mut stack)?;
                result = UpdateSecurityGroupRuleDescriptionsIngressResultDeserializer::deserialize(&actual_tag_name, &mut stack)?;
            }
             // parse non-payload
            Ok(result)
        }).boxed()
                    })
    }

    /// <p>Stops advertising an IPv4 address range that is provisioned as an address pool.</p> <p>You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time.</p> <p>It can take a few minutes before traffic to the specified addresses stops routing to AWS because of BGP propagation delays.</p>
    fn withdraw_byoip_cidr(
        &self,
        input: WithdrawByoipCidrRequest,
    ) -> RusotoFuture<WithdrawByoipCidrResult, WithdrawByoipCidrError> {
        let mut request = SignedRequest::new("POST", "ec2", &self.region, "/");
        let mut params = Params::new();

        params.put("Action", "WithdrawByoipCidr");
        params.put("Version", "2016-11-15");
        WithdrawByoipCidrRequestSerializer::serialize(&mut params, "", &input);
        request.set_payload(Some(serde_urlencoded::to_string(&params).unwrap()));
        request.set_content_type("application/x-www-form-urlencoded".to_owned());

        self.client.sign_and_dispatch(request, |response| {
            if !response.status.is_success() {
                return response
                    .buffer()
                    .map(|try_response| {
                        try_response.map_or_else(
                            |e| e,
                            |response| Err(WithdrawByoipCidrError::from_response(response)),
                        )
                    })
                    .boxed();
            }

            response
                .buffer()
                .map(move |response| {
                    let response = response?;

                    let result;
                    if response.body.is_empty() {
                        result = WithdrawByoipCidrResult::default();
                    } else {
                        let reader = EventReader::new_with_config(
                            response.body.as_ref(),
                            ParserConfig::new().trim_whitespace(true),
                        );
                        let mut stack = XmlResponse::new(reader.into_iter().peekable());
                        let _start_document = stack.next();
                        let actual_tag_name = peek_at_name(&mut stack)?;
                        result = WithdrawByoipCidrResultDeserializer::deserialize(
                            &actual_tag_name,
                            &mut stack,
                        )?;
                    }
                    // parse non-payload
                    Ok(result)
                })
                .boxed()
        })
    }
}

#[cfg(test)]
mod protocol_tests {

    extern crate rusoto_mock;

    use self::rusoto_mock::*;
    use super::*;
    use rusoto_core::Region as rusoto_region;

    #[test]
    fn test_parse_error_ec_2_describe_instances() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/error",
            "ec2-describe-instances.xml",
        );
        let mock = MockRequestDispatcher::with_status(400).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeInstancesRequest::default();
        let result = client.describe_instances(request).sync();
        assert!(!result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_allocate_address() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-allocate-address.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = AllocateAddressRequest::default();
        let result = client.allocate_address(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_assign_private_ip_addresses() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-assign-private-ip-addresses.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = AssignPrivateIpAddressesRequest::default();
        let result = client.assign_private_ip_addresses(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_associate_address() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-associate-address.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = AssociateAddressRequest::default();
        let result = client.associate_address(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_associate_route_table() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-associate-route-table.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = AssociateRouteTableRequest::default();
        let result = client.associate_route_table(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_attach_volume() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-attach-volume.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = AttachVolumeRequest::default();
        let result = client.attach_volume(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_attach_vpn_gateway() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-attach-vpn-gateway.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = AttachVpnGatewayRequest::default();
        let result = client.attach_vpn_gateway(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_bundle_instance() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-bundle-instance.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = BundleInstanceRequest::default();
        let result = client.bundle_instance(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_cancel_bundle_task() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-cancel-bundle-task.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = CancelBundleTaskRequest::default();
        let result = client.cancel_bundle_task(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_cancel_reserved_instances_listing() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-cancel-reserved-instances-listing.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = CancelReservedInstancesListingRequest::default();
        let result = client.cancel_reserved_instances_listing(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_cancel_spot_instance_requests() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-cancel-spot-instance-requests.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = CancelSpotInstanceRequestsRequest::default();
        let result = client.cancel_spot_instance_requests(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_confirm_product_instance() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-confirm-product-instance.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = ConfirmProductInstanceRequest::default();
        let result = client.confirm_product_instance(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_copy_snapshot() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-copy-snapshot.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = CopySnapshotRequest::default();
        let result = client.copy_snapshot(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_create_customer_gateway() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-create-customer-gateway.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = CreateCustomerGatewayRequest::default();
        let result = client.create_customer_gateway(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_create_dhcp_options() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-create-dhcp-options.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = CreateDhcpOptionsRequest::default();
        let result = client.create_dhcp_options(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_create_instance_export_task() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-create-instance-export-task.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = CreateInstanceExportTaskRequest::default();
        let result = client.create_instance_export_task(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_create_key_pair() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-create-key-pair.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = CreateKeyPairRequest::default();
        let result = client.create_key_pair(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_create_network_acl() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-create-network-acl.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = CreateNetworkAclRequest::default();
        let result = client.create_network_acl(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_create_network_interface() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-create-network-interface.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = CreateNetworkInterfaceRequest::default();
        let result = client.create_network_interface(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_create_reserved_instances_listing() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-create-reserved-instances-listing.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = CreateReservedInstancesListingRequest::default();
        let result = client.create_reserved_instances_listing(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_create_route_table() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-create-route-table.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = CreateRouteTableRequest::default();
        let result = client.create_route_table(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_create_snapshot() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-create-snapshot.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = CreateSnapshotRequest::default();
        let result = client.create_snapshot(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_create_spot_datafeed_subscription() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-create-spot-datafeed-subscription.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = CreateSpotDatafeedSubscriptionRequest::default();
        let result = client.create_spot_datafeed_subscription(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_create_subnet() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-create-subnet.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = CreateSubnetRequest::default();
        let result = client.create_subnet(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_create_volume() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-create-volume.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = CreateVolumeRequest::default();
        let result = client.create_volume(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_create_vpc() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-create-vpc.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = CreateVpcRequest::default();
        let result = client.create_vpc(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_create_vpn_gateway() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-create-vpn-gateway.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = CreateVpnGatewayRequest::default();
        let result = client.create_vpn_gateway(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_delete_internet_gateway() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-delete-internet-gateway.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DeleteInternetGatewayRequest::default();
        let result = client.delete_internet_gateway(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_account_attributes() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-account-attributes.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeAccountAttributesRequest::default();
        let result = client.describe_account_attributes(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_addresses() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-addresses.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeAddressesRequest::default();
        let result = client.describe_addresses(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_availability_zones() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-availability-zones.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeAvailabilityZonesRequest::default();
        let result = client.describe_availability_zones(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_bundle_tasks() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-bundle-tasks.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeBundleTasksRequest::default();
        let result = client.describe_bundle_tasks(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_customer_gateways() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-customer-gateways.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeCustomerGatewaysRequest::default();
        let result = client.describe_customer_gateways(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_dhcp_options() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-dhcp-options.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeDhcpOptionsRequest::default();
        let result = client.describe_dhcp_options(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_export_tasks() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-export-tasks.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeExportTasksRequest::default();
        let result = client.describe_export_tasks(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_instance_attribute() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-instance-attribute.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeInstanceAttributeRequest::default();
        let result = client.describe_instance_attribute(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_instance_status() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-instance-status.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeInstanceStatusRequest::default();
        let result = client.describe_instance_status(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_instances() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-instances.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeInstancesRequest::default();
        let result = client.describe_instances(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_internet_gateways() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-internet-gateways.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeInternetGatewaysRequest::default();
        let result = client.describe_internet_gateways(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_key_pairs() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-key-pairs.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeKeyPairsRequest::default();
        let result = client.describe_key_pairs(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_network_acls() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-network-acls.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeNetworkAclsRequest::default();
        let result = client.describe_network_acls(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_network_interfaces() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-network-interfaces.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeNetworkInterfacesRequest::default();
        let result = client.describe_network_interfaces(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_placement_groups() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-placement-groups.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribePlacementGroupsRequest::default();
        let result = client.describe_placement_groups(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_regions() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-regions.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeRegionsRequest::default();
        let result = client.describe_regions(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_reserved_instances_offerings() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-reserved-instances-offerings.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeReservedInstancesOfferingsRequest::default();
        let result = client.describe_reserved_instances_offerings(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_reserved_instances() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-reserved-instances.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeReservedInstancesRequest::default();
        let result = client.describe_reserved_instances(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_route_tables() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-route-tables.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeRouteTablesRequest::default();
        let result = client.describe_route_tables(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_security_groups() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-security-groups.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeSecurityGroupsRequest::default();
        let result = client.describe_security_groups(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_snapshots() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-snapshots.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeSnapshotsRequest::default();
        let result = client.describe_snapshots(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_spot_instance_requests() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-spot-instance-requests.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeSpotInstanceRequestsRequest::default();
        let result = client.describe_spot_instance_requests(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_spot_price_history() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-spot-price-history.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeSpotPriceHistoryRequest::default();
        let result = client.describe_spot_price_history(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_subnets() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-subnets.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeSubnetsRequest::default();
        let result = client.describe_subnets(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_tags() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-tags.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeTagsRequest::default();
        let result = client.describe_tags(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_volume_status() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-volume-status.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeVolumeStatusRequest::default();
        let result = client.describe_volume_status(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_volumes() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-volumes.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeVolumesRequest::default();
        let result = client.describe_volumes(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_vpcs() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-vpcs.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeVpcsRequest::default();
        let result = client.describe_vpcs(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_vpn_connections() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-vpn-connections.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeVpnConnectionsRequest::default();
        let result = client.describe_vpn_connections(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_describe_vpn_gateways() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-describe-vpn-gateways.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DescribeVpnGatewaysRequest::default();
        let result = client.describe_vpn_gateways(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_detach_network_interface() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-detach-network-interface.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DetachNetworkInterfaceRequest::default();
        let result = client.detach_network_interface(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_detach_volume() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-detach-volume.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = DetachVolumeRequest::default();
        let result = client.detach_volume(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_get_password_data() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-get-password-data.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = GetPasswordDataRequest::default();
        let result = client.get_password_data(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_import_instance() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-import-instance.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = ImportInstanceRequest::default();
        let result = client.import_instance(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_import_key_pair() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-import-key-pair.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = ImportKeyPairRequest::default();
        let result = client.import_key_pair(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_import_volume() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-import-volume.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = ImportVolumeRequest::default();
        let result = client.import_volume(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_modify_snapshot_attribute() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-modify-snapshot-attribute.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = ModifySnapshotAttributeRequest::default();
        let result = client.modify_snapshot_attribute(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_monitor_instances() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-monitor-instances.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = MonitorInstancesRequest::default();
        let result = client.monitor_instances(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_register_image() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-register-image.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = RegisterImageRequest::default();
        let result = client.register_image(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_replace_network_acl_association() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-replace-network-acl-association.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = ReplaceNetworkAclAssociationRequest::default();
        let result = client.replace_network_acl_association(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_request_spot_instances() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-request-spot-instances.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = RequestSpotInstancesRequest::default();
        let result = client.request_spot_instances(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_run_instances() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-run-instances.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = RunInstancesRequest::default();
        let result = client.run_instances(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_start_instances() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-start-instances.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = StartInstancesRequest::default();
        let result = client.start_instances(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_stop_instances() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-stop-instances.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = StopInstancesRequest::default();
        let result = client.stop_instances(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }

    #[test]
    fn test_parse_valid_ec_2_unmonitor_instances() {
        let mock_response = MockResponseReader::read_response(
            "test_resources/generated/valid",
            "ec2-unmonitor-instances.xml",
        );
        let mock = MockRequestDispatcher::with_status(200).with_body(&mock_response);
        let client = Ec2Client::new_with(mock, MockCredentialsProvider, rusoto_region::UsEast1);
        let request = UnmonitorInstancesRequest::default();
        let result = client.unmonitor_instances(request).sync();
        assert!(result.is_ok(), "parse error: {:?}", result);
    }
}
